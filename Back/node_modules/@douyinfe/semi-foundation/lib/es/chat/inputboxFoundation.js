import { handlePrevent } from "../utils/a11y";
import BaseFoundation from "../base/foundation";
import { strings } from './constants';
const {
  SEND_HOT_KEY
} = strings;
export default class InputBoxFoundation extends BaseFoundation {
  constructor(adapter) {
    super(Object.assign({}, adapter));
    this.onInputAreaChange = value => {
      const attachment = this.getState('attachment');
      this._adapter.setInputValue(value);
      this._adapter.notifyInputChange({
        inputValue: value,
        attachment
      });
    };
    this.onAttachmentAdd = props => {
      const {
        fileList
      } = props;
      const {
        uploadProps
      } = this.getProps();
      const {
        onChange
      } = uploadProps;
      if (onChange) {
        onChange(props);
      }
      const {
        content
      } = this.getStates();
      let newFileList = [...fileList];
      this._adapter.setAttachment(newFileList);
      this._adapter.notifyInputChange({
        inputValue: content,
        attachment: newFileList
      });
    };
    this.onAttachmentDelete = props => {
      const {
        content,
        attachment
      } = this.getStates();
      const newAttachMent = attachment.filter(item => item.uid !== props.uid);
      this._adapter.setAttachment(newAttachMent);
      this._adapter.notifyInputChange({
        inputValue: content,
        attachment: newAttachMent
      });
    };
    this.onSend = e => {
      if (this.getDisableSend()) {
        return;
      }
      const {
        content,
        attachment
      } = this.getStates();
      this._adapter.setInputValue('');
      this._adapter.setAttachment([]);
      this._adapter.notifySend(content, attachment);
    };
    this.getDisableSend = () => {
      const {
        content,
        attachment
      } = this.getStates();
      const {
        disableSend: disableSendInProps
      } = this.getProps();
      const disabledSend = disableSendInProps || content.length === 0 && attachment.length === 0;
      return disabledSend;
    };
    this.onEnterPress = e => {
      const {
        sendHotKey
      } = this.getProps();
      if (sendHotKey === SEND_HOT_KEY.SHIFT_PLUS_ENTER && e.shiftKey === false) {
        return;
      } else if (sendHotKey === SEND_HOT_KEY.ENTER && e.shiftKey === true) {
        return;
      }
      handlePrevent(e);
      this.onSend(e);
    };
    this.onPaste = e => {
      var _a;
      const items = (_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.items;
      const {
        manualUpload
      } = this.getProps();
      let files = [];
      if (items) {
        for (const it of items) {
          const file = it.getAsFile();
          file && files.push(it.getAsFile());
        }
        if (files.length) {
          // 文件上传，则需要阻止默认粘贴行为
          // File upload, you need to prevent the default paste behavior
          manualUpload(files);
          e.preventDefault();
          e.stopPropagation();
        }
      }
    };
  }
}