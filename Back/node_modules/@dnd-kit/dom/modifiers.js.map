{"version":3,"sources":["src/modifiers/RestrictToWindow.ts","src/modifiers/RestrictToElement.ts"],"names":["Modifier","restrictShapeToBoundingRectangle","Rectangle","effect"],"mappings":";AAAA,SAAQ,QAAQ,iBAAgB;AAChC,SAAQ,gBAAmC;AAC3C,SAAQ,wCAAuC;AAC/C,SAAQ,iBAAwC;AAEhD,SAAQ,oCAAmC;AAEpC,IAAM,mBAAN,cAA+B,SAA0B;AAAA,EAC9D,YAAY,SAA0B;AACpC,UAAM,OAAO;AAEb,UAAM,EAAC,cAAa,IAAI;AAExB,UAAM,6BAA6B,MACjC,UAAU,MAAM;AAdtB;AAeQ,YAAM,EAAC,OAAM,IAAI;AACjB,WAAK,0BAA0B;AAAA,SAC7B,sCAAQ,YAAR,YAAmB,SAAS;AAAA,MAC9B;AAAA,IACF,CAAC;AAEH,SAAK,UAAU,OAAO,MAAM;AAC1B,UAAI,cAAc,OAAO,MAAM;AAC7B;AAAA,MACF;AAEA,iCAA2B;AAE3B,aAAO,iBAAiB,UAAU,0BAA0B;AAE5D,aAAO,MAAM;AACX,eAAO,oBAAoB,UAAU,0BAA0B;AAAA,MACjE;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAIA,MAAM,EAAC,OAAO,UAAS,GAAkB;AACvC,QAAI,CAAC,KAAK,2BAA2B,CAAC,OAAO;AAC3C,aAAO;AAAA,IACT;AAEA,UAAM,EAAC,SAAS,QAAO,IAAI;AAC3B,UAAM,EAAC,QAAQ,MAAK,IAAI,QAAQ;AAChC,UAAM,OAAO,QAAQ,OAAO,IAAI,QAAQ;AACxC,UAAM,MAAM,QAAQ,OAAO,IAAI,SAAS;AAExC,UAAM,sBAAsB;AAAA,MAC1B,IAAI,UAAU,MAAM,KAAK,OAAO,MAAM;AAAA,MACtC;AAAA,MACA,KAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AACF;;;ACxDA,SAAQ,YAAAA,WAAU,oBAAmB;AACrC,SAAQ,oCAAAC,yCAAuC;AAC/C,SAA2B,aAAAC,kBAAgB;AAC3C,SAAQ,UAAAC,SAAQ,cAAa;AAE7B,SAAQ,4BAA2B;AAS5B,IAAM,qBAAN,MAAM,2BAA0BH,UAAmC;AAAA,EAGxE,YAAY,SAA0B,SAAmB;AACvD,UAAM,SAAS,OAAO;AAHxB,SAAQ,oBAAoB,OAAiC,IAAI;AAK/D,SAAK,UAAUG,QAAO,MAAM;AAC1B,UAAI,CAAC,KAAK,SAAS;AACjB;AAAA,MACF;AAEA,YAAM,EAAC,cAAa,IAAI;AACxB,YAAM,EAAC,OAAM,IAAI;AAEjB,UAAI,OAAO,aAAa;AACtB,cAAM,EAAC,QAAO,IAAI,KAAK;AACvB,cAAM,SACJ,OAAO,YAAY,aAAa,QAAQ,aAAa,IAAI;AAE3D,YAAI,CAAC,QAAQ;AACX;AAAA,QACF;AAEA,YAAI;AACJ,cAAM,0BAA0B,MAAM;AACpC,eAAK,kBAAkB,QAAQ,qBAAqB,MAAM;AAAA,QAC5D;AACA,cAAM,eAAe,MAAM;AACzB,cAAI,SAAS;AACX;AAAA,UACF;AAEA,oBAAU,WAAW,MAAM;AACzB,oCAAwB;AACxB,sBAAU;AAAA,UACZ,GAAG,EAAE;AAAA,QACP;AACA,cAAM,iBAAiB,IAAI,eAAe,uBAAuB;AAEjE,uBAAe,QAAQ,MAAM;AAE7B,iBAAS,iBAAiB,UAAU,cAAc;AAAA,UAChD,SAAS;AAAA,UACT,SAAS;AAAA,QACX,CAAC;AAED,eAAO,MAAM;AACX,mBAAS,oBAAoB,UAAU,cAAc;AAAA,YACnD,SAAS;AAAA,UACX,CAAC;AACD,yBAAe,WAAW;AAC1B,eAAK,kBAAkB,QAAQ;AAAA,QACjC;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,WAA6C;AACjD,UAAM,EAAC,OAAO,UAAS,IAAI;AAE3B,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,UAAM,oBAAoB,KAAK,kBAAkB;AAEjD,QAAI,CAAC,mBAAmB;AACtB,aAAO;AAAA,IACT;AAEA,UAAM,EAAC,SAAS,QAAO,IAAI;AAC3B,UAAM,EAAC,QAAQ,MAAK,IAAI,QAAQ;AAChC,UAAM,OAAO,QAAQ,OAAO,IAAI,QAAQ;AACxC,UAAM,MAAM,QAAQ,OAAO,IAAI,SAAS;AAExC,UAAM,sBAAsBF;AAAA,MAC1B,IAAIC,WAAU,MAAM,KAAK,OAAO,MAAM;AAAA,MACtC;AAAA,MACA;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAGF;AArFa,mBAoFJ,YAAY,aAAa,kBAAiB;AApF5C,IAAM,oBAAN","sourcesContent":["import {effect, untracked} from '@dnd-kit/state';\nimport {Modifier, type DragOperation} from '@dnd-kit/abstract';\nimport {restrictShapeToBoundingRectangle} from '@dnd-kit/abstract/modifiers';\nimport {Rectangle, type BoundingRectangle} from '@dnd-kit/geometry';\nimport type {DragDropManager} from '@dnd-kit/dom';\nimport {getViewportBoundingRectangle} from '@dnd-kit/dom/utilities';\n\nexport class RestrictToWindow extends Modifier<DragDropManager> {\n  constructor(manager: DragDropManager) {\n    super(manager);\n\n    const {dragOperation} = manager;\n\n    const getWindowBoundingRectangle = () =>\n      untracked(() => {\n        const {source} = dragOperation;\n        this.windowBoundingRectangle = getViewportBoundingRectangle(\n          source?.element ?? document.documentElement\n        );\n      });\n\n    this.destroy = effect(() => {\n      if (dragOperation.status.idle) {\n        return;\n      }\n\n      getWindowBoundingRectangle();\n\n      window.addEventListener('resize', getWindowBoundingRectangle);\n\n      return () => {\n        window.removeEventListener('resize', getWindowBoundingRectangle);\n      };\n    });\n  }\n\n  windowBoundingRectangle: BoundingRectangle | undefined;\n\n  apply({shape, transform}: DragOperation) {\n    if (!this.windowBoundingRectangle || !shape) {\n      return transform;\n    }\n\n    const {initial, current} = shape;\n    const {height, width} = current.boundingRectangle;\n    const left = initial.center.x - width / 2;\n    const top = initial.center.y - height / 2;\n\n    const restrictedTransform = restrictShapeToBoundingRectangle(\n      new Rectangle(left, top, width, height),\n      transform,\n      this.windowBoundingRectangle\n    );\n\n    return restrictedTransform;\n  }\n}\n","import {Modifier, configurator} from '@dnd-kit/abstract';\nimport {restrictShapeToBoundingRectangle} from '@dnd-kit/abstract/modifiers';\nimport {BoundingRectangle, Rectangle} from '@dnd-kit/geometry';\nimport {effect, signal} from '@dnd-kit/state';\nimport type {DragDropManager} from '@dnd-kit/dom';\nimport {getBoundingRectangle} from '@dnd-kit/dom/utilities';\n\ninterface Options {\n  element?:\n    | Element\n    | null\n    | ((operation: DragDropManager['dragOperation']) => Element | null);\n}\n\nexport class RestrictToElement extends Modifier<DragDropManager, Options> {\n  private boundingRectangle = signal<BoundingRectangle | null>(null);\n\n  constructor(manager: DragDropManager, options?: Options) {\n    super(manager, options);\n\n    this.destroy = effect(() => {\n      if (!this.options) {\n        return;\n      }\n\n      const {dragOperation} = manager;\n      const {status} = dragOperation;\n\n      if (status.initialized) {\n        const {element} = this.options;\n        const target =\n          typeof element === 'function' ? element(dragOperation) : element;\n\n        if (!target) {\n          return;\n        }\n\n        let timeout: NodeJS.Timeout | undefined;\n        const updateBoundingRectangle = () => {\n          this.boundingRectangle.value = getBoundingRectangle(target);\n        };\n        const handleScroll = () => {\n          if (timeout) {\n            return;\n          }\n\n          timeout = setTimeout(() => {\n            updateBoundingRectangle();\n            timeout = undefined;\n          }, 25);\n        };\n        const resizeObserver = new ResizeObserver(updateBoundingRectangle);\n\n        resizeObserver.observe(target);\n\n        document.addEventListener('scroll', handleScroll, {\n          passive: true,\n          capture: true,\n        });\n\n        return () => {\n          document.removeEventListener('scroll', handleScroll, {\n            capture: true,\n          });\n          resizeObserver.disconnect();\n          this.boundingRectangle.value = null;\n        };\n      }\n    });\n  }\n\n  apply(operation: DragDropManager['dragOperation']) {\n    const {shape, transform} = operation;\n\n    if (!shape) {\n      return transform;\n    }\n\n    const boundingRectangle = this.boundingRectangle.value;\n\n    if (!boundingRectangle) {\n      return transform;\n    }\n\n    const {initial, current} = shape;\n    const {height, width} = current.boundingRectangle;\n    const left = initial.center.x - width / 2;\n    const top = initial.center.y - height / 2;\n\n    const restrictedTransform = restrictShapeToBoundingRectangle(\n      new Rectangle(left, top, width, height),\n      transform,\n      boundingRectangle\n    );\n\n    return restrictedTransform;\n  }\n\n  static configure = configurator(RestrictToElement);\n}\n"]}