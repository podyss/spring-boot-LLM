{"version":3,"sources":["src/core/manager/manager.ts","src/core/plugins/accessibility/Accessibility.ts","src/core/plugins/accessibility/defaults.ts","src/core/plugins/accessibility/utilities.ts","src/core/plugins/accessibility/HiddenText.ts","src/core/plugins/accessibility/LiveRegion.ts","src/core/plugins/cursor/Cursor.ts","src/core/plugins/feedback/Feedback.ts","src/core/plugins/scrolling/Scroller.ts","src/core/plugins/scrolling/ScrollIntent.ts","src/core/plugins/scrolling/ScrollLock.ts","src/core/plugins/scrolling/AutoScroller.ts","src/core/plugins/scrolling/ScrollListener.ts","src/core/plugins/selection/PreventSelection.ts","src/core/sensors/keyboard/KeyboardSensor.ts","src/core/sensors/pointer/PointerSensor.ts","src/core/entities/draggable/draggable.ts","src/core/entities/droppable/droppable.ts"],"names":["isElement","getWindow","manager","Plugin","_a","effect","isSafari","generateUniqueId","cleanupEffect","_b","status","shape","element","delta","reactive","ScrollDirection","isKeyboardEvent","Axes","_dec","_init","canScroll","CorePlugin","_c","batch","DOMRectangle","event","Sensor","configurator","getDocument","Listeners","effects","untracked","_element_dec","_element"],"mappings":"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","sourcesContent":["import {\n  DragDropManager as AbstractDragDropManager,\n  DragDropManagerInput,\n  type Plugins,\n  type Sensors,\n} from '@dnd-kit/abstract';\nimport {isElement} from '@dnd-kit/dom/utilities';\n\nimport type {Draggable, Droppable} from '../entities/index.ts';\nimport {\n  Accessibility,\n  AutoScroller,\n  Cursor,\n  Feedback,\n  Scroller,\n  ScrollListener,\n  PreventSelection,\n} from '../plugins/index.ts';\nimport {KeyboardSensor, PointerSensor} from '../sensors/index.ts';\n\nexport interface Input extends DragDropManagerInput<any> {}\n\nexport const defaultPreset: {\n  plugins: Plugins<DragDropManager>;\n  sensors: Sensors<DragDropManager>;\n} = {\n  plugins: [Accessibility, AutoScroller, Cursor, Feedback, PreventSelection],\n  sensors: [\n    PointerSensor.configure({\n      activationConstraints(event, source) {\n        const {pointerType, target} = event;\n\n        if (\n          pointerType === 'mouse' &&\n          isElement(target) &&\n          (source.handle === target || source.handle?.contains(target))\n        ) {\n          return undefined;\n        }\n\n        return {\n          delay: {value: 200, tolerance: 10},\n          distance: {value: 5},\n        };\n      },\n    }),\n    KeyboardSensor,\n  ],\n};\n\nexport class DragDropManager<\n  T extends Draggable = Draggable,\n  U extends Droppable = Droppable,\n> extends AbstractDragDropManager<Draggable, Droppable> {\n  constructor(input: Input = {}) {\n    const {\n      plugins = defaultPreset.plugins,\n      sensors = defaultPreset.sensors,\n      modifiers = [],\n    } = input;\n\n    super({\n      ...input,\n      plugins: [ScrollListener, Scroller, ...plugins],\n      sensors,\n      modifiers,\n    });\n  }\n}\n","import {effects} from '@dnd-kit/state';\nimport {Plugin} from '@dnd-kit/abstract';\nimport {getWindow, isSafari, generateUniqueId} from '@dnd-kit/dom/utilities';\n\nimport type {DragDropManager} from '../../manager/index.ts';\nimport {\n  defaultAnnouncements,\n  defaultAttributes,\n  defaultAnnouncementIdPrefix,\n  defaultDescriptionIdPrefix,\n  defaultScreenReaderInstructions,\n} from './defaults.ts';\nimport type {Announcements, ScreenReaderInstructions} from './types.ts';\nimport {isFocusable} from './utilities.ts';\nimport {createHiddenText} from './HiddenText.ts';\nimport {createLiveRegion} from './LiveRegion.ts';\n\ninterface Options {\n  id?: string;\n  idPrefix?: {\n    description?: string;\n    announcement?: string;\n  };\n  announcements?: Announcements;\n  screenReaderInstructions?: ScreenReaderInstructions;\n}\n\nexport class Accessibility extends Plugin<DragDropManager> {\n  constructor(manager: DragDropManager, options?: Options) {\n    super(manager);\n\n    const {\n      id,\n      idPrefix: {\n        description: descriptionPrefix = defaultDescriptionIdPrefix,\n        announcement: announcementPrefix = defaultAnnouncementIdPrefix,\n      } = {},\n      announcements = defaultAnnouncements,\n      screenReaderInstructions = defaultScreenReaderInstructions,\n    } = options ?? {};\n\n    const descriptionId = id\n      ? `${descriptionPrefix}-${id}`\n      : generateUniqueId(descriptionPrefix);\n    const announcementId = id\n      ? `${announcementPrefix}-${id}`\n      : generateUniqueId(announcementPrefix);\n\n    let hiddenTextElement: HTMLElement | undefined;\n    let liveRegionElement: HTMLElement | undefined;\n\n    const eventListeners = Object.entries(announcements).map(\n      ([eventName, getAnnouncement]) => {\n        return this.manager.monitor.addEventListener(\n          eventName as keyof Announcements,\n          (event: any, manager: DragDropManager) => {\n            const announcement = getAnnouncement?.(event, manager);\n\n            if (announcement && liveRegionElement) {\n              liveRegionElement.innerText = announcement;\n            }\n          }\n        );\n      }\n    );\n\n    const initialize = () => {\n      hiddenTextElement = createHiddenText(\n        descriptionId,\n        screenReaderInstructions.draggable\n      );\n      liveRegionElement = createLiveRegion(announcementId);\n\n      document.body.append(hiddenTextElement, liveRegionElement);\n    };\n\n    const cleanupEffects = effects(() => {\n      for (const draggable of manager.registry.draggables.value) {\n        const {element, handle} = draggable;\n        const activator = handle ?? element;\n        const window = getWindow(activator);\n\n        if (activator) {\n          if (!hiddenTextElement || !liveRegionElement) {\n            initialize();\n          }\n\n          if (\n            (!isFocusable(activator) || isSafari()) &&\n            !activator.hasAttribute('tabindex')\n          ) {\n            activator.setAttribute('tabindex', '0');\n          }\n\n          if (\n            !activator.hasAttribute('role') &&\n            !(activator instanceof window.HTMLButtonElement)\n          ) {\n            activator.setAttribute('role', defaultAttributes.role);\n          }\n\n          if (!activator.hasAttribute('role-description')) {\n            activator.setAttribute(\n              'aria-roledescription',\n              defaultAttributes.roleDescription\n            );\n          }\n\n          if (!activator.hasAttribute('aria-describedby')) {\n            activator.setAttribute('aria-describedby', descriptionId);\n          }\n\n          activator.setAttribute(\n            'aria-pressed',\n            String(draggable.isDragSource)\n          );\n\n          activator.setAttribute('aria-disabled', String(draggable.disabled));\n        }\n      }\n\n      this.destroy = () => {\n        hiddenTextElement?.remove();\n        liveRegionElement?.remove();\n        eventListeners.forEach((unsubscribe) => unsubscribe());\n        cleanupEffects();\n      };\n    });\n  }\n}\n","import type {Announcements, ScreenReaderInstructions} from './types.ts';\n\nexport const defaultAttributes = {\n  role: 'button',\n  roleDescription: 'draggable',\n  tabIndex: 0,\n};\n\nexport const defaultDescriptionIdPrefix = `dnd-kit-description`;\nexport const defaultAnnouncementIdPrefix = `dnd-kit-announcement`;\n\nexport const defaultScreenReaderInstructions: ScreenReaderInstructions = {\n  draggable: `To pick up a draggable item, press the space bar. While dragging, use the arrow keys to move the item in a given direction. Press space again to drop the item in its new position, or press escape to cancel.`,\n};\n\nexport const defaultAnnouncements: Announcements = {\n  dragstart({operation: {source}}) {\n    if (!source) return;\n\n    return `Picked up draggable item ${source.id}.`;\n  },\n  dragover({operation: {source, target}}) {\n    if (!source) return;\n\n    if (target) {\n      return `Draggable item ${source.id} was moved over droppable target ${target.id}.`;\n    }\n\n    return `Draggable item ${source.id} is no longer over a droppable target.`;\n  },\n  dragend({operation: {source, target}, canceled}) {\n    if (!source) return;\n\n    if (canceled) {\n      return `Dragging was cancelled. Draggable item ${source.id} was dropped.`;\n    }\n\n    if (target) {\n      return `Draggable item ${source.id} was dropped over droppable target ${target.id}`;\n    }\n\n    return `Draggable item ${source.id} was dropped.`;\n  },\n};\n","import {getWindow} from '@dnd-kit/dom/utilities';\n\nexport function isFocusable(element: Element) {\n  const window = getWindow(element);\n\n  return (\n    element instanceof window.HTMLInputElement ||\n    element instanceof window.HTMLSelectElement ||\n    element instanceof window.HTMLTextAreaElement ||\n    element instanceof window.HTMLAnchorElement ||\n    element instanceof window.HTMLButtonElement ||\n    element instanceof window.HTMLAreaElement\n  );\n}\n","export function createHiddenText(id: string, value: string) {\n  const element = document.createElement('div');\n\n  element.id = id;\n  element.style.setProperty('display', 'none');\n  element.innerText = value;\n\n  return element;\n}\n","export function createLiveRegion(id: string) {\n  const element = document.createElement('div');\n\n  element.id = id;\n  element.setAttribute('role', 'status');\n  element.setAttribute('aria-live', 'polite');\n  element.setAttribute('aria-atomic', 'true');\n  element.style.setProperty('position', 'fixed');\n  element.style.setProperty('width', '1px');\n  element.style.setProperty('height', '1px');\n  element.style.setProperty('margin', '-1px');\n  element.style.setProperty('border', '0');\n  element.style.setProperty('padding', '0');\n  element.style.setProperty('overflow', 'hidden');\n  element.style.setProperty('clip', 'rect(0 0 0 0)');\n  element.style.setProperty('clip-path', 'inset(100%)');\n  element.style.setProperty('white-space', 'nowrap');\n\n  return element;\n}\n","import {Plugin} from '@dnd-kit/abstract';\nimport {effect} from '@dnd-kit/state';\n\nimport {DragDropManager} from '../../manager/index.ts';\n\ninterface CursorPluginOptions {\n  /**\n   * The style of the cursor to be applied to the document body.\n   * @default 'grabbing'\n   */\n  cursor?: string;\n}\n\nexport class Cursor extends Plugin<DragDropManager> {\n  constructor(\n    public manager: DragDropManager,\n    options?: CursorPluginOptions\n  ) {\n    super(manager, options);\n\n    this.destroy = effect(() => {\n      const {dragOperation} = this.manager;\n      const {cursor = 'grabbing'} = this.options ?? {};\n\n      if (dragOperation.status.initialized) {\n        const style = document.createElement('style');\n        style.innerText = `* { cursor: ${cursor} !important; }`;\n        document.head.appendChild(style);\n\n        return () => {\n          style.remove();\n        };\n      }\n    });\n  }\n}\n","import {effect, untracked, type CleanupFunction} from '@dnd-kit/state';\nimport {configurator, Plugin} from '@dnd-kit/abstract';\nimport {\n  animateTransform,\n  cloneElement,\n  DOMRectangle,\n  isKeyboardEvent,\n  showPopover,\n  getComputedStyles,\n  supportsPopover,\n  supportsStyle,\n  Styles,\n  parseTranslate,\n  ProxiedElements,\n  isSafari,\n  getWindow,\n  type Transform,\n  generateUniqueId,\n} from '@dnd-kit/dom/utilities';\nimport {Coordinates} from '@dnd-kit/geometry';\n\nimport type {DragDropManager} from '../../manager/index.ts';\nimport type {Draggable, Droppable} from '../../entities/index.ts';\n\nconst ATTR_PREFIX = 'data-dnd-';\nconst CSS_PREFIX = '--dnd-';\nconst ATTRIBUTE = `${ATTR_PREFIX}dragging`;\nconst cssRules = `[${ATTRIBUTE}] {position: fixed !important;pointer-events: none !important;touch-action: none !important;z-index: calc(infinity);will-change: translate;top: var(${CSS_PREFIX}top, 0px) !important;left: var(${CSS_PREFIX}left, 0px) !important;width: var(${CSS_PREFIX}width, auto) !important;height: var(${CSS_PREFIX}height, auto) !important;box-sizing:border-box;}[${ATTRIBUTE}] *{pointer-events: none !important;}[${ATTRIBUTE}][style*=\"${CSS_PREFIX}translate\"] {translate: var(${CSS_PREFIX}translate) !important;}[style*=\"${CSS_PREFIX}transition\"] {transition: var(${CSS_PREFIX}transition) !important;}*:where([${ATTRIBUTE}][popover]){overflow:visible;background:var(${CSS_PREFIX}background);border:var(${CSS_PREFIX}border);margin:unset;padding:unset;color:inherit;}[${ATTRIBUTE}]::backdrop {display: none}html:has([${ATTRIBUTE}]) * {user-select:none;-webkit-user-select:none;}`;\nconst PLACEHOLDER_ATTRIBUTE = `${ATTR_PREFIX}placeholder`;\nconst IGNORED_ATTRIBUTES = [ATTRIBUTE, PLACEHOLDER_ATTRIBUTE, 'popover'];\nconst IGNORED_STYLES = ['view-transition-name'];\n\nexport interface FeedbackOptions {\n  rootElement?: Element | ((source: Draggable) => Element);\n}\n\nexport class Feedback extends Plugin<DragDropManager, FeedbackOptions> {\n  constructor(manager: DragDropManager, options?: FeedbackOptions) {\n    super(manager);\n\n    let style: HTMLStyleElement | undefined;\n    let initialSize: {width: number; height: number} | undefined = undefined;\n    let initialCoordinates: Coordinates | undefined;\n    let initialTranslate: Coordinates = {x: 0, y: 0};\n    let currentTransform: Transform | undefined;\n    let transformOrigin: Coordinates | undefined;\n    let moved = false;\n\n    const styleInjectionCleanup = effect(() => {\n      if (!style && manager.dragOperation.status.initialized) {\n        style = document.createElement('style');\n        style.innerText = cssRules;\n        document.head.prepend(style);\n\n        return styleInjectionCleanup;\n      }\n    });\n\n    const cleanupEffect = effect(() => {\n      const {dragOperation} = manager;\n      const {position, source, status} = dragOperation;\n\n      if (status.idle) {\n        currentTransform = undefined;\n        initialCoordinates = undefined;\n        initialSize = undefined;\n        initialTranslate = {x: 0, y: 0};\n        transformOrigin = undefined;\n        return;\n      }\n\n      if (!source) return;\n\n      const {element, feedback} = source;\n\n      if (!element || feedback === 'none') {\n        return;\n      }\n\n      let cleanup: CleanupFunction | undefined;\n\n      const shape = new DOMRectangle(element, {ignoreTransforms: true});\n      const {width, height, top, left} = shape;\n      const styles = new Styles(element);\n      const {background, border, transition, translate} =\n        getComputedStyles(element);\n      const clone = feedback === 'clone';\n\n      const placeholder =\n        feedback !== 'move' ? createPlaceholder(source) : null;\n      const isKeyboardOperation = untracked(() =>\n        isKeyboardEvent(manager.dragOperation.activatorEvent)\n      );\n\n      if (translate !== 'none') {\n        const parsedTranslate = parseTranslate(translate);\n\n        if (parsedTranslate) {\n          initialTranslate = parsedTranslate;\n        }\n      }\n\n      if (!initialCoordinates) {\n        initialCoordinates = {x: left, y: top};\n      }\n\n      if (!initialSize) {\n        initialSize = {width, height};\n      }\n\n      if (!transformOrigin) {\n        const {x, y} = untracked(() => position.current);\n        transformOrigin = {\n          x: (x - left) / width,\n          y: (y - top) / height,\n        };\n      }\n\n      const sizeDelta = {\n        width: (width - initialSize.width) * transformOrigin.x,\n        height: (height - initialSize.height) * transformOrigin.y,\n      };\n      const delta = {\n        x: initialCoordinates.x - left - sizeDelta.width,\n        y: initialCoordinates.y - top - sizeDelta.height,\n      };\n      const projected = {\n        top: top + delta.y,\n        left: left + delta.x,\n      };\n\n      element.setAttribute(ATTRIBUTE, 'true');\n\n      if (isSafari()) {\n        // Fix a bug in Safari > 18.0 where changes to the `translate` css variable do not trigger a repaint\n        styles.set({translate: `var(${CSS_PREFIX}translate)`});\n      }\n\n      styles.set(\n        {\n          width: width,\n          height: height,\n          top: projected.top,\n          left: projected.left,\n          background,\n          border,\n          translate: currentTransform\n            ? `${currentTransform.x}px ${currentTransform.y}px 0`\n            : '',\n        },\n        CSS_PREFIX\n      );\n\n      if (placeholder) {\n        element.insertAdjacentElement('afterend', placeholder);\n\n        if (options?.rootElement) {\n          const root =\n            typeof options.rootElement === 'function'\n              ? options.rootElement(source)\n              : options.rootElement;\n\n          root.appendChild(element);\n        }\n      }\n\n      if (supportsPopover(element)) {\n        if (!element.hasAttribute('popover')) {\n          element.setAttribute('popover', '');\n        }\n        showPopover(element);\n      }\n\n      const actual = new DOMRectangle(element, {ignoreTransforms: true});\n      const offset = {\n        top: projected.top - actual.top,\n        left: projected.left - actual.left,\n      };\n\n      if (offset.left > 0.01 || offset.top > 0.01) {\n        styles.set(\n          {\n            top: projected.top + offset.top,\n            left: projected.left + offset.left,\n          },\n          CSS_PREFIX\n        );\n      } else {\n        // Ignore sub-pixel offsets\n        offset.left = 0;\n        offset.top = 0;\n      }\n\n      const resizeObserver = new ResizeObserver(() => {\n        if (!placeholder) return;\n\n        const placeholderShape = new DOMRectangle(placeholder, {\n          ignoreTransforms: true,\n        });\n        const origin = transformOrigin ?? {x: 1, y: 1};\n        const dX = (width - placeholderShape.width) * origin.x + delta.x;\n        const dY = (height - placeholderShape.height) * origin.y + delta.y;\n\n        styles.set(\n          {\n            width: placeholderShape.width,\n            height: placeholderShape.height,\n            top: top + dY + offset.top,\n            left: left + dX + offset.left,\n          },\n          CSS_PREFIX\n        );\n\n        const window = getWindow(element);\n\n        /* Table cells need to have their width set explicitly because the feedback element is position fixed */\n        if (\n          element instanceof window.HTMLTableRowElement &&\n          placeholder instanceof window.HTMLTableRowElement\n        ) {\n          const cells = Array.from(element.cells);\n          const placeholderCells = Array.from(placeholder.cells);\n\n          for (const [index, cell] of cells.entries()) {\n            const placeholderCell = placeholderCells[index];\n\n            cell.style.width = `${placeholderCell.offsetWidth}px`;\n          }\n        }\n\n        manager.dragOperation.shape = new DOMRectangle(element);\n      });\n\n      /* Initialize drag operation shape */\n      dragOperation.shape = new DOMRectangle(element);\n      source.status = 'dragging';\n\n      let elementMutationObserver: MutationObserver | undefined;\n      let documentMutationObserver: MutationObserver | undefined;\n\n      if (placeholder) {\n        resizeObserver.observe(placeholder);\n\n        elementMutationObserver = new MutationObserver(() => {\n          for (const attribute of Array.from(element.attributes)) {\n            if (\n              attribute.name.startsWith('aria-') ||\n              IGNORED_ATTRIBUTES.includes(attribute.name)\n            ) {\n              continue;\n            }\n\n            if (attribute.name === 'style') {\n              if (supportsStyle(element) && supportsStyle(placeholder)) {\n                placeholder.setAttribute('style', clone ? '' : 'opacity: 0;');\n                placeholder.style.setProperty('transition', 'none');\n\n                for (const key of Object.values(element.style)) {\n                  if (\n                    key.startsWith(CSS_PREFIX) ||\n                    IGNORED_STYLES.includes(key)\n                  ) {\n                    continue;\n                  }\n\n                  placeholder.style.setProperty(\n                    key,\n                    element.style.getPropertyValue(key)\n                  );\n                }\n              }\n              continue;\n            }\n\n            placeholder.setAttribute(attribute.name, attribute.value);\n          }\n\n          if (clone) {\n            placeholder.innerHTML = element.innerHTML;\n          }\n        });\n\n        elementMutationObserver.observe(element, {\n          attributes: true,\n          subtree: true,\n        });\n\n        documentMutationObserver = new MutationObserver((entries) => {\n          for (const entry of entries) {\n            const {addedNodes} = entry;\n\n            if (\n              addedNodes.length > 0 &&\n              Array.from(addedNodes).some((node) => node.contains(element))\n            ) {\n              /* Update the position of the placeholder when the source element is moved */\n              element.insertAdjacentElement('afterend', placeholder);\n\n              /*\n               * Any update in DOM order that affects the source element hides the popover\n               * so we need to force the source element to be promoted to the top layer again\n               */\n              showPopover(element);\n              return;\n            }\n          }\n        });\n\n        /* Observe mutations on the element's owner document body */\n        documentMutationObserver.observe(element.ownerDocument.body, {\n          childList: true,\n          subtree: true,\n        });\n      }\n\n      const cleanupEffect = effect(function updateTransform() {\n        const {transform, status} = dragOperation;\n\n        if (!transform.x && !transform.y && !moved) {\n          return;\n        }\n\n        if (!moved) {\n          moved = true;\n        }\n\n        if (status.dragging) {\n          const translateTransition = isKeyboardOperation\n            ? '250ms cubic-bezier(0.25, 1, 0.5, 1)'\n            : '0ms linear';\n\n          const x = transform.x + initialTranslate.x;\n          const y = transform.y + initialTranslate.y;\n\n          const shape = new DOMRectangle(element);\n\n          styles.set(\n            {\n              transition: `${transition}, translate ${translateTransition}`,\n              translate: `${x}px ${y}px 0`,\n            },\n            CSS_PREFIX\n          );\n\n          dragOperation.shape = shape.translate(\n            x - (currentTransform?.x ?? 0),\n            y - (currentTransform?.y ?? 0)\n          );\n\n          currentTransform = {\n            x,\n            y,\n            z: 0,\n            scaleX: shape.scale.x,\n            scaleY: shape.scale.y,\n          };\n        }\n      });\n\n      const id = manager.dragOperation.source?.id;\n\n      const restoreFocus = () => {\n        if (!isKeyboardOperation || id == null) {\n          return;\n        }\n\n        const draggable = manager.registry.draggables.get(id);\n        const element = draggable?.handle ?? draggable?.element;\n\n        if (element instanceof HTMLElement) {\n          element.focus();\n        }\n      };\n\n      let dropEffectCleanup: CleanupFunction | undefined;\n      cleanup = () => {\n        elementMutationObserver?.disconnect();\n        documentMutationObserver?.disconnect();\n        resizeObserver.disconnect();\n\n        styles.reset();\n\n        if (\n          placeholder &&\n          (moved || placeholder.parentElement !== element.parentElement) &&\n          element.isConnected\n        ) {\n          placeholder.replaceWith(element);\n        }\n\n        placeholder?.remove();\n        element.removeAttribute(ATTRIBUTE);\n\n        if (supportsPopover(element)) {\n          element.removeAttribute('popover');\n        }\n\n        cleanupEffect();\n        dropEffectCleanup?.();\n\n        source.status = 'idle';\n        moved = false;\n      };\n\n      dropEffectCleanup = effect(function dropAnimation() {\n        if (dragOperation.status.dropped) {\n          const onComplete = cleanup;\n          cleanup = undefined;\n\n          source.status = 'dropping';\n\n          const transform = currentTransform;\n\n          if (!transform) {\n            onComplete?.();\n            return;\n          }\n\n          manager.renderer.rendering.then(() => {\n            /* Force the source element to be promoted to the top layer before animating it */\n            showPopover(element);\n\n            const target = placeholder ?? element;\n\n            const animations = element.getAnimations();\n\n            if (animations.length) {\n              animations.forEach((animation) => {\n                const {effect} = animation;\n\n                if (effect instanceof KeyframeEffect) {\n                  if (\n                    effect.getKeyframes().some((keyframe) => keyframe.translate)\n                  ) {\n                    animation.finish();\n                  }\n                }\n              });\n            }\n\n            const final = new DOMRectangle(target);\n            const current = new DOMRectangle(element);\n\n            const delta = {\n              x: current.center.x - final.center.x,\n              y: current.center.y - final.center.y,\n            };\n            const finalTransform = {\n              x: transform.x - delta.x,\n              y: transform.y - delta.y,\n              z: 0,\n            };\n            const heightKeyframes =\n              Math.round(current.height) !== Math.round(final.height)\n                ? {\n                    minHeight: [`${current.height}px`, `${final.height}px`],\n                    maxHeight: [`${current.height}px`, `${final.height}px`],\n                  }\n                : {};\n            const widthKeyframes =\n              Math.round(current.width) !== Math.round(final.width)\n                ? {\n                    minWidth: [`${current.width}px`, `${final.width}px`],\n                    maxWidth: [`${current.width}px`, `${final.width}px`],\n                  }\n                : {};\n\n            animateTransform({\n              element,\n              keyframes: {\n                ...heightKeyframes,\n                ...widthKeyframes,\n                translate: [\n                  `${transform.x}px ${transform.y}px ${transform.z ?? 0}`,\n                  `${finalTransform.x}px ${finalTransform.y}px ${finalTransform.z}`,\n                ],\n              },\n              options: {\n                duration: moved ? 250 : 0,\n                easing: 'ease',\n              },\n              onReady() {\n                styles.remove(['translate'], CSS_PREFIX);\n              },\n              onFinish() {\n                requestAnimationFrame(restoreFocus);\n                onComplete?.();\n              },\n            });\n          });\n        }\n      });\n\n      return () => cleanup?.();\n    });\n\n    this.destroy = () => {\n      styleInjectionCleanup();\n      cleanupEffect();\n      style?.remove();\n    };\n  }\n\n  static configure = configurator(Feedback);\n}\n\nfunction createPlaceholder(source: Draggable) {\n  return untracked(() => {\n    const {element, manager} = source;\n\n    if (!element || !manager) return;\n\n    const {droppables} = manager.registry;\n    const containedDroppables = new Map<Droppable, string>();\n\n    for (const droppable of droppables) {\n      if (!droppable.element) continue;\n\n      if (\n        element === droppable.element ||\n        element.contains(droppable.element)\n      ) {\n        const identifierAttribute = `${ATTR_PREFIX}${generateUniqueId('dom-id')}`;\n\n        droppable.element.setAttribute(identifierAttribute, '');\n\n        containedDroppables.set(droppable, identifierAttribute);\n      }\n    }\n\n    const cleanup: CleanupFunction[] = [];\n    const placeholder = cloneElement(element);\n    const {remove} = placeholder;\n\n    for (const [droppable, identifierAttribute] of containedDroppables) {\n      if (!droppable.element) continue;\n\n      const selector = `[${identifierAttribute}]`;\n      const clonedElement = placeholder.matches(selector)\n        ? placeholder\n        : placeholder.querySelector(selector);\n\n      droppable.element?.removeAttribute(identifierAttribute);\n\n      if (!clonedElement) continue;\n\n      let current = droppable.element;\n\n      droppable.proxy = clonedElement;\n      clonedElement.removeAttribute(identifierAttribute);\n\n      ProxiedElements.set(current, clonedElement);\n\n      cleanup.push(() => {\n        ProxiedElements.delete(current);\n        droppable.proxy = undefined;\n      });\n    }\n\n    placeholder.setAttribute('inert', 'true');\n    placeholder.setAttribute('tab-index', '-1');\n    placeholder.setAttribute('aria-hidden', 'true');\n    placeholder.setAttribute(PLACEHOLDER_ATTRIBUTE, '');\n    placeholder.remove = () => {\n      cleanup.forEach((fn) => fn());\n      remove.call(placeholder);\n    };\n\n    return placeholder;\n  });\n}\n","import {CorePlugin} from '@dnd-kit/abstract';\nimport {computed, deepEqual, reactive} from '@dnd-kit/state';\nimport {\n  canScroll,\n  detectScrollIntent,\n  getScrollableAncestors,\n  ScrollDirection,\n  scheduler,\n  isKeyboardEvent,\n} from '@dnd-kit/dom/utilities';\nimport {Axes, type Coordinates} from '@dnd-kit/geometry';\n\nimport type {DragDropManager} from '../../manager/index.ts';\n\nimport {ScrollIntentTracker} from './ScrollIntent.ts';\n\nexport class Scroller extends CorePlugin<DragDropManager> {\n  public getScrollableElements: () => Set<Element> | null;\n\n  private scrollIntentTracker: ScrollIntentTracker;\n\n  @reactive\n  public accessor autoScrolling = false;\n\n  constructor(manager: DragDropManager) {\n    super(manager);\n\n    let previousElementFromPoint: Element | null = null;\n    let previousScrollableElements: Set<Element> | null = null;\n    const elementFromPoint = computed(() => {\n      const {position} = manager.dragOperation;\n\n      if (!position) {\n        return null;\n      }\n\n      const {x, y} = position.current;\n      const element = document.elementFromPoint(x, y);\n\n      if (element) {\n        previousElementFromPoint = element;\n      }\n\n      return document.elementFromPoint(x, y) ?? previousElementFromPoint;\n    });\n    const scrollableElements = computed(() => {\n      const element = elementFromPoint.value;\n\n      if (!element || element === document.documentElement) {\n        const {target} = manager.dragOperation;\n        const targetElement = target?.element;\n\n        if (targetElement) {\n          const elements = getScrollableAncestors(targetElement, {\n            excludeElement: false,\n          });\n          previousScrollableElements = elements;\n\n          return elements;\n        }\n      }\n\n      if (element) {\n        const elements = getScrollableAncestors(element, {\n          excludeElement: false,\n        });\n\n        if (\n          this.autoScrolling &&\n          previousScrollableElements &&\n          elements.size < previousScrollableElements?.size\n        ) {\n          return previousScrollableElements;\n        }\n\n        previousScrollableElements = elements;\n\n        return elements;\n      }\n\n      previousScrollableElements = null;\n\n      return null;\n    }, deepEqual);\n\n    this.getScrollableElements = () => {\n      return scrollableElements.value;\n    };\n\n    this.scrollIntentTracker = new ScrollIntentTracker(manager);\n\n    this.destroy = manager.monitor.addEventListener('dragmove', (event) => {\n      if (\n        this.disabled ||\n        event.defaultPrevented ||\n        !isKeyboardEvent(manager.dragOperation.activatorEvent) ||\n        !event.by\n      ) {\n        return;\n      }\n\n      // Prevent the move event if we can scroll to the new coordinates\n      if (this.scroll({by: event.by})) {\n        event.preventDefault();\n      }\n    });\n  }\n\n  #meta: {element: Element; by: Coordinates} | undefined;\n\n  #scroll = () => {\n    if (!this.#meta) {\n      return;\n    }\n\n    const {element, by} = this.#meta;\n\n    if (by.y) element.scrollTop += by.y;\n    if (by.x) element.scrollLeft += by.x;\n  };\n\n  public scroll = (options?: {by: Coordinates}): boolean => {\n    if (this.disabled) {\n      return false;\n    }\n\n    const elements = this.getScrollableElements();\n\n    if (!elements) {\n      this.#meta = undefined;\n      return false;\n    }\n\n    const {position} = this.manager.dragOperation;\n    const currentPosition = position?.current;\n\n    if (currentPosition) {\n      const {by} = options ?? {};\n      const intent = by\n        ? {\n            x: getScrollIntent(by.x),\n            y: getScrollIntent(by.y),\n          }\n        : undefined;\n      const scrollIntent = intent\n        ? undefined\n        : this.scrollIntentTracker.current;\n\n      if (scrollIntent?.isLocked()) {\n        return false;\n      }\n\n      for (const scrollableElement of elements) {\n        const elementCanScroll = canScroll(scrollableElement, by);\n\n        if (elementCanScroll.x || elementCanScroll.y) {\n          const {speed, direction} = detectScrollIntent(\n            scrollableElement,\n            currentPosition,\n            intent\n          );\n\n          if (scrollIntent) {\n            for (const axis of Axes) {\n              if (scrollIntent[axis].isLocked(direction[axis])) {\n                speed[axis] = 0;\n                direction[axis] = 0;\n              }\n            }\n          }\n\n          if (direction.x || direction.y) {\n            const {x, y} = by ?? direction;\n            const scrollLeftBy = x * speed.x;\n            const scrollTopBy = y * speed.y;\n\n            if (scrollLeftBy || scrollTopBy) {\n              const previousScrollBy = this.#meta?.by;\n\n              if (this.autoScrolling && previousScrollBy) {\n                const scrollIntentMismatch =\n                  (previousScrollBy.x && !scrollLeftBy) ||\n                  (previousScrollBy.y && !scrollTopBy);\n\n                if (scrollIntentMismatch) continue;\n              }\n\n              this.#meta = {\n                element: scrollableElement,\n                by: {\n                  x: scrollLeftBy,\n                  y: scrollTopBy,\n                },\n              };\n\n              scheduler.schedule(this.#scroll);\n\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    this.#meta = undefined;\n    return false;\n  };\n}\n\nfunction getScrollIntent(value: number) {\n  if (value > 0) {\n    return ScrollDirection.Forward;\n  }\n\n  if (value < 0) {\n    return ScrollDirection.Reverse;\n  }\n\n  return ScrollDirection.Idle;\n}\n","import {batch, effect, signal, type Signal} from '@dnd-kit/state';\nimport {Plugin} from '@dnd-kit/abstract';\nimport {Axes} from '@dnd-kit/geometry';\nimport type {Coordinates} from '@dnd-kit/geometry';\nimport {ScrollDirection} from '@dnd-kit/dom/utilities';\n\nimport type {DragDropManager} from '../../manager/index.ts';\n\nimport {ScrollLock} from './ScrollLock.ts';\n\nconst DIRECTIONS = [ScrollDirection.Forward, ScrollDirection.Reverse];\n\nclass ScrollIntent {\n  public x = new ScrollLock();\n  public y = new ScrollLock();\n\n  public isLocked(): boolean {\n    return this.x.isLocked() && this.y.isLocked();\n  }\n}\n\nexport class ScrollIntentTracker extends Plugin<DragDropManager> {\n  private signal: Signal<ScrollIntent | null>;\n\n  constructor(manager: DragDropManager) {\n    super(manager);\n\n    const scrollIntent = signal<ScrollIntent>(new ScrollIntent());\n    let previousDelta: Coordinates | null = null;\n\n    this.signal = scrollIntent;\n\n    effect(() => {\n      const {status} = manager.dragOperation;\n\n      if (!status.initialized) {\n        previousDelta = null;\n        scrollIntent.value = new ScrollIntent();\n        return;\n      }\n\n      const {delta} = manager.dragOperation.position;\n\n      if (previousDelta) {\n        const directions = {\n          x: getDirection(delta.x, previousDelta.x),\n          y: getDirection(delta.y, previousDelta.y),\n        };\n\n        const intent = scrollIntent.peek();\n\n        batch(() => {\n          for (const axis of Axes) {\n            for (const direction of DIRECTIONS) {\n              if (directions[axis] === direction) {\n                intent[axis].unlock(direction);\n              }\n            }\n          }\n\n          scrollIntent.value = intent;\n        });\n      }\n\n      previousDelta = delta;\n    });\n  }\n\n  get current(): ScrollIntent | null {\n    return this.signal.peek();\n  }\n}\n\nfunction getDirection(a: number, b: number): ScrollDirection {\n  return Math.sign(a - b);\n}\n","import {reactive} from '@dnd-kit/state';\nimport {ScrollDirection as Direction} from '@dnd-kit/dom/utilities';\n\nconst LOCKED = true;\nconst UNLOCKED = false;\n\nexport class ScrollLock {\n  @reactive private accessor [Direction.Forward] = LOCKED;\n  @reactive private accessor [Direction.Reverse] = LOCKED;\n\n  public isLocked(direction?: Direction): boolean {\n    if (direction === Direction.Idle) {\n      return false;\n    }\n\n    if (direction == null) {\n      return (\n        this[Direction.Forward] === LOCKED && this[Direction.Reverse] === LOCKED\n      );\n    }\n\n    return this[direction] === LOCKED;\n  }\n\n  public unlock(direction: Direction) {\n    if (direction === Direction.Idle) {\n      return;\n    }\n\n    this[direction] = UNLOCKED;\n  }\n}\n","import {Plugin} from '@dnd-kit/abstract';\nimport {effect} from '@dnd-kit/state';\nimport type {CleanupFunction} from '@dnd-kit/state';\n\nimport type {DragDropManager} from '../../manager/index.ts';\nimport {Scroller} from './Scroller.ts';\n\ninterface Options {}\n\nconst AUTOSCROLL_INTERVAL = 10;\n\nexport class AutoScroller extends Plugin<DragDropManager> {\n  public destroy: CleanupFunction;\n\n  constructor(manager: DragDropManager, _options?: Options) {\n    super(manager);\n\n    const scroller = manager.registry.plugins.get(Scroller);\n\n    if (!scroller) {\n      throw new Error('AutoScroller plugin depends on Scroller plugin');\n    }\n\n    this.destroy = effect(() => {\n      if (this.disabled) {\n        return;\n      }\n\n      // We consume the position from the drag operation\n      // so that this effect is run when the position changes\n      const {position: _, status} = manager.dragOperation;\n\n      if (status.dragging) {\n        const canScroll = scroller.scroll();\n\n        if (canScroll) {\n          scroller.autoScrolling = true;\n          const interval = setInterval(scroller.scroll, AUTOSCROLL_INTERVAL);\n\n          return () => {\n            clearInterval(interval);\n          };\n        } else {\n          scroller.autoScrolling = false;\n        }\n      }\n    });\n  }\n}\n","import {CorePlugin} from '@dnd-kit/abstract';\nimport {effect} from '@dnd-kit/state';\n\nimport type {DragDropManager} from '../../manager/index.ts';\n\nconst listenerOptions: AddEventListenerOptions = {\n  capture: true,\n  passive: true,\n};\n\nexport class ScrollListener extends CorePlugin<DragDropManager> {\n  #timeout: NodeJS.Timeout | undefined;\n\n  constructor(manager: DragDropManager) {\n    super(manager);\n\n    const {dragOperation} = this.manager;\n\n    this.destroy = effect(() => {\n      const enabled = dragOperation.status.dragging;\n\n      if (enabled) {\n        const root = dragOperation.source?.element?.ownerDocument ?? document;\n\n        root.addEventListener('scroll', this.handleScroll, listenerOptions);\n\n        return () => {\n          root.removeEventListener(\n            'scroll',\n            this.handleScroll,\n            listenerOptions\n          );\n        };\n      }\n    });\n  }\n\n  private handleScroll = () => {\n    if (this.#timeout == null) {\n      this.#timeout = setTimeout(() => {\n        this.manager.collisionObserver.forceUpdate(false);\n        this.#timeout = undefined;\n      }, 50);\n    }\n  };\n}\n","import {Plugin} from '@dnd-kit/abstract';\nimport {effect} from '@dnd-kit/state';\n\nimport {DragDropManager} from '../../manager/index.ts';\n\nexport class PreventSelection extends Plugin<DragDropManager> {\n  constructor(public manager: DragDropManager) {\n    super(manager);\n\n    this.destroy = effect(() => {\n      const {dragOperation} = this.manager;\n\n      if (dragOperation.status.initialized) {\n        const style = document.createElement('style');\n        style.innerText = `* { user-select: none !important;, -webkit-user-select: none !important; }`;\n        document.head.appendChild(style);\n\n        document.addEventListener('selectionchange', removeSelection, {\n          capture: true,\n        });\n\n        return () => {\n          document.removeEventListener('selectionchange', removeSelection, {\n            capture: true,\n          });\n          style.remove();\n        };\n      }\n    });\n  }\n}\n\nfunction removeSelection() {\n  document.getSelection()?.removeAllRanges();\n}\n","import {Sensor} from '@dnd-kit/abstract';\nimport {batch, effect} from '@dnd-kit/state';\nimport type {CleanupFunction} from '@dnd-kit/state';\nimport {\n  DOMRectangle,\n  getDocument,\n  getWindow,\n  isElement,\n  isKeyboardEvent,\n  scrollIntoViewIfNeeded,\n  Listeners,\n} from '@dnd-kit/dom/utilities';\n\nimport type {DragDropManager} from '../../manager/index.ts';\nimport type {Draggable} from '../../entities/index.ts';\nimport {AutoScroller} from '../../plugins/index.ts';\n\nexport type KeyCode = KeyboardEvent['code'];\n\nexport type KeyboardCodes = {\n  start: KeyCode[];\n  cancel: KeyCode[];\n  end: KeyCode[];\n  up: KeyCode[];\n  down: KeyCode[];\n  left: KeyCode[];\n  right: KeyCode[];\n};\n\nexport interface KeyboardSensorOptions {\n  keyboardCodes?: KeyboardCodes;\n}\n\nconst DEFAULT_KEYBOARD_CODES: KeyboardCodes = {\n  start: ['Space', 'Enter'],\n  cancel: ['Escape'],\n  end: ['Space', 'Enter', 'Tab'],\n  up: ['ArrowUp'],\n  down: ['ArrowDown'],\n  left: ['ArrowLeft'],\n  right: ['ArrowRight'],\n};\n\nconst DEFAULT_OFFSET = 10;\n\n/**\n * The KeyboardSensor class is an input sensor that handles Keyboard events.\n */\nexport class KeyboardSensor extends Sensor<\n  DragDropManager,\n  KeyboardSensorOptions\n> {\n  constructor(\n    public manager: DragDropManager,\n    public options?: KeyboardSensorOptions\n  ) {\n    super(manager);\n  }\n\n  #cleanupFunctions: CleanupFunction[] = [];\n\n  protected listeners = new Listeners();\n\n  public bind(source: Draggable, options = this.options) {\n    const unbind = effect(() => {\n      const target = source.handle ?? source.element;\n      const listener: EventListener = (event: Event) => {\n        if (isKeyboardEvent(event)) {\n          this.handleSourceKeyDown(event, source, options);\n        }\n      };\n\n      if (target) {\n        target.addEventListener('keydown', listener);\n\n        return () => {\n          target.removeEventListener('keydown', listener);\n        };\n      }\n    });\n\n    return unbind;\n  }\n\n  protected handleSourceKeyDown = (\n    event: KeyboardEvent,\n    source: Draggable,\n    options: KeyboardSensorOptions | undefined\n  ) => {\n    if (this.disabled || event.defaultPrevented) {\n      return;\n    }\n\n    if (!isElement(event.target)) {\n      return;\n    }\n\n    if (source.disabled) {\n      return;\n    }\n\n    if (\n      (!source.handle && source.element && event.target === source.element) ||\n      (source.handle && event.target === source.handle)\n    ) {\n      const {keyboardCodes = DEFAULT_KEYBOARD_CODES} = options ?? {};\n\n      if (!keyboardCodes.start.includes(event.code)) {\n        return;\n      }\n\n      if (!this.manager.dragOperation.status.idle) {\n        return;\n      }\n\n      this.handleStart(event, source, options);\n    }\n  };\n\n  protected handleStart(\n    event: KeyboardEvent,\n    source: Draggable,\n    options: KeyboardSensorOptions | undefined\n  ) {\n    const {element} = source;\n\n    if (!element) {\n      throw new Error('Source draggable does not have an associated element');\n    }\n\n    event.preventDefault();\n    event.stopImmediatePropagation();\n\n    scrollIntoViewIfNeeded(element);\n\n    const {center} = new DOMRectangle(element);\n\n    batch(() => {\n      this.manager.actions.setDragSource(source.id);\n      this.manager.actions.start({\n        event,\n        coordinates: {\n          x: center.x,\n          y: center.y,\n        },\n      });\n    });\n\n    this.sideEffects();\n\n    const sourceDocument = getDocument(element);\n    const sourceWindow = getWindow(sourceDocument);\n\n    const listeners = [\n      this.listeners.bind(sourceDocument, [\n        {\n          type: 'keydown',\n          listener: (event: KeyboardEvent) =>\n            this.handleKeyDown(event, source, options),\n          options: {capture: true},\n        },\n      ]),\n      this.listeners.bind(sourceWindow, [\n        {type: 'resize', listener: () => this.handleEnd(true)},\n      ]),\n    ];\n\n    this.#cleanupFunctions.push(...listeners);\n  }\n\n  protected handleKeyDown(\n    event: KeyboardEvent,\n    _source: Draggable,\n    options: KeyboardSensorOptions | undefined\n  ) {\n    const {keyboardCodes = DEFAULT_KEYBOARD_CODES} = options ?? {};\n\n    if (isKeycode(event, [...keyboardCodes.end, ...keyboardCodes.cancel])) {\n      event.preventDefault();\n      const canceled = isKeycode(event, keyboardCodes.cancel);\n\n      this.handleEnd(canceled);\n      return;\n    }\n\n    if (isKeycode(event, keyboardCodes.up)) {\n      this.handleMove('up', event);\n    } else if (isKeycode(event, keyboardCodes.down)) {\n      this.handleMove('down', event);\n    }\n\n    if (isKeycode(event, keyboardCodes.left)) {\n      this.handleMove('left', event);\n    } else if (isKeycode(event, keyboardCodes.right)) {\n      this.handleMove('right', event);\n    }\n  }\n\n  protected handleEnd(canceled: boolean) {\n    this.manager.actions.stop({\n      canceled,\n    });\n\n    this.cleanup();\n  }\n\n  protected handleMove(\n    direction: 'up' | 'down' | 'left' | 'right',\n    event: KeyboardEvent\n  ) {\n    const {shape} = this.manager.dragOperation;\n    const factor = event.shiftKey ? 5 : 1;\n    let offset = {\n      x: 0,\n      y: 0,\n    };\n\n    if (!shape) {\n      return;\n    }\n\n    switch (direction) {\n      case 'up':\n        offset = {x: 0, y: -DEFAULT_OFFSET * factor};\n        break;\n      case 'down':\n        offset = {x: 0, y: DEFAULT_OFFSET * factor};\n        break;\n      case 'left':\n        offset = {x: -DEFAULT_OFFSET * factor, y: 0};\n        break;\n      case 'right':\n        offset = {x: DEFAULT_OFFSET * factor, y: 0};\n        break;\n    }\n\n    if (offset?.x || offset?.y) {\n      event.preventDefault();\n\n      this.manager.actions.move({\n        by: offset,\n      });\n    }\n  }\n\n  private sideEffects() {\n    const autoScroller = this.manager.registry.plugins.get(AutoScroller as any);\n\n    if (autoScroller?.disabled === false) {\n      autoScroller.disable();\n\n      this.#cleanupFunctions.push(() => {\n        autoScroller.enable();\n      });\n    }\n  }\n\n  protected cleanup() {\n    this.#cleanupFunctions.forEach((cleanup) => cleanup());\n  }\n\n  public destroy() {\n    this.cleanup();\n    // Remove all event listeners\n    this.listeners.clear();\n  }\n}\n\nfunction isKeycode(event: KeyboardEvent, codes: KeyCode[]) {\n  return codes.includes(event.code);\n}\n","import {batch, effect} from '@dnd-kit/state';\nimport type {CleanupFunction} from '@dnd-kit/state';\nimport {Sensor, configurator} from '@dnd-kit/abstract';\nimport {\n  exceedsDistance,\n  type Distance,\n  type Coordinates,\n} from '@dnd-kit/geometry';\nimport {\n  getDocument,\n  isElement,\n  isHTMLElement,\n  isPointerEvent,\n  Listeners,\n} from '@dnd-kit/dom/utilities';\n\nimport type {DragDropManager} from '../../manager/index.ts';\nimport type {Draggable} from '../../entities/index.ts';\n\nexport interface DelayConstraint {\n  value: number;\n  tolerance: Distance;\n}\n\nexport interface DistanceConstraint {\n  value: Distance;\n  tolerance?: Distance;\n}\n\nexport interface ActivationConstraints {\n  distance?: DistanceConstraint;\n  delay?: DelayConstraint;\n}\n\nexport interface PointerSensorOptions {\n  activationConstraints?:\n    | ActivationConstraints\n    | ((\n        event: PointerEvent,\n        source: Draggable\n      ) => ActivationConstraints | undefined);\n}\n\n/**\n * The PointerSensor class is an input sensor that handles Pointer events,\n * such as mouse, touch and pen interactions.\n */\nexport class PointerSensor extends Sensor<\n  DragDropManager,\n  PointerSensorOptions\n> {\n  protected listeners = new Listeners();\n\n  protected cleanup: Set<CleanupFunction> = new Set();\n\n  protected initialCoordinates: Coordinates | undefined;\n\n  #clearTimeout: CleanupFunction | undefined;\n\n  constructor(\n    public manager: DragDropManager,\n    public options?: PointerSensorOptions\n  ) {\n    super(manager);\n\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handlePointerUp = this.handlePointerUp.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  public bind(source: Draggable, options = this.options) {\n    const unbind = effect(() => {\n      const target = source.handle ?? source.element;\n      const listener: EventListener = (event: Event) => {\n        if (isPointerEvent(event)) {\n          this.handlePointerDown(event, source, options);\n        }\n      };\n\n      if (target) {\n        patchWindow(target.ownerDocument.defaultView);\n\n        target.addEventListener('pointerdown', listener);\n\n        return () => {\n          target.removeEventListener('pointerdown', listener);\n        };\n      }\n    });\n\n    return unbind;\n  }\n\n  protected handlePointerDown(\n    event: PointerEvent,\n    source: Draggable,\n    options: PointerSensorOptions = {}\n  ) {\n    if (\n      this.disabled ||\n      !event.isPrimary ||\n      event.button !== 0 ||\n      !isElement(event.target) ||\n      source.disabled\n    ) {\n      return;\n    }\n    const {target} = event;\n    const isNativeDraggable =\n      isHTMLElement(target) &&\n      target.draggable &&\n      target.getAttribute('draggable') === 'true';\n\n    this.initialCoordinates = {\n      x: event.clientX,\n      y: event.clientY,\n    };\n\n    const {activationConstraints} = options;\n    const constraints =\n      typeof activationConstraints === 'function'\n        ? activationConstraints(event, source)\n        : activationConstraints;\n\n    event.stopImmediatePropagation();\n\n    if (!constraints?.delay && !constraints?.distance) {\n      this.handleStart(source, event);\n    } else {\n      const {delay} = constraints;\n\n      if (delay) {\n        const timeout = setTimeout(\n          () => this.handleStart(source, event),\n          delay.value\n        );\n\n        this.#clearTimeout = () => {\n          clearTimeout(timeout);\n          this.#clearTimeout = undefined;\n        };\n      }\n    }\n\n    const ownerDocument = getDocument(event.target);\n\n    const unbindListeners = this.listeners.bind(ownerDocument, [\n      {\n        type: 'pointermove',\n        listener: (event: PointerEvent) =>\n          this.handlePointerMove(event, source, options),\n      },\n      {\n        type: 'pointerup',\n        listener: this.handlePointerUp,\n        options: {\n          capture: true,\n        },\n      },\n      {\n        // Cancel activation if there is a competing Drag and Drop interaction\n        type: 'dragstart',\n        listener: isNativeDraggable ? this.handleCancel : preventDefault,\n      },\n    ]);\n\n    const cleanup = () => {\n      setTimeout(unbindListeners);\n      this.#clearTimeout?.();\n      this.initialCoordinates = undefined;\n    };\n\n    this.cleanup.add(cleanup);\n  }\n\n  protected handlePointerMove(\n    event: PointerEvent,\n    source: Draggable,\n    options: PointerSensorOptions\n  ) {\n    const coordinates = {\n      x: event.clientX,\n      y: event.clientY,\n    };\n\n    if (this.manager.dragOperation.status.dragging) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.manager.actions.move({to: coordinates});\n      return;\n    }\n\n    if (!this.initialCoordinates) {\n      return;\n    }\n\n    const delta = {\n      x: coordinates.x - this.initialCoordinates.x,\n      y: coordinates.y - this.initialCoordinates.y,\n    };\n    const {activationConstraints} = options;\n    const constraints =\n      typeof activationConstraints === 'function'\n        ? activationConstraints(event, source)\n        : activationConstraints;\n    const {distance, delay} = constraints ?? {};\n\n    if (distance) {\n      if (\n        distance.tolerance != null &&\n        exceedsDistance(delta, distance.tolerance)\n      ) {\n        return this.handleCancel();\n      }\n      if (exceedsDistance(delta, distance.value)) {\n        return this.handleStart(source, event);\n      }\n    }\n\n    if (delay) {\n      if (exceedsDistance(delta, delay.tolerance)) {\n        return this.handleCancel();\n      }\n    }\n  }\n\n  private handlePointerUp(event: PointerEvent) {\n    // Prevent the default behaviour of the event\n    event.preventDefault();\n    event.stopPropagation();\n\n    // End the drag and drop operation\n    const {status} = this.manager.dragOperation;\n\n    if (!status.idle) {\n      const canceled = !status.initialized;\n      this.manager.actions.stop({canceled});\n    }\n\n    // Remove the pointer move and up event listeners\n    this.cleanup.forEach((cleanup) => cleanup());\n    this.cleanup.clear();\n  }\n\n  protected handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Escape') {\n      event.preventDefault();\n      this.handleCancel();\n    }\n  }\n\n  protected handleStart(source: Draggable, event: PointerEvent) {\n    const {manager, initialCoordinates} = this;\n\n    this.#clearTimeout?.();\n\n    if (!initialCoordinates || manager.dragOperation.status.initialized) {\n      return;\n    }\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    event.preventDefault();\n\n    batch(() => {\n      manager.actions.setDragSource(source.id);\n      manager.actions.start({coordinates: initialCoordinates, event});\n    });\n\n    const ownerDocument = getDocument(event.target);\n    const unbind = this.listeners.bind(ownerDocument, [\n      {\n        // Prevent scrolling on touch devices\n        type: 'touchmove',\n        listener: preventDefault,\n        options: {\n          passive: false,\n        },\n      },\n      {\n        // Prevent click events\n        type: 'click',\n        listener: preventDefault,\n      },\n      {\n        type: 'keydown',\n        listener: this.handleKeyDown,\n      },\n    ]);\n\n    ownerDocument.body.setPointerCapture(event.pointerId);\n\n    this.cleanup.add(unbind);\n  }\n\n  protected handleCancel() {\n    const {dragOperation} = this.manager;\n\n    if (dragOperation.status.initialized) {\n      this.manager.actions.stop({canceled: true});\n    }\n\n    // Remove the pointer move and up event listeners\n    this.cleanup.forEach((cleanup) => cleanup());\n    this.cleanup.clear();\n  }\n\n  public destroy() {\n    // Remove all event listeners\n    this.listeners.clear();\n  }\n\n  static configure = configurator(PointerSensor);\n}\n\nfunction preventDefault(event: Event) {\n  event.preventDefault();\n}\n\nfunction noop() {}\n\nconst windows = new WeakSet<Window>();\n\nfunction patchWindow(window: Window | null) {\n  if (!window || windows.has(window)) {\n    return;\n  }\n\n  window.addEventListener('touchmove', noop, {\n    capture: false,\n    passive: false,\n  });\n  windows.add(window);\n}\n","import {\n  Draggable as AbstractDraggable,\n  Sensor,\n  descriptor,\n} from '@dnd-kit/abstract';\nimport type {Data, DraggableInput, Modifiers} from '@dnd-kit/abstract';\nimport {reactive} from '@dnd-kit/state';\n\nimport type {DragDropManager} from '../../manager/index.ts';\nimport type {Sensors} from '../../sensors/index.ts';\n\nexport type FeedbackType = 'default' | 'move' | 'clone' | 'none';\n\nexport interface Input<T extends Data = Data> extends DraggableInput<T> {\n  handle?: Element;\n  element?: Element;\n  feedback?: FeedbackType;\n  sensors?: Sensors;\n  modifiers?: Modifiers<DragDropManager>;\n}\n\nexport class Draggable<T extends Data = Data> extends AbstractDraggable<\n  T,\n  DragDropManager\n> {\n  constructor(\n    {\n      element,\n      effects = () => [],\n      handle,\n      feedback = 'default',\n      ...input\n    }: Input<T>,\n    manager: DragDropManager | undefined\n  ) {\n    super(\n      {\n        effects: () => [\n          ...effects(),\n          () => {\n            const {manager} = this;\n\n            if (!manager) return;\n\n            const sensors = this.sensors?.map(descriptor) ?? [\n              ...manager.sensors,\n            ];\n            const unbindFunctions = sensors.map((entry) => {\n              const sensorInstance =\n                entry instanceof Sensor\n                  ? entry\n                  : manager.registry.register(entry.plugin);\n              const options =\n                entry instanceof Sensor ? undefined : entry.options;\n\n              const unbind = sensorInstance.bind(this, options);\n              return unbind;\n            });\n\n            return function cleanup() {\n              unbindFunctions.forEach((unbind) => unbind());\n            };\n          },\n        ],\n        ...input,\n      },\n      manager\n    );\n\n    this.element = element;\n    this.handle = handle;\n    this.feedback = feedback;\n  }\n\n  @reactive\n  public accessor handle: Element | undefined;\n\n  @reactive\n  public accessor element: Element | undefined;\n\n  @reactive\n  public accessor feedback: FeedbackType;\n}\n","import {Droppable as AbstractDroppable} from '@dnd-kit/abstract';\nimport type {\n  Data,\n  DroppableInput as AbstractDroppableInput,\n} from '@dnd-kit/abstract';\nimport {defaultCollisionDetection} from '@dnd-kit/collision';\nimport type {CollisionDetector} from '@dnd-kit/collision';\nimport {reactive, untracked} from '@dnd-kit/state';\nimport type {BoundingRectangle, Shape} from '@dnd-kit/geometry';\nimport {DOMRectangle, PositionObserver} from '@dnd-kit/dom/utilities';\n\nimport type {DragDropManager} from '../../manager/manager.ts';\n\ntype OptionalInput = 'collisionDetector';\n\nexport interface Input<T extends Data = Data>\n  extends Omit<AbstractDroppableInput<T>, OptionalInput> {\n  collisionDetector?: CollisionDetector;\n  element?: Element;\n}\n\nexport class Droppable<T extends Data = Data> extends AbstractDroppable<\n  T,\n  DragDropManager\n> {\n  constructor(\n    {element, effects = () => [], ...input}: Input<T>,\n    manager: DragDropManager | undefined\n  ) {\n    const {collisionDetector = defaultCollisionDetection} = input;\n    const updateShape = (boundingClientRect?: BoundingRectangle | null) => {\n      const {element} = this;\n\n      if (!element || boundingClientRect === null) {\n        this.shape = undefined;\n        return undefined;\n      }\n\n      const updatedShape = new DOMRectangle(element);\n\n      const shape = untracked(() => this.shape);\n      if (updatedShape && shape?.equals(updatedShape)) {\n        return shape;\n      }\n\n      this.shape = updatedShape;\n\n      return updatedShape;\n    };\n\n    super(\n      {\n        ...input,\n        collisionDetector,\n        effects: () => [\n          ...effects(),\n          () => {\n            const {element, manager} = this;\n            if (!manager) return;\n\n            const {dragOperation} = manager;\n            const {source} = dragOperation;\n            const observePosition =\n              source &&\n              dragOperation.status.initialized &&\n              element &&\n              !this.disabled &&\n              this.accepts(source);\n\n            if (observePosition) {\n              const positionObserver = new PositionObserver(\n                element,\n                updateShape\n              );\n\n              return () => {\n                positionObserver.disconnect();\n                this.shape = undefined;\n              };\n            }\n          },\n          () => {\n            if (this.manager?.dragOperation.status.initialized) {\n              return () => {\n                this.shape = undefined;\n              };\n            }\n          },\n        ],\n      },\n      manager\n    );\n\n    this.element = element;\n    this.refreshShape = () => updateShape();\n  }\n\n  @reactive\n  accessor #element: Element | undefined;\n\n  @reactive\n  public accessor proxy: Element | undefined;\n\n  set element(element: Element | undefined) {\n    this.#element = element;\n  }\n\n  get element() {\n    return this.proxy ?? this.#element;\n  }\n\n  public refreshShape: () => Shape | undefined;\n}\n"]}