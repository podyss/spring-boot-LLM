{"version":3,"sources":["../src/plugins/debug/debug.ts"],"names":[],"mappings":"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","sourcesContent":["import {effect} from '@dnd-kit/state';\nimport {Plugin} from '@dnd-kit/abstract';\nimport type {UniqueIdentifier} from '@dnd-kit/abstract';\nimport type {DragDropManager} from '@dnd-kit/dom';\nimport {getWindow} from '@dnd-kit/dom/utilities';\n\nexport class Debug extends Plugin<DragDropManager> {\n  constructor(manager: DragDropManager) {\n    super(manager);\n\n    const elements = new Map<UniqueIdentifier, HTMLElement>();\n    let draggableElement: HTMLElement | null = null;\n\n    const cleanup = effect(() => {\n      const {dragOperation} = manager;\n      const {current: _} = dragOperation.status;\n\n      const {collisions} = manager.collisionObserver;\n      const draggable = dragOperation.source;\n      const topCollisions = collisions.slice(1, 3);\n      const collidingIds = topCollisions.map(({id}) => id);\n\n      if (draggable && dragOperation.shape) {\n        const element = draggableElement ?? createDebugElement();\n        const window = getWindow(element);\n        const {boundingRectangle} = dragOperation.shape.current;\n\n        if (!draggableElement) {\n          draggableElement = element;\n\n          const style = document.createElement('style');\n          style.innerText = `dialog[data-dnd-kit-debug]::backdrop {display: none;}`;\n\n          element.innerText = `${draggable.id}`;\n          element.setAttribute('data-dnd-kit-debug', '');\n          element.appendChild(style);\n          element.style.backgroundColor = 'rgba(118, 190, 250, 0.5)';\n          element.style.color = 'rgba(0,0,0,0.9)';\n\n          document.body.appendChild(element);\n        }\n\n        if (element instanceof window.HTMLDialogElement) {\n          element.showPopover();\n        }\n\n        element.style.top = `${boundingRectangle.top}px`;\n        element.style.left = `${boundingRectangle.left}px`;\n        element.style.width = `${boundingRectangle.width}px`;\n        element.style.height = `${boundingRectangle.height}px`;\n      } else {\n        draggableElement?.remove();\n        draggableElement = null;\n      }\n\n      for (const [id, element] of elements) {\n        if (!manager.registry.droppables.has(id)) {\n          element.remove();\n          elements.delete(id);\n        }\n      }\n\n      for (const droppable of manager.registry.droppables) {\n        const element = elements.get(droppable.id);\n\n        if (droppable.shape) {\n          const {boundingRectangle} = droppable.shape;\n          const debugElement = element ?? createDebugElement();\n\n          if (!element) {\n            elements.set(droppable.id, debugElement);\n            document.body.appendChild(debugElement);\n          }\n\n          debugElement.style.backgroundColor = droppable.isDropTarget\n            ? 'rgba(13, 210, 36, 0.6)'\n            : collidingIds.includes(droppable.id)\n              ? 'rgba(255, 193, 7, 0.5)'\n              : 'rgba(0, 0, 0, 0.1)';\n\n          debugElement.style.top = `${boundingRectangle.top}px`;\n          debugElement.style.left = `${boundingRectangle.left}px`;\n          debugElement.style.width = `${boundingRectangle.width}px`;\n          debugElement.style.height = `${boundingRectangle.height}px`;\n          debugElement.innerText = `${droppable.id}`;\n        } else if (element) {\n          element.remove();\n          elements.delete(droppable.id);\n        }\n      }\n    });\n\n    this.destroy = () => {\n      draggableElement?.remove();\n      elements.forEach((element) => element.remove());\n      cleanup();\n    };\n  }\n}\n\nfunction createDebugElement(tagName = 'div') {\n  const element = document.createElement(tagName);\n\n  element.setAttribute('popover', '');\n  element.style.all = 'initial';\n  element.style.position = 'fixed';\n  element.style.display = 'flex';\n  element.style.alignItems = 'center';\n  element.style.justifyContent = 'center';\n  element.style.border = '1px solid rgba(0, 0, 0, 0.1)';\n  element.style.boxSizing = 'border-box';\n  element.style.pointerEvents = 'none';\n  element.style.zIndex = '9999';\n  element.style.color = 'rgba(0,0,0,0.5)';\n  element.style.fontFamily = 'sans-serif';\n  element.style.textShadow = '0 0 3px rgba(255,255,255,0.8)';\n  element.style.pointerEvents = 'none';\n\n  return element;\n}\n"]}