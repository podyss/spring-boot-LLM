export declare type ReactRef<T> = {
    current: T | null;
};
export declare type Axis = "both" | "x" | "y" | "none";
export declare type ResizeHandleAxis = "s" | "w" | "e" | "n" | "sw" | "nw" | "se" | "ne";
export declare type ResizableState = void;
export declare type ResizableBoxState = {
    width: number;
    height: number;
    propsWidth: number;
    propsHeight: number;
};
export declare type DragCallbackData = {
    node: HTMLElement;
    x: number;
    y: number;
    deltaX: number;
    deltaY: number;
    lastX: number;
    lastY: number;
};
export declare type ResizeCallbackData = {
    node: HTMLElement;
    size: {
        width: number;
        height: number;
    };
    handle: ResizeHandleAxis;
};
export declare type DefaultProps = {
    axis: Axis;
    handleSize: [number, number];
    lockAspectRatio: boolean;
    minConstraints: [number, number];
    maxConstraints: [number, number];
    resizeHandles: ResizeHandleAxis[];
    transformScale: number;
};
export interface Props extends DefaultProps {
    children: any;
    className?: string;
    draggableOpts?: any;
    height: number;
    handle?: any;
    onResizeStop?: (e: any, data: ResizeCallbackData) => any;
    onResizeStart?: (e: any, data: ResizeCallbackData) => any;
    onResize?: (e: any, data: ResizeCallbackData) => any;
    width: number;
}
export declare const resizableProps: {
    axis: StringConstructor;
    className: StringConstructor;
    children: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor | BooleanConstructor | FunctionConstructor)[];
    draggableOpts: ObjectConstructor;
    height: NumberConstructor;
    handle: any;
    handleSize: ArrayConstructor;
    lockAspectRatio: BooleanConstructor;
    maxConstraints: ArrayConstructor;
    minConstraints: ArrayConstructor;
    onResizeStop: FunctionConstructor;
    onResizeStart: FunctionConstructor;
    onResize: FunctionConstructor;
    resizeHandles: ArrayConstructor;
    transformScale: NumberConstructor;
    width: NumberConstructor;
};
