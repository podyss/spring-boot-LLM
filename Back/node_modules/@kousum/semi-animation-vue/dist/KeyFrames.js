import { defineComponent as v, ref as c, onMounted as F, createVNode as p, mergeProps as I } from "vue";
import f from "./utils/noop";
import w from "./Animation";
const R = {
  forwardInstance: Function,
  name: String,
  frames: {
    type: Array,
    default: () => []
  },
  loop: {
    type: Boolean,
    default: !1
  },
  onKeyRest: {
    type: Function,
    default: () => f
  },
  onRest: {
    type: Function,
    default: () => f
  },
  onFrame: {
    type: Function,
    default: () => f
  }
}, S = /* @__PURE__ */ v((e, {
  slots: a
}) => {
  let r;
  const n = c({}), o = c(0), d = (t = {}) => {
    const l = {
      ...t
    };
    e.onFrame(n), n.value = l;
  }, m = () => {
    const {
      frames: t,
      loop: l
    } = e;
    o.value++, o.value < t.length - 1 || (o.value = 0, e.onRest(n.value)), e.onKeyRest(n.value);
  }, s = (t) => {
    r = t, typeof e.forwardInstance == "function" && e.forwardInstance(t);
  };
  F(() => {
    r && r.destroy();
  });
  const {
    frames: u
  } = e, i = u[o.value], y = u[o.value + 1];
  return () => p(w, I(e, {
    forwardInstance: s,
    from: i,
    to: y,
    onFrame: d,
    onRest: m
  }), {
    default: () => [a.default ? typeof a.default() == "function" ? a.default(n) : a.default() : null]
  });
}, {
  props: R
});
export {
  S as default,
  R as vuePropsType
};
//# sourceMappingURL=KeyFrames.js.map
