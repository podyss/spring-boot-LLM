import { defineComponent as b, useSlots as j, onActivated as E, reactive as O, watch as h, onBeforeUnmount as g, createVNode as L, mergeProps as N, isVNode as R } from "vue";
import T from "./Animation";
import a from "./utils/noop";
const A = {
  children: [Object, Function],
  from: Object,
  enter: Object,
  leave: Object,
  state: {
    type: [String, Boolean],
    // @ts-ignore
    default: void 0
  },
  willEnter: {
    type: Function,
    default: a
  },
  didEnter: {
    type: Function,
    default: a
  },
  willLeave: {
    type: Function,
    default: a
  },
  didLeave: {
    type: Function,
    default: a
  },
  onRest: {
    type: Function,
    default: a
  },
  onStart: {
    type: Function,
    default: a
  }
}, x = /* @__PURE__ */ b((n, {}) => {
  const c = j();
  E(() => {
  });
  const t = O({
    state: "",
    lastChildren: null,
    currentChildren: null
  });
  function m(e, l) {
    const i = {}, o = e.children || c.default;
    return o !== l.currentChildren && (i.lastChildren = l.currentChildren, i.currentChildren = o, o == null ? i.state = "leave" : i.state = "enter"), e.state != null && (i.state = e.state), i;
  }
  function f() {
    const e = m({
      ...n
    }, {
      ...t
    });
    Object.keys(e).forEach((l) => {
      t[l] = e[l];
    });
  }
  h(() => n.children, () => {
    f();
  }, {
    immediate: !0
  }), h(() => n.state, () => {
    f();
  }, {
    immediate: !0
  }), g(() => {
  });
  const v = () => [!0, !1, "enter", "leave"].includes(n.state), C = (e) => {
    t.state === "enter" ? n.didEnter(e) : t.state === "leave" && (t.currentChildren = null, t.lastChildren = null, n.didLeave(e)), n.onRest(e);
  }, y = (e) => {
    t.state === "enter" ? n.willEnter(e) : t.state === "leave" && n.willLeave(e), n.onStart(e);
  };
  return () => {
    const {
      from: e,
      enter: l,
      leave: i,
      children: o,
      ...F
    } = n;
    let d = {}, s = {};
    const u = v();
    let r;
    if (u)
      r = n.children || c.default, t.state = n.state;
    else if (t.currentChildren == null && t.lastChildren == null)
      return console.log("transition: no children"), null;
    t.state === "enter" ? (d = e, s = l, u || (r = t.currentChildren)) : t.state === "leave" && (d = l, s = i, u || (r = t.lastChildren));
    const S = {
      ...F,
      onRest: C,
      onStart: y,
      from: d,
      to: s
    };
    return L(T, N(S, {
      force: !0
    }), {
      default: (w) => typeof r == "function" ? r(w) : R(r) ? r : null
    });
  };
}, {
  props: A,
  name: "Transition"
});
export {
  x as default,
  A as vuePropsType
};
//# sourceMappingURL=Transition.js.map
