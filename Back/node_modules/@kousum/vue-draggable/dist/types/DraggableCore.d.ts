import type { Ref } from "vue";
export declare type DraggableData = {
    node: HTMLElement;
    x: number;
    y: number;
    deltaX: number;
    deltaY: number;
    lastX: number;
    lastY: number;
};
export declare type DraggableEventHandler = (e: Event, data: DraggableData) => void | false;
export declare type ControlPosition = {
    x: number;
    y: number;
};
export declare type PositionOffsetControlPosition = {
    x: number | string;
    y: number | string;
};
export declare type DraggableCoreDefaultProps = {
    allowAnyClick: boolean;
    disabled: boolean;
    enableUserSelectHack: boolean;
    onStart: DraggableEventHandler;
    onDrag: DraggableEventHandler;
    onStop: DraggableEventHandler;
    onMouseDown: (e: MouseEvent) => void;
    scale: number;
};
export interface DraggableCoreProps extends DraggableCoreDefaultProps {
    cancel: string;
    children: any;
    offsetParent: HTMLElement;
    grid: [number, number];
    handle: string;
    nodeRef?: Ref;
}
export declare const defaultProps: DraggableCoreDefaultProps;
export declare const vuePropsType: any;
declare const DraggableCore: import("vue").DefineComponent<DraggableCoreProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<DraggableCoreProps>, {
    children: any;
}>;
export default DraggableCore;
