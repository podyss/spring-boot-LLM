import type { ControlPosition, PositionOffsetControlPosition, MouseTouchEvent } from "./types";
export declare function matchesSelector(el: Node, selector: string): boolean;
export declare function matchesSelectorAndParentsTo(el: Node, selector: string, baseNode: Node): boolean;
export declare function addEvent(el: Node, event: string, handler: EventListenerOrEventListenerObject | null, inputOptions?: Object): void;
export declare function removeEvent(el: Node, event: string, handler: EventListenerOrEventListenerObject | null, inputOptions?: Object): void;
export declare function outerHeight(node: HTMLElement): number;
export declare function outerWidth(node: HTMLElement): number;
export declare function innerHeight(node: HTMLElement): number;
export declare function innerWidth(node: HTMLElement): number;
interface EventWithOffset {
    clientX: number;
    clientY: number;
}
export declare function offsetXYFromParent(evt: EventWithOffset, offsetParent: HTMLElement, scale: number): ControlPosition;
export declare function createCSSTransform(controlPos: ControlPosition, positionOffset: PositionOffsetControlPosition): Object;
export declare function createSVGTransform(controlPos: ControlPosition, positionOffset: PositionOffsetControlPosition): string;
export declare function getTranslation({ x, y }: ControlPosition, positionOffset: PositionOffsetControlPosition, unitSuffix: string): string;
export declare function getTouch(e: MouseTouchEvent, identifier: number): {
    clientX: number;
    clientY: number;
};
export declare function getTouchIdentifier(e: MouseTouchEvent): number;
export declare function addUserSelectStyles(doc: Document): void;
export declare function removeUserSelectStyles(doc: Document): void;
export declare function addClassName(el: HTMLElement, className: string): void;
export declare function removeClassName(el: HTMLElement, className: string): void;
export {};
