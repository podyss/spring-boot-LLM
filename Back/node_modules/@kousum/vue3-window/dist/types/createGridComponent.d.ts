import { VNode } from 'vue';
export declare type CSSDirection = "ltr" | "rtl";
declare type Direction = 'ltr' | 'rtl';
export declare type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';
declare type itemSize = number | ((index: number) => number);
export declare type RenderComponent<T> = any;
export declare type ScrollDirection = 'forward' | 'backward';
declare type OnItemsRenderedCallback = (arg: {
    overscanColumnStartIndex: number;
    overscanColumnStopIndex: number;
    overscanRowStartIndex: number;
    overscanRowStopIndex: number;
    visibleColumnStartIndex: number;
    visibleColumnStopIndex: number;
    visibleRowStartIndex: number;
    visibleRowStopIndex: number;
}) => void;
declare type OnScrollCallback = (arg: {
    horizontalScrollDirection: ScrollDirection;
    scrollLeft: number;
    scrollTop: number;
    scrollUpdateWasRequested: boolean;
    verticalScrollDirection: ScrollDirection;
}) => void;
export declare type Props<T> = {
    children: RenderComponent<T>;
    className?: string;
    columnCount: number;
    columnWidth: itemSize;
    direction: Direction | CSSDirection;
    height: number;
    initialScrollLeft?: number;
    initialScrollTop?: number;
    innerRef?: any;
    innerElementType?: string | any;
    innerTagName?: string;
    itemData: T;
    itemKey?: (index: number, data: T) => any;
    onItemsRendered?: OnItemsRenderedCallback;
    onScroll?: OnScrollCallback;
    outerRef?: any;
    outerElementType?: string | any;
    outerTagName?: string;
    overscanColumnCount?: number;
    overscanColumnsCount?: number;
    overscanCount?: number;
    overscanRowCount?: number;
    overscanRowsCount?: number;
    rowCount: number;
    rowHeight: itemSize;
    style?: Object;
    useIsScrolling: boolean;
    width: number;
};
declare type getItemOffset = (props: Props<any>, index: number, instanceProps: any) => number;
declare type getItemSize = (props: Props<any>, index: number, instanceProps: any) => number;
declare type getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;
declare type GetOffsetForItemAndAlignment = (props: Props<any>, index: number, align: ScrollToAlign, scrollOffset: number, instanceProps: any, scrollbarSize: number) => number;
declare type GetStartIndexForOffset = (props: Props<any>, offset: number, instanceProps: any) => number;
declare type GetStopIndexForStartIndex = (props: Props<any>, startIndex: number, scrollOffset: number, instanceProps: any) => number;
declare type InitInstanceProps = (props: Props<any>, instance: any) => any;
declare type ValidateProps = (props: Props<any>) => void;
export default function createGridComponent({ getColumnOffset, getColumnStartIndexForOffset, getColumnStopIndexForStartIndex, getColumnWidth, getEstimatedTotalHeight, getEstimatedTotalWidth, getOffsetForColumnAndAlignment, getOffsetForRowAndAlignment, getRowHeight, getRowOffset, getRowStartIndexForOffset, getRowStopIndexForStartIndex, initInstanceProps, shouldResetStyleCacheOnItemSizeChange, validateProps, }: {
    getColumnOffset: getItemOffset;
    getColumnStartIndexForOffset: GetStartIndexForOffset;
    getColumnStopIndexForStartIndex: GetStopIndexForStartIndex;
    getColumnWidth: getItemSize;
    getEstimatedTotalHeight: getEstimatedTotalSize;
    getEstimatedTotalWidth: getEstimatedTotalSize;
    getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment;
    getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment;
    getRowOffset: getItemOffset;
    getRowHeight: getItemSize;
    getRowStartIndexForOffset: GetStartIndexForOffset;
    getRowStopIndexForStartIndex: GetStopIndexForStartIndex;
    initInstanceProps: InitInstanceProps;
    shouldResetStyleCacheOnItemSizeChange: boolean;
    validateProps: ValidateProps;
}): import("vue").DefineComponent<{
    className: StringConstructor;
    columnCount: NumberConstructor;
    rowCount: NumberConstructor;
    columnWidth: (NumberConstructor | FunctionConstructor)[];
    rowHeight: (NumberConstructor | FunctionConstructor)[];
    height: NumberConstructor;
    overscanColumnCount: NumberConstructor;
    overscanColumnsCount: NumberConstructor;
    overscanRowCount: NumberConstructor;
    overscanRowsCount: NumberConstructor;
    initialScrollOffset: NumberConstructor;
    innerRef: ObjectConstructor;
    initialScrollLeft: NumberConstructor;
    initialScrollTop: NumberConstructor;
    innerElementType: (ObjectConstructor | StringConstructor | FunctionConstructor)[];
    innerTagName: StringConstructor;
    itemCount: NumberConstructor;
    itemKey: FunctionConstructor;
    itemSize: (NumberConstructor | FunctionConstructor)[];
    onItemsRendered: FunctionConstructor;
    onScroll: FunctionConstructor;
    outerRef: (ObjectConstructor | FunctionConstructor)[];
    outerElementType: (ObjectConstructor | StringConstructor | FunctionConstructor)[];
    outerTagName: StringConstructor;
    style: ObjectConstructor[];
    width: (StringConstructor | NumberConstructor)[];
    direction: {
        type: StringConstructor;
        default: string;
    };
    itemData: {
        type: (ObjectConstructor | ArrayConstructor)[];
        default: any;
    };
    layout: {
        type: StringConstructor;
        default: string;
    };
    overscanCount: {
        type: NumberConstructor;
        default: number;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    className: StringConstructor;
    columnCount: NumberConstructor;
    rowCount: NumberConstructor;
    columnWidth: (NumberConstructor | FunctionConstructor)[];
    rowHeight: (NumberConstructor | FunctionConstructor)[];
    height: NumberConstructor;
    overscanColumnCount: NumberConstructor;
    overscanColumnsCount: NumberConstructor;
    overscanRowCount: NumberConstructor;
    overscanRowsCount: NumberConstructor;
    initialScrollOffset: NumberConstructor;
    innerRef: ObjectConstructor;
    initialScrollLeft: NumberConstructor;
    initialScrollTop: NumberConstructor;
    innerElementType: (ObjectConstructor | StringConstructor | FunctionConstructor)[];
    innerTagName: StringConstructor;
    itemCount: NumberConstructor;
    itemKey: FunctionConstructor;
    itemSize: (NumberConstructor | FunctionConstructor)[];
    onItemsRendered: FunctionConstructor;
    onScroll: FunctionConstructor;
    outerRef: (ObjectConstructor | FunctionConstructor)[];
    outerElementType: (ObjectConstructor | StringConstructor | FunctionConstructor)[];
    outerTagName: StringConstructor;
    style: ObjectConstructor[];
    width: (StringConstructor | NumberConstructor)[];
    direction: {
        type: StringConstructor;
        default: string;
    };
    itemData: {
        type: (ObjectConstructor | ArrayConstructor)[];
        default: any;
    };
    layout: {
        type: StringConstructor;
        default: string;
    };
    overscanCount: {
        type: NumberConstructor;
        default: number;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    layout: string;
    direction: string;
    itemData: unknown[] | Record<string, any>;
    overscanCount: number;
    useIsScrolling: boolean;
}>;
export {};
