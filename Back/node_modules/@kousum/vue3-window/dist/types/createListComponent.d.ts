import { VNode } from 'vue';
import { CSSDirection } from "./createGridComponent";
export declare type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';
declare type itemSize = number | ((index: number) => number);
declare type Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';
declare type Layout = 'horizontal' | 'vertical';
declare type RenderComponent<T> = any;
export declare type ScrollDirection = 'forward' | 'backward';
declare type onItemsRenderedCallback = ({ overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex, }: {
    overscanStartIndex: number;
    overscanStopIndex: number;
    visibleStartIndex: number;
    visibleStopIndex: number;
}) => void;
declare type onScrollCallback = ({ scrollDirection, scrollOffset, scrollUpdateWasRequested, }: {
    scrollDirection: ScrollDirection;
    scrollOffset: number;
    scrollUpdateWasRequested: boolean;
}) => void;
export declare type Props<T> = {
    children: RenderComponent<T>;
    className?: string;
    direction: Direction | CSSDirection;
    height: number | string;
    initialScrollOffset?: number;
    innerRef?: any;
    innerElementType?: string | any;
    innerTagName?: string;
    itemCount: number;
    itemData: T;
    itemKey?: (index: number, data: T) => any;
    itemSize: itemSize;
    layout: Layout;
    onItemsRendered?: onItemsRenderedCallback;
    onScroll?: onScrollCallback;
    outerRef?: any;
    outerElementType?: string | any;
    outerTagName?: string;
    overscanCount: number;
    style?: Object;
    useIsScrolling: boolean;
    width: number | string;
};
declare type GetItemOffset = (props: Props<any>, index: number, instanceProps: any) => number;
declare type GetItemSize = (props: Props<any>, index: number, instanceProps: any) => number;
declare type GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;
declare type GetOffsetForIndexAndAlignment = (props: Props<any>, index: number, align: ScrollToAlign, scrollOffset: number, instanceProps: any, scrollbarSize: number) => number;
declare type GetStartIndexForOffset = (props: Props<any>, offset: number, instanceProps: any) => number;
declare type GetStopIndexForStartIndex = (props: Props<any>, startIndex: number, scrollOffset: number, instanceProps: any) => number;
declare type InitInstanceProps = (props: Props<any>, instance: any) => any;
declare type ValidateProps = (props: Props<any>) => void;
export default function createListComponent({ getItemOffset, getEstimatedTotalSize, getItemSize, getOffsetForIndexAndAlignment, getStartIndexForOffset, getStopIndexForStartIndex, initInstanceProps, shouldResetStyleCacheOnItemSizeChange, validateProps, }: {
    getItemOffset: GetItemOffset;
    getEstimatedTotalSize: GetEstimatedTotalSize;
    getItemSize: GetItemSize;
    getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment;
    getStartIndexForOffset: GetStartIndexForOffset;
    getStopIndexForStartIndex: GetStopIndexForStartIndex;
    initInstanceProps: InitInstanceProps;
    shouldResetStyleCacheOnItemSizeChange: boolean;
    validateProps: ValidateProps;
}): import("vue").DefineComponent<{
    className: StringConstructor;
    height: NumberConstructor;
    initialScrollOffset: NumberConstructor;
    innerRef: ObjectConstructor;
    innerElementType: (ObjectConstructor | StringConstructor | FunctionConstructor)[];
    innerTagName: StringConstructor;
    itemCount: NumberConstructor;
    itemKey: FunctionConstructor;
    itemSize: (NumberConstructor | FunctionConstructor)[];
    onItemsRendered: FunctionConstructor;
    onScroll: FunctionConstructor;
    outerRef: (ObjectConstructor | FunctionConstructor)[];
    outerElementType: (ObjectConstructor | StringConstructor | FunctionConstructor)[];
    outerTagName: StringConstructor;
    style: ObjectConstructor[];
    width: (StringConstructor | NumberConstructor)[];
    direction: {
        type: StringConstructor;
        default: string;
    };
    itemData: {
        type: (ObjectConstructor | ArrayConstructor)[];
        default: any;
    };
    layout: {
        type: StringConstructor;
        default: string;
    };
    overscanCount: {
        type: NumberConstructor;
        default: number;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    className: StringConstructor;
    height: NumberConstructor;
    initialScrollOffset: NumberConstructor;
    innerRef: ObjectConstructor;
    innerElementType: (ObjectConstructor | StringConstructor | FunctionConstructor)[];
    innerTagName: StringConstructor;
    itemCount: NumberConstructor;
    itemKey: FunctionConstructor;
    itemSize: (NumberConstructor | FunctionConstructor)[];
    onItemsRendered: FunctionConstructor;
    onScroll: FunctionConstructor;
    outerRef: (ObjectConstructor | FunctionConstructor)[];
    outerElementType: (ObjectConstructor | StringConstructor | FunctionConstructor)[];
    outerTagName: StringConstructor;
    style: ObjectConstructor[];
    width: (StringConstructor | NumberConstructor)[];
    direction: {
        type: StringConstructor;
        default: string;
    };
    itemData: {
        type: (ObjectConstructor | ArrayConstructor)[];
        default: any;
    };
    layout: {
        type: StringConstructor;
        default: string;
    };
    overscanCount: {
        type: NumberConstructor;
        default: number;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    layout: string;
    direction: string;
    itemData: unknown[] | Record<string, any>;
    overscanCount: number;
    useIsScrolling: boolean;
}>;
export {};
