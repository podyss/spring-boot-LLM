import * as vue from 'vue';
import { ShallowRef } from 'vue';

/**
 * A hook that resolves to useEffect on the server and useLayoutEffect on the client
 * @param callback {function} Callback function that is invoked when the dependencies of the hook change
 */
declare const useIsomorphicLayoutEffect: typeof useEffect;
declare function useEffect<T>(call: () => void, sources: any[]): void;

declare function useConstant<T = any>(initializer: () => T): vue.ShallowRef<T | undefined, T | undefined>;

declare function useComputed<T = any>(compute: () => T, dependencies?: any[], sync?: () => boolean): vue.WritableComputedRef<any, any>;

declare function useImmediateEffect(callback: any, _?: any): void;

declare function useLatest<T>(value: T): ShallowRef<T | undefined>;

declare function useOnValueChange<T>(valueFn: () => T, onChange: (value: T, oldValue: T) => void, effect?: typeof useEffect, compare?: (value1: any, value2: any) => boolean, sources?: any[]): void;

export { useComputed, useConstant, useEffect, useImmediateEffect, useIsomorphicLayoutEffect, useLatest, useOnValueChange };
