import { Ref, ShallowRef, ComputedRef, PropType } from 'vue';

type RefOrValue<T> = T | Ref<T | null | undefined> | ShallowRef<T | null | undefined> | null | undefined;
declare function currentValue<T>(value: RefOrValue<T>): ComputedRef<NonNullable<T> | undefined>;

type IsOptional<T, K extends keyof T> = {} extends Pick<T, K> ? true : false;
type CombineProps<T> = {
    [K in keyof Required<T>]: IsOptional<T, K> extends true ? ({
        type: PropType<T[K]>;
        default?: any;
        required?: false;
    } | PropType<T[K]>) : ({
        type: PropType<T[K]>;
        default?: any;
        required: true;
    });
};

export { type CombineProps, type IsOptional, type RefOrValue, currentValue };
