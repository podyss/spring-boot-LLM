import * as vue_jsx_runtime from 'vue/jsx-runtime';
import * as vue from 'vue';
import { PropType, ShallowRef } from 'vue';
import { DragDropEvents, Data, DragDropManager as DragDropManager$1 } from '@dnd-kit/abstract';
import { Draggable, Droppable, DragDropManager, DragDropManagerInput, DraggableInput, DroppableInput } from '@dnd-kit/dom';
import { RefOrValue } from '@kousum/dnd-kit-vue/utilities';
import { CleanupFunction } from '@dnd-kit/state';

type Events = DragDropEvents<Draggable, Droppable, DragDropManager>;
interface Props extends DragDropManagerInput {
    manager?: DragDropManager;
    onBeforeDragStart?: Events['beforedragstart'];
    onCollision?: Events['collision'];
    onDragStart?: Events['dragstart'];
    onDragMove?: Events['dragmove'];
    onDragOver?: Events['dragover'];
    onDragEnd?: Events['dragend'];
}
declare const DragDropProvider: vue.DefineComponent<vue.ExtractPropTypes<{
    onCollision: PropType<Props["onCollision"]>;
    onBeforeDragStart: PropType<Props["onBeforeDragStart"]>;
    onDragStart: PropType<Props["onDragStart"]>;
    onDragMove: PropType<Props["onDragMove"]>;
    onDragOver: PropType<Props["onDragOver"]>;
    onDragEnd: PropType<Props["onDragEnd"]>;
    plugins: PropType<Props["plugins"]>;
    modifiers: PropType<Props["modifiers"]>;
    sensors: PropType<Props["sensors"]>;
    manager: PropType<Props["manager"]>;
    renderer: PropType<Props["manager"]>;
}>, () => vue_jsx_runtime.JSX.Element, {}, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.PublicProps, Readonly<vue.ExtractPropTypes<{
    onCollision: PropType<Props["onCollision"]>;
    onBeforeDragStart: PropType<Props["onBeforeDragStart"]>;
    onDragStart: PropType<Props["onDragStart"]>;
    onDragMove: PropType<Props["onDragMove"]>;
    onDragOver: PropType<Props["onDragOver"]>;
    onDragEnd: PropType<Props["onDragEnd"]>;
    plugins: PropType<Props["plugins"]>;
    modifiers: PropType<Props["modifiers"]>;
    sensors: PropType<Props["sensors"]>;
    manager: PropType<Props["manager"]>;
    renderer: PropType<Props["manager"]>;
}>> & Readonly<{}>, {}, {}, {}, {}, string, vue.ComponentProvideOptions, true, {}, any>;

interface UseDraggableInput<T extends Data = Data> extends Omit<DraggableInput<T>, 'handle' | 'element'> {
    handle?: RefOrValue<Element>;
    element?: RefOrValue<Element>;
}
declare function useDraggable<T extends Data = Data>(input: UseDraggableInput<T>): {
    draggable: vue.ShallowRef<Draggable<T>>;
    isDragSource: vue.WritableComputedRef<any, any>;
    status: vue.WritableComputedRef<any, any>;
    handleRef: (element: Element | null) => void;
    ref: (element: Element | null) => void;
};

interface UseDroppableInput<T extends Data = Data> extends Omit<DroppableInput<T>, 'element'> {
    element?: RefOrValue<Element>;
}
declare function useDroppable<T extends Data = Data>(input: UseDroppableInput<T>): {
    isDropTarget: vue.WritableComputedRef<any, any>;
    ref: (element: Element | null) => void;
    droppable: vue.ShallowRef<Droppable<T>>;
};

declare function useDragDropManager(): ShallowRef<DragDropManager>;

declare function useDragOperation(): {
    source: vue.WritableComputedRef<any, any>;
    target: vue.WritableComputedRef<any, any>;
};

interface Instance<T extends DragDropManager$1<any, any> = DragDropManager$1<any, any>> {
    manager: T | undefined;
    register(): CleanupFunction | void;
}
declare function useInstance<T extends Instance>(initializer: (manager: DragDropManager$1<any, any> | undefined) => T): ShallowRef<T>;

export { DragDropProvider, type Events, type UseDraggableInput, type UseDroppableInput, useDragDropManager, useDragOperation, useDraggable, useDroppable, useInstance };
