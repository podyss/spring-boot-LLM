{"version":3,"file":"index.js","sources":["../../src/components/descriptions/index.tsx"],"sourcesContent":["import cls from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { strings, cssClasses } from '@douyinfe/semi-foundation/descriptions/constants';\nimport '@douyinfe/semi-foundation/descriptions/descriptions.scss';\nimport getDataAttr from '@douyinfe/semi-foundation/utils/getDataAttr';\nimport { isPlainObject } from 'lodash';\nimport DescriptionsContext, {\n  DescriptionLayout,\n  DescriptionsAlign,\n  DescriptionsContextValue,\n} from './descriptions-context';\nimport Item from './item';\nimport { CSSProperties, defineComponent, Fragment, h, isVNode, PropType, useAttrs, useSlots, VNode } from 'vue';\nimport { vuePropsMake } from '../PropTypes';\nimport { CombineProps, VueJsxNode } from '../interface';\nimport { ComponentObjectPropsOptions } from 'vue';\nimport { useBaseComponent } from '../_base/baseComponent';\nimport DescriptionsFoundation, { DescriptionsAdapter } from '@douyinfe/semi-foundation/descriptions/foundation';\nimport { getFragmentChildren } from '../_utils';\n\nexport type { DescriptionsItemProps } from './item';\nexport type DescriptionsSize = 'small' | 'medium' | 'large';\nexport interface Data {\n  key?: VueJsxNode;\n  value?: (() => VueJsxNode) | VueJsxNode;\n  hidden?: boolean;\n  span?: number;\n}\nexport interface DescriptionsProps {\n  align?: DescriptionsAlign;\n  row?: boolean;\n  size?: DescriptionsSize;\n  style?: CSSProperties;\n  className?: string;\n  // children?: VNode[];\n  data?: Data[];\n  layout?: DescriptionLayout;\n  column?: number;\n}\n\nconst prefixCls = cssClasses.PREFIX;\n\nconst propTypes: CombineProps<DescriptionsProps> = {\n  align: PropTypes.string as PropType<DescriptionsProps['align']>,\n  row: PropTypes.bool,\n  size: PropTypes.string as PropType<DescriptionsProps['size']>,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  data: PropTypes.array,\n  layout: PropTypes.string as PropType<DescriptionsProps['layout']>,\n  column: PropTypes.number,\n};\n\nconst defaultProps = {\n  align: 'center',\n  row: false,\n  size: 'medium',\n  data: [] as Array<Data>,\n  layout: 'vertical',\n  column: 3,\n};\nexport const vuePropsType = vuePropsMake<DescriptionsProps>(propTypes, defaultProps);\nconst Descriptions = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Descriptions',\n  setup(props, {}) {\n    const slots = useSlots();\n    const attr = useAttrs();\n\n    const { adapter: adapterInject } = useBaseComponent<DescriptionsProps>(props, {});\n    function adapter_(): DescriptionsAdapter<DescriptionsProps> {\n      return {\n        ...adapterInject(),\n        getColumns: () => {\n          if (props.data?.length) {\n            return props.data;\n          }\n          const children = getFragmentChildren(slots);\n          if (children) {\n            return children.map((item) => {\n              return isVNode(item)\n                ? {\n                    //@ts-ignore\n                    value: item.children.default?.(),\n                    ...item.props,\n                  }\n                : [];\n            });\n          }\n          return [];\n        },\n      };\n    }\n    const adapter = adapter_();\n    const foundation = new DescriptionsFoundation<DescriptionsProps>(adapter);\n\n    // 当一行里面的列数没有达到maxColumnPerLine，就让最后一列填满剩余的\n    function _rowFillRemainder(itemRow: any) {\n      const { column: maxColumnPerLine } = adapter.getProps();\n      if (itemRow.length === 0) {\n        return;\n      }\n      const lastSpan = itemRow[itemRow.length - 1];\n      // 如果用户设置了span就跳过\n      if (lastSpan.span && !isNaN(lastSpan.span)) {\n        return;\n      }\n\n      let total = 0;\n      itemRow.forEach((item: { span: number }) => {\n        return (total += !isNaN(item.span) ? item.span : 1);\n      });\n\n      if (total < maxColumnPerLine) {\n        lastSpan.span = maxColumnPerLine - total + 1;\n      }\n    }\n\n    function getHorizontalList() {\n      const { column: maxColumnPerLine } = adapter.getProps();\n      const columns = adapter.getColumns();\n      const horizontalList = [];\n      const curRow = { totalSpan: 0, itemList: [] };\n      columns.forEach((item, index) => {\n        let itemSpan = item.span || 1;\n        let restSpan = maxColumnPerLine - curRow.totalSpan;\n        if (itemSpan <= restSpan) {\n          curRow.itemList.push(item);\n          curRow.totalSpan = curRow.totalSpan + itemSpan;\n        } else {\n          // 剩余空间放不下当前item，需要另起一行\n          // 若新行放不下当前item，极端情况，例如用户给当前span数值远大于 maxColumnPerLine，即使另起新行都无法放得下，itemSpan直接按props.column处理\n          itemSpan > maxColumnPerLine ? (itemSpan = maxColumnPerLine) : null;\n          // 新行能放得下当前item，将原有行push到horizontalList中，然后重置curRow，将当前item存到curRow中\n          _rowFillRemainder(curRow.itemList);\n          horizontalList.push(curRow.itemList);\n          curRow.totalSpan = itemSpan;\n          curRow.itemList = [item];\n        }\n        if (index === columns.length - 1) {\n          _rowFillRemainder(curRow.itemList);\n          horizontalList.push(curRow.itemList);\n        }\n      });\n\n      return horizontalList;\n    }\n    const renderChildrenList = () => {\n      const children = getFragmentChildren(slots);\n\n      const { layout, data } = props;\n      if (layout === 'horizontal') {\n        const horizontalList: Data[][] = getHorizontalList();\n        return horizontalList.map((row, index) => {\n          return (\n            <tr key={index}>\n              {row.map((item, itemIndex) =>\n                isPlainObject(item) ? (\n                  <Item itemKey={item.key} {...item} key={index + '-' + itemIndex}>\n                    {item.value}\n                  </Item>\n                ) : null\n              )}\n            </tr>\n          );\n        });\n      } else {\n        return data && data.length\n          ? data.map((item, index) =>\n              isPlainObject(item) ? (\n                <Item itemKey={item.key} {...item} key={index}>\n                  {item.value}\n                </Item>\n              ) : null\n            )\n          : children;\n      }\n    };\n\n    return () => {\n      const { align, row, size, className, style, data, layout, ...rest } = props;\n      const classNames = cls(prefixCls, className, {\n        [`${prefixCls}-${align}`]: !row,\n        [`${prefixCls}-double`]: row,\n        [`${prefixCls}-double-${size}`]: row,\n        [`${prefixCls}-horizontal`]: layout === 'horizontal',\n        [`${prefixCls}-vertical`]: layout === 'vertical',\n      });\n      return (\n        <div class={classNames} style={style} {...getDataAttr({ ...rest, ...attr })}>\n          <table>\n            <tbody>\n              <DescriptionsContext.Provider value={{ align, layout }}>\n                {renderChildrenList()}\n              </DescriptionsContext.Provider>\n            </tbody>\n          </table>\n        </div>\n      );\n    };\n  },\n});\n\nexport default Descriptions;\nexport { Item as DescriptionsItem };\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefixCls","cssClasses","PREFIX","propTypes","align","PropTypes","string","row","bool","size","style","object","className","data","array","layout","column","number","defaultProps","vuePropsType","vuePropsMake","Descriptions","defineComponent","props","name","setup","slots","useSlots","attr","useAttrs","adapter","adapterInject","useBaseComponent","adapter_","getColumns","length","children","getFragmentChildren","map","item","isVNode","value","default","DescriptionsFoundation","_rowFillRemainder","itemRow","maxColumnPerLine","getProps","lastSpan","span","isNaN","total","forEach","getHorizontalList","columns","horizontalList","curRow","totalSpan","itemList","index","itemSpan","restSpan","push","renderChildrenList","_createVNode","itemIndex","isPlainObject","Item","_mergeProps","key","_slot","rest","classNames","cls","getDataAttr","DescriptionsContext","Provider"],"mappings":"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"}