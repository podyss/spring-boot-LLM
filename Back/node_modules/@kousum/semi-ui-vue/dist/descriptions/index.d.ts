import '@douyinfe/semi-foundation/lib/es/descriptions/descriptions.css';
import { DescriptionLayout, DescriptionsAlign } from './descriptions-context';
import Item from './item';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export type { DescriptionsItemProps } from './item';
export type DescriptionsSize = 'small' | 'medium' | 'large';
export interface Data {
    key?: VueJsxNode;
    value?: (() => VueJsxNode) | VueJsxNode;
    hidden?: boolean;
    span?: number;
}
export interface DescriptionsProps {
    align?: DescriptionsAlign;
    row?: boolean;
    size?: DescriptionsSize;
    style?: CSSProperties;
    className?: string;
    data?: Data[];
    layout?: DescriptionLayout;
    column?: number;
}
export declare const vuePropsType: CombineProps<DescriptionsProps>;
declare const Descriptions: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    align: PropType<DescriptionsAlign> | {
        type: PropType<DescriptionsAlign>;
        default?: any;
        required?: false;
    };
    row: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<DescriptionsSize> | {
        type: PropType<DescriptionsSize>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    data: PropType<Data[]> | {
        type: PropType<Data[]>;
        default?: any;
        required?: false;
    };
    layout: PropType<DescriptionLayout> | {
        type: PropType<DescriptionLayout>;
        default?: any;
        required?: false;
    };
    column: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    align: PropType<DescriptionsAlign> | {
        type: PropType<DescriptionsAlign>;
        default?: any;
        required?: false;
    };
    row: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<DescriptionsSize> | {
        type: PropType<DescriptionsSize>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    data: PropType<Data[]> | {
        type: PropType<Data[]>;
        default?: any;
        required?: false;
    };
    layout: PropType<DescriptionLayout> | {
        type: PropType<DescriptionLayout>;
        default?: any;
        required?: false;
    };
    column: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Descriptions;
export { Item as DescriptionsItem };
