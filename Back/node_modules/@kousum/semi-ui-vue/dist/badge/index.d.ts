import '@douyinfe/semi-foundation/lib/es/badge/badge.css';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export type BadgeType = 'primary' | 'secondary' | 'tertiary' | 'danger' | 'warning' | 'success';
export type BadgeTheme = 'solid' | 'light' | 'inverted';
export type BadgePosition = 'leftTop' | 'leftBottom' | 'rightTop' | 'rightBottom';
export interface BadgeProps {
    count?: VueJsxNode;
    dot?: boolean;
    type?: BadgeType;
    theme?: BadgeTheme;
    position?: BadgePosition;
    overflowCount?: number;
    style?: CSSProperties;
    className?: string;
    onMouseEnter?: (e: MouseEvent) => any;
    onMouseLeave?: (e: MouseEvent) => any;
    onClick?: (e: MouseEvent) => any;
    countClassName?: string;
    countStyle?: CSSProperties;
}
export declare const vuePropsType: CombineProps<BadgeProps>;
declare const Badge: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    count: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dot: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: PropType<BadgeType> | {
        type: PropType<BadgeType>;
        default?: any;
        required?: false;
    };
    theme: PropType<BadgeTheme> | {
        type: PropType<BadgeTheme>;
        default?: any;
        required?: false;
    };
    position: PropType<BadgePosition> | {
        type: PropType<BadgePosition>;
        default?: any;
        required?: false;
    };
    overflowCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    countClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    countStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    count: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dot: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: PropType<BadgeType> | {
        type: PropType<BadgeType>;
        default?: any;
        required?: false;
    };
    theme: PropType<BadgeTheme> | {
        type: PropType<BadgeTheme>;
        default?: any;
        required?: false;
    };
    position: PropType<BadgePosition> | {
        type: PropType<BadgePosition>;
        default?: any;
        required?: false;
    };
    overflowCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    countClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    countStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Badge;
