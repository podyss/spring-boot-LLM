import { CSSProperties, VNode, PropType } from 'vue';
import { CombineProps } from '../interface';
export type Direction = 'horizontal' | 'vertical';
export type Status = 'wait' | 'process' | 'finish' | 'error' | 'warning';
export type Size = 'default' | 'small';
export interface BasicStepsProps {
    prefixCls?: string;
    className?: string;
    direction?: Direction;
    current?: number;
    initial?: number;
    status?: Status;
    style?: CSSProperties;
    size?: Size;
    hasLine?: boolean;
    children?: VNode[];
    onChange?: (current: number) => void;
    'aria-label'?: string;
}
export declare const vuePropsType: CombineProps<BasicStepsProps>;
declare const Steps: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<Direction> | {
        type: PropType<Direction>;
        default?: any;
        required?: false;
    };
    current: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    initial: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    status: PropType<Status> | {
        type: PropType<Status>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    size: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    hasLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(current: number) => void> | {
        type: PropType<(current: number) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<Direction> | {
        type: PropType<Direction>;
        default?: any;
        required?: false;
    };
    current: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    initial: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    status: PropType<Status> | {
        type: PropType<Status>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    size: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    hasLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(current: number) => void> | {
        type: PropType<(current: number) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Steps;
