import { CombineProps, VueJsxNode } from '../interface';
import { CSSProperties, PropType } from 'vue';
import { AriaAttributes } from '../AriaAttributes';
import { Direction } from './fillSteps';
export type Status = 'wait' | 'process' | 'finish' | 'error' | 'warning';
export interface FillStepProps {
    description?: VueJsxNode;
    icon?: VueJsxNode;
    status?: Status;
    title?: VueJsxNode;
    className?: string;
    style?: CSSProperties;
    prefixCls?: string;
    stepNumber?: string;
    onChange?: () => void;
    onClick?: any;
    onKeyDown?: any;
    role?: string;
    'aria-label'?: AriaAttributes['aria-label'];
    direction?: Direction;
}
export declare const vuePropsType: CombineProps<FillStepProps>;
declare const FillStep: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    description: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    status: PropType<Status> | {
        type: PropType<Status>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    stepNumber: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<Direction> | {
        type: PropType<Direction>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    description: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    status: PropType<Status> | {
        type: PropType<Status>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    stepNumber: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<Direction> | {
        type: PropType<Direction>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default FillStep;
