import '@douyinfe/semi-foundation/lib/es/steps/steps.css';
import Step from './step';
import { FillStepsProps } from './fillSteps';
import { BasicStepsProps } from './basicSteps';
import { NavStepsProps } from './navSteps';
import { VNode, PropType } from 'vue';
import { CombineProps } from '../interface';
export type { Status, Size, BasicStepProps } from './basicStep';
export type { Direction, BasicStepsProps } from './basicSteps';
export type { FillStepProps } from './fillStep';
export type { FillStepsProps } from './fillSteps';
export type { NavStepProps } from './navStep';
export type { NavStepsProps } from './navSteps';
export type { StepProps } from './step';
export interface FillStepsAllProps extends FillStepsProps {
    type?: 'fill';
}
export interface BasicStepsAllProps extends BasicStepsProps {
    type?: 'basic';
}
export interface NavStepsAllProps extends NavStepsProps {
    type?: 'nav';
}
export type StepsProps = FillStepsAllProps | BasicStepsAllProps | NavStepsAllProps;
export declare const vuePropsType: CombineProps<StepsProps>;
declare const Steps: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    type: PropType<"fill"> | {
        type: PropType<"fill">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    current: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./fillSteps").Direction> | {
        type: PropType<import("./fillSteps").Direction>;
        default?: any;
        required?: false;
    };
    initial: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    status: PropType<import("./fillSteps").Status> | {
        type: PropType<import("./fillSteps").Status>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(current: number) => void> | {
        type: PropType<(current: number) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./fillSteps").Size> | {
        type: PropType<import("./fillSteps").Size>;
        default?: any;
        required?: false;
    };
} | {
    type: PropType<"basic"> | {
        type: PropType<"basic">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./basicSteps").Direction> | {
        type: PropType<import("./basicSteps").Direction>;
        default?: any;
        required?: false;
    };
    current: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    initial: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    status: PropType<import("./basicSteps").Status> | {
        type: PropType<import("./basicSteps").Status>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./basicSteps").Size> | {
        type: PropType<import("./basicSteps").Size>;
        default?: any;
        required?: false;
    };
    hasLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(current: number) => void> | {
        type: PropType<(current: number) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
} | {
    type: PropType<"nav"> | {
        type: PropType<"nav">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./basicSteps").Direction> | {
        type: PropType<import("./basicSteps").Direction>;
        default?: any;
        required?: false;
    };
    current: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    initial: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./navSteps").Size> | {
        type: PropType<import("./navSteps").Size>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(current: number) => void> | {
        type: PropType<(current: number) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    status: PropType<import("./basicSteps").Status> | {
        type: PropType<import("./basicSteps").Status>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: PropType<"fill"> | {
        type: PropType<"fill">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    current: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./fillSteps").Direction> | {
        type: PropType<import("./fillSteps").Direction>;
        default?: any;
        required?: false;
    };
    initial: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    status: PropType<import("./fillSteps").Status> | {
        type: PropType<import("./fillSteps").Status>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(current: number) => void> | {
        type: PropType<(current: number) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./fillSteps").Size> | {
        type: PropType<import("./fillSteps").Size>;
        default?: any;
        required?: false;
    };
} | {
    type: PropType<"basic"> | {
        type: PropType<"basic">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./basicSteps").Direction> | {
        type: PropType<import("./basicSteps").Direction>;
        default?: any;
        required?: false;
    };
    current: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    initial: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    status: PropType<import("./basicSteps").Status> | {
        type: PropType<import("./basicSteps").Status>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./basicSteps").Size> | {
        type: PropType<import("./basicSteps").Size>;
        default?: any;
        required?: false;
    };
    hasLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(current: number) => void> | {
        type: PropType<(current: number) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
} | {
    type: PropType<"nav"> | {
        type: PropType<"nav">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./basicSteps").Direction> | {
        type: PropType<import("./basicSteps").Direction>;
        default?: any;
        required?: false;
    };
    current: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    initial: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./navSteps").Size> | {
        type: PropType<import("./navSteps").Size>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(current: number) => void> | {
        type: PropType<(current: number) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    status: PropType<import("./basicSteps").Status> | {
        type: PropType<import("./basicSteps").Status>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {} | {} | {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export type StepsType = typeof Steps & {
    Step: typeof Step;
};
declare const BaseSteps: StepsType;
export { Step as StepsStep };
export default BaseSteps;
