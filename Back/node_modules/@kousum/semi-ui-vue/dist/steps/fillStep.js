import { defineComponent as C, useSlots as w, createVNode as n } from "vue";
import { noop as I } from "lodash";
import * as s from "../PropTypes";
import { vuePropsMake as N } from "../PropTypes";
import d from "classnames";
import { stepsClasses as P } from '@douyinfe/semi-foundation/lib/es/steps/constants';
import { IconAlertTriangle as T, IconTickCircle as h, IconAlertCircle as z } from "@kousum/semi-icons-vue";
import { useHasInProps as B } from "../_base/baseComponent";
const S = {
  prefixCls: s.string,
  description: s.node,
  icon: s.node,
  status: s.string,
  title: s.node,
  className: s.string,
  style: s.object,
  onClick: s.func,
  onChange: s.func,
  direction: s.string,
  stepNumber: s.string,
  onKeyDown: s.func,
  role: s.string,
  "aria-label": s.string
}, A = {
  prefixCls: P.ITEM,
  status: "wait",
  className: "",
  onChange: I
}, E = N(S, A), q = /* @__PURE__ */ C({
  props: {
    ...E
  },
  name: "FillStep",
  setup(i, {}) {
    const {
      getProps: a
    } = B();
    return w(), () => {
      const {
        prefixCls: t,
        className: $,
        title: c,
        description: p,
        status: l,
        style: g,
        onClick: o,
        icon: b,
        onChange: r,
        stepNumber: f,
        onKeyDown: u
      } = i, k = () => {
        let e, m;
        if ("icon" in a(i))
          e = b;
        else if ("status" in a(i))
          switch (l) {
            case "error":
              e = n(z, {
                size: "extra-large"
              }, null);
              break;
            case "wait":
              e = f;
              break;
            case "process":
              e = f, m = !0;
              break;
            case "finish":
              e = n(h, {
                size: "extra-large"
              }, null);
              break;
            case "warning":
              e = n(T, {
                size: "extra-large"
              }, null);
              break;
            default:
              e = null;
              break;
          }
        const x = d({
          [`${t}-left`]: !0,
          [`${t}-icon`]: "icon" in a(i),
          [`${t}-plain`]: !("icon" in a(i)),
          [`${t}-icon-process`]: m,
          [`${t}-hover`]: r || o
        });
        return e ? n("div", {
          class: x
        }, [e]) : null;
      }, y = (e) => {
        o == null || o(e), r == null || r();
      }, v = (e) => {
        e.key === "Enter" && (u == null || u(e), r == null || r());
      };
      return n("div", {
        role: i.role,
        "aria-label": i["aria-label"],
        "aria-current": "step",
        tabindex: 0,
        class: d({
          [t]: !0,
          [`${t}-${l}`]: !!l,
          [`${t}-${l}-hover`]: !!l && (r || o),
          [`${t}-${l}-active`]: !!l && (r || o),
          [`${t}-clickable`]: r || o
        }, $),
        style: g,
        onClick: (e) => {
          y(e);
        },
        onKeydown: v
      }, [k(), n("div", {
        class: `${t}-content`
      }, [n("div", {
        class: `${t}-title`,
        title: typeof c == "string" ? c : null
      }, [n("span", {
        class: `${t}-title-text`
      }, [c])]), n("div", {
        class: `${t}-description`,
        title: typeof p == "string" ? p : null
      }, [p])])]);
    };
  }
});
export {
  q as default,
  E as vuePropsType
};
//# sourceMappingURL=fillStep.js.map
