import { defineComponent as h, useSlots as I, createVNode as n, isVNode as z } from "vue";
import { noop as A } from "lodash";
import * as s from "../PropTypes";
import { vuePropsMake as B } from "../PropTypes";
import $ from "classnames";
import { stepsClasses as E } from '@douyinfe/semi-foundation/lib/es/steps/constants';
import { IconAlertTriangle as K, IconTickCircle as S, IconAlertCircle as V } from "@kousum/semi-icons-vue";
import { useHasInProps as j } from "../_base/baseComponent";
let d = /* @__PURE__ */ function(i) {
  return i.small = "large", i.default = "extra-large", i;
}({});
const D = {
  prefixCls: s.string,
  description: s.node,
  icon: s.node,
  status: s.string,
  title: s.node,
  className: s.string,
  style: s.object,
  onClick: s.func,
  active: s.bool,
  done: s.bool,
  direction: s.string,
  // children: PropTypes.node as PropType<BasicStepProps['children']>,
  onChange: s.func,
  stepNumber: [s.number, s.string],
  size: s.string,
  onKeyDown: s.func,
  role: s.string,
  "aria-label": s.string
}, H = {
  prefixCls: E.ITEM,
  active: !1,
  done: !1,
  status: "wait",
  className: "",
  size: "default",
  onChange: A
}, M = B(D, H), R = /* @__PURE__ */ h({
  props: {
    ...M
  },
  name: "BasicStep",
  setup(i, {}) {
    const {
      getProps: a
    } = j();
    return I(), () => {
      const {
        prefixCls: e,
        className: v,
        size: l,
        title: g,
        description: f,
        status: c,
        style: k,
        active: C,
        done: y,
        icon: m,
        stepNumber: p,
        onClick: o,
        onChange: r,
        onKeyDown: u
      } = i, x = () => {
        let t, b;
        if ("icon" in a(i))
          z(m) && (t = m);
        else if ("status" in a(i))
          switch (c) {
            case "error":
              t = n(V, {
                size: d[l]
              }, null);
              break;
            case "wait":
              t = n("span", {
                class: `${e}-number-icon`
              }, [p]);
              break;
            case "process":
              t = n("span", {
                class: `${e}-number-icon`
              }, [p]), b = !0;
              break;
            case "finish":
              t = n(S, {
                size: d[l]
              }, null);
              break;
            case "warning":
              t = n(K, {
                size: d[l]
              }, null);
              break;
            default:
              t = null;
              break;
          }
        const T = $({
          [`${e}-icon`]: !0,
          [`${e}-custom-icon`]: "icon" in a(i),
          [`${e}-icon-process`]: b
        });
        return t ? n("span", {
          class: T
        }, [t]) : null;
      }, N = $(e, `${e}-${c}`, {
        [`${e}-active`]: C,
        [`${e}-done`]: y,
        [`${e}-hover`]: r || i.onClick,
        [`${e}-clickable`]: r || o,
        [`${e}-${c}-hover`]: r || i.onClick
      }, v), w = (t) => {
        o == null || o(t), r == null || r();
      }, P = (t) => {
        t.key === "Enter" && (u == null || u(t), r == null || r());
      };
      return n("div", {
        role: i.role,
        "aria-label": i["aria-label"],
        tabindex: 0,
        "aria-current": "step",
        class: N,
        style: k,
        onClick: (t) => w(t),
        onKeydown: P
      }, [n("div", {
        class: `${e}-container`
      }, [n("div", {
        class: `${e}-left`
      }, [x()]), n("div", {
        class: `${e}-content`
      }, [n("div", {
        class: `${e}-title`
      }, [n("div", {
        class: `${e}-title-text`
      }, [g])]), f && n("div", {
        class: `${e}-description`
      }, [f])])])]);
    };
  }
});
export {
  R as default,
  d as stepSizeMapIconSize,
  M as vuePropsType
};
//# sourceMappingURL=basicStep.js.map
