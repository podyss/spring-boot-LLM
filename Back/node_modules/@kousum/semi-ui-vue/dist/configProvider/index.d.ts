import { PropType } from 'vue';
import type { ContextValue } from './context';
import { CombineProps } from '../interface';
export declare const ConfigConsumer: import("vue").DefineComponent<{}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export interface ConfigProviderProps extends ContextValue {
}
export declare const vuePropsType: CombineProps<ConfigProviderProps>;
declare const ConfigProvider: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    direction: PropType<"ltr" | "rtl"> | {
        type: PropType<"ltr" | "rtl">;
        default?: any;
        required?: false;
    };
    timeZone: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    locale: PropType<import("../locale/interface").Locale> | {
        type: PropType<import("../locale/interface").Locale>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    direction: PropType<"ltr" | "rtl"> | {
        type: PropType<"ltr" | "rtl">;
        default?: any;
        required?: false;
    };
    timeZone: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    locale: PropType<import("../locale/interface").Locale> | {
        type: PropType<import("../locale/interface").Locale>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ConfigProvider;
