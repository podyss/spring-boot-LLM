import { BaseProps } from '../_base/baseComponent';
import { PropType } from 'vue';
import { CombineProps } from '../interface';
/** A parallel type to `ResizeObserverEntry` (from resize-observer-polyfill). */
export interface ResizeEntry {
    contentRect: DOMRectReadOnly;
    target: Element;
}
export interface ReactResizeObserverProps extends BaseProps {
    onResize?: (entries: ResizeEntry[]) => void;
    observeParent?: boolean;
    observerProperty?: ObserverProperty;
    delayTick?: number;
}
export declare enum ObserverProperty {
    Width = "width",
    Height = "height",
    All = "all"
}
export declare const vuePropsType: CombineProps<ReactResizeObserverProps>;
declare const ReactResizeObserver: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    onResize: PropType<(entries: ResizeEntry[]) => void> | {
        type: PropType<(entries: ResizeEntry[]) => void>;
        default?: any;
        required?: false;
    };
    observeParent: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    observerProperty: PropType<ObserverProperty> | {
        type: PropType<ObserverProperty>;
        default?: any;
        required?: false;
    };
    delayTick: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    onResize: PropType<(entries: ResizeEntry[]) => void> | {
        type: PropType<(entries: ResizeEntry[]) => void>;
        default?: any;
        required?: false;
    };
    observeParent: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    observerProperty: PropType<ObserverProperty> | {
        type: PropType<ObserverProperty>;
        default?: any;
        required?: false;
    };
    delayTick: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ReactResizeObserver;
