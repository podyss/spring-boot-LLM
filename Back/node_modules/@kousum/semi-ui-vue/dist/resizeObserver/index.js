import * as i from "../PropTypes";
import { vuePropsMake as g } from "../PropTypes";
import { defineComponent as h, useSlots as y, onMounted as P, watch as z, onBeforeUnmount as w, cloneVNode as N } from "vue";
let T = /* @__PURE__ */ function(n) {
  return n.Width = "width", n.Height = "height", n.All = "all", n;
}({});
const E = {
  onResize: i.func,
  observeParent: i.bool,
  observerProperty: i.string,
  delayTick: i.number,
  style: i.object,
  className: i.string
}, O = {
  onResize: () => {
  },
  // eslint-disable-line
  observeParent: !1,
  observerProperty: "all",
  delayTick: 0
}, p = g(E, O), k = /* @__PURE__ */ h({
  props: {
    ...p
  },
  name: "ReactResizeObserver",
  setup(n, {}) {
    const a = y();
    let r;
    globalThis.ResizeObserver && (r = new ResizeObserver(d));
    let u, f, b, c = /* @__PURE__ */ new Map();
    P(() => {
      globalThis.ResizeObserver && m();
    }), z(() => n.observeParent, (t, e) => {
      globalThis.ResizeObserver && m(t !== e);
    }), w(() => {
      r && (r.disconnect(), r = null, f = null);
    });
    const v = () => {
      try {
        return u;
      } catch {
        return null;
      }
    };
    function d(t) {
      var e, l;
      if (n.observerProperty === T.All)
        (e = n.onResize) == null || e.call(n, t);
      else {
        const s = [];
        for (const o of t)
          c.has(o.target) ? o.contentRect[n.observerProperty] !== c.get(o.target) && (c.set(o.target, o.contentRect[n.observerProperty]), s.push(o)) : (c.set(o.target, o.contentRect[n.observerProperty]), s.push(o));
        s.length > 0 && ((l = n.onResize) == null || l.call(n, s));
      }
    }
    function m(t = !1) {
      const e = v();
      if (r || (r = new ResizeObserver(d)), !(e && e instanceof Element)) {
        r.disconnect();
        return;
      }
      e === f && !t || (r.disconnect(), f = e, r.observe(e), n.observeParent && e.parentNode && e.parentNode.ownerDocument && e.parentNode.ownerDocument.defaultView && e.parentNode instanceof e.parentNode.ownerDocument.defaultView.HTMLElement && (b = e.parentNode, r.observe(b)));
    }
    const R = (t, e) => {
      u = e, typeof t == "function" ? t(e) : typeof t == "object" && t && "current" in t && (t.current = e);
    };
    return () => {
      var l;
      const t = (l = a.default) == null ? void 0 : l.call(a), {
        ref: e
      } = t == null ? void 0 : t[0];
      return N(t[0], {
        ref: (s) => R(e == null ? void 0 : e.r, s)
      });
    };
  }
});
export {
  T as ObserverProperty,
  k as default,
  p as vuePropsType
};
//# sourceMappingURL=index.js.map
