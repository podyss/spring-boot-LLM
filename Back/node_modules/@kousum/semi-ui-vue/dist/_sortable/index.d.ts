import { PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
import { UniqueIdentifier } from '@dnd-kit/abstract';
import { type Events } from '@kousum/dnd-kit-vue';
import { type CollisionDetector } from '@dnd-kit/collision';
export type OnSortEnd = (event: Parameters<Events['dragend']>[0]) => void;
export interface RenderItemProps {
    id?: string | number;
    sortableHandle?: any;
    [x: string]: any;
}
export interface SortableProps {
    collisionDetector?: CollisionDetector;
    onSortEnd?: OnSortEnd;
    modifiers?: any[];
    items?: any[];
    renderItem?: (props: RenderItemProps) => VueJsxNode;
    useDragOverlay?: boolean;
    container?: any;
    adjustScale?: boolean;
    prefix?: string;
    dragOverlayCls?: string;
}
interface SortableItemProps {
    collisionDetector?: CollisionDetector;
    id: UniqueIdentifier;
    index: number;
    useDragOverlay?: boolean;
    renderItem?: (props: RenderItemProps) => VueJsxNode;
    prefix?: string;
    dragOverlayCls?: string;
}
export declare const propTypesSortable: CombineProps<SortableProps>;
declare const Sortable: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    collisionDetector: PropType<CollisionDetector> | {
        type: PropType<CollisionDetector>;
        default?: any;
        required?: false;
    };
    onSortEnd: PropType<OnSortEnd> | {
        type: PropType<OnSortEnd>;
        default?: any;
        required?: false;
    };
    modifiers: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    items: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(props: RenderItemProps) => VueJsxNode> | {
        type: PropType<(props: RenderItemProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    useDragOverlay: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    container: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    adjustScale: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefix: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    dragOverlayCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    collisionDetector: PropType<CollisionDetector> | {
        type: PropType<CollisionDetector>;
        default?: any;
        required?: false;
    };
    onSortEnd: PropType<OnSortEnd> | {
        type: PropType<OnSortEnd>;
        default?: any;
        required?: false;
    };
    modifiers: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    items: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(props: RenderItemProps) => VueJsxNode> | {
        type: PropType<(props: RenderItemProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    useDragOverlay: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    container: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    adjustScale: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefix: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    dragOverlayCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export declare const vuePropsType: CombineProps<SortableItemProps>;
declare const SortableItem: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    collisionDetector: PropType<CollisionDetector> | {
        type: PropType<CollisionDetector>;
        default?: any;
        required?: false;
    };
    id: {
        type: PropType<UniqueIdentifier>;
        default?: any;
        required: true;
    };
    index: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    useDragOverlay: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(props: RenderItemProps) => VueJsxNode> | {
        type: PropType<(props: RenderItemProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    dragOverlayCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    collisionDetector: PropType<CollisionDetector> | {
        type: PropType<CollisionDetector>;
        default?: any;
        required?: false;
    };
    id: {
        type: PropType<UniqueIdentifier>;
        default?: any;
        required: true;
    };
    index: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    useDragOverlay: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(props: RenderItemProps) => VueJsxNode> | {
        type: PropType<(props: RenderItemProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    dragOverlayCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export { Sortable, SortableItem };
