{"version":3,"file":"index.js","sources":["../../src/components/_sortable/index.tsx"],"sourcesContent":["import cls from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { isNull } from 'lodash';\nimport { computed, defineComponent, h, PropType, ref, shallowRef, useSlots, VNode, watch } from 'vue';\nimport { CombineProps, VueJsxNode } from '../interface';\nimport { vuePropsMake } from '../PropTypes';\nimport { UniqueIdentifier } from '@dnd-kit/abstract';\nimport { DragDropProvider, type Events } from '@kousum/dnd-kit-vue';\nimport { useSortable } from '@kousum/dnd-kit-vue/sortable';\nimport { type CollisionDetector, pointerIntersection } from '@dnd-kit/collision';\n\nconst defaultPrefix = 'semi-sortable';\n\ninterface OnSortEndProps {\n    oldIndex: number;\n    newIndex: number\n}\nexport type OnSortEnd = (event: Parameters<Events['dragend']>[0]) => void;\n\nexport interface RenderItemProps {\n    id?: string | number;\n    sortableHandle?: any;\n    [x: string]: any\n}\nexport interface SortableProps {\n    collisionDetector?: CollisionDetector\n    onSortEnd?: OnSortEnd;\n    // Set drag and drop trigger conditions\n    modifiers?: any[];\n    // the dragged items，The content in items cannot be the number 0\n    items?: any[];\n    // Function that renders the item that is allowed to be dragged\n    renderItem?: (props: RenderItemProps) => VueJsxNode;\n    // Whether to use a separate drag layer for items that move with the mouse\n    useDragOverlay?: boolean;\n    // A container for all elements that are allowed to be dragged\n    container?: any;\n    // Whether to change the size of the item being dragged\n    adjustScale?: boolean;\n    // prefix\n    prefix?: string;\n    // The className of the item that moves with the mouse during the drag\n    dragOverlayCls?: string\n}\n\ninterface SortableItemProps {\n    collisionDetector?: CollisionDetector\n    id: UniqueIdentifier;\n    index: number;\n    useDragOverlay?: boolean;\n    renderItem?: (props: RenderItemProps) => VueJsxNode;\n    prefix?: string;\n    // The className of the item that moves with the mouse during the drag\n    dragOverlayCls?: string\n}\n\nfunction DefaultContainer(props) {\n    return <div style={{ overflow: 'auto' }} {...props}></div>;\n}\n\n\nexport const propTypesSortable: CombineProps<SortableProps> = {\n    collisionDetector: PropTypes.func as PropType<SortableItemProps['collisionDetector']>,\n    onSortEnd: PropTypes.func as PropType<SortableProps['onSortEnd']>,\n    // Set drag and drop trigger conditions\n    modifiers: PropTypes.array as PropType<SortableProps['modifiers']>,\n    // the dragged items，The content in items cannot be the number 0\n    items: PropTypes.array,\n    // Function that renders the item that is allowed to be dragged\n    renderItem: PropTypes.func as PropType<SortableProps['renderItem']>,\n    // Whether to use a separate drag layer for items that move with the mouse\n    useDragOverlay: PropTypes.bool,\n    // A container for all elements that are allowed to be dragged\n    container: PropTypes.any as PropType<SortableProps['container']>,\n    // Whether to change the size of the item being dragged\n    adjustScale: PropTypes.bool,\n    // prefix\n    prefix: PropTypes.string,\n    // The className of the item that moves with the mouse during the drag\n    dragOverlayCls: PropTypes.string,\n};\nconst defaultPropsSortable = {\n    useDragOverlay: true,\n    container: DefaultContainer,\n}\n\nconst vuePropsTypeSortable = vuePropsMake(propTypesSortable, defaultPropsSortable)\n\nconst Sortable = defineComponent({\n    props: { ...vuePropsTypeSortable },\n    name: 'Sortable',\n    setup(props, { attrs }) {\n        const slots = useSlots();\n\n        const activeId = ref<UniqueIdentifier | null>(null);\n        function setActiveId(v: UniqueIdentifier | null) {\n            activeId.value = v\n        }\n        // const sensors = useSensors(\n        //   useSensor(MouseSensor),\n        //   useSensor(TouchSensor),\n        //   useSensor(KeyboardSensor, defaultKeyBoardOptions)\n        // );\n        const getIndex = (id: UniqueIdentifier) => props.items.indexOf(id)\n        const activeIndex = computed(() => activeId ? getIndex(activeId.value) : -1)\n\n        const onDragStart = (event: Parameters<Events['dragstart']>[0]) => {\n            const { source } = event.operation\n            if (!source) { return; }\n            setActiveId(source.id);\n        }\n\n        const onDragEnd = (event: Parameters<Events['dragend']>[0]) => {\n            setActiveId(null);\n            const { target } = event.operation\n            if (target) {\n                const overIndex = getIndex(target.id);\n                if (activeIndex.value !== overIndex) {\n                    props.onSortEnd(event);\n                }\n            }\n        }\n\n        const onDragCancel = () => {\n            setActiveId(null);\n        }\n\n\n        return () => {\n            const Container = props.container\n            return (\n              <DragDropProvider\n                modifiers={props.modifiers}\n                onDragStart={onDragStart}\n                onDragOver={(event)=>{\n                    // console.log('end', event.operation.source.id, event.operation.target.id,);\n                    onDragEnd(event as any)\n                }}\n                onDragEnd={(event)=>{\n                    // console.log('end', event.operation.source.id, event.operation.target.id,);\n                }}\n              >\n                  <Container>\n                      {props.items.map((value, index) => (\n                        <SortableItem\n                          key={value}\n                          id={value}\n                          index={index}\n                          renderItem={props.renderItem}\n                          useDragOverlay={props.useDragOverlay}\n                          prefix={props.prefix}\n                          collisionDetector={props.collisionDetector}\n                          dragOverlayCls={props.dragOverlayCls}\n                        />\n                      ))}\n                  </Container>\n              </DragDropProvider>\n            );\n        };\n    },\n});\n\n\n\nexport const vuePropsType: CombineProps<SortableItemProps> = {\n    collisionDetector: PropTypes.func as PropType<SortableItemProps['collisionDetector']>,\n    id: {\n        type: [PropTypes.number, PropTypes.string],\n        required: true\n    },\n    index: {\n        type: PropTypes.number,\n        required: true\n    },\n    useDragOverlay: PropTypes.bool,\n    renderItem: PropTypes.func as PropType<SortableItemProps['renderItem']>,\n    prefix: PropTypes.string,\n    // The className of the item that moves with the mouse during the drag\n    dragOverlayCls: PropTypes.string,\n};\n\n\nconst SortableItem = defineComponent({\n    props: { ...vuePropsType },\n    name: 'SortableItem',\n    setup(props, { attrs }) {\n        const slots = useSlots();\n        const element = ref<Element | null>(null);\n        const handleRef = ref<HTMLButtonElement | null>(null);\n        const id = shallowRef(props.id)\n        watch(()=>props.id, (value, oldValue)=>{\n            if(value !== oldValue){\n                id.value = oldValue;\n            }\n        })\n        const index = shallowRef(props.index)\n        watch(()=>props.index, (value, oldValue)=>{\n            if(value !== oldValue){\n                index.value = oldValue;\n            }\n        })\n        const {isDragSource, isDropTarget} = useSortable({\n            id: id as any,\n            index: index as any,\n            element,\n            handle: handleRef,\n            collisionDetector: props.collisionDetector\n        });\n\n        const sortableHandle = (WrapperComponent: any) => {\n            // console.log('listeners', listeners);\n            // 保证给出的接口的一致性，使用 span 包一层，保证用户能够通过同样的方式使用 handler\n            // To ensure the consistency of the given interface\n            // use a span package layer to ensure that users can use the handler in the same way\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            return () => <span ref={handleRef} style={{ lineHeight: 0 }} ><WrapperComponent /></span>;\n        };\n\n\n        return () => {\n            const itemCls = cls(\n              `${props.prefix}-sortable-item`,\n              {\n                  // [`${props.prefix}-sortable-item-over`]: isDropTarget?.value,\n                  // [`${props.prefix}-sortable-item-active`]: isDragSource?.value,\n                  [props.dragOverlayCls]: isDragSource?.value,\n              }\n            );\n\n            return <div\n              ref={element}\n              class={itemCls}\n            >\n                {props.renderItem({ id: props.id, sortableHandle })}\n            </div>;\n        };\n    },\n});\n\nexport {\n    Sortable,\n    SortableItem\n}\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","DefaultContainer","props","_createVNode","_mergeProps","overflow","propTypesSortable","collisionDetector","PropTypes","func","onSortEnd","modifiers","array","items","renderItem","useDragOverlay","bool","container","any","adjustScale","prefix","string","dragOverlayCls","defaultPropsSortable","vuePropsTypeSortable","vuePropsMake","Sortable","defineComponent","name","setup","attrs","useSlots","activeId","ref","setActiveId","v","value","getIndex","id","indexOf","activeIndex","computed","onDragStart","event","source","operation","onDragEnd","target","overIndex","_slot","Container","DragDropProvider","default","map","index","SortableItem","vuePropsType","type","number","required","element","handleRef","shallowRef","watch","oldValue","isDragSource","isDropTarget","useSortable","handle","sortableHandle","WrapperComponent","lineHeight","itemCls","cls"],"mappings":"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"}