import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../interface';
export interface ResponsiveMap {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
}
export interface SiderProps {
    prefixCls?: string;
    style?: CSSProperties;
    className?: string;
    breakpoint?: Array<keyof ResponsiveMap>;
    onBreakpoint?: (screen: keyof ResponsiveMap, match: boolean) => void;
    'aria-label'?: string;
    role?: string;
}
export declare const vuePropsType: CombineProps<SiderProps>;
declare const Sider: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    breakpoint: PropType<(keyof ResponsiveMap)[]> | {
        type: PropType<(keyof ResponsiveMap)[]>;
        default?: any;
        required?: false;
    };
    onBreakpoint: PropType<(screen: keyof ResponsiveMap, match: boolean) => void> | {
        type: PropType<(screen: keyof ResponsiveMap, match: boolean) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    breakpoint: PropType<(keyof ResponsiveMap)[]> | {
        type: PropType<(keyof ResponsiveMap)[]>;
        default?: any;
        required?: false;
    };
    onBreakpoint: PropType<(screen: keyof ResponsiveMap, match: boolean) => void> | {
        type: PropType<(screen: keyof ResponsiveMap, match: boolean) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Sider;
