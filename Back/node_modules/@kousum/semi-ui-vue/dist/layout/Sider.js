import { defineComponent as u, onMounted as f, createVNode as o, mergeProps as x } from "vue";
import g from "classnames";
import { strings as h, cssClasses as d } from '@douyinfe/semi-foundation/lib/es/layout/constants';
import y from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
import { registerMediaQuery as S } from "../_utils/index";
import { useLayoutContext as b } from "./context/Consumer";
const l = {
  xs: "(max-width: 575px)",
  sm: "(min-width: 576px)",
  md: "(min-width: 768px)",
  lg: "(min-width: 992px)",
  xl: "(min-width: 1200px)",
  xxl: "(min-width: 1600px)"
}, k = /* @__PURE__ */ (() => {
  let e = 0;
  return () => (e += 1, `${d.PREFIX}-sider-${e}`);
})();
h.BREAKPOINT;
const v = {
  prefixCls: {
    type: String,
    default: d.PREFIX
  },
  style: [String, Object],
  className: String,
  breakpoint: Array,
  // onBreakpoin: Function as PropType<SiderProps['onBreakpoin']>,
  "aria-label": String,
  role: String,
  onBreakpoint: Function
}, O = /* @__PURE__ */ u({
  props: {
    ...v
  },
  name: "LayoutSider",
  setup(e, {
    slots: n
  }) {
    const m = k(), {
      context: s
    } = b();
    f(() => {
      const {
        breakpoint: r
      } = e;
      Object.keys(l).filter((t) => r && r.indexOf(t) !== -1).map((t) => S(l[t], {
        match: () => {
          a(t, !0);
        },
        unmatch: () => {
          a(t, !1);
        }
      })), s.value.siderHook && s.value.siderHook.addSider(m);
    });
    function a(r, i) {
      const {
        onBreakpoint: t
      } = e;
      t && t(r, i);
    }
    return () => {
      const {
        prefixCls: r,
        className: i,
        style: t,
        ...c
      } = e, p = g(i, {
        [`${r}-sider`]: !0
      });
      return o("aside", x({
        class: p,
        "aria-label": e["aria-label"],
        style: t
      }, y(c)), [o("div", {
        class: `${r}-sider-children`
      }, [n.default ? n.default() : null])]);
    };
  }
});
export {
  O as default,
  v as vuePropsType
};
//# sourceMappingURL=Sider.js.map
