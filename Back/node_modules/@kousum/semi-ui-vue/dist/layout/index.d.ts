import { CSSProperties, PropType } from 'vue';
import '@douyinfe/semi-foundation/lib/es/layout/layout.css';
import { CombineProps } from '../interface';
export interface BasicProps {
    prefixCls?: string;
    style?: CSSProperties;
    className?: string;
    tagName?: keyof HTMLElementTagNameMap;
    type?: string;
}
declare const LayoutHeader: import("vue").DefineSetupFnComponent<Record<string, any>, {}, {}, Record<string, any> & {}, import("vue").PublicProps>;
declare const LayoutFooter: import("vue").DefineSetupFnComponent<Record<string, any>, {}, {}, Record<string, any> & {}, import("vue").PublicProps>;
declare const LayoutContent: import("vue").DefineSetupFnComponent<Record<string, any>, {}, {}, Record<string, any> & {}, import("vue").PublicProps>;
declare const LayoutSider: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    breakpoint: PropType<(keyof import("./Sider").ResponsiveMap)[]> | {
        type: PropType<(keyof import("./Sider").ResponsiveMap)[]>;
        default?: any;
        required?: false;
    };
    onBreakpoint: PropType<(screen: keyof import("./Sider").ResponsiveMap, match: boolean) => void> | {
        type: PropType<(screen: keyof import("./Sider").ResponsiveMap, match: boolean) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    breakpoint: PropType<(keyof import("./Sider").ResponsiveMap)[]> | {
        type: PropType<(keyof import("./Sider").ResponsiveMap)[]>;
        default?: any;
        required?: false;
    };
    onBreakpoint: PropType<(screen: keyof import("./Sider").ResponsiveMap, match: boolean) => void> | {
        type: PropType<(screen: keyof import("./Sider").ResponsiveMap, match: boolean) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export interface BasicLayoutProps {
    prefixCls?: string;
    style?: CSSProperties;
    className?: string;
    hasSider?: boolean;
    tagName?: keyof HTMLElementTagNameMap;
}
export interface BasicLayoutState {
    siders: Array<string>;
}
export declare const vuePropsType: CombineProps<BasicLayoutProps>;
declare const Layout: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hasSider: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    tagName: PropType<keyof HTMLElementTagNameMap> | {
        type: PropType<keyof HTMLElementTagNameMap>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hasSider: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    tagName: PropType<keyof HTMLElementTagNameMap> | {
        type: PropType<keyof HTMLElementTagNameMap>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export type LayoutType = typeof Layout & {
    Header: typeof LayoutHeader;
    Footer: typeof LayoutFooter;
    Content: typeof LayoutContent;
    Sider: typeof LayoutSider;
};
declare const BaseLayout: LayoutType;
export { LayoutHeader, LayoutFooter, LayoutContent, LayoutSider };
export default BaseLayout;
