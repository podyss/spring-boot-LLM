{"version":3,"file":"cardGroup.js","sources":["../../src/components/card/cardGroup.tsx"],"sourcesContent":["import * as PropTypes from '../PropTypes';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/card/constants';\nimport cls from 'classnames';\nimport Space from '../space';\nimport { ComponentObjectPropsOptions, CSSProperties, defineComponent, h, PropType, useSlots } from 'vue';\nimport { vuePropsMake } from '../PropTypes';\nimport { useHasInProps } from '../_base/baseComponent';\nimport { CombineProps } from '../interface';\n\nconst prefixcls = cssClasses.PREFIX;\n\nexport type CardGroupType = 'grid';\n\nexport interface CardGroupProps {\n  /** Card group style class name */\n  className?: string;\n  /** Card Spacing */\n  spacing?: number | number[];\n  /** Card group inline style */\n  style?: CSSProperties;\n  /** Card set type */\n  type?: CardGroupType;\n}\nconst propTypes: CombineProps<CardGroupProps> = {\n  className: PropTypes.string,\n  spacing: [PropTypes.number, PropTypes.array],\n  style: PropTypes.object,\n  type: PropTypes.string as PropType<CardGroupProps['type']>,\n};\n\nconst defaultProps = {\n  spacing: 16,\n};\nexport const vuePropsType = vuePropsMake<CardGroupProps>(propTypes, defaultProps);\nconst CardGroup = defineComponent({\n  props: { ...vuePropsType },\n  name: 'CardGroup',\n  setup(props, {}) {\n    const {getProps} = useHasInProps()\n    const slots = useSlots();\n\n    return () => {\n      const children = slots.default?.();\n      const { className, spacing, style, type, ...others } = getProps(props);\n      const isGrid = type === 'grid';\n      const cardGroupCls = cls(`${prefixcls}-group`, className, {\n        [`${prefixcls}-group-grid`]: isGrid,\n      });\n\n      return (\n        <Space spacing={isGrid ? 0 : spacing} wrap={true} className={cardGroupCls} style={style} {...others}>\n          {children}\n        </Space>\n      );\n    };\n  },\n});\n\nexport default CardGroup;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefixcls","cssClasses","PREFIX","propTypes","className","PropTypes","string","spacing","number","array","style","object","type","defaultProps","vuePropsType","vuePropsMake","CardGroup","defineComponent","props","name","setup","getProps","useHasInProps","slots","useSlots","children","default","others","isGrid","cardGroupCls","cls","_createVNode","Space","_mergeProps"],"mappings":";;;;;;;AAMuD,SAAAA,EAAAC,GAAA;AAAA,SAAA,OAAAA,KAAA,cAAAC,OAAAC,UAAAC,SAAAC,KAAAJ,CAAA,MAAAK,qBAAAA,CAAAA,EAAAL,CAAA;AAAA;AAGvD,MAAMM,IAAYC,EAAWC,QAcvBC,IAA0C;AAAA,EAC9CC,WAAWC,EAAUC;AAAAA,EACrBC,SAAS,CAACF,EAAUG,QAAQH,EAAUI,KAAK;AAAA,EAC3CC,OAAOL,EAAUM;AAAAA,EACjBC,MAAMP,EAAUC;AAClB,GAEMO,IAAe;AAAA,EACnBN,SAAS;AACX,GACaO,IAAeC,EAA6BZ,GAAWU,CAAY,GAC1EG,IAAYC,gBAAAA,EAAgB;AAAA,EAChCC,OAAO;AAAA,IAAE,GAAGJ;AAAAA,EAAc;AAAA,EAC1BK,MAAM;AAAA,EACNC,MAAMF,GAAO,IAAI;AACf,UAAM;AAAA,MAACG,UAAAA;AAAAA,IAAS,IAAGC,EAAa,GAC1BC,IAAQC;AAEd,WAAO,MAAM;;AACX,YAAMC,KAAWF,IAAAA,EAAMG,YAANH,gBAAAA,EAAAA,KAAAA,IACX;AAAA,QAAEnB,WAAAA;AAAAA,QAAWG,SAAAA;AAAAA,QAASG,OAAAA;AAAAA,QAAOE,MAAAA;AAAAA,QAAM,GAAGe;AAAAA,MAAO,IAAIN,EAASH,CAAK,GAC/DU,IAAShB,MAAS,QAClBiB,IAAeC,EAAI,GAAG9B,CAAS,UAAUI,GAAW;AAAA,QACxD,CAAC,GAAGJ,CAAS,aAAa,GAAG4B;AAAAA,MAC/B,CAAC;AAED,aAAAG,EAAAC,GAAAC,EAAA;AAAA,QAAA,SACkBL,IAAS,IAAIrB;AAAAA,QAAO,MAAQ;AAAA,QAAI,WAAasB;AAAAA,QAAY,OAASnB;AAAAA,MAAK,GAAMiB,CAAM,GAAAlC,EAChGgC,CAAQ,IAARA,IAAQ;AAAA,QAAAC,SAAAA,MAAA,CAARD,CAAQ;AAAA,MAAA,CAAA;AAAA;EAIjB;AACF,CAAC;"}