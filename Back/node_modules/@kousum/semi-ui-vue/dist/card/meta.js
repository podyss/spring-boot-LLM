import { defineComponent as P, useSlots as y, createVNode as e, mergeProps as N } from "vue";
import * as s from "../PropTypes";
import { vuePropsMake as $ } from "../PropTypes";
import { cssClasses as w } from '@douyinfe/semi-foundation/lib/es/card/constants';
import g from "classnames";
import { useHasInProps as C } from "../_base/baseComponent";
const t = w.PREFIX, M = {
  avatar: s.node,
  className: s.string,
  description: s.node,
  style: s.object,
  title: s.node
}, T = $(M, {}), k = /* @__PURE__ */ P({
  props: {
    ...T
  },
  name: "Meta",
  setup(p, {}) {
    const {
      getProps: c
    } = C();
    return y(), () => {
      const {
        avatar: a,
        className: n,
        description: o,
        style: i,
        title: r,
        ...m
      } = c(p), l = g(`${t}-meta`, n), d = a && e("div", {
        class: `${t}-meta-avatar`
      }, [a]), v = r && e("div", {
        class: `${t}-meta-wrapper-title`
      }, [r]), f = o && e("div", {
        class: `${t}-meta-wrapper-description`
      }, [o]), u = r || o ? e("div", {
        class: `${t}-meta-wrapper`
      }, [v, f]) : null;
      return e("div", N(m, {
        class: l,
        style: i
      }), [d, u]);
    };
  }
});
export {
  k as default,
  T as vuePropsType
};
//# sourceMappingURL=meta.js.map
