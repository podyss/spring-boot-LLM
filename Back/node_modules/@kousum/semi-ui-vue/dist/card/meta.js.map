{"version":3,"file":"meta.js","sources":["../../src/components/card/meta.tsx"],"sourcesContent":["import * as PropTypes from '../PropTypes';\nimport { cssClasses } from '@douyinfe/semi-foundation/card/constants';\nimport cls from 'classnames';\nimport { ComponentObjectPropsOptions, CSSProperties, defineComponent, h, useSlots } from 'vue';\nimport { vuePropsMake } from '../PropTypes';\nimport { CombineProps, VueJsxNode } from '../interface';\nimport { useHasInProps } from '../_base/baseComponent';\n\nconst prefixcls = cssClasses.PREFIX;\n\nexport type Shadows = 'hover' | 'show';\n\nexport interface MetaProps {\n  /** Avatar */\n  avatar?: VueJsxNode;\n  /** Style class name */\n  className?: string;\n  /** Description */\n  description?: VueJsxNode;\n  /** Inline style */\n  style?: CSSProperties;\n  /** Title */\n  title?: VueJsxNode;\n}\nconst propTypes: CombineProps<MetaProps> = {\n  avatar: PropTypes.node,\n  className: PropTypes.string,\n  description: PropTypes.node,\n  style: PropTypes.object,\n  title: PropTypes.node,\n};\nexport const vuePropsType = vuePropsMake(propTypes, {});\nconst Meta = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Meta',\n  setup(props, {}) {\n    const {getProps} = useHasInProps()\n    const slots = useSlots();\n\n    return () => {\n      // const children = slots.default?.()\n      const { avatar, className, description, style, title, ...others } = getProps(props);\n      const metaCls = cls(`${prefixcls}-meta`, className);\n      const avatarNode = avatar && <div class={`${prefixcls}-meta-avatar`}>{avatar}</div>;\n      const titleNode = title && <div class={`${prefixcls}-meta-wrapper-title`}>{title}</div>;\n      const descriptionNode = description && <div class={`${prefixcls}-meta-wrapper-description`}>{description}</div>;\n      const wrapper =\n        title || description ? (\n          <div class={`${prefixcls}-meta-wrapper`}>\n            {titleNode}\n            {descriptionNode}\n          </div>\n        ) : null;\n\n      return (\n        <div {...others} class={metaCls} style={style}>\n          {avatarNode}\n          {wrapper}\n        </div>\n      );\n    };\n  },\n});\n\nexport default Meta;\n"],"names":["prefixcls","cssClasses","PREFIX","propTypes","avatar","PropTypes","node","className","string","description","style","object","title","vuePropsType","vuePropsMake","Meta","defineComponent","props","name","setup","getProps","useHasInProps","useSlots","others","metaCls","cls","avatarNode","_createVNode","titleNode","descriptionNode","wrapper","_mergeProps"],"mappings":";;;;;;AAQA,MAAMA,IAAYC,EAAWC,QAgBvBC,IAAqC;AAAA,EACzCC,QAAQC,EAAUC;AAAAA,EAClBC,WAAWF,EAAUG;AAAAA,EACrBC,aAAaJ,EAAUC;AAAAA,EACvBI,OAAOL,EAAUM;AAAAA,EACjBC,OAAOP,EAAUC;AACnB,GACaO,IAAeC,EAAaX,GAAW,EAAE,GAChDY,IAAOC,gBAAAA,EAAgB;AAAA,EAC3BC,OAAO;AAAA,IAAE,GAAGJ;AAAAA,EAAc;AAAA,EAC1BK,MAAM;AAAA,EACNC,MAAMF,GAAO,IAAI;AACf,UAAM;AAAA,MAACG,UAAAA;AAAAA,IAAS,IAAGC,EAAa;AAClBC,WAAAA,EAAU,GAEjB,MAAM;AAEX,YAAM;AAAA,QAAElB,QAAAA;AAAAA,QAAQG,WAAAA;AAAAA,QAAWE,aAAAA;AAAAA,QAAaC,OAAAA;AAAAA,QAAOE,OAAAA;AAAAA,QAAO,GAAGW;AAAAA,MAAO,IAAIH,EAASH,CAAK,GAC5EO,IAAUC,EAAI,GAAGzB,CAAS,SAASO,CAAS,GAC5CmB,IAAatB,KAAMuB,EAAA,OAAA;AAAA,QAAA,OAAgB,GAAG3B,CAAS;AAAA,MAAc,GAAA,CAAGI,CAAM,CAAO,GAC7EwB,IAAYhB,KAAKe,EAAA,OAAA;AAAA,QAAA,OAAgB,GAAG3B,CAAS;AAAA,MAAqB,GAAA,CAAGY,CAAK,CAAO,GACjFiB,IAAkBpB,KAAWkB,EAAA,OAAA;AAAA,QAAA,OAAgB,GAAG3B,CAAS;AAAA,MAA2B,GAAA,CAAGS,CAAW,CAAO,GACzGqB,IACJlB,KAASH,IAAWkB,EAAA,OAAA;AAAA,QAAA,OACN,GAAG3B,CAAS;AAAA,MAAe,GAAA,CACpC4B,GACAC,CAAe,CAAA,IAEhB;AAEN,aAAAF,EAAA,OAAAI,EACWR,GAAM;AAAA,QAAA,OAASC;AAAAA,QAAO,OAASd;AAAAA,MACrCgB,CAAAA,GAAAA,CAAAA,GACAI,CAAO,CAAA;AAAA;EAIhB;AACF,CAAC;"}