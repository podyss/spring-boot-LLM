import { defineComponent as x, useSlots as P, createVNode as t, mergeProps as L, isVNode as j } from "vue";
import { omit as T, isString as k } from "lodash";
import * as o from "../PropTypes";
import { vuePropsMake as E } from "../PropTypes";
import { cssClasses as B } from '@douyinfe/semi-foundation/lib/es/card/constants';
import '@douyinfe/semi-foundation/lib/es/card/card.css';
import n from "classnames";
import N, { SkeletonTitle as I, SkeletonParagraph as M } from "../skeleton";
import { Title as A } from "../typography";
import F from "../space";
import { useHasInProps as H } from "../_base/baseComponent";
import O from "./meta";
function h(a) {
  return typeof a == "function" || Object.prototype.toString.call(a) === "[object Object]" && !j(a);
}
const s = B.PREFIX, V = {
  actions: o.array,
  bodyStyle: o.object,
  bordered: o.bool,
  children: o.node,
  className: o.string,
  cover: o.node,
  footer: o.node,
  footerLine: o.bool,
  footerStyle: o.object,
  header: o.node,
  headerExtraContent: o.node,
  headerLine: o.bool,
  headerStyle: o.object,
  loading: o.bool,
  shadows: o.string,
  style: o.object,
  title: o.node,
  "aria-label": o.string
}, _ = {
  bordered: !0,
  footerLine: !1,
  headerLine: !0,
  loading: !1
}, R = E(V, _), W = /* @__PURE__ */ x({
  props: {
    ...R
  },
  name: "Card",
  setup(a, {}) {
    const {
      getProps: b
    } = H(), m = P(), v = () => {
      const {
        title: e,
        headerExtraContent: r,
        header: l,
        headerLine: d,
        headerStyle: f
      } = a, i = n(`${s}-header`, {
        [`${s}-header-bordered`]: !!d
      }), c = n(`${s}-header-wrapper`), p = n(`${s}-header-wrapper-title`, {
        [`${s}-header-wrapper-spacing`]: !!r
      });
      return l || r || e ? t("div", {
        style: f,
        class: i
      }, [l || // Priority of header over title and headerExtraContent
      t("div", {
        class: c
      }, [r && t("div", {
        class: `${s}-header-wrapper-extra`,
        "x-semi-prop": "headerExtraContent"
      }, [r]), e && t("div", {
        class: p
      }, [k(e) ? t(A, {
        heading: 6,
        ellipsis: {
          showTooltip: !0,
          rows: 1
        },
        "x-semi-prop": "title"
      }, h(e) ? e : {
        default: () => [e]
      }) : e])])]) : null;
    }, C = () => {
      const {
        cover: e
      } = a, r = n(`${s}-cover`);
      return e && t("div", {
        class: r,
        "x-semi-prop": "cover"
      }, [e]);
    }, g = () => {
      var u;
      let e;
      const r = (u = m.default) == null ? void 0 : u.call(m), {
        bodyStyle: l,
        actions: d,
        loading: f
      } = a, i = n(`${s}-body`), c = n(`${s}-body-actions`), p = n(`${s}-body-actions-item`), $ = t("div", null, [t(I, null, null), t("br", null, null), t(M, {
        rows: 3
      }, null)]);
      return t("div", {
        style: l,
        class: i
      }, [r && t(N, {
        placeholder: $,
        loading: f,
        active: !0
      }, h(r) ? r : {
        default: () => [r]
      }), Array.isArray(d) && t("div", {
        class: c
      }, [t(F, {
        spacing: 12
      }, h(e = d.map((w, y) => t("div", {
        key: y,
        class: p,
        "x-semi-prop": `actions.${y}`
      }, [w]))) ? e : {
        default: () => [e]
      })])]);
    }, S = () => {
      const {
        footer: e,
        footerLine: r,
        footerStyle: l
      } = a, d = n(`${s}-footer`, {
        [`${s}-footer-bordered`]: r
      });
      return e && t("div", {
        style: l,
        class: d,
        "x-semi-prop": "footer"
      }, [e]);
    };
    return () => {
      const {
        bordered: e,
        shadows: r,
        style: l,
        className: d,
        children: f,
        ...i
      } = b(a), c = T(i, [
        // Remove APIs in otherProps that do not need to be hung on the outer node
        "actions",
        "bodyStyle",
        "cover",
        "headerExtraContent",
        "footer",
        "footerLine",
        "footerStyle",
        "header",
        "headerLine",
        "headerStyle",
        "loading",
        "title"
      ]), p = n(s, d, {
        [`${s}-bordered`]: e,
        [`${s}-shadows`]: r,
        [`${s}-shadows-${r}`]: r
      });
      return t("div", L(c, {
        "aria-busy": a.loading,
        class: p,
        style: l
      }), [v(), C(), g(), S()]);
    };
  }
}), X = W;
X.Meta = O;
export {
  X as default,
  R as vuePropsType
};
//# sourceMappingURL=index.js.map
