import { VNode, CSSProperties, PropType } from 'vue';
import { strings } from '@douyinfe/semi-foundation/lib/es/typography/constants';
import { Ellipsis, TypographyBaseType } from './interface';
import { ArrayElement } from '@douyinfe/semi-foundation/lib/es/utils/type';
import { CombineProps } from '../interface';
export interface CopyableConfig {
    content?: string;
    copyTip?: VNode;
    successTip?: VNode;
    icon?: VNode;
    onCopy?(e: MouseEvent, content: string, res: boolean): void;
    render?: (copied: boolean, doCopy: (e: MouseEvent) => void, configs: CopyableConfig) => VNode;
}
export type LinkType = any | boolean;
export interface TitleProps {
    className?: string;
    id?: string;
    'x-semi-prop'?: string;
    class?: string;
    component_?: any;
    copyable?: CopyableConfig | boolean;
    delete?: boolean;
    disabled?: boolean;
    ellipsis?: Ellipsis | boolean;
    heading?: ArrayElement<typeof strings.HEADING>;
    link?: LinkType;
    mark?: boolean;
    strong?: boolean;
    style?: CSSProperties;
    type?: TypographyBaseType;
    underline?: boolean;
    weight?: ArrayElement<typeof strings.WEIGHT> | number;
}
export declare const vuePropsType: CombineProps<TitleProps>;
declare const Title: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'x-semi-prop': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    component_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    copyable: PropType<boolean | CopyableConfig> | {
        type: PropType<boolean | CopyableConfig>;
        default?: any;
        required?: false;
    };
    delete: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    ellipsis: PropType<boolean | Ellipsis> | {
        type: PropType<boolean | Ellipsis>;
        default?: any;
        required?: false;
    };
    heading: PropType<1 | 2 | 3 | 4 | 5 | 6> | {
        type: PropType<1 | 2 | 3 | 4 | 5 | 6>;
        default?: any;
        required?: false;
    };
    link: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    mark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    strong: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary"> | {
        type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary">;
        default?: any;
        required?: false;
    };
    underline: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    weight: PropType<number | "bold" | "default" | "light" | "medium" | "regular" | "semibold"> | {
        type: PropType<number | "bold" | "default" | "light" | "medium" | "regular" | "semibold">;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'x-semi-prop': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    component_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    copyable: PropType<boolean | CopyableConfig> | {
        type: PropType<boolean | CopyableConfig>;
        default?: any;
        required?: false;
    };
    delete: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    ellipsis: PropType<boolean | Ellipsis> | {
        type: PropType<boolean | Ellipsis>;
        default?: any;
        required?: false;
    };
    heading: PropType<1 | 2 | 3 | 4 | 5 | 6> | {
        type: PropType<1 | 2 | 3 | 4 | 5 | 6>;
        default?: any;
        required?: false;
    };
    link: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    mark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    strong: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary"> | {
        type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary">;
        default?: any;
        required?: false;
    };
    underline: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    weight: PropType<number | "bold" | "default" | "light" | "medium" | "regular" | "semibold"> | {
        type: PropType<number | "bold" | "default" | "light" | "medium" | "regular" | "semibold">;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Title;
