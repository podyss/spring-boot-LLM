{"version":3,"file":"base.js","sources":["../../src/components/typography/base.tsx"],"sourcesContent":["import {\n  cloneVNode,\n  type ComponentObjectPropsOptions,\n  type CSSProperties,\n  defineComponent,\n  Fragment,\n  h,\n  nextTick,\n  onMounted,\n  onUnmounted,\n  type PropType,\n  reactive,\n  ref,\n  useSlots,\n  type VNode,\n  watch,\n} from 'vue';\nimport cls from 'classnames';\nimport { cssClasses } from '@douyinfe/semi-foundation/typography/constants';\nimport Typography from './typography';\nimport Copyable from './copyable';\nimport { IconSize as Size } from '../icons';\nimport { isFunction, isNull, isString, isUndefined, merge, omit } from 'lodash';\nimport Tooltip from '../tooltip';\nimport Popover from '../popover';\nimport getRenderText from './util';\nimport warning from '@douyinfe/semi-foundation/utils/warning';\nimport isEnterPress from '@douyinfe/semi-foundation/utils/isEnterPress';\nimport LocaleConsumer from '../locale/localeConsumer';\nimport { Locale } from '../locale/interface';\nimport type { Ellipsis, EllipsisPos, ShowTooltip, TypographyBaseSize, TypographyBaseType } from './interface';\nimport type { CopyableConfig, LinkType } from './title';\nimport type { BaseProps } from '../_base/baseComponent';\nimport { isSemiIcon, runAfterTicks } from '../_utils';\nimport ResizeObserver, { ObserverProperty, ResizeEntry } from '../resizeObserver';\nimport SizeContext from './context';\nimport * as PropTypes from '../PropTypes';\nimport { vuePropsMake } from '../PropTypes';\nimport { useTypographyBaseSizeContext } from './context/Consumer';\nimport { CombineProps } from '../interface';\n\nexport interface BaseTypographyProps extends BaseProps {\n  copyable?: CopyableConfig | boolean;\n  delete?: boolean;\n  disabled?: boolean;\n  icon?: VNode;\n  /**\n   * ellipsis 用于设置截断相关参数.\n   * Ellipsis is used to set ellipsis related parameters.\n   * ellipsis 仅支持纯文本的截断，不支持 reactNode 等复杂类型，请确保 children 传入内容类型为 string.\n   * Ellipsis only supports ellipsis of plain text, and does not support complex types such as reactNode.\n   * Please ensure that the content type of children is string.\n   * Semi 截断有两种策略， CSS 截断和 JS 截断。\n   * Semi ellipsis has two strategies, CSS ellipsis and JS ellipsis.\n   *  - 当设置中间截断（pos='middle')、可展开（expandable)、有后缀（suffix 非空）、可复制（copyable），启用 JS 截断策略\n   *  - When setting middle ellipsis (pos='middle')、expandable、suffix is not empty string、copyable,\n   * the JS ellipsis strategy is enabled\n   *  - 非以上场景，启用 CSS 截断策略\n   *  - Otherwise, enable the CSS ellipsis strategy\n   *\n   * 通常来说 CSS 截断的性能优于 JS 截断。在 children 不变， 容器尺寸不变的情况下，CSS 截断只涉及 1-2 次计算，js 截断基于二分法，可能涉及多次计算。\n   * In general CSS ellipsis performs better than JS ellipsis. when the children and container size remain unchanged,\n   * CSS ellipsis only involves 1-2 calculations, while JS ellipsis is based on dichotomy and may require multiple calculations.\n   * 同时使用大量带有截断功能的 Typography 需注意性能消耗，如在 Table 中，可通过设置合理的页容量进行分页减少性能损耗\n   * Pay attention to performance consumption when using a large number of Typography with ellipsis. For example, in Table,\n   * you can reduce performance loss by setting a reasonable pageSize for paging\n   */\n  ellipsis?: Ellipsis | boolean;\n  mark?: boolean;\n  underline?: boolean;\n  link?: LinkType;\n  strong?: boolean;\n  type?: TypographyBaseType;\n  size?: TypographyBaseSize;\n  style?: CSSProperties;\n  className?: string;\n  code?: boolean;\n  children?: any;\n  component?: any;\n  spacing?: string;\n  heading?: string;\n  weight?: string | number;\n\n  component_?: any;\n\n  class?: string;\n  id?: string;\n  'x-semi-prop'?: string;\n}\n\ninterface BaseTypographyState {\n  editable: boolean;\n  copied: boolean;\n  isOverflowed: boolean;\n  ellipsisContent: string | VNode;\n  expanded: boolean;\n  isTruncated: boolean;\n  prevChildren: VNode | VNode[];\n}\n\nconst prefixCls = cssClasses.PREFIX;\nconst ELLIPSIS_STR = '...';\n\nconst propTypes: CombineProps<BaseTypographyProps> = {\n  copyable: PropTypes.oneOfType([PropTypes.object(), PropTypes.bool]),\n  delete: PropTypes.bool,\n  disabled: PropTypes.bool,\n  // editable: PropTypes.bool,\n  ellipsis: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  mark: PropTypes.bool,\n  underline: PropTypes.bool,\n  link: [PropTypes.object, PropTypes.bool, PropTypes.string],\n  spacing: PropTypes.string,\n  strong: PropTypes.bool,\n  size: PropTypes.string as PropType<BaseTypographyProps['size']>,\n  type: PropTypes.string as PropType<BaseTypographyProps['type']>,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  heading: PropTypes.string,\n  component: PropTypes.string,\n  weight: [PropTypes.string, PropTypes.number],\n\n  children: [Object, Array, Function, String],\n  class: {\n    type: String,\n    default: '',\n  },\n  id: {\n    type: String,\n    default: '',\n  },\n  'x-semi-prop': {\n    type: String,\n    default: '',\n  },\n  code: Boolean,\n  component_: [String, Array, Boolean, Object, Number],\n};\nconst defaultProps = {\n  copyable: false,\n  delete: false,\n  disabled: false,\n  // editable: false,\n  ellipsis: false,\n  icon: '',\n  mark: false,\n  underline: false,\n  strong: false,\n  link: false,\n  type: 'primary',\n  spacing: 'normal',\n  size: 'normal',\n  style: {},\n  className: '',\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\n\nconst wrapperDecorations = (props: BaseTypographyProps, content: VNode) => {\n  const { mark, code, underline, strong, link, disabled } = props;\n  let wrapped = content;\n  const wrap = (isNeeded: boolean | LinkType, tag: string) => {\n    let wrapProps = {};\n    if (!isNeeded) {\n      return;\n    }\n    if (typeof isNeeded === 'object') {\n      wrapProps = { ...isNeeded };\n    }\n    wrapped = h(tag, wrapProps, wrapped);\n  };\n  wrap(mark, 'mark');\n  wrap(code, 'code');\n  wrap(underline && !link, 'u');\n  wrap(strong, 'strong');\n  wrap(props.delete, 'del');\n  wrap(link, disabled ? 'span' : 'a');\n  return wrapped;\n};\nconst Base = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Base',\n  setup(props, {}) {\n    const slots = useSlots();\n\n    const { context } = useTypographyBaseSizeContext();\n    const wrapperRef = ref<any>(null);\n    const expandRef = ref<any>(null);\n    const copyRef = ref<any>(null);\n\n    let rafId: ReturnType<typeof requestAnimationFrame>;\n    let expandStr: string;\n    let collapseStr: string;\n    let observerTakingEffect: boolean = false;\n\n    const state = reactive<BaseTypographyState>({\n      editable: false,\n      copied: false,\n      // ellipsis\n      // if text is overflow in container\n      isOverflowed: false,\n      ellipsisContent: props.children,\n      expanded: false,\n      // if text is truncated with js\n      isTruncated: false,\n      prevChildren: null,\n    });\n\n    onMounted(() => {\n      if (props.ellipsis) {\n        // runAfterTicks: make sure start observer on the next tick\n        onResize().then(() => runAfterTicks(() => (observerTakingEffect = true), 1));\n      }\n    });\n\n    // ok\n    function getDerivedStateFromProps(props: BaseTypographyProps, prevState: BaseTypographyState) {\n      const { prevChildren } = prevState;\n      const newState: Partial<BaseTypographyState> = {};\n      const children = props.children;\n      newState.prevChildren = children;\n\n      if (props.ellipsis && prevChildren !== children) {\n        // reset ellipsis state if children update\n        newState.isOverflowed = false;\n        newState.ellipsisContent = props.children;\n        newState.expanded = false;\n        newState.isTruncated = false;\n      }\n      return newState;\n    }\n    watch(\n      () => props.ellipsis,\n      (val) => {\n        const newState = getDerivedStateFromProps({ ...props }, { ...state });\n        newState &&\n          Object.keys(newState).forEach((key) => {\n            state[key] = newState[key];\n          });\n      }\n    );\n\n    watch(\n      () => props.children,\n      () => {\n        if (props.ellipsis) {\n          onResize();\n        }\n      }\n    );\n    // watchEffect(()=>{\n    //   // Render was based on outdated refs and needs to be rerun\n    //   if (props.children !== prevProps.children) {\n    //     forceUpdate();\n    //     if (props.ellipsis) {\n    //       getEllipsisState();\n    //     }\n    //   }\n    // })\n\n    onUnmounted(() => {\n      if (rafId) {\n        window.cancelAnimationFrame(rafId);\n      }\n    });\n    const onResize = async (entries?: ResizeEntry[]) => {\n      if (rafId) {\n        window.cancelAnimationFrame(rafId);\n      }\n      return new Promise<void>((resolve) => {\n        rafId = window.requestAnimationFrame(async () => {\n          await getEllipsisState();\n          resolve();\n        });\n      });\n    };\n\n    function canUseCSSEllipsis() {\n      const { copyable } = props;\n      const { expandable, expandText, pos, suffix } = getEllipsisOpt();\n      return !expandable && isUndefined(expandText) && !copyable && pos === 'end' && !suffix.length;\n    }\n\n    /**\n     * whether truncated\n     *  rows < = 1 if there is overflow content, return true\n     *  rows > 1 if there is overflow height, return true\n     * @param {Number} rows\n     * @returns {Boolean}\n     */\n    const shouldTruncated = (rows: number) => {\n      if (!rows || rows < 1) {\n        return false;\n      }\n      const updateOverflow =\n        rows <= 1 ? compareSingleRow() : wrapperRef.value.scrollHeight > wrapperRef.value.offsetHeight;\n      return updateOverflow;\n    };\n\n    /**\n     * 通过将 content 给到 Range 对象，借助 Range 的 getBoundingClientRect 拿到 content 的准确 width\n     * 不受 css ellipsis 与否的影响\n     * By giving the content to the Range object, get the exact width of the content with the help of Range's getBoundingClientRect\n     * Not affected by css ellipsis or not\n     * https://github.com/DouyinFE/semi-design/issues/1731\n     */\n    function compareSingleRow() {\n      if (!(document && document.createRange)) {\n        return false;\n      }\n      const containerNode = wrapperRef.value;\n      const containerWidth = containerNode?.getBoundingClientRect().width;\n      const childNodes = Array.from(containerNode?.childNodes || []) as Node[];\n      const range = document.createRange();\n      const contentWidth = childNodes.reduce((acc: number, node: Node) => {\n        range.selectNodeContents(node as Node);\n        return acc + (range.getBoundingClientRect().width ?? 0);\n      }, 0);\n      range.detach();\n      return contentWidth > containerWidth;\n    }\n\n    const showTooltip = () => {\n      const { isOverflowed, isTruncated, expanded } = state;\n      const { showTooltip, expandable, expandText } = getEllipsisOpt();\n      const canUseCSSEllipsis_ = canUseCSSEllipsis();\n      // If the css is truncated, use isOverflowed to judge. If the css is truncated, use isTruncated to judge.\n      const overflowed = !expanded && (canUseCSSEllipsis_ ? isOverflowed : isTruncated);\n      const noExpandText = !expandable && isUndefined(expandText);\n      const show = noExpandText && overflowed && showTooltip;\n      if (!show) {\n        return show;\n      }\n      const defaultOpts = {\n        type: 'tooltip',\n      };\n      if (typeof showTooltip === 'object') {\n        if (showTooltip.type && showTooltip.type.toLowerCase() === 'popover') {\n          return merge(\n            {\n              opts: {\n                // style: {width: '240px'},\n                showArrow: true,\n              },\n            },\n            showTooltip,\n            {\n              opts: {\n                className: cls({\n                  [`${prefixCls}-ellipsis-popover`]: true,\n                  [showTooltip?.opts?.className]: Boolean(showTooltip?.opts?.className),\n                }),\n              },\n            }\n          );\n        }\n        return { ...defaultOpts, ...showTooltip };\n      }\n      return defaultOpts;\n    };\n\n    const onHover = () => {\n      const canUseCSSEllipsis_ = canUseCSSEllipsis();\n      if (canUseCSSEllipsis_) {\n        const { rows, suffix, pos } = getEllipsisOpt();\n        const updateOverflow = shouldTruncated(rows);\n        // isOverflowed needs to be updated to show tooltip when using css ellipsis\n        state.isOverflowed = updateOverflow;\n        state.isTruncated = false;\n\n        return undefined;\n      }\n    };\n    function getEllipsisState() {\n      const { rows, suffix, pos } = getEllipsisOpt();\n      const { strong } = props;\n      const children = props.children[0].children;\n      // wait until element mounted\n      if (!wrapperRef || !wrapperRef.value) {\n        onResize();\n        return false;\n      }\n\n      const { expanded } = state;\n      const canUseCSSEllipsis_ = canUseCSSEllipsis();\n      if (canUseCSSEllipsis_) {\n        // const updateOverflow = this.shouldTruncated(rows);\n        // // isOverflowed needs to be updated to show tooltip when using css ellipsis\n        // this.setState({\n        //     isOverflowed: updateOverflow,\n        //     isTruncated: false\n        // });\n\n        return;\n      }\n\n      // If children is null, css/js truncated flag isTruncate is false\n      if (isNull(children)) {\n        return new Promise<void>((resolve) => {\n          state.isOverflowed = false;\n          state.isTruncated = false;\n          nextTick(() => {\n            resolve();\n          });\n        });\n      }\n\n      // Currently only text truncation is supported, if there is non-text,\n      // both css truncation and js truncation should throw a warning\n      warning(\n        'children' in props && typeof children !== 'string',\n        '[Semi Typography] Only children with pure text could be used with ellipsis at this moment.'\n      );\n\n      if (!rows || rows < 0 || expanded) {\n        return;\n      }\n\n      const extraNode = { expand: expandRef.value, copy: copyRef && copyRef.value };\n\n      // Perform type conversion on children to prevent component crash due to non-string type of children\n      // https://github.com/DouyinFE/semi-design/issues/2167\n      const realChildren = Array.isArray(children) ? children.join('') : String(children);\n\n      const content = getRenderText(\n        wrapperRef.value,\n        rows,\n        // Perform type conversion on children to prevent component crash due to non-string type of children\n        realChildren,\n        extraNode,\n        ELLIPSIS_STR,\n        suffix,\n        pos,\n        strong\n      );\n\n      return new Promise<void>((resolve) => {\n        state.isOverflowed = false;\n        state.ellipsisContent = content as unknown as VNode;\n        state.isTruncated = realChildren !== content;\n        nextTick(() => {\n          resolve();\n        });\n      });\n    }\n\n    /**\n     * Triggered when the fold button is clicked to save the latest expanded state\n     * @param {Event} e\n     */\n    const toggleOverflow = (e: any) => {\n      const { onExpand, expandable, collapsible } = getEllipsisOpt();\n      const { expanded } = state;\n      onExpand && onExpand(!expanded, e);\n      if ((expandable && !expanded) || (collapsible && expanded)) {\n        state.expanded = !expanded;\n      }\n    };\n\n    const getEllipsisOpt = (): Ellipsis => {\n      const { ellipsis } = props;\n      if (!ellipsis) {\n        return {};\n      }\n      const opt = {\n        rows: 1,\n        expandable: false,\n        pos: 'end' as EllipsisPos,\n        suffix: '',\n        showTooltip: false,\n        collapsible: false,\n        expandText: (ellipsis as Ellipsis).expandable ? expandStr : undefined,\n        collapseText: (ellipsis as Ellipsis).collapsible ? collapseStr : undefined,\n        ...(typeof ellipsis === 'object' ? ellipsis : null),\n      };\n      return opt;\n    };\n\n    const renderExpandable = () => {\n      const { expanded, isTruncated } = state;\n      if (!isTruncated) return null;\n\n      const { expandText, expandable, collapseText, collapsible } = getEllipsisOpt();\n      const noExpandText = !expandable && isUndefined(expandText);\n      const noCollapseText = !collapsible && isUndefined(collapseText);\n      let text;\n\n      if (!expanded && !noExpandText) {\n        text = expandText;\n      } else if (expanded && !noCollapseText) {\n        // if expanded is true but the text is initally mounted, we dont show collapseText\n        text = collapseText;\n      }\n      if (!noExpandText || !noCollapseText) {\n        return (\n          // TODO: replace `a` tag with `span` in next major version\n          // NOTE: may have effect on style\n          // eslint-disable-next-line jsx-a11y/anchor-is-valid\n          <a\n            role=\"button\"\n            tabindex={0}\n            class={`${prefixCls}-ellipsis-expand`}\n            key=\"expand\"\n            ref={expandRef}\n            aria-label={text}\n            onClick={toggleOverflow}\n            onKeypress={(e) => isEnterPress(e) && toggleOverflow(e as any)}\n          >\n            {text}\n          </a>\n        );\n      }\n      return null;\n    };\n\n    /**\n     * 获取文本的缩略class和style\n     *\n     * 截断类型：\n     *  - CSS 截断，仅在 rows=1 且没有 expandable、pos、suffix 时生效\n     *  - JS 截断，应对 CSS 无法阶段的场景\n     * 相关变量\n     *  props:\n     *      - ellipsis:\n     *          - rows\n     *          - expandable\n     *          - pos\n     *          - suffix\n     *  state:\n     *      - isOverflowed，文本是否处于overflow状态\n     *      - expanded，文本是否处于折叠状态\n     *      - isTruncated，文本是否被js截断\n     *\n     * Get the abbreviated class and style of the text\n     *\n     * Truncation type:\n     *  -CSS truncation, which only takes effect when rows = 1 and there is no expandable, pos, suffix\n     *  -JS truncation, dealing with scenarios where CSS cannot stage\n     * related variables\n     *  props:\n     *      -ellipsis:\n     *          -rows\n     *          -expandable\n     *          -pos\n     *          -suffix\n     *  state:\n     *      -isOverflowed, whether the text is in an overflow state\n     *      -expanded, whether the text is in a collapsed state\n     *      -isTruncated, whether the text is truncated by js\n     * @returns {Object}\n     */\n    const getEllipsisStyle = () => {\n      const { ellipsis, component_ } = props;\n      if (!ellipsis) {\n        return {\n          ellipsisCls: '',\n          ellipsisStyle: {},\n          // ellipsisAttr: {}\n        };\n      }\n      const { rows } = getEllipsisOpt();\n      const { expanded, isTruncated } = state;\n      const useCSS = !expanded && canUseCSSEllipsis();\n      const ellipsisCls = cls({\n        [`${prefixCls}-ellipsis`]: true,\n        [`${prefixCls}-ellipsis-single-line`]: rows === 1,\n        [`${prefixCls}-ellipsis-multiple-line`]: rows > 1,\n        // component === 'span', Text component, It should be externally displayed inline\n        [`${prefixCls}-ellipsis-multiple-line-text`]: rows > 1 && component_ === 'span',\n        [`${prefixCls}-ellipsis-overflow-ellipsis`]: rows === 1 && useCSS,\n        // component === 'span', Text component, It should be externally displayed inline\n        [`${prefixCls}-ellipsis-overflow-ellipsis-text`]: rows === 1 && useCSS && component_ === 'span',\n      });\n      const ellipsisStyle = useCSS && rows > 1 ? { WebkitLineClamp: rows } : {};\n      return {\n        ellipsisCls,\n        ellipsisStyle,\n      };\n    };\n\n    const renderEllipsisText = (opt: Ellipsis) => {\n      const { suffix } = opt;\n      const children = props.children;\n\n      const { isTruncated, expanded, isOverflowed, ellipsisContent } = state;\n      // console.debug(suffix)\n      if (expanded || !isTruncated) {\n        return (\n          <span onMouseenter={onHover}>\n            {children}\n            {suffix && suffix.length ? suffix : null}\n          </span>\n        );\n      }\n      return (\n        <span onMouseenter={onHover}>\n          {ellipsisContent}\n          {/* {ELLIPSIS_STR} */}\n          {suffix}\n        </span>\n      );\n    };\n\n    function renderOperations() {\n      return (\n        <Fragment>\n          {renderExpandable()}\n          {renderCopy()}\n        </Fragment>\n      );\n    }\n\n    function renderCopy() {\n      const { copyable } = props;\n      const children = props.children;\n      // console.log(children)\n      if (!copyable) {\n        return null;\n      }\n      // If it is configured in the content of copyable, the copied content will be the content in copyable\n      const willCopyContent = (copyable as CopyableConfig)?.content ?? children;\n      let copyContent: string;\n      let hasObject = false;\n      if (Array.isArray(willCopyContent)) {\n        copyContent = '';\n        willCopyContent.forEach((value) => {\n          // console.debug(value.children)\n          if (typeof value.children === 'object' && value.type.toString() !== 'Symbol(v-txt)') {\n            hasObject = true;\n          }\n          // // console.debug(value.children)\n          copyContent += String(value.children);\n        });\n      } else if (typeof willCopyContent !== 'object') {\n        copyContent = String(willCopyContent);\n      } else {\n        hasObject = true;\n        copyContent = String(willCopyContent);\n      }\n\n      warning(\n        hasObject,\n        'Content to be copied in Typography is a object, it will case a [object Object] mistake when copy to clipboard.'\n      );\n      const copyConfig = {\n        content: copyContent,\n        duration: 3,\n        ...(typeof copyable === 'object' ? copyable : null),\n      };\n      return <Copyable {...copyConfig} forwardRef={copyRef} />;\n    }\n\n    function renderIcon() {\n      const { icon, size } = props;\n      const realSize = size === 'inherit' ? context.value : size;\n      if (!icon) {\n        return null;\n      }\n      const iconSize: Size = realSize === 'small' ? 'small' : 'default';\n      return (\n        <span class={`${prefixCls}-icon`} x-semi-prop=\"icon\">\n          {isSemiIcon(icon) ? cloneVNode(icon as any, { size: iconSize }) : icon}\n        </span>\n      );\n    }\n\n    function renderContent() {\n      // console.log(props)\n      const {\n        component_,\n        component,\n        className,\n        type,\n        spacing,\n        disabled,\n        style,\n        ellipsis,\n        icon,\n        size,\n        link,\n        heading,\n        weight,\n        ...rest\n      } = props;\n      const children = props.children;\n      const textProps = omit(rest, [\n        'strong',\n        'editable',\n        'mark',\n        'copyable',\n        'underline',\n        'code',\n        // 'link',\n        'delete',\n        'children',\n      ]);\n      const realSize = size === 'inherit' ? context.value : size;\n      const iconNode = renderIcon();\n      const ellipsisOpt = getEllipsisOpt();\n      // console.debug(ellipsisOpt)\n      const { ellipsisCls, ellipsisStyle } = getEllipsisStyle();\n      let textNode_ = ellipsis ? renderEllipsisText(ellipsisOpt) : children;\n      const linkCls = cls({\n        [`${prefixCls}-link-text`]: link,\n        [`${prefixCls}-link-underline`]: props.underline && link,\n      });\n      let textNode = wrapperDecorations(\n        props,\n        <>\n          {iconNode}\n          {props.link ? <span class={linkCls}>{textNode_}</span> : textNode_}\n        </>\n      );\n      const hTagReg = /^h[1-6]$/;\n      const isHeader = isString(heading) && hTagReg.test(heading);\n      const wrapperCls = cls(className, ellipsisCls, {\n        // [`${prefixCls}-primary`]: !type || type === 'primary',\n        [`${prefixCls}-${type}`]: type && !link,\n        [`${prefixCls}-${realSize}`]: realSize,\n        [`${prefixCls}-link`]: link,\n        [`${prefixCls}-disabled`]: disabled,\n        [`${prefixCls}-${spacing}`]: spacing,\n        [`${prefixCls}-${heading}`]: isHeader,\n        [`${prefixCls}-${heading}-weight-${weight}`]: isHeader && weight && isNaN(Number(weight)),\n      });\n\n      const textStyle: CSSProperties = {\n        ...(isNaN(Number(weight)) ? {} : { fontWeight: weight }),\n        ...style,\n      };\n\n\n      return (\n        <Typography\n          {...{\n            className: wrapperCls,\n            style: { ...textStyle, ...ellipsisStyle },\n            component_,\n            forwardRef: wrapperRef,\n            ...textProps,\n          }}\n        >\n          {{\n            default: () => {\n              return (\n                <>\n                  {textNode}\n                  {renderOperations()}\n                </>\n              );\n            },\n          }}\n        </Typography>\n      );\n    }\n\n    function renderTipWrapper() {\n      const children = props.children;\n      const showTooltip_ = showTooltip();\n      const content = renderContent();\n      if (showTooltip_) {\n        const { type, opts, renderTooltip } = showTooltip_ as ShowTooltip;\n        if (isFunction(renderTooltip)) {\n          return renderTooltip(children, content);\n        } else if (type.toLowerCase() === 'popover') {\n          return (\n            <Popover content={children ? children[0] : null} position=\"top\" {...opts}>\n              {content}\n            </Popover>\n          );\n        }\n        return (\n          <Tooltip content={children ? children[0] : null} position=\"top\" {...opts}>\n            {content}\n          </Tooltip>\n        );\n      } else {\n        return content;\n      }\n    }\n\n    return () => {\n      const { size } = props;\n      const realSize = size === 'inherit' ? context.value : size;\n      const content = (\n        <SizeContext.Provider value={realSize}>\n          <LocaleConsumer componentName=\"Typography\">\n            {{\n              default: (locale: Locale['Typography']) => {\n                expandStr = locale.expand;\n                collapseStr = locale.collapse;\n                // // console.debug(locale)\n                return renderTipWrapper();\n              },\n            }}\n          </LocaleConsumer>\n        </SizeContext.Provider>\n      );\n      if (props.ellipsis) {\n        return (\n          <ResizeObserver\n            onResize={(...args) => {\n              if (observerTakingEffect) {\n                onResize(...args);\n              }\n            }}\n            observeParent\n            observerProperty={ObserverProperty.Width}\n          >\n            {content}\n          </ResizeObserver>\n        );\n      }\n      return content;\n    };\n  },\n});\n\nexport default Base;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefixCls","cssClasses","PREFIX","ELLIPSIS_STR","propTypes","copyable","PropTypes","oneOfType","object","bool","delete","disabled","ellipsis","mark","underline","link","string","spacing","strong","size","type","style","className","icon","node","heading","component","weight","number","children","Array","Function","String","class","default","id","code","Boolean","component_","Number","defaultProps","vuePropsType","vuePropsMake","wrapperDecorations","props","content","wrapped","wrap","isNeeded","tag","wrapProps","h","Base","defineComponent","name","setup","useSlots","context","useTypographyBaseSizeContext","wrapperRef","ref","expandRef","copyRef","rafId","expandStr","collapseStr","observerTakingEffect","state","reactive","editable","copied","isOverflowed","ellipsisContent","expanded","isTruncated","prevChildren","onMounted","onResize","then","runAfterTicks","getDerivedStateFromProps","prevState","newState","watch","val","keys","forEach","key","onUnmounted","window","cancelAnimationFrame","entries","Promise","resolve","requestAnimationFrame","getEllipsisState","canUseCSSEllipsis","expandable","expandText","pos","suffix","getEllipsisOpt","isUndefined","length","shouldTruncated","rows","compareSingleRow","value","scrollHeight","offsetHeight","document","createRange","containerNode","containerWidth","getBoundingClientRect","width","childNodes","from","range","contentWidth","reduce","acc","selectNodeContents","detach","showTooltip","canUseCSSEllipsis_","overflowed","show","defaultOpts","toLowerCase","merge","opts","showArrow","cls","onHover","updateOverflow","isNull","nextTick","warning","extraNode","expand","copy","realChildren","isArray","join","getRenderText","toggleOverflow","e","onExpand","collapsible","undefined","collapseText","renderExpandable","noExpandText","noCollapseText","text","_createVNode","isEnterPress","getEllipsisStyle","ellipsisCls","ellipsisStyle","useCSS","WebkitLineClamp","renderEllipsisText","opt","renderOperations","_Fragment","renderCopy","willCopyContent","copyContent","hasObject","copyConfig","duration","Copyable","_mergeProps","renderIcon","realSize","iconSize","isSemiIcon","cloneVNode","renderContent","rest","textProps","omit","iconNode","ellipsisOpt","textNode_","linkCls","textNode","hTagReg","isHeader","isString","test","wrapperCls","isNaN","textStyle","fontWeight","Typography","forwardRef","renderTipWrapper","showTooltip_","renderTooltip","isFunction","Popover","Tooltip","SizeContext","Provider","LocaleConsumer","locale","collapse","ResizeObserver","args","ObserverProperty","Width"],"mappings":"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"}