import { CSSProperties, Ref, PropType } from 'vue';
import '@douyinfe/semi-foundation/lib/es/typography/typography.css';
import { BaseProps } from '../_base/baseComponent';
import { CombineProps } from '../interface';
interface TypographyProps extends BaseProps {
    component_?: any;
    forwardRef?: Ref<any>;
    style?: CSSProperties;
    className?: string;
}
export declare const vuePropsType: CombineProps<TypographyProps>;
declare const Typography: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    component_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<Ref<any, any>> | {
        type: PropType<Ref<any, any>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    component_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<Ref<any, any>> | {
        type: PropType<Ref<any, any>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Typography;
