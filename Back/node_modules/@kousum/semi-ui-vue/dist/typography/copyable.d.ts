import { PropType, VNode } from 'vue';
import { BaseProps } from '../_base/baseComponent';
import { CombineProps } from '../interface';
import { CopyableConfig } from './title';
export interface CopyableProps extends BaseProps {
    content?: string;
    copyTip?: any;
    duration?: number;
    forwardRef?: any;
    successTip?: any;
    icon?: VNode;
    onCopy?: (e: any, content: string, res: boolean) => void;
    render?: (copied: boolean, doCopy: (e: MouseEvent) => void, configs: CopyableConfig) => VNode;
}
export declare const vuePropsType: CombineProps<CopyableProps>;
declare const Copyable: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    content: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    copyTip: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    successTip: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    icon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    onCopy: PropType<(e: any, content: string, res: boolean) => void> | {
        type: PropType<(e: any, content: string, res: boolean) => void>;
        default?: any;
        required?: false;
    };
    render: PropType<(copied: boolean, doCopy: (e: MouseEvent) => void, configs: CopyableConfig) => VNode> | {
        type: PropType<(copied: boolean, doCopy: (e: MouseEvent) => void, configs: CopyableConfig) => VNode>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    content: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    copyTip: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    successTip: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    icon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    onCopy: PropType<(e: any, content: string, res: boolean) => void> | {
        type: PropType<(e: any, content: string, res: boolean) => void>;
        default?: any;
        required?: false;
    };
    render: PropType<(copied: boolean, doCopy: (e: MouseEvent) => void, configs: CopyableConfig) => VNode> | {
        type: PropType<(copied: boolean, doCopy: (e: MouseEvent) => void, configs: CopyableConfig) => VNode>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Copyable;
