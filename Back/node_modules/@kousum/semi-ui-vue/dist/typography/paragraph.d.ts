import { CSSProperties, PropType } from 'vue';
import { Ellipsis, TypographyBaseSize, TypographyBaseSpacing, TypographyBaseType } from './interface';
import { CopyableConfig, LinkType } from './title';
import { CombineProps } from '../interface';
export interface ParagraphProps {
    className?: string;
    component_?: any;
    copyable?: CopyableConfig | boolean;
    delete?: boolean;
    disabled?: boolean;
    /**
     * ellipsis 用于设置截断相关参数.
     * Ellipsis is used to set ellipsis related parameters.
     * ellipsis 仅支持纯文本的截断，不支持 reactNode 等复杂类型，请确保 children 传入内容类型为 string.
     * Ellipsis only supports ellipsis of plain text, and does not support complex types such as reactNode.
     * Please ensure that the content type of children is string.
     * Semi 截断有两种策略， CSS 截断和 JS 截断。
     * Semi ellipsis has two strategies, CSS ellipsis and JS ellipsis.
     *  - 当设置中间截断（pos='middle')、可展开（expandable)、有后缀（suffix 非空）、可复制（copyable），启用 JS 截断策略
     *  - When setting middle ellipsis (pos='middle')、expandable、suffix is not empty string、copyable,
     * the JS ellipsis strategy is enabled
     *  - 非以上场景，启用 CSS 截断策略
     *  - Otherwise, enable the CSS ellipsis strategy
     *
     * 通常来说 CSS 截断的性能优于 JS 截断。在 children 不变， 容器尺寸不变的情况下，CSS 截断只涉及 1-2 次计算，js 截断基于二分法，可能涉及多次计算。
     * In general CSS ellipsis performs better than JS ellipsis. when the children and container size remain unchanged,
     * CSS ellipsis only involves 1-2 calculations, while JS ellipsis is based on dichotomy and may require multiple calculations.
     * 同时使用大量带有截断功能的 Typography 需注意性能消耗，如在 Table 中，可通过设置合理的页容量进行分页减少性能损耗
     * Pay attention to performance consumption when using a large number of Typography with ellipsis. For example, in Table,
     * you can reduce performance loss by setting a reasonable pageSize for paging
     */
    ellipsis?: Ellipsis | boolean;
    link?: LinkType;
    mark?: boolean;
    size?: TypographyBaseSize;
    spacing?: TypographyBaseSpacing;
    strong?: boolean;
    style?: CSSProperties;
    type?: TypographyBaseType;
    underline?: boolean;
}
export declare const vuePropsType: CombineProps<ParagraphProps>;
declare const paragraph: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    component_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    copyable: PropType<boolean | CopyableConfig> | {
        type: PropType<boolean | CopyableConfig>;
        default?: any;
        required?: false;
    };
    delete: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    ellipsis: PropType<boolean | Ellipsis> | {
        type: PropType<boolean | Ellipsis>;
        default?: any;
        required?: false;
    };
    link: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    mark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "normal" | "inherit"> | {
        type: PropType<"small" | "normal" | "inherit">;
        default?: any;
        required?: false;
    };
    spacing: PropType<"normal" | "extended"> | {
        type: PropType<"normal" | "extended">;
        default?: any;
        required?: false;
    };
    strong: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary"> | {
        type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary">;
        default?: any;
        required?: false;
    };
    underline: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    component_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    copyable: PropType<boolean | CopyableConfig> | {
        type: PropType<boolean | CopyableConfig>;
        default?: any;
        required?: false;
    };
    delete: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    ellipsis: PropType<boolean | Ellipsis> | {
        type: PropType<boolean | Ellipsis>;
        default?: any;
        required?: false;
    };
    link: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    mark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "normal" | "inherit"> | {
        type: PropType<"small" | "normal" | "inherit">;
        default?: any;
        required?: false;
    };
    spacing: PropType<"normal" | "extended"> | {
        type: PropType<"normal" | "extended">;
        default?: any;
        required?: false;
    };
    strong: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary"> | {
        type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary">;
        default?: any;
        required?: false;
    };
    underline: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default paragraph;
