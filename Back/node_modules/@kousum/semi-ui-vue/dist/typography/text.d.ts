import { CSSProperties, PropType } from 'vue';
import { Ellipsis, TypographyBaseSize, TypographyBaseType } from './interface';
import { CopyableConfig, LinkType } from './title';
import { CombineProps } from '../interface';
export interface TextProps {
    className?: string;
    code?: boolean;
    component_?: any;
    copyable?: CopyableConfig | boolean;
    delete?: boolean;
    disabled?: boolean;
    ellipsis?: Ellipsis | boolean;
    icon?: any | string;
    link?: LinkType;
    mark?: boolean;
    size?: TypographyBaseSize;
    strong?: boolean;
    style?: CSSProperties;
    type?: TypographyBaseType;
    underline?: boolean;
    weight?: number;
}
export declare const vuePropsType: CombineProps<TextProps>;
declare const Text: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    code: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    component_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    copyable: PropType<boolean | CopyableConfig> | {
        type: PropType<boolean | CopyableConfig>;
        default?: any;
        required?: false;
    };
    delete: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    ellipsis: PropType<boolean | Ellipsis> | {
        type: PropType<boolean | Ellipsis>;
        default?: any;
        required?: false;
    };
    icon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    link: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    mark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "normal" | "inherit"> | {
        type: PropType<"small" | "normal" | "inherit">;
        default?: any;
        required?: false;
    };
    strong: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary"> | {
        type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary">;
        default?: any;
        required?: false;
    };
    underline: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    weight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    code: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    component_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    copyable: PropType<boolean | CopyableConfig> | {
        type: PropType<boolean | CopyableConfig>;
        default?: any;
        required?: false;
    };
    delete: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    ellipsis: PropType<boolean | Ellipsis> | {
        type: PropType<boolean | Ellipsis>;
        default?: any;
        required?: false;
    };
    icon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    link: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    mark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "normal" | "inherit"> | {
        type: PropType<"small" | "normal" | "inherit">;
        default?: any;
        required?: false;
    };
    strong: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary"> | {
        type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary">;
        default?: any;
        required?: false;
    };
    underline: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    weight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Text;
