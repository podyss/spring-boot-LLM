import { defineComponent as p, createVNode as r, mergeProps as s } from "vue";
import f from "classnames";
import { cssClasses as c } from '@douyinfe/semi-foundation/lib/es/typography/constants';
import d from "./base";
const i = c.PREFIX, m = {
  copyable: {
    type: [Object, Boolean],
    default: !1
  },
  delete: {
    type: Boolean,
    default: !1
  },
  disabled: {
    type: Boolean,
    default: !1
  },
  // editable: false,
  ellipsis: {
    type: [Object, Boolean],
    default: !1
  },
  mark: {
    type: Boolean,
    default: !1
  },
  underline: {
    type: Boolean,
    default: !1
  },
  strong: {
    type: Boolean,
    default: !1
  },
  link: {
    type: [Boolean, Object, String],
    default: !1
  },
  type: {
    type: String,
    default: "primary"
  },
  size: {
    type: String,
    default: "normal"
  },
  spacing: {
    type: String,
    default: "normal"
  },
  style: {
    type: Object,
    default: {}
  },
  className: {
    type: String,
    default: ""
  },
  component_: {
    type: [Object, String, Function]
  }
}, b = /* @__PURE__ */ p({
  props: {
    ...m
  },
  name: "Paragraph",
  setup(e, {
    slots: a,
    attrs: l
  }) {
    const {
      className: n
    } = e, o = f(n, `${i}-paragraph`);
    return () => {
      var t;
      return r(d, s({
        children: (t = a.default) == null ? void 0 : t.call(a)
      }, {
        ...e,
        component_: e.component_ || "p"
      }, l, {
        className: o
      }), null);
    };
  }
});
export {
  b as default,
  m as vuePropsType
};
//# sourceMappingURL=paragraph.js.map
