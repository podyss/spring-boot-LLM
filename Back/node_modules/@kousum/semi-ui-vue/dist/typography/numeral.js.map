{"version":3,"file":"numeral.js","sources":["../../src/components/typography/numeral.tsx"],"sourcesContent":["import type { ComponentObjectPropsOptions } from 'vue';\nimport { CSSProperties, defineComponent, h, PropType, Text, useSlots, VNode } from 'vue';\nimport * as PropTypes from '../PropTypes';\nimport { vuePropsMake } from '../PropTypes';\nimport Base from './base';\nimport {\n  OmitTypographyProps,\n  TypographyBaseRule,\n  TypographyBaseSize,\n  TypographyBaseTruncate,\n  TypographyBaseType,\n} from './interface';\nimport { CopyableConfig, LinkType } from './title';\nimport FormatNumeral from '@douyinfe/semi-foundation/typography/formatNumeral';\nimport { getFragmentChildren } from '../_utils';\nimport { omit } from 'lodash';\nimport { CombineProps } from '../interface';\n\ntype OmitNumeralProps = OmitTypographyProps;\n\nexport interface NumeralProps {\n  rule?: TypographyBaseRule;\n  precision?: number;\n  truncate?: TypographyBaseTruncate;\n  parser?: (value: string) => string;\n  // children?: VNode;\n  className?: string;\n  code?: boolean;\n  component_?: VNode | string;\n  copyable?: CopyableConfig | boolean;\n  delete?: boolean;\n  disabled?: boolean;\n  icon?: VNode | string;\n  link?: LinkType;\n  mark?: boolean;\n  size?: TypographyBaseSize;\n  strong?: boolean;\n  style?: CSSProperties;\n  type?: TypographyBaseType;\n  underline?: boolean;\n}\n\nconst propTypes: CombineProps<NumeralProps> = {\n  rule: PropTypes.string as PropType<NumeralProps['rule']>,\n  precision: PropTypes.number,\n  truncate: PropTypes.string as PropType<NumeralProps['truncate']>,\n  parser: PropTypes.func as PropType<NumeralProps['parser']>,\n  copyable: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  delete: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  mark: PropTypes.bool,\n  underline: PropTypes.bool,\n  link: [PropTypes.object, PropTypes.bool, PropTypes.string],\n  strong: PropTypes.bool,\n  type: PropTypes.string as PropType<NumeralProps['type']>,\n  size: PropTypes.string as PropType<NumeralProps['size']>,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  code: PropTypes.bool,\n  component_: [PropTypes.string, PropTypes.node] as PropType<NumeralProps['component_']>,\n};\n\nconst defaultProps = {\n  rule: 'text',\n  precision: 0,\n  truncate: 'round',\n  parser: undefined,\n  copyable: false,\n  delete: false,\n  icon: '',\n  mark: false,\n  underline: false,\n  strong: false,\n  link: false,\n  type: 'primary',\n  style: {},\n  size: 'normal',\n  className: '',\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst Numeral = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Numeral',\n  setup(props, {}) {\n    const slots = useSlots();\n\n    // Traverse the entire virtual DOM using a depth-first traversal algorithm, then format each piece. (in react)\n    function formatNodeDFS(node) {\n      if (!Array.isArray(node)) {\n        node = [node];\n      }\n      // Because the property is read-only, an object is returned for overwriting rather than directly modifying the object's contents.\n      node = node.map((item) => {\n        if (typeof item === 'string' || typeof item === 'number') {\n          // Formatting the digital content of nodes.\n          return new FormatNumeral(String(item), props.rule, props.precision, props.truncate, props.parser).format();\n        }\n        if (typeof item === 'function') {\n          return formatNodeDFS(item());\n        }\n        if (typeof item === 'object' && 'children' in item) {\n          let children = formatNodeDFS(item['children']);\n          function checkChildren() {\n            if (Array.isArray(children)) {\n              return children;\n            }\n            if (typeof children === 'object') {\n              return [children];\n            }\n\n\n            // return children;\n            // (当ctx有值时是jsx组件，或者ctx有值type.render没值是jsx组件)，否则是template组件？？\n            // type: Symbol(v-txt) 组件的children只能是文本不能是VNode\n            if(!item.ctx || item.ctx.type?.render){\n              return children;\n            }\n            if (item.type !== Text) {\n              return [h(Text, children)];\n            } else {\n              return children;\n            }\n          }\n\n          return {\n            ...item,\n            props: { ...item['props'] },\n            children: checkChildren(),\n          };\n        }\n        return item;\n      });\n      return node.length === 1 ? node[0] : node;\n    }\n\n    return () => {\n      // Deep copy and remove props that are not needed by the Base component.\n      const baseProps = Object.assign({}, props) as Record<string, unknown>;\n      delete baseProps.rule;\n      delete baseProps.parser;\n      // Each piece of content in the virtual DOM is formatted by the `formatNumeral` function.\n      baseProps.children = formatNodeDFS(getFragmentChildren(slots));\n      return <Base {...{...omit(baseProps, 'precision', 'truncate', 'component_'), component_: baseProps.component_ || 'span'}}></Base>;\n    };\n  },\n});\n\nexport default Numeral;\n"],"names":["propTypes","rule","PropTypes","string","precision","number","truncate","parser","func","copyable","oneOfType","object","bool","delete","disabled","icon","node","mark","underline","link","strong","type","size","style","className","code","component_","defaultProps","undefined","vuePropsType","vuePropsMake","Numeral","defineComponent","props","name","setup","slots","useSlots","formatNodeDFS","Array","isArray","map","item","FormatNumeral","String","format","checkChildren","children","ctx","render","Text","h","length","baseProps","Object","assign","getFragmentChildren","_createVNode","Base","omit"],"mappings":"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"}