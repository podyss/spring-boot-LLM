import { CSSProperties, PropType, VNode } from 'vue';
import { TypographyBaseRule, TypographyBaseSize, TypographyBaseTruncate, TypographyBaseType } from './interface';
import { CopyableConfig, LinkType } from './title';
import { CombineProps } from '../interface';
export interface NumeralProps {
    rule?: TypographyBaseRule;
    precision?: number;
    truncate?: TypographyBaseTruncate;
    parser?: (value: string) => string;
    className?: string;
    code?: boolean;
    component_?: VNode | string;
    copyable?: CopyableConfig | boolean;
    delete?: boolean;
    disabled?: boolean;
    icon?: VNode | string;
    link?: LinkType;
    mark?: boolean;
    size?: TypographyBaseSize;
    strong?: boolean;
    style?: CSSProperties;
    type?: TypographyBaseType;
    underline?: boolean;
}
export declare const vuePropsType: CombineProps<NumeralProps>;
declare const Numeral: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    rule: PropType<"text" | "numbers" | "bytes-decimal" | "bytes-binary" | "percentages" | "exponential"> | {
        type: PropType<"text" | "numbers" | "bytes-decimal" | "bytes-binary" | "percentages" | "exponential">;
        default?: any;
        required?: false;
    };
    precision: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    truncate: PropType<"round" | "ceil" | "floor"> | {
        type: PropType<"round" | "ceil" | "floor">;
        default?: any;
        required?: false;
    };
    parser: PropType<(value: string) => string> | {
        type: PropType<(value: string) => string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    code: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    component_: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    copyable: PropType<boolean | CopyableConfig> | {
        type: PropType<boolean | CopyableConfig>;
        default?: any;
        required?: false;
    };
    delete: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    link: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    mark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "normal" | "inherit"> | {
        type: PropType<"small" | "normal" | "inherit">;
        default?: any;
        required?: false;
    };
    strong: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary"> | {
        type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary">;
        default?: any;
        required?: false;
    };
    underline: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    rule: PropType<"text" | "numbers" | "bytes-decimal" | "bytes-binary" | "percentages" | "exponential"> | {
        type: PropType<"text" | "numbers" | "bytes-decimal" | "bytes-binary" | "percentages" | "exponential">;
        default?: any;
        required?: false;
    };
    precision: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    truncate: PropType<"round" | "ceil" | "floor"> | {
        type: PropType<"round" | "ceil" | "floor">;
        default?: any;
        required?: false;
    };
    parser: PropType<(value: string) => string> | {
        type: PropType<(value: string) => string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    code: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    component_: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    copyable: PropType<boolean | CopyableConfig> | {
        type: PropType<boolean | CopyableConfig>;
        default?: any;
        required?: false;
    };
    delete: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    link: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    mark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "normal" | "inherit"> | {
        type: PropType<"small" | "normal" | "inherit">;
        default?: any;
        required?: false;
    };
    strong: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary"> | {
        type: PropType<"warning" | "success" | "primary" | "secondary" | "danger" | "tertiary" | "quaternary">;
        default?: any;
        required?: false;
    };
    underline: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Numeral;
