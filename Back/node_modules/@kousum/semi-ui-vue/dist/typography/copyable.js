import { defineComponent as P, reactive as S, onUnmounted as j, createVNode as c, isVNode as y, mergeProps as x, cloneVNode as O } from "vue";
import k from "../tooltip";
import { cssClasses as F } from '@douyinfe/semi-foundation/lib/es/typography/constants';
import R from "copy-text-to-clipboard";
import V from "classnames";
import { noop as _ } from '@douyinfe/semi-foundation/lib/es/utils/function';
import m from "../locale/localeConsumer";
import { IconTick as $, IconCopy as h } from "@kousum/semi-icons-vue";
import v from '@douyinfe/semi-foundation/lib/es/utils/isEnterPress';
import * as f from "../PropTypes";
function w(t) {
  return typeof t == "function" || Object.prototype.toString.call(t) === "[object Object]" && !y(t);
}
const d = F.PREFIX, E = {
  forwardRef: Object,
  content: {
    type: String,
    default: ""
  },
  onCopy: {
    type: Function,
    default: _
  },
  duration: {
    type: Number,
    default: 3
  },
  style: {
    type: [Object, String],
    default: {}
  },
  className: {
    type: String,
    default: ""
  },
  copyTip: f.node,
  successTip: f.node,
  icon: f.node,
  render: Function
}, G = /* @__PURE__ */ P({
  props: {
    ...E
  },
  name: "Copyable",
  setup(t, {
    slots: L
  }) {
    let r;
    const s = S({
      copied: !1,
      item: ""
    });
    j(() => {
      r && (clearTimeout(r), r = null);
    });
    const p = (o) => {
      const {
        content: e,
        duration: i,
        onCopy: n
      } = t, l = R(e);
      n && n(o, e, l), C(e, i);
    }, C = (o, e) => {
      s.copied = !0, s.item = o, r = setTimeout(() => {
        T();
      }, e * 1e3);
    }, T = () => {
      r && (clearTimeout(r), r = null, s.copied = !1, s.item = "");
    }, b = () => {
      const {
        successTip: o
      } = t;
      return typeof o < "u" ? o : c(m, {
        componentName: "Typography"
      }, {
        default: (e) => c("span", null, [c($, null, null), e.copied])
      });
    }, g = () => {
      const {
        icon: o
      } = t, e = {
        role: "button",
        tabIndex: 0,
        onClick: p,
        onKeyPress: (n) => v(n) && p(n)
      }, i = (
        // eslint-disable-next-line jsx-a11y/anchor-is-valid
        c("a", {
          class: `${d}-action-copy-icon`
        }, [c(h, x({
          onClick: p
        }, e), null)])
      );
      return y(o) ? O(o, e) : i;
    };
    return () => {
      const {
        style: o,
        className: e,
        forwardRef: i,
        copyTip: n,
        render: l
      } = t, {
        copied: a
      } = s, N = V(e, {
        [`${d}-action-copy`]: !a,
        [`${d}-action-copied`]: a
      });
      return l ? l(a, p, t) : c(m, {
        componentName: "Typography"
      }, {
        default: (I) => {
          let u;
          return c("span", {
            style: {
              marginLeft: "4px",
              ...o
            },
            class: N,
            ref: i
          }, [a ? b() : c(k, {
            content: typeof n < "u" ? n : I.copy
          }, w(u = g()) ? u : {
            default: () => [u]
          })]);
        }
      });
    };
  }
});
export {
  G as default,
  E as vuePropsType
};
//# sourceMappingURL=copyable.js.map
