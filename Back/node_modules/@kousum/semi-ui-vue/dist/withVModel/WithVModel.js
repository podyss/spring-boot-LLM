import { defineComponent as c, ref as g, createVNode as r, mergeProps as h } from "vue";
import { omit as i } from "lodash";
import * as v from '@douyinfe/semi-foundation/lib/es/utils/object';
function A(n, e) {
  return /* @__PURE__ */ c({
    name: n.name,
    props: {
      //@ts-ignore
      ...n.props,
      modelValue: [Number, String, Object, Array, Boolean],
      "onUpdate:modelValue": Function
    },
    setup(a, {
      emit: y,
      slots: t,
      expose: f
    }) {
      const V = g();
      return f({
        ...V.value
      }), () => a["onUpdate:modelValue"] ? (
        //@ts-ignore
        r(n, h(i(a, "update:modelValue", "modelValue", (e == null ? void 0 : e.valueKey) || "value", "onChange"), {
          [(e == null ? void 0 : e.valueKey) || "value"]: a.modelValue,
          [(e == null ? void 0 : e.onKeyChangeFnName) || "onChange"]: (u) => {
            var d, m;
            let l = e != null && e.valuePath ? v.get(u, e.valuePath) : u;
            Array.isArray(l) && (l = [...l]), (d = a.onChange) == null || d.call(a, l), (m = a["onUpdate:modelValue"]) == null || m.call(a, l);
          }
        }), {
          default: t.default
        })
      ) : r(n, i(a, "update:modelValue", "modelValue"), null);
    }
  });
}
export {
  A as default
};
//# sourceMappingURL=WithVModel.js.map
