import G from '@douyinfe/semi-foundation/lib/es/utils/warning';
import { getFragmentChildren as O } from "../_utils";
const k = (r, l, n, i) => {
  const t = r.props;
  if (!r || !t)
    return null;
  const p = {
    value: t.value,
    // Drop-down menu rendering priority label value, children, value in turn downgrade
    label: t.label || // @ts-ignore
    (typeof r.children == "object" && r.children.default ? r.children.default() : null) || t.value,
    _show: !0,
    _selected: !1,
    _scrollIndex: n,
    ...t,
    _parentGroup: l
  };
  return p._keyInJsx = i || r.key, p;
}, b = (r) => {
  let l = [], n = [];
  const i = {
    label: "",
    children: [],
    _show: !1
  };
  let t = r.filter((e) => e && e.props), p = "", u = -1;
  return t.forEach((e) => {
    var c, f;
    if (((c = e.type) == null ? void 0 : c.name) === "isSelectOption") {
      p = "option", u++;
      const a = k(e, void 0, u);
      i.children.push(a), n.push(a);
    } else if (((f = e.type) == null ? void 0 : f.name) === "isSelectOptionGroup") {
      p = "group";
      let {
        ...a
      } = e.props, o = O(e.children), y = [];
      Array.isArray(o) ? y = o.map((s) => s.key) : y.push(o.key), Array.isArray(o[0]) && (o = o[0]);
      const m = o.map((s, g) => {
        let h = s.key;
        return y[g] === null && (h = e.key + "" + s.key), u++, k(s, a, u, h);
      }), d = {
        ...e.props,
        children: m,
        // @ts-ignore
        key: e.key
      };
      l.push(d), n = n.concat(m);
    } else
      G(!0, "[Semi Select] The children of `Select` should be `Select.Option` or `Select.OptionGroup`");
  }), p === "option" && (l = [i]), {
    optionGroups: l,
    options: n
  };
};
export {
  k as generateOption,
  b as getOptionsFromGroup
};
//# sourceMappingURL=utils.js.map
