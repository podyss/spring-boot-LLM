import { type CSSProperties, type PropType, type VNode } from 'vue';
import type { BasicOptionProps } from '@douyinfe/semi-foundation/lib/es/select/optionFoundation';
import type { CombineProps, RemoveIndexSignature } from '../interface';
import { OptionGroupProps } from './optionGroup';
export interface OptionProps extends RemoveIndexSignature<BasicOptionProps> {
    value?: string | number;
    label?: string | number | VNode | VNode[];
    children?: string | number | VNode | VNode[];
    disabled?: boolean;
    showTick?: boolean;
    className?: string;
    style?: CSSProperties;
    selected?: boolean;
    empty?: boolean;
    emptyContent?: string | number | VNode | VNode[] | (() => VNode);
    inputValue?: string;
    renderOptionItem?: (...args: any) => VNode;
    onMouseEnter?: (e: MouseEvent) => any;
    focused?: boolean;
    onSelect?: (opts: OptionProps, e: MouseEvent) => any;
    prefixCls?: string;
    _scrollIndex?: number;
    _selected?: boolean;
    _show?: boolean;
    semiOptionId?: string;
    key_?: any;
    _parentGroup?: OptionGroupProps;
    _keyInOptionList?: string;
    _keyInJsx?: string | number;
    _inputCreateOnly?: boolean;
    optionRest?: Record<string, any>;
}
export declare const vuePropsType: CombineProps<OptionProps>;
declare const Option: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    value: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    label: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    children: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showTick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    empty: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | (() => VNode)> | {
        type: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[] | (() => VNode)>;
        default?: any;
        required?: false;
    };
    inputValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    renderOptionItem: PropType<(...args: any) => VNode> | {
        type: PropType<(...args: any) => VNode>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    focused: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(opts: OptionProps, e: MouseEvent) => any> | {
        type: PropType<(opts: OptionProps, e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    _scrollIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    _selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    _show: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    semiOptionId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    key_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    _parentGroup: PropType<OptionGroupProps> | {
        type: PropType<OptionGroupProps>;
        default?: any;
        required?: false;
    };
    _keyInOptionList: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    _keyInJsx: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    _inputCreateOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    optionRest: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
}>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    value: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    label: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    children: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showTick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    empty: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | (() => VNode)> | {
        type: PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[] | (() => VNode)>;
        default?: any;
        required?: false;
    };
    inputValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    renderOptionItem: PropType<(...args: any) => VNode> | {
        type: PropType<(...args: any) => VNode>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    focused: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(opts: OptionProps, e: MouseEvent) => any> | {
        type: PropType<(opts: OptionProps, e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    _scrollIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    _selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    _show: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    semiOptionId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    key_: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    _parentGroup: PropType<OptionGroupProps> | {
        type: PropType<OptionGroupProps>;
        default?: any;
        required?: false;
    };
    _keyInOptionList: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    _keyInJsx: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    _inputCreateOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    optionRest: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Option;
