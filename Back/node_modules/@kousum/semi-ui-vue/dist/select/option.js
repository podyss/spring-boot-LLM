import { defineComponent as F, createVNode as i, mergeProps as P, toRaw as R } from "vue";
import b from "classnames";
import { isString as h } from "lodash";
import { cssClasses as w } from '@douyinfe/semi-foundation/lib/es/select/constants';
import { LocaleConsumerFunc as L } from "../locale/localeConsumer";
import { IconTick as M } from "@kousum/semi-icons-vue";
import { getHighLightTextHTML as E } from "../_utils/index";
import A from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
import { useHasInProps as D } from "../_base/baseComponent";
const H = L(), V = {
  value: [String, Number],
  label: [String, Number, Object, Array],
  children: [String, Number, Object, Array],
  disabled: Boolean,
  selected: Boolean,
  empty: Boolean,
  emptyContent: [Object, String, Number, Function],
  inputValue: String,
  renderOptionItem: Function,
  onMouseEnter: Function,
  focused: Boolean,
  showTick: Boolean,
  className: String,
  style: [String, Object],
  onSelect: Function,
  prefixCls: {
    type: String,
    default: w.PREFIX_OPTION
  },
  _scrollIndex: Number,
  _selected: Boolean,
  _show: Boolean,
  semiOptionId: String,
  key_: [Object, String, Number],
  _parentGroup: Object,
  _keyInOptionList: String,
  _keyInJsx: [String, Number],
  _inputCreateOnly: Boolean,
  optionRest: {
    type: Object,
    default: () => {
    }
  }
}, ee = /* @__PURE__ */ F({
  props: {
    ...V
  },
  name: "isSelectOption",
  setup(c, {
    slots: g,
    attrs: k
  }) {
    const {
      getProps: _
    } = D();
    function y({
      value: t,
      label: n,
      children: o,
      ...s
    }, l) {
      c.disabled || c.onSelect({
        ...s,
        value: t,
        label: R(n || o)
      }, l);
    }
    function x({
      config: t,
      children: n,
      inputValue: o,
      prefixCls: s
    }) {
      return h(n) && o ? E(t) : n;
    }
    return () => {
      const t = g.default ? g.default() : null, {
        disabled: n,
        value: o,
        selected: s,
        label: l,
        empty: a,
        emptyContent: S,
        onSelect: G,
        focused: C,
        showTick: $,
        className: u,
        style: N,
        onMouseEnter: m,
        prefixCls: e,
        renderOptionItem: O,
        inputValue: d,
        semiOptionId: B,
        optionRest: J,
        ...T
      } = _(c), p = {
        ...c.optionRest,
        ...T
      }, I = b(e, {
        [`${e}-disabled`]: n,
        [`${e}-selected`]: s,
        [`${e}-focused`]: C,
        [`${e}-empty`]: a,
        [u]: u
      }), j = b([`${e}-icon`]);
      if (a)
        return S === null ? null : i(H, {
          componentName: "Select"
        }, {
          default: (r) => i("div", {
            class: I
          }, [S || r.emptyText])
        });
      if (typeof O == "function") {
        const r = b(u, {
          [`${e}-custom`]: !0,
          [`${e}-custom-selected`]: s
        });
        return O({
          disabled: n,
          focused: C,
          selected: s,
          style: N,
          label: l,
          value: o,
          inputValue: d,
          onMouseEnter: (f) => m(f),
          onClick: (f) => y({
            value: o,
            label: l,
            children: t,
            ...p
          }, f),
          className: r,
          ...p
        });
      }
      const v = {
        searchWords: d,
        sourceString: t,
        option: {
          highlightClassName: `${e}-keyword`
        }
      };
      return (
        // eslint-disable-next-line jsx-a11y/interactive-supports-focus,jsx-a11y/click-events-have-key-events
        i("div", P({
          class: I,
          onClick: (r) => {
            y({
              value: o,
              label: l,
              children: t,
              ...p
            }, r);
          },
          onMouseenter: (r) => m && m(r),
          role: "option",
          id: B,
          "aria-selected": s ? "true" : "false",
          "aria-disabled": n ? "true" : "false",
          style: N
        }, A(k)), [$ ? i("div", {
          class: j
        }, [i(M, null, null)]) : null, h(t) ? i("div", {
          class: `${e}-text`
        }, [x({
          children: t,
          config: v,
          inputValue: d,
          prefixCls: e
        })]) : [t]])
      );
    };
  }
});
export {
  ee as default,
  V as vuePropsType
};
//# sourceMappingURL=option.js.map
