import { CSSProperties, PropType } from 'vue';
import { strings } from '@douyinfe/semi-foundation/lib/es/dropdown/constants';
import { type TooltipProps, type Trigger } from '../tooltip';
import DropdownMenu from './dropdownMenu';
import DropdownItem, { DropdownItemProps } from './dropdownItem';
import DropdownDivider, { DropdownDividerProps } from './dropdownDivider';
import DropdownTitle, { DropdownTitleProps } from './dropdownTitle';
import '@douyinfe/semi-foundation/lib/es/dropdown/dropdown.css';
import { Motion } from '../_base/base';
import { ArrayElement } from '@douyinfe/semi-foundation/lib/es/utils/type';
import { CombineProps } from '../interface';
export type { DropdownDividerProps } from './dropdownDivider';
export type { DropdownItemProps, Type } from './dropdownItem';
export type { DropdownMenuProps } from './dropdownMenu';
export type { DropdownTitleProps } from './dropdownTitle';
export interface DropDownMenuItemItem extends DropdownItemProps {
    node: 'item';
    name?: string;
}
export interface DropDownMenuItemDivider extends DropdownDividerProps {
    node: 'divider';
}
export interface DropDownMenuItemTitle extends DropdownTitleProps {
    node: 'title';
    name?: string;
}
export type DropDownMenuItem = DropDownMenuItemItem | DropDownMenuItemDivider | DropDownMenuItemTitle;
export interface DropdownProps extends TooltipProps {
    onFilter?: any;
    onFilterDropdownVisibleChange?: any;
    onSelect?: any;
    onHeaderCell?: any;
    onGroupedRow?: any;
    render?: any;
    visible?: boolean;
    position?: ArrayElement<typeof strings.POSITION_SET>;
    getPopupContainer?: () => HTMLElement;
    mouseEnterDelay?: number;
    mouseLeaveDelay?: number;
    menu?: DropDownMenuItem[];
    trigger?: Trigger;
    zIndex?: number;
    motion?: Motion;
    className?: string;
    contentClassName?: string | any[];
    style?: CSSProperties;
    onVisibleChange?: (visible: boolean) => void;
    rePosKey?: string | number;
    showTick?: boolean;
    prefixCls?: string;
    spacing?: number;
    closeOnEsc?: TooltipProps['closeOnEsc'];
    onEscKeyDown?: TooltipProps['onEscKeyDown'];
    name?: string;
}
export declare const DropdownVuePropsType: CombineProps<DropdownProps>;
export declare const vuePropsType: CombineProps<DropdownProps>;
declare const Dropdown: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    onFilter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onFilterDropdownVisibleChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onHeaderCell: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    render: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    position: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    menu: PropType<DropDownMenuItem[]> | {
        type: PropType<DropDownMenuItem[]>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu"> | {
        type: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu">;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string | any[]> | {
        type: PropType<string | any[]>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onVisibleChange: PropType<(visible: boolean) => void> | {
        type: PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    rePosKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    showTick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    spacing: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onEscKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    clickToHide: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    content: PropType<import("../interface").VueJsxNode | import("../tooltip").RenderContent<HTMLElement>> | {
        type: PropType<import("../interface").VueJsxNode | import("../tooltip").RenderContent<HTMLElement>>;
        default?: any;
        required?: false;
    };
    onClickOutSide: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    margin: PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    arrowBounding: PropType<import("../tooltip").ArrowBounding> | {
        type: PropType<import("../tooltip").ArrowBounding>;
        default?: any;
        required?: false;
    };
    transformFromCenter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    arrowPointAtCenter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    wrapWhenSpecial: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    clickTriggerToHide: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    wrapperClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    guardFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    returnFocusOnClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableArrowKeyDown: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    wrapperId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableFocusListener: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    onFilter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onFilterDropdownVisibleChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onHeaderCell: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    render: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    position: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    menu: PropType<DropDownMenuItem[]> | {
        type: PropType<DropDownMenuItem[]>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu"> | {
        type: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu">;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string | any[]> | {
        type: PropType<string | any[]>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onVisibleChange: PropType<(visible: boolean) => void> | {
        type: PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    rePosKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    showTick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    spacing: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onEscKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    clickToHide: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    content: PropType<import("../interface").VueJsxNode | import("../tooltip").RenderContent<HTMLElement>> | {
        type: PropType<import("../interface").VueJsxNode | import("../tooltip").RenderContent<HTMLElement>>;
        default?: any;
        required?: false;
    };
    onClickOutSide: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    margin: PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    arrowBounding: PropType<import("../tooltip").ArrowBounding> | {
        type: PropType<import("../tooltip").ArrowBounding>;
        default?: any;
        required?: false;
    };
    transformFromCenter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    arrowPointAtCenter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    wrapWhenSpecial: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    clickTriggerToHide: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    wrapperClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    guardFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    returnFocusOnClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableArrowKeyDown: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    wrapperId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableFocusListener: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export type DropdownType = typeof Dropdown & {
    Menu: typeof DropdownMenu;
    Item: typeof DropdownItem;
    Divider: typeof DropdownDivider;
    Title: typeof DropdownTitle;
};
declare const BaseDropdown: DropdownType;
export { DropdownMenu, DropdownItem, DropdownDivider, DropdownTitle, Dropdown };
export default BaseDropdown;
