import { PropType } from 'vue';
import { BaseProps } from '../_base/baseComponent';
import { CombineProps } from '../interface';
export type Type = 'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger';
export interface DropdownItemProps extends BaseProps {
    forwardRef?: any;
    disabled?: boolean;
    selected?: boolean;
    onClick?: (payload: MouseEvent) => void;
    onMouseenter?: (payload: MouseEvent) => void;
    onMouseleave?: (payload: MouseEvent) => void;
    onContextmenu?: (payload: MouseEvent) => void;
    type?: Type;
    active?: boolean;
    icon?: JSX.Element;
    onKeyDown?: (e: KeyboardEvent) => void;
    showTick?: boolean;
    /** internal prop, please do not use  */
    hover?: boolean;
    name?: string;
}
export declare const vuePropsType: CombineProps<DropdownItemProps>;
declare const DropdownItem: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(payload: MouseEvent) => void> | {
        type: PropType<(payload: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseenter: PropType<(payload: MouseEvent) => void> | {
        type: PropType<(payload: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseleave: PropType<(payload: MouseEvent) => void> | {
        type: PropType<(payload: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onContextmenu: PropType<(payload: MouseEvent) => void> | {
        type: PropType<(payload: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    active: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<JSX.Element> | {
        type: PropType<JSX.Element>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    showTick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hover: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(payload: MouseEvent) => void> | {
        type: PropType<(payload: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseenter: PropType<(payload: MouseEvent) => void> | {
        type: PropType<(payload: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseleave: PropType<(payload: MouseEvent) => void> | {
        type: PropType<(payload: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onContextmenu: PropType<(payload: MouseEvent) => void> | {
        type: PropType<(payload: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    active: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<JSX.Element> | {
        type: PropType<JSX.Element>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    showTick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hover: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default DropdownItem;
