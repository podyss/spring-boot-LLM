import { defineComponent as g, createVNode as i, mergeProps as R } from "vue";
import A from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as E } from "../PropTypes";
import { cssClasses as K } from '@douyinfe/semi-foundation/lib/es/dropdown/constants';
import { IconTick as h } from "@kousum/semi-icons-vue";
import { noop as f } from "lodash";
import { useDropdownContext as S } from "./context/Consumer";
import j from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
const o = K.PREFIX, F = {
  name: e.string,
  disabled: e.bool,
  selected: e.bool,
  onClick: e.func,
  onMouseenter: e.func,
  onMouseleave: e.func,
  onContextmenu: e.func,
  className: e.string,
  style: e.object,
  forwardRef: [e.object, e.func],
  type: String,
  active: e.bool,
  icon: e.node,
  onKeyDown: e.func,
  showTick: e.bool,
  /** internal prop, please do not use  */
  hover: e.bool
}, L = {
  disabled: !1,
  divided: !1,
  selected: !1,
  onMouseEnter: f,
  onMouseLeave: f,
  forwardRef: f
}, V = E(F, L), Q = /* @__PURE__ */ g({
  props: {
    ...V
  },
  name: "DropdownItem",
  setup(t, {
    slots: s,
    attrs: y
  }) {
    const {
      context: m
    } = S();
    return () => {
      var b;
      const {
        disabled: c,
        className: C,
        forwardRef: T,
        style: D,
        type: d,
        active: l,
        icon: p,
        onKeyDown: x,
        showTick: M,
        hover: $
      } = t, {
        showTick: I
      } = m.value, a = I ?? M, P = A(C, {
        [`${o}-item`]: !0,
        [`${o}-item-disabled`]: c,
        [`${o}-item-hover`]: $,
        [`${o}-item-withTick`]: a,
        [`${o}-item-${d}`]: d,
        [`${o}-item-active`]: l
      }), u = {};
      c || ["onClick", "onMouseenter", "onMouseleave", "onContextmenu"].forEach((r) => {
        m.value.level !== 1 && r === "onClick" ? u.onMouseDown = (k) => {
          var v;
          k.button === 0 && ((v = t[r]) == null || v.call(t, k));
        } : u[r] = t[r];
      });
      let n = null;
      switch (!0) {
        case (a && l):
          n = i(h, null, null);
          break;
        case (a && !l):
          n = i(h, {
            style: {
              color: "transparent"
            }
          }, null);
          break;
        default:
          n = null;
          break;
      }
      let w = null;
      return p && (w = i("div", {
        class: `${o}-item-icon`
      }, [p])), i("li", R({
        role: "menuitem",
        tabindex: -1,
        "aria-disabled": c
      }, u, {
        onKeydown: x,
        ref: T,
        class: P,
        style: D
      }, j({
        ...t,
        ...y
      })), [n, w, (b = s.default) == null ? void 0 : b.call(s)]);
    };
  }
});
export {
  Q as default,
  V as vuePropsType
};
//# sourceMappingURL=dropdownItem.js.map
