import { CSSProperties, PropType, VNode } from 'vue';
import { Keys } from '@douyinfe/semi-foundation/lib/es/hotKeys/constants';
import '@douyinfe/semi-foundation/lib/es/hotKeys/hotKeys.css';
import { CombineProps } from '../interface';
export interface HotKeysProps {
    preventDefault?: boolean;
    hotKeys?: KeyboardEvent['key'][];
    content?: string[];
    onClick?: () => void;
    onHotKey?: (e: KeyboardEvent) => void;
    mergeMetaCtrl?: boolean;
    render?: () => VNode | VNode[];
    getListenerTarget?: () => HTMLElement;
    className?: string;
    style?: CSSProperties;
}
export interface HotKeysState {
}
export declare const vuePropsType: CombineProps<HotKeysProps>;
declare const HotKeys: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    preventDefault: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hotKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    content: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    onClick: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onHotKey: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    mergeMetaCtrl: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    render: PropType<() => VNode | VNode[]> | {
        type: PropType<() => VNode | VNode[]>;
        default?: any;
        required?: false;
    };
    getListenerTarget: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    preventDefault: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hotKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    content: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    onClick: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onHotKey: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    mergeMetaCtrl: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    render: PropType<() => VNode | VNode[]> | {
        type: PropType<() => VNode | VNode[]>;
        default?: any;
        required?: false;
    };
    getListenerTarget: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export type HotKeys = typeof HotKeys & {
    Keys: typeof Keys;
};
declare const baseHotKeys: HotKeys;
export default baseHotKeys;
