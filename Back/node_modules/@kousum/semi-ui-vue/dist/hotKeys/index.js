import { defineComponent as H, useSlots as b, reactive as L, onMounted as N, onUnmounted as P, createVNode as r, mergeProps as m, createTextVNode as h } from "vue";
import g from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as w } from "../PropTypes";
import D from '@douyinfe/semi-foundation/lib/es/hotKeys/foundation';
import { cssClasses as E, Keys as M } from '@douyinfe/semi-foundation/lib/es/hotKeys/constants';
import { noop as K } from "lodash";
import '@douyinfe/semi-foundation/lib/es/hotKeys/hotKeys.css';
import { useBaseComponent as j } from "../_base/baseComponent";
const a = E.PREFIX, F = {
  preventDefault: e.bool,
  hotKeys: e.array,
  content: e.array,
  onClick: e.func,
  onHotKey: e.func,
  mergeMetaCtrl: e.bool,
  render: e.oneOfType([e.func, e.node]),
  getListenerTarget: e.func,
  className: e.string,
  style: e.object
}, I = {
  preventDefault: !1,
  hotKeys: null,
  content: null,
  onClick: K,
  onHotKey: K,
  mergeMetaCtrl: !1,
  render: void 0,
  getListenerTarget: () => document.body,
  className: "",
  style: null
}, V = w(F, I), x = /* @__PURE__ */ H({
  props: {
    ...V
  },
  name: "HotKeys",
  setup(t, {
    attrs: B
  }) {
    b();
    const p = L({});
    N(() => {
      l.init();
    }), P(() => {
      l.destroy();
    });
    const {
      adapter: v,
      getDataAttr: i
    } = j(t, p);
    function C() {
      return {
        ...v(),
        notifyHotKey: (s) => {
          var n;
          (n = t.onHotKey) == null || n.call(t, s);
        },
        registerEvent: () => {
          var n;
          (((n = t.getListenerTarget) == null ? void 0 : n.call(t)) ?? document.body).addEventListener("keydown", l.handleKeyDown);
        },
        unregisterEvent: () => {
          var n;
          (((n = t.getListenerTarget) == null ? void 0 : n.call(t)) ?? document.body).removeEventListener("keydown", l.handleKeyDown);
        }
      };
    }
    const T = C(), l = new D(T);
    return () => {
      const {
        hotKeys: s,
        content: n,
        onClick: u,
        render: o,
        getListenerTarget: O,
        className: y,
        style: d,
        ...R
      } = t;
      if (typeof o < "u")
        return o === null || typeof o == "function" && o() === null ? null : r("div", m({
          onClick: u,
          class: g(a, y),
          style: d
        }, i()), [typeof o == "function" ? o() : o]);
      const k = n ?? s;
      return r("div", m({
        onClick: u,
        class: g(a, y),
        style: d
      }, i()), [k.map((f, c) => c === 0 ? r("span", {
        key: c
      }, [r("span", {
        class: a + "-content"
      }, [f])]) : r("span", {
        key: c
      }, [r("span", {
        class: a + "-split"
      }, [h("+")]), r("span", {
        class: a + "-content"
      }, [f])]))]);
    };
  }
}), A = x;
A.Keys = M;
export {
  A as default,
  V as vuePropsType
};
//# sourceMappingURL=index.js.map
