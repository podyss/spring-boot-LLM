import { PopoverProps } from '../popover';
import { Position, Trigger } from '../tooltip';
import { ButtonProps } from '../button';
import { Type as ButtonType } from '../button/Button';
import '@douyinfe/semi-foundation/lib/es/popconfirm/popconfirm.css';
import { Motion } from '../_base/base';
import { PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface PopconfirmProps extends PopoverProps {
    cancelText?: string;
    cancelButtonProps?: ButtonProps;
    cancelType?: ButtonType;
    defaultVisible?: boolean;
    disabled?: boolean;
    icon?: VueJsxNode;
    okText?: string;
    okType?: ButtonType;
    okButtonProps?: ButtonProps;
    motion?: Motion;
    title?: VueJsxNode;
    visible?: boolean;
    prefixCls?: string;
    zIndex?: number;
    trigger?: Trigger;
    showCloseIcon?: boolean;
    position?: Position;
    onCancel?: (e: MouseEvent) => Promise<any> | void;
    onConfirm?: (e: MouseEvent) => Promise<any> | void;
    onVisibleChange?: (visible: boolean) => void;
    onClickOutSide?: (e: MouseEvent) => void;
}
export interface PopconfirmState {
    visible: boolean;
    cancelLoading: boolean;
    confirmLoading: boolean;
}
export declare const vuePropsType: CombineProps<PopconfirmProps>;
declare const Popconfirm: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    cancelText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    cancelButtonProps: PropType<ButtonProps> | {
        type: PropType<ButtonProps>;
        default?: any;
        required?: false;
    };
    cancelType: PropType<ButtonType> | {
        type: PropType<ButtonType>;
        default?: any;
        required?: false;
    };
    defaultVisible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    okText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    okType: PropType<ButtonType> | {
        type: PropType<ButtonType>;
        default?: any;
        required?: false;
    };
    okButtonProps: PropType<ButtonProps> | {
        type: PropType<ButtonProps>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu"> | {
        type: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu">;
        default?: any;
        required?: false;
    };
    showCloseIcon: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    position: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    onCancel: PropType<(e: MouseEvent) => Promise<any> | void> | {
        type: PropType<(e: MouseEvent) => Promise<any> | void>;
        default?: any;
        required?: false;
    };
    onConfirm: PropType<(e: MouseEvent) => Promise<any> | void> | {
        type: PropType<(e: MouseEvent) => Promise<any> | void>;
        default?: any;
        required?: false;
    };
    onVisibleChange: PropType<(visible: boolean) => void> | {
        type: PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    onClickOutSide: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    content: PropType<VueJsxNode | import("../tooltip").RenderContent<HTMLElement>> | {
        type: PropType<VueJsxNode | import("../tooltip").RenderContent<HTMLElement>>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    margin: PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string | any[]> | {
        type: PropType<string | any[]>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    spacing: PropType<number | {
        x: number;
        y: number;
    }> | {
        type: PropType<number | {
            x: number;
            y: number;
        }>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<string | boolean> | {
        type: PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    arrowStyle: PropType<import("../popover").ArrowStyle> | {
        type: PropType<import("../popover").ArrowStyle>;
        default?: any;
        required?: false;
    };
    arrowBounding: PropType<import("../tooltip").ArrowBounding> | {
        type: PropType<import("../tooltip").ArrowBounding>;
        default?: any;
        required?: false;
    };
    arrowPointAtCenter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    rePosKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    guardFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    returnFocusOnClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onEscKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    clickToHide: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableFocusListener: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    disableArrowKeyDown: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    cancelText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    cancelButtonProps: PropType<ButtonProps> | {
        type: PropType<ButtonProps>;
        default?: any;
        required?: false;
    };
    cancelType: PropType<ButtonType> | {
        type: PropType<ButtonType>;
        default?: any;
        required?: false;
    };
    defaultVisible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    okText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    okType: PropType<ButtonType> | {
        type: PropType<ButtonType>;
        default?: any;
        required?: false;
    };
    okButtonProps: PropType<ButtonProps> | {
        type: PropType<ButtonProps>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu"> | {
        type: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu">;
        default?: any;
        required?: false;
    };
    showCloseIcon: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    position: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    onCancel: PropType<(e: MouseEvent) => Promise<any> | void> | {
        type: PropType<(e: MouseEvent) => Promise<any> | void>;
        default?: any;
        required?: false;
    };
    onConfirm: PropType<(e: MouseEvent) => Promise<any> | void> | {
        type: PropType<(e: MouseEvent) => Promise<any> | void>;
        default?: any;
        required?: false;
    };
    onVisibleChange: PropType<(visible: boolean) => void> | {
        type: PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    onClickOutSide: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    content: PropType<VueJsxNode | import("../tooltip").RenderContent<HTMLElement>> | {
        type: PropType<VueJsxNode | import("../tooltip").RenderContent<HTMLElement>>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    margin: PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string | any[]> | {
        type: PropType<string | any[]>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    spacing: PropType<number | {
        x: number;
        y: number;
    }> | {
        type: PropType<number | {
            x: number;
            y: number;
        }>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<string | boolean> | {
        type: PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    arrowStyle: PropType<import("../popover").ArrowStyle> | {
        type: PropType<import("../popover").ArrowStyle>;
        default?: any;
        required?: false;
    };
    arrowBounding: PropType<import("../tooltip").ArrowBounding> | {
        type: PropType<import("../tooltip").ArrowBounding>;
        default?: any;
        required?: false;
    };
    arrowPointAtCenter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    rePosKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    guardFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    returnFocusOnClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onEscKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    clickToHide: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableFocusListener: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    disableArrowKeyDown: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Popconfirm;
