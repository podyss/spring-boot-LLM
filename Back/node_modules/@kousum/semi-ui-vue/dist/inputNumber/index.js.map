{"version":3,"file":"index.js","sources":["../../src/components/inputNumber/index.tsx"],"sourcesContent":["import * as PropTypes from '../PropTypes';\nimport classnames from 'classnames';\nimport Input, { InputProps } from '../input';\nimport isNullOrUndefined from '@douyinfe/semi-foundation/utils/isNullOrUndefined';\nimport isBothNaN from '@douyinfe/semi-foundation/utils/isBothNaN';\nimport InputNumberFoundation, {\n  BaseInputNumberState,\n  InputNumberAdapter,\n} from '@douyinfe/semi-foundation/inputNumber/foundation';\nimport { useBaseComponent } from '../_base/baseComponent';\nimport { cssClasses, numbers, strings } from '@douyinfe/semi-foundation/inputNumber/constants';\nimport { IconChevronUp, IconChevronDown } from '@kousum/semi-icons-vue';\n\nimport '@douyinfe/semi-foundation/inputNumber/inputNumber.scss';\nimport { isNaN, isString, noop } from 'lodash';\nimport { ArrayElement } from '../_base/base';\nimport {\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  h,\n  nextTick,\n  PropType,\n  reactive,\n  useSlots,\n  VNode,\n  watch,\n} from 'vue';\nimport { vuePropsMake } from '../PropTypes';\nimport { propTypes as propTypesInput } from '../input/index';\nimport { CombineProps } from '../interface';\n\nexport interface InputNumberProps extends InputProps {\n  autofocus?: boolean;\n  className?: string;\n  defaultValue?: number | string;\n  disabled?: boolean;\n  formatter?: (value: number | string) => string;\n  forwardedRef?: any;\n  hideButtons?: boolean;\n  innerButtons?: boolean;\n  insetLabel?: VNode;\n  insetLabelId?: string;\n  keepFocus?: boolean;\n  max?: number;\n  min?: number;\n  parser?: (value: string) => string;\n  precision?: number;\n  prefixCls?: string;\n  pressInterval?: number;\n  pressTimeout?: number;\n  shiftStep?: number;\n  showClear?: boolean;\n  size?: ArrayElement<typeof strings.SIZE>;\n  step?: number;\n  style?: CSSProperties;\n  suffix?: VNode;\n  value?: number | string;\n  onBlur?: (e: FocusEvent) => void;\n  onChange?: (value: number | string, e?: any) => void;\n  onDownClick?: (value: string, e: MouseEvent) => void;\n  onFocus?: (e: FocusEvent) => void;\n  onKeyDown?: any;\n  onNumberChange?: (value: number, e?: any) => void;\n  onUpClick?: (value: string, e: MouseEvent) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface InputNumberState extends BaseInputNumberState {}\n\nconst propTypes: CombineProps<InputNumberProps> = {\n  ...propTypesInput,\n  'aria-label': PropTypes.string,\n  'aria-labelledby': PropTypes.string,\n  'aria-invalid': [PropTypes.bool, PropTypes.string] as PropType<InputNumberProps['aria-invalid']>,\n  'aria-errormessage': PropTypes.string,\n  'aria-describedby': PropTypes.string,\n  'aria-required': PropTypes.bool,\n  autofocus: PropTypes.bool,\n  className: PropTypes.string,\n  defaultValue: [PropTypes.number, PropTypes.string],\n  disabled: PropTypes.bool,\n  formatter: PropTypes.func as PropType<InputNumberProps['formatter']>,\n  forwardedRef: PropTypes.any,\n  hideButtons: PropTypes.bool,\n  innerButtons: PropTypes.bool,\n  insetLabel: PropTypes.node as PropType<InputNumberProps['insetLabel']>,\n  insetLabelId: PropTypes.string,\n  keepFocus: PropTypes.bool,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  parser: PropTypes.func as PropType<InputNumberProps['parser']>,\n  precision: PropTypes.number,\n  prefixCls: PropTypes.string,\n  pressInterval: PropTypes.number,\n  pressTimeout: PropTypes.number,\n  preventScroll: PropTypes.bool,\n  shiftStep: PropTypes.number,\n  size: PropTypes.string as PropType<InputNumberProps['size']>,\n  step: PropTypes.number,\n  style: PropTypes.object,\n  suffix: {\n    type: PropTypes.any as PropType<InputNumberProps['suffix']>,\n    default: undefined,\n  },\n  value: [PropTypes.number, PropTypes.string],\n  onBlur: PropTypes.func as PropType<InputNumberProps['onBlur']>,\n  onChange: PropTypes.func as PropType<InputNumberProps['onChange']>,\n  onDownClick: PropTypes.func as PropType<InputNumberProps['onDownClick']>,\n  onFocus: PropTypes.func as PropType<InputNumberProps['onBlur']>,\n  onKeyDown: PropTypes.func,\n  onNumberChange: PropTypes.func as PropType<InputNumberProps['onNumberChange']>,\n  onUpClick: PropTypes.func as PropType<InputNumberProps['onUpClick']>,\n};\n\nconst defaultProps: InputNumberProps = {\n  forwardedRef: noop,\n  innerButtons: false,\n  keepFocus: false,\n  max: Infinity,\n  min: -Infinity,\n  prefixCls: cssClasses.PREFIX,\n  pressInterval: numbers.DEFAULT_PRESS_TIMEOUT,\n  pressTimeout: numbers.DEFAULT_PRESS_TIMEOUT,\n  shiftStep: numbers.DEFAULT_SHIFT_STEP,\n  size: strings.DEFAULT_SIZE,\n  step: numbers.DEFAULT_STEP,\n  onBlur: noop,\n  onChange: noop,\n  onDownClick: noop,\n  onFocus: noop,\n  onKeyDown: noop,\n  onNumberChange: noop,\n  onUpClick: noop\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst InputNumber = defineComponent({\n  props: { ...vuePropsType },\n  name: 'InputNumber',\n  setup(props, {}) {\n    let cursorStart!: number;\n    let cursorEnd!: number;\n    let currentValue!: number | string;\n    let cursorBefore!: string;\n    let cursorAfter!: string;\n    const state = reactive<InputNumberState>({\n      value: '',\n      number: null, // Current parsed numbers\n      focusing: Boolean(props.autofocus) || false,\n      hovering: false,\n    });\n    let inputNode = null;\n    let clickUpOrDown = false;\n\n    const { adapter: adapterInject } = useBaseComponent<InputNumberProps>(props, state);\n\n    function adapter_(): InputNumberAdapter {\n      return {\n        ...adapterInject<InputNumberProps, InputNumberState>(),\n        setValue: (value, cb) => {\n          state.value = value;\n          nextTick(() => {\n            cb?.();\n          });\n        },\n        setNumber: (number, cb) => {\n          state.number = number;\n          nextTick(() => {\n            cb?.();\n          });\n        },\n        setFocusing: (focusing, cb) => {\n          state.focusing = focusing;\n          nextTick(() => {\n            cb?.();\n          });\n        },\n        setHovering: (hovering) => (state.hovering = hovering),\n        notifyChange: (...args) => props.onChange(...args),\n        notifyNumberChange: (...args) => props.onNumberChange(...args),\n        notifyBlur: (e) => props.onBlur(e),\n        notifyFocus: (e) => props.onFocus(e),\n        notifyUpClick: (value, e) => props.onUpClick(value, e),\n        notifyDownClick: (value, e) => props.onDownClick(value, e),\n        notifyKeyDown: (e) => props.onKeyDown(e),\n        registerGlobalEvent: (eventName, handler) => {\n          if (eventName && typeof handler === 'function') {\n            adapter.unregisterGlobalEvent(eventName);\n            adapter.setCache(eventName, handler);\n\n            document.addEventListener(eventName, handler);\n          }\n        },\n        unregisterGlobalEvent: (eventName) => {\n          if (eventName) {\n            const handler = adapter.getCache(eventName);\n            document.removeEventListener(eventName, handler);\n            adapter.setCache(eventName, null);\n          }\n        },\n        recordCursorPosition: () => {\n          // Record position\n          try {\n            if (inputNode) {\n              cursorStart = inputNode.selectionStart;\n              cursorEnd = inputNode.selectionEnd;\n              currentValue = inputNode.value;\n              cursorBefore = inputNode.value.substring(0, cursorStart);\n              cursorAfter = inputNode.value.substring(cursorEnd);\n            }\n          } catch (e) {\n            console.warn(e);\n            // Fix error in Chrome:\n            // Failed to read the 'selectionStart' property from 'HTMLInputElement'\n            // http://stackoverflow.com/q/21177489/3040605\n          }\n        },\n        restoreByAfter: (str) => {\n          if (isNullOrUndefined(str)) {\n            return false;\n          }\n\n          const fullStr = inputNode.value;\n          const index = fullStr.lastIndexOf(str);\n\n          if (index === -1) {\n            return false;\n          }\n\n          if (index + str.length === fullStr.length) {\n            adapter.fixCaret(index, index);\n\n            return true;\n          }\n          return false;\n        },\n        restoreCursor: (str = cursorAfter) => {\n          if (isNullOrUndefined(str)) {\n            return false;\n          }\n\n          // For loop from full str to the str with last char to map. e.g. 123\n          // -> 123\n          // -> 23\n          // -> 3\n          return Array.prototype.some.call(str, (_: any, start: number) => {\n            const partStr = str.substring(start);\n\n            return adapter.restoreByAfter(partStr);\n          });\n        },\n        fixCaret: (start, end) => {\n          if (start === undefined || end === undefined || !inputNode || !inputNode.value) {\n            return;\n          }\n\n          try {\n            const currentStart = inputNode.selectionStart;\n            const currentEnd = inputNode.selectionEnd;\n\n            if (start !== currentStart || end !== currentEnd) {\n              inputNode.setSelectionRange(start, end);\n            }\n          } catch (e) {\n            // Fix error in Chrome:\n            // Failed to read the 'selectionStart' property from 'HTMLInputElement'\n            // http://stackoverflow.com/q/21177489/3040605\n          }\n        },\n        setClickUpOrDown: (value) => {\n          clickUpOrDown = value;\n        },\n        updateStates: (states, callback) => {\n          Object.keys(states).forEach((key) => {\n            state[key] = states[key];\n          });\n          nextTick(() => {\n            callback?.();\n          });\n        },\n      };\n    }\n\n    const adapter = adapter_();\n    let foundation = new InputNumberFoundation(adapter);\n\n    watch(\n      [() => props.value, () => props.preventScroll, () => state.focusing],\n      (val, [prevPropsValue, prevPropsPreventScroll, prevStateFocusing]) => {\n        const { value, preventScroll } = props;\n        const { focusing } = state;\n\n        let newValue;\n        /**\n         * To determine whether the front and back are equal\n         * NaN need to check whether both are NaN\n         */\n        if (value !== prevPropsValue && !isBothNaN(value, prevPropsValue)) {\n          if (isNullOrUndefined(value) || value === '') {\n            newValue = '';\n            foundation.updateStates({ value: newValue, number: null });\n          } else {\n            let valueStr = value;\n            if (typeof value === 'number') {\n              valueStr = foundation.doFormat(value);\n            }\n\n            const parsedNum = foundation.doParse(valueStr, false, true, true);\n            const toNum = typeof value === 'number' ? value : foundation.doParse(valueStr, false, false, false);\n\n            /**\n             * focusing 状态为输入状态，输入状态的受控值要特殊处理\n             * 如：\n             *  - 输入合法值\n             *      123 => input value 也应该是 123，同时需要设置 number 为 123\n             *  - 输入非法值，只设置 input value，不设置非法的number\n             *      abc => input value 这时是 abc，但失焦后会进行格式化\n             *      100（超出范围） => input value 应该是 100，但不设置 number\n             *\n             * 保持输入态有三种方式\n             * 1. 输入框输入\n             *  - 输入可以解析为合法数字，input value根据输入值确定，失焦时更新input value\n             *  - 输入不可解析为合法数字，进行格式化后显示在input框\n             * 2. 键盘点击上下按钮（input value根据受控值进行更改）\n             * 3. keepFocus+鼠标点击上下按钮（input value根据受控值进行更改）\n             *\n             * The focusing state is the input state, and the controlled value of the input state needs special treatment\n             * For example:\n             *  - input legal value\n             *      123 = > input value should also be 123, and the number should be set to 123\n             *  - input illegal value, only set the input value, do not set the illegal number\n             *      abc = > input value This is abc at this time, but it will be formatted after being out of focus\n             *      100 (out of range) = > input value should be 100, but no number\n             *\n             * There are three ways to maintain the input state\n             * 1. input box input\n             *  - input can be resolved into legal numbers, input value is determined according to the input value, and input value is updated when out of focus\n             *  - input cannot be resolved into legal numbers, and it will be displayed in the input box after formatting\n             * 2. Keyboard click on the up and down button (input value is changed according to the controlled value)\n             * 3.keepFocus + mouse click on the up and down button (input value is changed according to the controlled value)\n             */\n            if (focusing) {\n              if (foundation.isValidNumber(parsedNum) && parsedNum !== state.number) {\n                const obj: { number?: number; value?: string } = { number: parsedNum };\n                /**\n                 * If you are clicking the button, it will automatically format once\n                 * We need to set the status to false after trigger focus event\n                 */\n                if (clickUpOrDown) {\n                  obj.value = foundation.doFormat(obj.number, true);\n                  newValue = obj.value;\n                }\n                foundation.updateStates(obj, () => adapter.restoreCursor());\n              } else if (!isNaN(toNum)) {\n                // Update input content when controlled input is illegal and not NaN\n                newValue = foundation.doFormat(toNum, false);\n                foundation.updateStates({ value: newValue });\n              } else {\n                // Update input content when controlled input NaN\n                newValue = foundation.doFormat(valueStr, false);\n                foundation.updateStates({ value: valueStr });\n              }\n            } else if (foundation.isValidNumber(parsedNum)) {\n              newValue = foundation.doFormat(parsedNum);\n              foundation.updateStates({ number: parsedNum, value: newValue });\n            } else {\n              // Invalid digital analog blurring effect instead of controlled failure\n              newValue = '';\n              foundation.updateStates({ number: null, value: newValue });\n            }\n          }\n          if (newValue && isString(newValue) && newValue !== String(props.value)) {\n            foundation.notifyChange(newValue, null);\n          }\n        }\n\n        if (!clickUpOrDown) {\n          return;\n        }\n\n        if (props.keepFocus && state.focusing) {\n          if (document.activeElement !== inputNode) {\n            inputNode.focus({ preventScroll });\n          }\n        }\n      },\n      { immediate: true }\n    );\n\n    const setInputRef = (node: any) => {\n      const { forwardedRef } = props;\n      inputNode = node?.getDom();\n\n      if (forwardedRef && typeof forwardedRef === 'object') {\n        forwardedRef.current = node;\n      } else if (typeof forwardedRef === 'function') {\n        forwardedRef(node);\n      }\n    };\n\n    const handleInputFocus = (e: FocusEvent) => foundation.handleInputFocus(e);\n\n    const handleInputChange = (value: string, event: any) => foundation.handleInputChange(value, event);\n\n    const handleInputBlur = (e: FocusEvent) => foundation.handleInputBlur(e);\n\n    const handleInputKeyDown = (e: KeyboardEvent) => foundation.handleInputKeyDown(e);\n\n    const handleInputMouseEnter = (e: MouseEvent) => foundation.handleInputMouseEnter(e);\n\n    const handleInputMouseLeave = (e: MouseEvent) => foundation.handleInputMouseLeave(e);\n\n    const handleInputMouseMove = (e: MouseEvent) => foundation.handleInputMouseMove(e);\n\n    const handleUpClick = (e: KeyboardEvent) => {\n      foundation.handleUpClick(e);\n    };\n\n    const handleDownClick = (e: KeyboardEvent) => {\n      foundation.handleDownClick(e);\n    };\n\n    const handleMouseUp = (e: MouseEvent) => {\n      // @ts-ignore\n      // e.persist = noop\n      foundation.handleMouseUp(e);\n    };\n\n    const handleMouseLeave = (e: MouseEvent) => {\n      // @ts-ignore\n      // e.persist = noop\n      foundation.handleMouseLeave(e);\n    };\n\n    const renderButtons = () => {\n      const { prefixCls, disabled, innerButtons, max, min } = props;\n      const { hovering, focusing, number } = state;\n      const notAllowedUp = disabled ? disabled : number === max;\n      const notAllowedDown = disabled ? disabled : number === min;\n      const suffixChildrenCls = classnames(`${prefixCls}-number-suffix-btns`, {\n        [`${prefixCls}-number-suffix-btns-inner`]: innerButtons,\n        [`${prefixCls}-number-suffix-btns-inner-hover`]: innerButtons && hovering && !focusing,\n      });\n      const upClassName = classnames(`${prefixCls}-number-button`, `${prefixCls}-number-button-up`, {\n        [`${prefixCls}-number-button-up-disabled`]: disabled,\n        [`${prefixCls}-number-button-up-not-allowed`]: notAllowedUp,\n      });\n      const downClassName = classnames(`${prefixCls}-number-button`, `${prefixCls}-number-button-down`, {\n        [`${prefixCls}-number-button-down-disabled`]: disabled,\n        [`${prefixCls}-number-button-down-not-allowed`]: notAllowedDown,\n      });\n\n      return (\n        <div class={suffixChildrenCls}>\n          <span\n            class={upClassName}\n            onMousedown={notAllowedUp ? noop : handleUpClick}\n            onMouseup={handleMouseUp}\n            onMouseleave={handleMouseLeave}\n          >\n            <IconChevronUp size=\"extra-small\" />\n          </span>\n          <span\n            class={downClassName}\n            onMousedown={notAllowedDown ? noop : handleDownClick}\n            onMouseup={handleMouseUp}\n            onMouseleave={handleMouseLeave}\n          >\n            <IconChevronDown size=\"extra-small\" />\n          </span>\n        </div>\n      );\n    };\n\n    const renderSuffix = () => {\n      const { innerButtons, suffix } = props;\n      const { hovering, focusing } = state;\n\n      if (innerButtons && (hovering || focusing)) {\n        const buttons = renderButtons();\n        return buttons;\n      }\n      return suffix;\n    };\n\n    return () => {\n      const {\n        disabled,\n        className,\n        prefixCls,\n        min,\n        max,\n        step,\n        shiftStep,\n        precision,\n        formatter,\n        parser,\n        forwardedRef,\n        onUpClick,\n        onDownClick,\n        pressInterval,\n        pressTimeout,\n        suffix,\n        size,\n        hideButtons,\n        innerButtons,\n        style,\n        onNumberChange,\n        keepFocus,\n        defaultValue,\n        ...rest\n      } = props;\n      const { value, number } = state;\n\n      const inputNumberCls = classnames(className, `${prefixCls}-number`, {\n        [`${prefixCls}-number-size-${size}`]: size,\n      });\n\n      const buttons = renderButtons();\n      const ariaProps = {\n        'aria-disabled': disabled,\n        step,\n      };\n      if (number) {\n        ariaProps['aria-valuenow'] = number;\n      }\n      if (max !== Infinity) {\n        ariaProps['aria-valuemax'] = max;\n      }\n      if (min !== -Infinity) {\n        ariaProps['aria-valuemin'] = min;\n      }\n\n      const input = (\n        <div\n          class={inputNumberCls}\n          style={style}\n          onMousemove={(e) => handleInputMouseMove(e)}\n          onMouseenter={(e) => handleInputMouseEnter(e)}\n          onMouseleave={(e) => handleInputMouseLeave(e)}\n        >\n          <Input\n            role=\"spinbutton\"\n            {...{\n              ...ariaProps,\n              ...rest,\n              size,\n              disabled,\n              ref: setInputRef,\n              value,\n              onFocus: handleInputFocus,\n              onChange: handleInputChange,\n              onBlur: handleInputBlur,\n              onKeyDown: handleInputKeyDown,\n              suffix: renderSuffix(),\n            }}\n          />\n          {hideButtons || innerButtons ? null : buttons}\n        </div>\n      );\n      return input;\n    };\n  },\n});\n\nexport default InputNumber;\n"],"names":["propTypes","propTypesInput","PropTypes","string","bool","autofocus","className","defaultValue","number","disabled","formatter","func","forwardedRef","any","hideButtons","innerButtons","insetLabel","node","insetLabelId","keepFocus","max","min","parser","precision","prefixCls","pressInterval","pressTimeout","preventScroll","shiftStep","size","step","style","object","suffix","type","default","undefined","value","onBlur","onChange","onDownClick","onFocus","onKeyDown","onNumberChange","onUpClick","defaultProps","noop","Infinity","cssClasses","PREFIX","numbers","DEFAULT_PRESS_TIMEOUT","DEFAULT_SHIFT_STEP","strings","DEFAULT_SIZE","DEFAULT_STEP","vuePropsType","vuePropsMake","InputNumber","defineComponent","props","name","setup","cursorStart","cursorEnd","currentValue","cursorBefore","cursorAfter","state","reactive","focusing","Boolean","hovering","inputNode","clickUpOrDown","adapter","adapterInject","useBaseComponent","adapter_","setValue","cb","nextTick","setNumber","setFocusing","setHovering","notifyChange","args","notifyNumberChange","notifyBlur","e","notifyFocus","notifyUpClick","notifyDownClick","notifyKeyDown","registerGlobalEvent","eventName","handler","unregisterGlobalEvent","setCache","document","addEventListener","getCache","removeEventListener","recordCursorPosition","selectionStart","selectionEnd","substring","console","warn","restoreByAfter","str","isNullOrUndefined","fullStr","index","lastIndexOf","length","fixCaret","restoreCursor","Array","prototype","some","call","_","start","partStr","end","currentStart","currentEnd","setSelectionRange","setClickUpOrDown","updateStates","states","callback","Object","keys","forEach","key","foundation","InputNumberFoundation","watch","val","prevPropsValue","prevPropsPreventScroll","prevStateFocusing","newValue","isBothNaN","valueStr","doFormat","parsedNum","doParse","toNum","isValidNumber","obj","isNaN","isString","String","activeElement","focus","immediate","setInputRef","getDom","current","handleInputFocus","handleInputChange","event","handleInputBlur","handleInputKeyDown","handleInputMouseEnter","handleInputMouseLeave","handleInputMouseMove","handleUpClick","handleDownClick","handleMouseUp","handleMouseLeave","renderButtons","notAllowedUp","notAllowedDown","suffixChildrenCls","classnames","upClassName","downClassName","_createVNode","IconChevronUp","IconChevronDown","renderSuffix","rest","inputNumberCls","buttons","ariaProps","Input","_mergeProps","ref"],"mappings":"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"}