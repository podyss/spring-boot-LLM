import { InputProps } from '../input';
import { BaseInputNumberState } from '@douyinfe/semi-foundation/lib/es/inputNumber/foundation';
import { strings } from '@douyinfe/semi-foundation/lib/es/inputNumber/constants';
import '@douyinfe/semi-foundation/lib/es/inputNumber/inputNumber.css';
import { ArrayElement } from '../_base/base';
import { CSSProperties, PropType, VNode } from 'vue';
import { CombineProps } from '../interface';
export interface InputNumberProps extends InputProps {
    autofocus?: boolean;
    className?: string;
    defaultValue?: number | string;
    disabled?: boolean;
    formatter?: (value: number | string) => string;
    forwardedRef?: any;
    hideButtons?: boolean;
    innerButtons?: boolean;
    insetLabel?: VNode;
    insetLabelId?: string;
    keepFocus?: boolean;
    max?: number;
    min?: number;
    parser?: (value: string) => string;
    precision?: number;
    prefixCls?: string;
    pressInterval?: number;
    pressTimeout?: number;
    shiftStep?: number;
    showClear?: boolean;
    size?: ArrayElement<typeof strings.SIZE>;
    step?: number;
    style?: CSSProperties;
    suffix?: VNode;
    value?: number | string;
    onBlur?: (e: FocusEvent) => void;
    onChange?: (value: number | string, e?: any) => void;
    onDownClick?: (value: string, e: MouseEvent) => void;
    onFocus?: (e: FocusEvent) => void;
    onKeyDown?: any;
    onNumberChange?: (value: number, e?: any) => void;
    onUpClick?: (value: string, e: MouseEvent) => void;
}
export interface InputNumberState extends BaseInputNumberState {
}
export declare const vuePropsType: CombineProps<InputNumberProps>;
declare const InputNumber: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    autofocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    formatter: PropType<(value: number | string) => string> | {
        type: PropType<(value: number | string) => string>;
        default?: any;
        required?: false;
    };
    forwardedRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    hideButtons: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    innerButtons: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    keepFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    min: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    parser: PropType<(value: string) => string> | {
        type: PropType<(value: string) => string>;
        default?: any;
        required?: false;
    };
    precision: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    pressInterval: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    pressTimeout: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    shiftStep: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    step: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    suffix: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    value: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: number | string, e?: any) => void> | {
        type: PropType<(value: number | string, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onDownClick: PropType<(value: string, e: MouseEvent) => void> | {
        type: PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onNumberChange: PropType<(value: number, e?: any) => void> | {
        type: PropType<(value: number, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onUpClick: PropType<(value: string, e: MouseEvent) => void> | {
        type: PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    addonBefore: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    addonAfter: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    mode: PropType<"password"> | {
        type: PropType<"password">;
        default?: any;
        required?: false;
    };
    readonly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hideSuffix: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<import("../input").ValidateStatus> | {
        type: PropType<import("../input").ValidateStatus>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onPaste: PropType<(e: ClipboardEvent) => void> | {
        type: PropType<(e: ClipboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onInput: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    inputStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    getValueLength: PropType<(value: string) => number> | {
        type: PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    minlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onlyBorder: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onCompositionstart: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onCompositionend: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    autofocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    formatter: PropType<(value: number | string) => string> | {
        type: PropType<(value: number | string) => string>;
        default?: any;
        required?: false;
    };
    forwardedRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    hideButtons: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    innerButtons: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    keepFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    min: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    parser: PropType<(value: string) => string> | {
        type: PropType<(value: string) => string>;
        default?: any;
        required?: false;
    };
    precision: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    pressInterval: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    pressTimeout: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    shiftStep: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    step: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    suffix: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    value: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: number | string, e?: any) => void> | {
        type: PropType<(value: number | string, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onDownClick: PropType<(value: string, e: MouseEvent) => void> | {
        type: PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onNumberChange: PropType<(value: number, e?: any) => void> | {
        type: PropType<(value: number, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onUpClick: PropType<(value: string, e: MouseEvent) => void> | {
        type: PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    addonBefore: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    addonAfter: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    mode: PropType<"password"> | {
        type: PropType<"password">;
        default?: any;
        required?: false;
    };
    readonly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hideSuffix: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<import("../input").ValidateStatus> | {
        type: PropType<import("../input").ValidateStatus>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onPaste: PropType<(e: ClipboardEvent) => void> | {
        type: PropType<(e: ClipboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onInput: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    inputStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    getValueLength: PropType<(value: string) => number> | {
        type: PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    minlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onlyBorder: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onCompositionstart: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onCompositionend: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default InputNumber;
