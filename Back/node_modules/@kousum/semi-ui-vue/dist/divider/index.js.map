{"version":3,"file":"index.js","sources":["../../src/components/divider/index.tsx"],"sourcesContent":["import cls from 'classnames';\nimport { cssClasses } from '@douyinfe/semi-foundation/divider/constants';\nimport '@douyinfe/semi-foundation/divider/divider.scss';\nimport {VueJsxNode} from \"../interface\";\nimport {CSSProperties, FunctionalComponent, h} from \"vue\";\n\n\nconst prefixCls = cssClasses.PREFIX;\n\nexport interface DividerProps {\n    /** The position of title inside divider */\n    align?: 'left' | 'right' | 'center';\n    /** space between divider and surroundings **/\n    margin?: number | string\n    /** The wrapped title */\n    /** Style class name */\n    className?: string;\n    /** Whether line is dashed  */\n    dashed?: boolean;\n    /** The direction type of divider */\n    layout?: 'horizontal' | 'vertical';\n    /** Divider inline style */\n    style?: CSSProperties;\n}\n\nconst Divider: FunctionalComponent<DividerProps> = (props, {slots}) => {\n    const {\n        layout = 'horizontal',\n        dashed,\n        align = 'center',\n        className,\n        margin,\n        style,\n        ...rest\n    } = props;\n\n    const children = slots.default?.()\n\n    const dividerClassNames = cls(`${prefixCls}-divider`, className, {\n        [`${prefixCls}-divider-horizontal`]: layout === 'horizontal',\n        [`${prefixCls}-divider-vertical`]: layout === 'vertical',\n        [`${prefixCls}-divider-dashed`]: !!dashed,\n        [`${prefixCls}-divider-with-text`]: children && layout === 'horizontal',\n        [`${prefixCls}-divider-with-text-${align}`]: children && layout === 'horizontal',\n    });\n\n    let overrideDefaultStyle: CSSProperties = {};\n    if (margin !== undefined) {\n        if (layout === 'vertical') {\n            overrideDefaultStyle = {\n                'marginLeft': margin,\n                'marginRight': margin\n            };\n        } else if (layout === 'horizontal') {\n            overrideDefaultStyle = {\n                'marginTop': margin,\n                'marginBottom': margin,\n            };\n        }\n    }\n\n    return (\n        <div {...rest} class={dividerClassNames} style={{ ...overrideDefaultStyle, ...style }}>\n            {children && layout === 'horizontal' ? (\n                typeof children === 'string' ? (\n                    <span class={`${prefixCls}-divider_inner-text`} x-semi-prop=\"children\">\n                        {children}\n                    </span>\n                ) : (\n                    children\n                )\n            ) : null}\n        </div>\n    );\n};\n\nexport default Divider;\n"],"names":["prefixCls","cssClasses","PREFIX","Divider","props","slots","layout","dashed","align","className","margin","style","rest","children","default","dividerClassNames","cls","overrideDefaultStyle","undefined","_createVNode","_mergeProps"],"mappings":";;;;AAOA,MAAMA,IAAYC,EAAWC,QAkBvBC,IAA6CA,CAACC,GAAO;AAAA,EAACC,OAAAA;AAAK,MAAM;;AACnE,QAAM;AAAA,IACFC,QAAAA,IAAS;AAAA,IACTC,QAAAA;AAAAA,IACAC,OAAAA,IAAQ;AAAA,IACRC,WAAAA;AAAAA,IACAC,QAAAA;AAAAA,IACAC,OAAAA;AAAAA,IACA,GAAGC;AAAAA,EACN,IAAGR,GAEES,KAAWR,IAAAA,EAAMS,YAANT,gBAAAA,EAAAA,KAAAA,IAEXU,IAAoBC,EAAI,GAAGhB,CAAS,YAAYS,GAAW;AAAA,IAC7D,CAAC,GAAGT,CAAS,qBAAqB,GAAGM,MAAW;AAAA,IAChD,CAAC,GAAGN,CAAS,mBAAmB,GAAGM,MAAW;AAAA,IAC9C,CAAC,GAAGN,CAAS,iBAAiB,GAAG,CAAC,CAACO;AAAAA,IACnC,CAAC,GAAGP,CAAS,oBAAoB,GAAGa,KAAYP,MAAW;AAAA,IAC3D,CAAC,GAAGN,CAAS,sBAAsBQ,CAAK,EAAE,GAAGK,KAAYP,MAAW;AAAA,EACxE,CAAC;AAED,MAAIW,IAAsC,CAAA;AAC1C,SAAIP,MAAWQ,WACPZ,MAAW,aACXW,IAAuB;AAAA,IACnB,YAAcP;AAAAA,IACd,aAAeA;AAAAA,MAEZJ,MAAW,iBAClBW,IAAuB;AAAA,IACnB,WAAaP;AAAAA,IACb,cAAgBA;AAAAA,OAK5BS,EAAA,OAAAC,EACaR,GAAI;AAAA,IAAA,OAASG;AAAAA,IAAiB,OAAS;AAAA,MAAE,GAAGE;AAAAA,MAAsB,GAAGN;AAAAA,IAAM;AAAA,GAC/EE,GAAAA,CAAAA,KAAYP,MAAW,eACpB,OAAOO,KAAa,WAAQM,EAAA,QAAA;AAAA,IAAA,OACX,GAAGnB,CAAS;AAAA,IAAqB,eAAA;AAAA,EAAA,GAAA,CACzCa,CAAQ,CAAA,IAGbA,IAEJ,IAAI,CAAA;AAGpB;"}