import '@douyinfe/semi-foundation/lib/es/switch/switch.css';
import { CSSProperties, PropType, VNode } from 'vue';
import { AriaAttributes } from '../AriaAttributes';
import { CombineProps } from '../interface';
export interface SwitchProps {
    'aria-label'?: AriaAttributes['aria-label'];
    'aria-describedby'?: AriaAttributes['aria-describedby'];
    'aria-errormessage'?: AriaAttributes['aria-errormessage'];
    'aria-invalid'?: AriaAttributes['aria-invalid'];
    'aria-labelledby'?: AriaAttributes['aria-labelledby'];
    defaultChecked?: boolean;
    checked?: boolean;
    disabled?: boolean;
    onChange?: (checked: boolean, e: any) => void;
    loading?: boolean;
    className?: string;
    style?: CSSProperties;
    onMouseEnter?: (e: MouseEvent) => any;
    onMouseLeave?: (e: MouseEvent) => any;
    size?: 'large' | 'default' | 'small';
    checkedText?: VNode | string;
    uncheckedText?: VNode | string;
    id?: string;
}
export interface SwitchState {
    nativeControlChecked: boolean;
    nativeControlDisabled: boolean;
    focusVisible: boolean;
}
export declare const vuePropsType: CombineProps<SwitchProps>;
declare const Switch: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultChecked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(checked: boolean, e: any) => void> | {
        type: PropType<(checked: boolean, e: any) => void>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    checkedText: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    uncheckedText: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultChecked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(checked: boolean, e: any) => void> | {
        type: PropType<(checked: boolean, e: any) => void>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<(e: MouseEvent) => any> | {
        type: PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    checkedText: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    uncheckedText: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Switch;
