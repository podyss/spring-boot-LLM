import { defineComponent as B, useSlots as O, reactive as K, ref as m, onMounted as _, onUnmounted as z, watch as C, createVNode as i, mergeProps as k } from "vue";
import R from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as U, symbol as v } from "../PropTypes";
import G from '@douyinfe/semi-foundation/lib/es/switch/foundation';
import { cssClasses as n } from '@douyinfe/semi-foundation/lib/es/switch/constants';
import { useBaseComponent as H } from "../_base/baseComponent";
import '@douyinfe/semi-foundation/lib/es/switch/switch.css';
import { noop as u } from "lodash";
import X from "../spin";
const j = {
  "aria-label": e.string,
  "aria-labelledby": e.string,
  "aria-invalid": [e.bool, e.string],
  "aria-errormessage": e.string,
  "aria-describedby": e.string,
  className: e.string,
  checked: {
    type: e.bool,
    default: void 0
  },
  checkedText: e.node,
  defaultChecked: {
    type: e.bool,
    default: void 0
  },
  disabled: {
    type: e.bool,
    default: void 0
  },
  loading: {
    type: e.bool,
    default: void 0
  },
  onChange: e.func,
  onMouseEnter: e.func,
  onMouseLeave: e.func,
  style: e.object,
  size: String,
  uncheckedText: e.node,
  id: e.string
}, q = {
  disabled: !1,
  className: "",
  onChange: u,
  loading: !1,
  onMouseEnter: u,
  onMouseLeave: u,
  size: "default"
}, J = U(j, q), se = /* @__PURE__ */ B({
  props: {
    ...J
  },
  name: "Switch",
  setup(t, {}) {
    O();
    const l = K({
      nativeControlChecked: t.defaultChecked || t.checked,
      nativeControlDisabled: !1,
      focusVisible: !1
    }), g = m(), {
      adapter: y,
      getDataAttr: p
    } = H(t, l), h = m(v());
    function T() {
      return {
        ...y(),
        setNativeControlChecked: (a) => {
          l.nativeControlChecked = a;
        },
        setNativeControlDisabled: (a) => {
          l.nativeControlDisabled = a;
        },
        setFocusVisible: (a) => {
          l.focusVisible = a;
        },
        notifyChange: (a, r) => {
          t.onChange(a, r), h.value = v();
        }
      };
    }
    const E = T(), s = new G(E);
    _(() => {
      s.init();
    }), z(() => {
      s.init();
    }), C(() => t.checked, () => {
      s.setChecked(t.checked);
    }), C(() => t.disabled, () => {
      s.setDisabled(t.disabled);
    });
    const N = (a) => {
      s.handleFocusVisible(a);
    }, D = (a) => {
      s.handleBlur();
    };
    return () => {
      const {
        nativeControlChecked: a,
        nativeControlDisabled: r,
        focusVisible: w
      } = l, {
        className: x,
        style: M,
        onMouseEnter: L,
        onMouseLeave: S,
        size: o,
        checkedText: b,
        uncheckedText: f,
        loading: c,
        id: P
      } = t, V = R(x, {
        [n.PREFIX]: !0,
        [n.CHECKED]: a,
        [n.DISABLED]: r,
        [n.LARGE]: o === "large",
        [n.SMALL]: o === "small",
        [n.LOADING]: c,
        [n.FOCUS]: w
      }), A = {
        type: "checkbox",
        className: n.NATIVE_CONTROL,
        disabled: r || c,
        checked: a || !1
      }, F = b && a && o !== "small", I = f && !a && o !== "small";
      return i("div", k({
        class: V,
        style: M,
        onMouseenter: L,
        onMouseleave: S
      }, p()), [c ? i(X, {
        wrapperClassName: n.LOADING_SPIN,
        size: o === "default" ? "middle" : o
      }, null) : i("div", {
        class: n.KNOB,
        "aria-hidden": !0
      }, null), F ? i("div", {
        class: n.CHECKED_TEXT,
        "x-semi-prop": "checkedText"
      }, [b]) : null, I ? i("div", {
        class: n.UNCHECKED_TEXT,
        "x-semi-prop": "uncheckedText"
      }, [f]) : null, i("input", k(A, {
        ref: g,
        key: h.value,
        id: P,
        role: "switch",
        "aria-checked": a,
        "aria-invalid": t["aria-invalid"],
        "aria-errormessage": t["aria-errormessage"],
        "aria-label": t["aria-label"],
        "aria-labelledby": t["aria-labelledby"],
        "aria-describedby": t["aria-describedby"],
        "aria-disabled": t.disabled,
        onChange: (d) => {
          s.handleChange(d.target.checked, d);
        },
        onFocus: (d) => N(d),
        onBlur: (d) => D()
      }), null)]);
    };
  }
});
export {
  se as default,
  J as vuePropsType
};
//# sourceMappingURL=index.js.map
