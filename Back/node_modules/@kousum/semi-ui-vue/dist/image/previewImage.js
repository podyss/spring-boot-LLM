import { defineComponent as L, useSlots as M, reactive as E, ref as p, onMounted as Z, onUnmounted as k, watch as D, createVNode as f } from "vue";
import { cssClasses as S } from '@douyinfe/semi-foundation/lib/es/image/constants';
import * as n from "../PropTypes";
import { vuePropsMake as T } from "../PropTypes";
import j from "../spin";
import F from '@douyinfe/semi-foundation/lib/es/image/previewImageFoundation';
import { useBaseComponent as N } from "../_base/baseComponent";
const O = S.PREFIX, h = `${O}-preview-image`, V = {
  src: n.string,
  rotation: n.number,
  style: n.object,
  // maxZoom: PropTypes.number,
  // minZoom: PropTypes.number,
  // zoomStep: PropTypes.number,
  zoom: n.number,
  ratio: n.string,
  disableDownload: n.bool,
  clickZoom: n.number,
  setRatio: n.func,
  onZoom: n.func,
  onLoad: n.func,
  onError: n.func,
  crossOrigin: n.string
}, W = {
  // maxZoom: 5,
  // minZoom: 0.1,
  // zoomStep: 0.1,
  zoom: void 0
}, B = T(V, W), H = /* @__PURE__ */ L({
  props: {
    ...B
  },
  name: "PreviewImage",
  setup(o, {
    expose: C
  }) {
    M();
    const r = E({
      width: 0,
      height: 0,
      loading: !0,
      translate: {
        x: 0,
        y: 0
      },
      currZoom: o.zoom
    }), {
      adapter: I
    } = N(o, r);
    function z() {
      return {
        ...I(),
        getContainer: () => s.value,
        getImage: () => m.value,
        setLoading: (e) => {
          r.loading = e;
        },
        setImageCursor: (e) => {
          m.value.style.cursor = e ? "grab" : "default";
        }
      };
    }
    const y = z(), s = p(), m = p(), t = new F(y);
    C({
      foundation: t
    }), Z(() => {
      t.init(), window.addEventListener("resize", c);
    }), k(() => {
      window.removeEventListener("resize", c);
    });
    const c = () => {
      t.handleWindowResize();
    }, b = (e) => {
      t.handleRightClickImage(e);
    }, x = (e) => {
      t.handleLoad(e);
    }, P = (e) => {
      t.handleError(e);
    }, R = (e) => {
      t.handleImageMove(e);
    }, $ = (e) => {
      t.handleImageMouseDown(e);
    };
    return D([() => o.src, () => o.zoom, () => o.ratio, () => o.rotation, () => r.currZoom, () => s.value], (e, [l, v, a, d, w], u) => {
      const g = "zoom" in o && o.zoom !== r.currZoom, i = o.src && o.src !== l;
      i && t.setLoading(!0), !g && !i && ("ratio" in o && o.ratio !== a && t.handleRatioChange(), "rotation" in o && o.rotation !== d && c());
    }), () => {
      const {
        src: e,
        rotation: l,
        crossOrigin: v
      } = o, {
        loading: a,
        width: d,
        height: w,
        translate: u
      } = r, g = {
        position: "absolute",
        visibility: a ? "hidden" : "visible",
        transform: `translate(${u.x}px, ${u.y}px) rotate(${l}deg)`,
        width: `${d}px`,
        height: `${w}px`
      };
      return f("div", {
        class: `${h}`,
        ref: s
      }, [f("img", {
        ref: m,
        src: e,
        alt: "previewImag",
        class: `${h}-img`,
        key: e,
        onMousemove: R,
        onMousedown: $,
        onContextmenu: b,
        onDragstart: (i) => i.preventDefault(),
        onLoad: x,
        onError: P,
        style: g,
        crossorigin: v
      }, null), a && f(j, {
        size: "large",
        wrapperClassName: `${h}-spin`
      }, null)]);
    };
  }
});
export {
  H as default,
  B as vuePropsType
};
//# sourceMappingURL=previewImage.js.map
