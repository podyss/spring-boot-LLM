import type { ImageProps } from './interface';
import '@douyinfe/semi-foundation/lib/es/image/image.css';
import { PropType } from 'vue';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<ImageProps>;
declare const Image: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    src: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    alt: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    fallback: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    preview: PropType<boolean | import("./interface").PreviewProps> | {
        type: PropType<boolean | import("./interface").PreviewProps>;
        default?: any;
        required?: false;
    };
    onError: PropType<(event: Event) => void> | {
        type: PropType<(event: Event) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(event: any) => void> | {
        type: PropType<(event: any) => void>;
        default?: any;
        required?: false;
    };
    onLoad: PropType<(event: Event) => void> | {
        type: PropType<(event: Event) => void>;
        default?: any;
        required?: false;
    };
    crossOrigin: PropType<"anonymous" | "use-credentials"> | {
        type: PropType<"anonymous" | "use-credentials">;
        default?: any;
        required?: false;
    };
    maxZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    minZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    imageID: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    setDownloadName: PropType<(src: string) => string> | {
        type: PropType<(src: string) => string>;
        default?: any;
        required?: false;
    };
    imgStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    imgCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    src: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    alt: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    fallback: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    preview: PropType<boolean | import("./interface").PreviewProps> | {
        type: PropType<boolean | import("./interface").PreviewProps>;
        default?: any;
        required?: false;
    };
    onError: PropType<(event: Event) => void> | {
        type: PropType<(event: Event) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(event: any) => void> | {
        type: PropType<(event: any) => void>;
        default?: any;
        required?: false;
    };
    onLoad: PropType<(event: Event) => void> | {
        type: PropType<(event: Event) => void>;
        default?: any;
        required?: false;
    };
    crossOrigin: PropType<"anonymous" | "use-credentials"> | {
        type: PropType<"anonymous" | "use-credentials">;
        default?: any;
        required?: false;
    };
    maxZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    minZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    imageID: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    setDownloadName: PropType<(src: string) => string> | {
        type: PropType<(src: string) => string>;
        default?: any;
        required?: false;
    };
    imgStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    imgCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Image;
