import { FooterProps } from './interface';
import { PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export declare const vuePropsType: CombineProps<FooterProps>;
declare const Footer: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    curPage: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    totalNum: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    disabledPrev: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledNext: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableDownload: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    ratio: PropType<import("./interface").RatioType> | {
        type: PropType<import("./interface").RatioType>;
        default?: any;
        required?: false;
    };
    prevTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    nextTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoomInTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoomOutTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rotateTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    downloadTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    adaptiveTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    originTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showTooltip: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onZoomIn: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onZoomOut: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onPrev: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onNext: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onAdjustRatio: PropType<(type: import("./interface").RatioType) => void> | {
        type: PropType<(type: import("./interface").RatioType) => void>;
        default?: any;
        required?: false;
    };
    onRotate: PropType<(direction: string) => void> | {
        type: PropType<(direction: string) => void>;
        default?: any;
        required?: false;
    };
    onDownload: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    renderPreviewMenu: PropType<(props: import("./interface").MenuProps) => VueJsxNode> | {
        type: PropType<(props: import("./interface").MenuProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<import("vue").Ref<HTMLElement, HTMLElement>> | {
        type: PropType<import("vue").Ref<HTMLElement, HTMLElement>>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    min: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    step: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    curPage: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    totalNum: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    disabledPrev: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledNext: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableDownload: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    ratio: PropType<import("./interface").RatioType> | {
        type: PropType<import("./interface").RatioType>;
        default?: any;
        required?: false;
    };
    prevTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    nextTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoomInTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoomOutTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rotateTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    downloadTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    adaptiveTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    originTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showTooltip: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onZoomIn: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onZoomOut: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onPrev: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onNext: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onAdjustRatio: PropType<(type: import("./interface").RatioType) => void> | {
        type: PropType<(type: import("./interface").RatioType) => void>;
        default?: any;
        required?: false;
    };
    onRotate: PropType<(direction: string) => void> | {
        type: PropType<(direction: string) => void>;
        default?: any;
        required?: false;
    };
    onDownload: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    renderPreviewMenu: PropType<(props: import("./interface").MenuProps) => VueJsxNode> | {
        type: PropType<(props: import("./interface").MenuProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<import("vue").Ref<HTMLElement, HTMLElement>> | {
        type: PropType<import("vue").Ref<HTMLElement, HTMLElement>>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    min: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    step: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Footer;
