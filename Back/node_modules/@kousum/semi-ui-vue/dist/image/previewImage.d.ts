import { PreviewImageProps } from './interface';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<PreviewImageProps>;
declare const PreviewImage: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    src: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rotation: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    zoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    ratio: PropType<import("./interface").RatioType> | {
        type: PropType<import("./interface").RatioType>;
        default?: any;
        required?: false;
    };
    disableDownload: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    clickZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    crossOrigin: PropType<"anonymous" | "use-credentials"> | {
        type: PropType<"anonymous" | "use-credentials">;
        default?: any;
        required?: false;
    };
    setRatio: PropType<(type: import("./interface").RatioType) => void> | {
        type: PropType<(type: import("./interface").RatioType) => void>;
        default?: any;
        required?: false;
    };
    onZoom: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onLoad: PropType<(src: string) => void> | {
        type: PropType<(src: string) => void>;
        default?: any;
        required?: false;
    };
    onError: PropType<(src: string) => void> | {
        type: PropType<(src: string) => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    src: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rotation: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    zoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    ratio: PropType<import("./interface").RatioType> | {
        type: PropType<import("./interface").RatioType>;
        default?: any;
        required?: false;
    };
    disableDownload: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    clickZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    crossOrigin: PropType<"anonymous" | "use-credentials"> | {
        type: PropType<"anonymous" | "use-credentials">;
        default?: any;
        required?: false;
    };
    setRatio: PropType<(type: import("./interface").RatioType) => void> | {
        type: PropType<(type: import("./interface").RatioType) => void>;
        default?: any;
        required?: false;
    };
    onZoom: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onLoad: PropType<(src: string) => void> | {
        type: PropType<(src: string) => void>;
        default?: any;
        required?: false;
    };
    onError: PropType<(src: string) => void> | {
        type: PropType<(src: string) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default PreviewImage;
