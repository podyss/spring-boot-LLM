import { PreviewInnerProps, RatioType } from './interface';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<PreviewInnerProps>;
declare const PreviewInner: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    prevTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    nextTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoomInTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoomOutTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rotateTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    downloadTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    adaptiveTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    originTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    src: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(index: number) => void> | {
        type: PropType<(index: number) => void>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    infinite: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<import("vue").ShallowRef<HTMLElement>> | {
        type: PropType<import("vue").ShallowRef<HTMLElement>>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onVisibleChange: PropType<(visible: boolean) => void> | {
        type: PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    showTooltip: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultVisible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    crossOrigin: PropType<"anonymous" | "use-credentials"> | {
        type: PropType<"anonymous" | "use-credentials">;
        default?: any;
        required?: false;
    };
    maxZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    minZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    setDownloadName: PropType<(src: string) => string> | {
        type: PropType<(src: string) => string>;
        default?: any;
        required?: false;
    };
    previewTitle: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    currentIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    defaultCurrentIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    zoomStep: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    lazyLoad: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    lazyLoadMargin: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preLoad: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    preLoadGap: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    viewerVisibleDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    disableDownload: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderHeader: PropType<(info: any) => import("../interface").VueJsxNode> | {
        type: PropType<(info: any) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    onZoomIn: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onZoomOut: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onPrev: PropType<(index: number) => void> | {
        type: PropType<(index: number) => void>;
        default?: any;
        required?: false;
    };
    onNext: PropType<(index: number) => void> | {
        type: PropType<(index: number) => void>;
        default?: any;
        required?: false;
    };
    onRatioChange: PropType<(type: RatioType) => void> | {
        type: PropType<(type: RatioType) => void>;
        default?: any;
        required?: false;
    };
    onRotateLeft: PropType<(angle: number) => void> | {
        type: PropType<(angle: number) => void>;
        default?: any;
        required?: false;
    };
    onRotateChange: PropType<(angle: number) => void> | {
        type: PropType<(angle: number) => void>;
        default?: any;
        required?: false;
    };
    onDownload: PropType<(src: string, index: number) => void> | {
        type: PropType<(src: string, index: number) => void>;
        default?: any;
        required?: false;
    };
    onDownloadError: PropType<(src: string) => void> | {
        type: PropType<(src: string) => void>;
        default?: any;
        required?: false;
    };
    renderPreviewMenu: PropType<(props: import("./interface").MenuProps) => import("../interface").VueJsxNode> | {
        type: PropType<(props: import("./interface").MenuProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    prevTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    nextTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoomInTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zoomOutTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rotateTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    downloadTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    adaptiveTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    originTip: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    src: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(index: number) => void> | {
        type: PropType<(index: number) => void>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    infinite: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<import("vue").ShallowRef<HTMLElement>> | {
        type: PropType<import("vue").ShallowRef<HTMLElement>>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onVisibleChange: PropType<(visible: boolean) => void> | {
        type: PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    showTooltip: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultVisible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    crossOrigin: PropType<"anonymous" | "use-credentials"> | {
        type: PropType<"anonymous" | "use-credentials">;
        default?: any;
        required?: false;
    };
    maxZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    minZoom: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    setDownloadName: PropType<(src: string) => string> | {
        type: PropType<(src: string) => string>;
        default?: any;
        required?: false;
    };
    previewTitle: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    currentIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    defaultCurrentIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    zoomStep: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    lazyLoad: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    lazyLoadMargin: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preLoad: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    preLoadGap: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    viewerVisibleDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    disableDownload: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderHeader: PropType<(info: any) => import("../interface").VueJsxNode> | {
        type: PropType<(info: any) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    onZoomIn: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onZoomOut: PropType<(zoom: number) => void> | {
        type: PropType<(zoom: number) => void>;
        default?: any;
        required?: false;
    };
    onPrev: PropType<(index: number) => void> | {
        type: PropType<(index: number) => void>;
        default?: any;
        required?: false;
    };
    onNext: PropType<(index: number) => void> | {
        type: PropType<(index: number) => void>;
        default?: any;
        required?: false;
    };
    onRatioChange: PropType<(type: RatioType) => void> | {
        type: PropType<(type: RatioType) => void>;
        default?: any;
        required?: false;
    };
    onRotateLeft: PropType<(angle: number) => void> | {
        type: PropType<(angle: number) => void>;
        default?: any;
        required?: false;
    };
    onRotateChange: PropType<(angle: number) => void> | {
        type: PropType<(angle: number) => void>;
        default?: any;
        required?: false;
    };
    onDownload: PropType<(src: string, index: number) => void> | {
        type: PropType<(src: string, index: number) => void>;
        default?: any;
        required?: false;
    };
    onDownloadError: PropType<(src: string) => void> | {
        type: PropType<(src: string) => void>;
        default?: any;
        required?: false;
    };
    renderPreviewMenu: PropType<(props: import("./interface").MenuProps) => import("../interface").VueJsxNode> | {
        type: PropType<(props: import("./interface").MenuProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default PreviewInner;
