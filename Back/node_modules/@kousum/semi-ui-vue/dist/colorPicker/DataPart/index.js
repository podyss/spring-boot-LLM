import { defineComponent as f, useSlots as p, reactive as h, onMounted as g, watch as b, createVNode as r, createTextVNode as C } from "vue";
import I from "../../input";
import P from "../../input/inputGroup";
import F from "../../inputNumber";
import N from "../../select";
import x from "../../button";
import y from '@douyinfe/semi-foundation/lib/es/colorPicker/foundation';
import { isEqual as V } from "lodash";
import { IconEyedropper as $ } from "@kousum/semi-icons-vue";
import { cssClasses as l } from '@douyinfe/semi-foundation/lib/es/colorPicker/constants';
import v from '@douyinfe/semi-foundation/lib/es/colorPicker/DataPartFoundation';
import { useBaseComponent as E } from "../../_base/baseComponent";
const k = {
  className: String,
  style: Object,
  alpha: Boolean,
  currentColor: {
    type: Object,
    required: !0
  },
  defaultFormat: {
    type: String,
    required: !0
  },
  eyeDropper: {
    type: Boolean,
    required: !0
  },
  foundation: {
    type: Object,
    required: !0
  },
  width: {
    type: Number,
    required: !0
  }
}, M = /* @__PURE__ */ f({
  props: {
    ...k
  },
  name: "DataPart",
  setup(e, {
    attrs: S
  }) {
    p();
    const a = h({
      format: e.defaultFormat,
      inputValue: ""
    }), {
      adapter: c
    } = E(e, a);
    function s() {
      return {
        ...c(),
        getColorPickerFoundation: () => e.foundation
      };
    }
    const d = s(), o = new v(d);
    g(() => {
      o.handleInputValueChange(o.getInputValue());
    }), b([() => e.currentColor, () => a.format], (u, [t, n], m) => {
      (!V(t, e.currentColor) || n !== a.format) && o.handleInputValueChange(o.getInputValue());
    });
    const i = (u) => {
      e.foundation.handleChange(u, a.format);
    };
    return () => {
      const u = e.currentColor.rgba;
      return r("div", {
        class: `${l.PREFIX}-dataPart`,
        style: {
          width: e.width + "px"
        }
      }, [r("div", {
        class: `${l.PREFIX}-colorDemoBlock`,
        style: {
          minWidth: "20px",
          minHeight: "20px",
          backgroundColor: `rgba(${u.r},${u.g},${u.b},${u.a})`
        }
      }, null), r(P, {
        size: "small",
        className: `${l.PREFIX}-inputGroup`
      }, {
        default: () => [r(I, {
          className: `${l.PREFIX}-colorPickerInput`,
          value: a.inputValue,
          onChange: (t) => {
            const n = o.getValueByInputValue(t);
            n && i(n), o.handleInputValueChange(t);
          }
        }, null), e.alpha && r(F, {
          min: 0,
          max: 100,
          className: `${l.PREFIX}-colorPickerInputNumber`,
          value: Number(Math.round(e.currentColor.rgba.a * 100)),
          onNumberChange: (t) => {
            if (a.format === "rgba")
              i({
                ...e.currentColor.rgba,
                a: Number((t / 100).toFixed(2))
              });
            else if (a.format === "hex") {
              const n = {
                ...e.currentColor.rgba,
                a: Number((t / 100).toFixed(2))
              }, m = y.rgbaToHex(n);
              i(m);
            } else if (a.format === "hsva") {
              const n = {
                ...e.currentColor.hsva,
                a: Number((t / 100).toFixed(2))
              };
              i(n);
            }
          },
          suffix: r("span", {
            class: `${l.PREFIX}-inputNumberSuffix`
          }, [C("%")]),
          hideButtons: !0
        }, null), r(N, {
          className: `${l.PREFIX}-formatSelect`,
          size: "small",
          value: a.format,
          onSelect: (t) => o.handleFormatChange(t),
          optionList: ["hex", "rgba", "hsva"].map((t) => ({
            label: t,
            value: t
          }))
        }, null)]
      }), e.eyeDropper && r(x, {
        type: "tertiary",
        theme: "light",
        size: "small",
        onClick: o.handlePickValueWithStraw,
        icon: r($, null, null)
      }, null)]);
    };
  }
});
export {
  M as default,
  k as vuePropsType
};
//# sourceMappingURL=index.js.map
