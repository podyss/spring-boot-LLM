{"version":3,"file":"index.js","sources":["../../../src/components/colorPicker/DataPart/index.tsx"],"sourcesContent":["import { HsvaColor, RgbaColor } from '@douyinfe/semi-foundation/colorPicker/interface';\nimport Input from '../../input';\nimport InputGroup from '../../input/inputGroup';\nimport InputNumber from '../../inputNumber';\nimport Select from '../../select';\nimport Button from '../../button';\nimport ColorPickerFoundation from '@douyinfe/semi-foundation/colorPicker/foundation';\nimport { isEqual } from 'lodash';\nimport { IconEyedropper } from '@kousum/semi-icons-vue';\nimport { cssClasses } from '@douyinfe/semi-foundation/colorPicker/constants';\nimport DataPartFoundation, {\n  DataPartAdapter,\n  DataPartBaseProps,\n  DataPartBaseState,\n} from '@douyinfe/semi-foundation/colorPicker/DataPartFoundation';\nimport { CSSProperties, defineComponent, h, onMounted, PropType, reactive, useSlots, watch } from 'vue';\nimport { CombineProps } from '../../interface';\nimport { useBaseComponent } from '../../_base/baseComponent';\n\nexport interface DataPartProps extends DataPartBaseProps {\n  className?: string;\n  style?: CSSProperties;\n}\n\nexport interface DataPartState extends DataPartBaseState {}\n\nexport const vuePropsType: CombineProps<DataPartProps> = {\n  className: String,\n  style: Object,\n  alpha: Boolean,\n  currentColor: {\n    type: Object,\n    required: true,\n  },\n  defaultFormat: {\n    type: String as PropType<DataPartProps['defaultFormat']>,\n    required: true,\n  },\n  eyeDropper: {\n    type: Boolean,\n    required: true,\n  },\n  foundation: {\n    type: Object as PropType<DataPartProps['foundation']>,\n    required: true,\n  },\n  width: {\n    type: Number,\n    required: true,\n  },\n};\nconst DataPart = defineComponent({\n  props: { ...vuePropsType },\n  name: 'DataPart',\n  setup(props, { attrs }) {\n    const slots = useSlots();\n\n    const state = reactive<DataPartState>({\n      format: props.defaultFormat,\n      inputValue: '',\n    });\n\n    const { adapter: adapterInject } = useBaseComponent(props, state);\n    function adapter_(): DataPartAdapter<DataPartProps, DataPartState> {\n      return {\n        ...adapterInject(),\n        getColorPickerFoundation: () => props.foundation,\n      };\n    }\n    const adapter = adapter_();\n    const foundation = new DataPartFoundation(adapter);\n    onMounted(() => {\n      foundation.handleInputValueChange(foundation.getInputValue());\n    });\n\n    watch(\n      [() => props.currentColor, () => state.format],\n      (value, [prevPropsCurrentColor, prevStateFormat], onCleanup) => {\n        if (!isEqual(prevPropsCurrentColor, props.currentColor) || prevStateFormat !== state.format) {\n          foundation.handleInputValueChange(foundation.getInputValue());\n        }\n      }\n    );\n    const handleChange = (newColor: RgbaColor | HsvaColor | string) => {\n      props.foundation.handleChange(newColor, state.format);\n    };\n\n    return () => {\n      const rgba = props.currentColor.rgba;\n      return (\n        <div class={`${cssClasses.PREFIX}-dataPart`} style={{ width: props.width + 'px' }}>\n          <div\n            class={`${cssClasses.PREFIX}-colorDemoBlock`}\n            style={{\n              minWidth: '20px',\n              minHeight: '20px',\n              backgroundColor: `rgba(${rgba.r},${rgba.g},${rgba.b},${rgba.a})`,\n            }}\n          ></div>\n          <InputGroup size={'small'} className={`${cssClasses.PREFIX}-inputGroup`}>\n            <Input\n              className={`${cssClasses.PREFIX}-colorPickerInput`}\n              value={state.inputValue}\n              onChange={(v) => {\n                const value = foundation.getValueByInputValue(v);\n                if (value) {\n                  handleChange(value);\n                }\n                foundation.handleInputValueChange(v);\n              }}\n            />\n            {props.alpha && (\n              <InputNumber\n                min={0}\n                max={100}\n                className={`${cssClasses.PREFIX}-colorPickerInputNumber`}\n                value={Number(Math.round(props.currentColor.rgba.a * 100))}\n                onNumberChange={(v) => {\n                  if (state.format === 'rgba') {\n                    handleChange({ ...props.currentColor.rgba, a: Number((v / 100).toFixed(2)) });\n                  } else if (state.format === 'hex') {\n                    const rgba = { ...props.currentColor.rgba, a: Number((v / 100).toFixed(2)) };\n                    const hex = ColorPickerFoundation.rgbaToHex(rgba);\n                    handleChange(hex);\n                  } else if (state.format === 'hsva') {\n                    const rgba = { ...props.currentColor.hsva, a: Number((v / 100).toFixed(2)) };\n                    handleChange(rgba);\n                  }\n                }}\n                suffix={<span class={`${cssClasses.PREFIX}-inputNumberSuffix`}>%</span>}\n                hideButtons={true}\n              />\n            )}\n            <Select\n              className={`${cssClasses.PREFIX}-formatSelect`}\n              size={'small'}\n              value={state.format}\n              onSelect={(v) => foundation.handleFormatChange(v as any)}\n              optionList={['hex', 'rgba', 'hsva'].map((type) => ({ label: type, value: type }))}\n            />\n          </InputGroup>\n\n          {props.eyeDropper && (\n            <Button\n              type={'tertiary'}\n              theme={'light'}\n              size={'small'}\n              onClick={foundation.handlePickValueWithStraw}\n              icon={<IconEyedropper />}\n            />\n          )}\n        </div>\n      );\n    };\n  },\n});\n\nexport default DataPart;\n"],"names":["vuePropsType","className","String","style","Object","alpha","Boolean","currentColor","type","required","defaultFormat","eyeDropper","foundation","width","Number","DataPart","defineComponent","props","name","setup","attrs","useSlots","state","reactive","format","inputValue","adapter","adapterInject","useBaseComponent","adapter_","getColorPickerFoundation","DataPartFoundation","onMounted","handleInputValueChange","getInputValue","watch","value","prevPropsCurrentColor","prevStateFormat","onCleanup","isEqual","handleChange","newColor","rgba","_createVNode","cssClasses","PREFIX","minWidth","minHeight","backgroundColor","r","g","b","a","InputGroup","default","Input","v","getValueByInputValue","InputNumber","Math","round","toFixed","hex","ColorPickerFoundation","rgbaToHex","hsva","_createTextVNode","Select","handleFormatChange","map","label","Button","handlePickValueWithStraw","IconEyedropper"],"mappings":"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"}