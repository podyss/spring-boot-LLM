import { defineComponent as g, useSlots as v, ref as b, reactive as f, watch as y, createVNode as r } from "vue";
import { hsvaToHslString as C, hsvaToRgba as P } from '@douyinfe/semi-foundation/lib/es/colorPicker/utils/convert';
import { cssClasses as d } from '@douyinfe/semi-foundation/lib/es/colorPicker/constants';
import w from "classnames";
import p from '@douyinfe/semi-foundation/lib/es/colorPicker/ColorChooseAreaFoundation';
import { round as l } from '@douyinfe/semi-foundation/lib/es/colorPicker/utils/round';
import { useBaseComponent as H } from "../../_base/baseComponent";
const M = {
  className: String,
  style: Object,
  foundation: {
    type: Object,
    required: !0
  },
  handleSize: {
    type: Number,
    required: !0
  },
  height: {
    type: Number,
    required: !0
  },
  hsva: {
    type: Object,
    required: !0
  },
  width: {
    type: Number,
    required: !0
  },
  onChange: {
    type: Function,
    required: !0
  }
}, O = /* @__PURE__ */ g({
  props: {
    ...M
  },
  name: "ColorChooseArea",
  setup(e, {
    attrs: S
  }) {
    v();
    const i = b(), a = f({
      handlePosition: {
        x: 0,
        y: 0
      },
      isHandleGrabbing: !1
    }), {
      adapter: u
    } = H(e, a);
    function h() {
      return {
        ...u(),
        getColorPickerFoundation: () => e.foundation,
        handleMouseDown: (o) => {
          var n;
          a.isHandleGrabbing = !0, (n = i.value) == null || n.addEventListener("mousemove", t.setHandlePositionByMousePosition), window.addEventListener("mouseup", t.handleMouseUp);
        },
        handleMouseUp: () => {
          var o;
          (o = i.value) == null || o.removeEventListener("mousemove", t.setHandlePositionByMousePosition), window.removeEventListener("mouseup", t.handleMouseUp), a.isHandleGrabbing = !1;
        },
        getDOM: () => i.value,
        notifyChange: (o) => e.onChange(o)
      };
    }
    const c = h(), t = new p(c);
    a.handlePosition = t.getHandlePositionByHSVA(), y([() => e.hsva], (o, [n], s) => {
      JSON.stringify(n) !== JSON.stringify(e.hsva) && (a.handlePosition = t.getHandlePositionByHSVA());
    }, {
      deep: !0
    });
    const m = (o) => {
      t.setHandlePositionByMousePosition(o), t.handleMouseDown(o);
    };
    return () => {
      const o = C({
        h: e.hsva.h,
        s: 100,
        v: 100,
        a: 1
      }), n = P(e.hsva);
      return r("div", {
        class: w(`${d.PREFIX}-colorChooseArea`, e.className),
        style: {
          backgroundColor: o,
          width: e.width + "px",
          height: e.height + "px",
          cursor: a.isHandleGrabbing ? "grabbing" : "pointer",
          ...e.style
        },
        ref: i,
        "aria-label": "Color",
        onMousedown: m,
        "aria-valuetext": `Saturation ${l(e.hsva.s)}%, Brightness ${l(e.hsva.v)}%`
      }, [r("div", {
        class: `${d.PREFIX}-handle`,
        style: {
          width: e.handleSize + "px",
          height: e.handleSize + "px",
          left: a.handlePosition.x + "px",
          top: a.handlePosition.y + "px",
          backgroundColor: `rgba(${n.r},${n.g},${n.b},${n.a})`
        },
        onMousedown: (s) => t.handleMouseDown(s)
      }, null)]);
    };
  }
});
export {
  O as default,
  M as vuePropsType
};
//# sourceMappingURL=index.js.map
