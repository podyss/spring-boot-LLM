import { ColorPickerProps, ColorPickerState } from '@douyinfe/semi-foundation/lib/es/colorPicker/foundation';
import { PopoverProps } from '../popover';
import { ColorValue } from '@douyinfe/semi-foundation/lib/es/colorPicker/foundation';
import '@douyinfe/semi-foundation/lib/es/colorPicker/colorPicker.css';
import { CSSProperties, PropType, VNode } from 'vue';
import { CombineProps } from '../interface';
export interface ColorPickerReactProps extends ColorPickerProps {
    usePopover?: boolean;
    popoverProps?: PopoverProps;
    className?: string;
    style?: CSSProperties;
    bottomSlot?: VNode;
    topSlot?: VNode;
}
export interface ColorPickerReactState extends ColorPickerState {
}
export declare const propsType: CombineProps<ColorPickerReactProps>;
declare const ColorPicker: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    usePopover: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    popoverProps: PropType<PopoverProps> | {
        type: PropType<PopoverProps>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    bottomSlot: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    topSlot: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    eyeDropper: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<ColorValue> | {
        type: PropType<ColorValue>;
        default?: any;
        required?: false;
    };
    value: PropType<ColorValue> | {
        type: PropType<ColorValue>;
        default?: any;
        required?: false;
    };
    onChange: {
        type: PropType<(value: ColorValue) => void>;
        default?: any;
        required: true;
    };
    alpha: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    width: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    height: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    defaultFormat: {
        type: PropType<"hex" | "rgba" | "hsva">;
        default?: any;
        required: true;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    usePopover: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    popoverProps: PropType<PopoverProps> | {
        type: PropType<PopoverProps>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    bottomSlot: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    topSlot: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    eyeDropper: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<ColorValue> | {
        type: PropType<ColorValue>;
        default?: any;
        required?: false;
    };
    value: PropType<ColorValue> | {
        type: PropType<ColorValue>;
        default?: any;
        required?: false;
    };
    onChange: {
        type: PropType<(value: ColorValue) => void>;
        default?: any;
        required: true;
    };
    alpha: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    width: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    height: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    defaultFormat: {
        type: PropType<"hex" | "rgba" | "hsva">;
        default?: any;
        required: true;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const colorStringToValue: (raw: string) => {
    hsva: import("@douyinfe/semi-foundation/lib/es/colorPicker/interface").HsvaColor;
    rgba: import("@douyinfe/semi-foundation/lib/es/colorPicker/interface").RgbaColor;
    hex: string;
};
export type { ColorValue };
export * from '@douyinfe/semi-foundation/lib/es/colorPicker/interface';
export type ColorPickerType = typeof ColorPicker & {
    colorStringToValue: typeof colorStringToValue;
};
declare const BaseColorPicker: ColorPickerType;
export default BaseColorPicker;
