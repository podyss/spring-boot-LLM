import { defineComponent as P, useSlots as T, reactive as x, createVNode as n, mergeProps as s } from "vue";
import y from '@douyinfe/semi-foundation/lib/es/colorPicker/foundation';
import F from "./ColorChooseArea";
import N from "./AlphaSlider";
import k from "./ColorSlider";
import V from "./DataPart";
import h from "classnames";
import '@douyinfe/semi-foundation/lib/es/colorPicker/colorPicker.css';
import { cssClasses as u } from '@douyinfe/semi-foundation/lib/es/colorPicker/constants';
import j from "../popover";
import { hexToHsva as R, hexToRgba as H, rgbaStringToRgba as O, rgbaStringToHsva as W, rgbaToHex as m, rgbStringToRgba as B, rgbStringToHsva as D, hsvaStringToHsva as E, hsvaToRgba as I, hsvaToHex as q } from '@douyinfe/semi-foundation/lib/es/colorPicker/utils/convert';
import { vuePropsMake as z } from "../PropTypes";
import { useBaseComponent as X } from "../_base/baseComponent";
export * from '@douyinfe/semi-foundation/lib/es/colorPicker/interface';
const $ = {
  alpha: {
    type: Boolean,
    required: !0
  },
  bottomSlot: [Object],
  className: String,
  defaultFormat: {
    type: String,
    required: !0
  },
  defaultValue: Object,
  eyeDropper: Boolean,
  height: Number,
  onChange: {
    type: Function,
    required: !0
  },
  popoverProps: Object,
  style: Object,
  topSlot: Object,
  usePopover: Boolean,
  value: Object,
  width: Number
}, A = {
  defaultValue: {
    hsva: {
      h: 176,
      s: 71,
      v: 77,
      a: 1
    },
    rgba: {
      r: 57,
      g: 197,
      b: 187,
      a: 1
    },
    hex: "#39c5bb"
  },
  eyeDropper: !0,
  defaultFormat: "hex"
}, M = z($, A), _ = /* @__PURE__ */ P({
  props: {
    ...M
  },
  name: "ColorPicker",
  setup(e, {
    attrs: t,
    expose: c
  }) {
    const l = T(), g = e.value ?? e.defaultValue, f = x({
      currentColor: g
    }), {
      adapter: v
    } = X(e, f);
    function b() {
      return {
        ...v(),
        notifyChange: (i) => {
          var a;
          (a = e.onChange) == null || a.call(e, i);
        }
      };
    }
    const p = b(), r = new y(p);
    function d() {
      const {
        className: i
      } = e, a = h(`${u.PREFIX}`, i), o = r.getCurrentColor();
      return n("div", s({
        class: a
      }, t), [e.topSlot, n(F, {
        hsva: o.hsva,
        foundation: r,
        onChange: ({
          s: C,
          v: S
        }) => {
          r.handleChange({
            s: C,
            v: S,
            a: o.hsva.a,
            h: o.hsva.h
          }, "hsva");
        },
        handleSize: 20,
        width: e.width ?? 280,
        height: e.height ?? 280
      }, null), n(k, {
        width: e.width ?? 280,
        height: 10,
        handleSize: 18,
        hue: o.hsva.h,
        class: "colorSliderWrapper",
        foundation: r
      }, null), e.alpha && n(N, {
        width: e.width ?? 280,
        height: 10,
        handleSize: 18,
        hsva: o.hsva,
        class: "alphaSliderWrapper",
        foundation: r
      }, null), n(V, {
        currentColor: o,
        eyeDropper: e.eyeDropper,
        alpha: e.alpha,
        width: e.width ?? 280,
        foundation: r,
        defaultFormat: e.defaultFormat
      }, null), e.bottomSlot]);
    }
    return () => {
      var a;
      const i = r.getCurrentColor();
      return e.usePopover ? n(j, s(e.popoverProps, {
        className: h(`${u.PREFIX}-popover`, (a = e.popoverProps) == null ? void 0 : a.className),
        content: d()
      }), {
        default: () => {
          var o;
          return [((o = l.default) == null ? void 0 : o.call(l)) ?? n("div", s(t, {
            style: {
              backgroundColor: i.hex
            },
            class: h(`${u.PREFIX}-popover-defaultChildren`)
          }), null)];
        }
      }) : d();
    };
  }
}), w = (e) => {
  if (e.startsWith("#"))
    return {
      hsva: R(e),
      rgba: H(e),
      hex: e
    };
  if (e.startsWith("rgba")) {
    const t = O(e);
    return {
      hsva: W(e),
      rgba: t,
      hex: m(t)
    };
  } else if (e.startsWith("rgb")) {
    const t = B(e);
    return {
      hsva: D(e),
      rgba: t,
      hex: m(t)
    };
  } else if (e.startsWith("hsv")) {
    const t = E(e), c = I(t), l = q(t);
    return {
      hsva: t,
      rgba: c,
      hex: l
    };
  } else
    throw new Error("Semi ColorPicker: error on static colorStringToValue method, input value is invalid: " + e);
}, G = _;
G.colorStringToValue = w;
export {
  G as default,
  $ as propsType
};
//# sourceMappingURL=index.js.map
