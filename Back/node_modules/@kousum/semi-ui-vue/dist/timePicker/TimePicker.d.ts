import { CSSProperties, VNode } from 'vue';
import { ValidateStatus } from '../_base/baseComponent';
import { PopoverProps } from '../popover';
import { TimePickerAdapter } from '@douyinfe/semi-foundation/lib/es/timePicker/foundation';
import '@douyinfe/semi-foundation/lib/es/timePicker/timePicker.css';
import { InputSize } from '../input';
import type { Position } from '../tooltip';
import { ScrollItemProps } from '../scrollList/scrollItem';
import { Locale } from '../locale/interface';
import { Motion } from '../_base/base';
import { AriaAttributes } from '../AriaAttributes';
import { VueJsxNode } from '../interface';
export interface Panel {
    panelHeader?: VNode | string;
    panelFooter?: VNode | string;
}
export type BaseValueType = string | number | Date | undefined;
export type Type = 'time' | 'timeRange';
export type TimePickerProps = {
    'aria-describedby'?: AriaAttributes['aria-describedby'];
    'aria-errormessage'?: AriaAttributes['aria-errormessage'];
    'aria-invalid'?: AriaAttributes['aria-invalid'];
    'aria-labelledby'?: AriaAttributes['aria-labelledby'];
    'aria-required'?: AriaAttributes['aria-required'];
    autoAdjustOverflow?: boolean;
    autoFocus?: boolean;
    borderless?: boolean;
    className?: string;
    clearText?: string;
    dateFnsLocale?: Locale['dateFnsLocale'];
    defaultOpen?: boolean;
    defaultValue?: BaseValueType | BaseValueType[];
    disabled?: boolean;
    disabledHours?: () => number[];
    disabledMinutes?: (selectedHour: number) => number[];
    disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];
    focusOnOpen?: boolean;
    format?: string;
    getPopupContainer?: () => HTMLElement;
    hideDisabledOptions?: boolean;
    hourStep?: number;
    id?: string;
    inputReadOnly?: boolean;
    inputStyle?: CSSProperties;
    insetLabel?: VNode | string;
    insetLabelId?: string;
    locale?: Locale['TimePicker'];
    localeCode?: string;
    minuteStep?: number;
    motion?: Motion;
    open?: boolean;
    panelFooter?: VNode | string;
    panelHeader?: VNode | string;
    panels?: Panel[];
    placeholder?: string;
    popupClassName?: string;
    popupStyle?: CSSProperties;
    position?: Position;
    prefixCls?: string;
    rangeSeparator?: string;
    scrollItemProps?: ScrollItemProps<any>;
    secondStep?: number;
    showClear?: boolean;
    size?: InputSize;
    stopPropagation?: boolean;
    style?: CSSProperties;
    timeZone?: string | number;
    triggerRender?: (props?: any) => VNode | string;
    type?: Type;
    use12Hours?: boolean;
    validateStatus?: ValidateStatus;
    value?: BaseValueType | BaseValueType[];
    zIndex?: number | string;
    onBlur?: any;
    onChange?: TimePickerAdapter['notifyChange'];
    onChangeWithDateFirst?: boolean;
    onFocus?: any;
    onOpenChange?: (open: boolean) => void;
    clearIcon?: VueJsxNode;
    dropdownMargin?: PopoverProps['margin'];
    preventScroll?: boolean;
};
export interface TimePickerState {
    open: boolean;
    value: Date[];
    inputValue: string;
    currentSelectPanel: string | number;
    isAM: [boolean, boolean];
    showHour: boolean;
    showMinute: boolean;
    showSecond: boolean;
    invalid: boolean;
}
export declare const propTypes: import("../interface").CombineProps<TimePickerProps>;
export declare const defaultProps: {
    autoAdjustOverflow: boolean;
    getPopupContainer: () => HTMLElement;
    showClear: boolean;
    zIndex: number;
    rangeSeparator: " ~ ";
    onOpenChange: (...args: any[]) => void;
    clearText: string;
    prefixCls: string;
    borderless: boolean;
    inputReadOnly: boolean;
    style: {};
    stopPropagation: boolean;
    className: string;
    popupClassName: string;
    popupStyle: {
        left: string;
        top: string;
    };
    disabledHours: () => number[];
    disabledMinutes: () => number[];
    disabledSeconds: () => number[];
    hideDisabledOptions: boolean;
    onFocus: (...args: any[]) => void;
    onBlur: (...args: any[]) => void;
    onChange: (...args: any[]) => void;
    onChangeWithDateFirst: boolean;
    use12Hours: boolean;
    focusOnOpen: boolean;
    onKeyDown: (...args: any[]) => void;
    size: "default";
    type: "time";
    motion: boolean;
};
export declare const vuePropsType: import("../interface").CombineProps<TimePickerProps>;
declare const TimePicker: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearText: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: import("vue").PropType<globalThis.Locale> | {
        type: import("vue").PropType<globalThis.Locale>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<BaseValueType | BaseValueType[]> | {
        type: import("vue").PropType<BaseValueType | BaseValueType[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledHours: import("vue").PropType<() => number[]> | {
        type: import("vue").PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    disabledMinutes: import("vue").PropType<(selectedHour: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    focusOnOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hourStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    inputReadOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<CSSProperties> | {
        type: import("vue").PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    locale: import("vue").PropType<{
        placeholder: {
            time: string;
            timeRange: string;
        };
        begin: string;
        end: string;
        hour: string;
        minute: string;
        second: string;
        AM: string;
        PM: string;
    }> | {
        type: import("vue").PropType<{
            placeholder: {
                time: string;
                timeRange: string;
            };
            begin: string;
            end: string;
            hour: string;
            minute: string;
            second: string;
            AM: string;
            PM: string;
        }>;
        default?: any;
        required?: false;
    };
    localeCode: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    minuteStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<Motion> | {
        type: import("vue").PropType<Motion>;
        default?: any;
        required?: false;
    };
    open: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    panelFooter: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panelHeader: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panels: import("vue").PropType<Panel[]> | {
        type: import("vue").PropType<Panel[]>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupStyle: import("vue").PropType<CSSProperties> | {
        type: import("vue").PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    scrollItemProps: import("vue").PropType<ScrollItemProps<any>> | {
        type: import("vue").PropType<ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    secondStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<InputSize> | {
        type: import("vue").PropType<InputSize>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<CSSProperties> | {
        type: import("vue").PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    timeZone: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props?: any) => VNode | string> | {
        type: import("vue").PropType<(props?: any) => VNode | string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<Type> | {
        type: import("vue").PropType<Type>;
        default?: any;
        required?: false;
    };
    use12Hours: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<BaseValueType | BaseValueType[]> | {
        type: import("vue").PropType<BaseValueType | BaseValueType[]>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<{
        (value: Date | Date[], input: string | string[]): void;
        (input: string | string[], value: Date | Date[]): void;
    }> | {
        type: import("vue").PropType<{
            (value: Date | Date[], input: string | string[]): void;
            (input: string | string[], value: Date | Date[]): void;
        }>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onOpenChange: import("vue").PropType<(open: boolean) => void> | {
        type: import("vue").PropType<(open: boolean) => void>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<VueJsxNode> | {
        type: import("vue").PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearText: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: import("vue").PropType<globalThis.Locale> | {
        type: import("vue").PropType<globalThis.Locale>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<BaseValueType | BaseValueType[]> | {
        type: import("vue").PropType<BaseValueType | BaseValueType[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledHours: import("vue").PropType<() => number[]> | {
        type: import("vue").PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    disabledMinutes: import("vue").PropType<(selectedHour: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    focusOnOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hourStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    inputReadOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<CSSProperties> | {
        type: import("vue").PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    locale: import("vue").PropType<{
        placeholder: {
            time: string;
            timeRange: string;
        };
        begin: string;
        end: string;
        hour: string;
        minute: string;
        second: string;
        AM: string;
        PM: string;
    }> | {
        type: import("vue").PropType<{
            placeholder: {
                time: string;
                timeRange: string;
            };
            begin: string;
            end: string;
            hour: string;
            minute: string;
            second: string;
            AM: string;
            PM: string;
        }>;
        default?: any;
        required?: false;
    };
    localeCode: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    minuteStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<Motion> | {
        type: import("vue").PropType<Motion>;
        default?: any;
        required?: false;
    };
    open: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    panelFooter: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panelHeader: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panels: import("vue").PropType<Panel[]> | {
        type: import("vue").PropType<Panel[]>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupStyle: import("vue").PropType<CSSProperties> | {
        type: import("vue").PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    scrollItemProps: import("vue").PropType<ScrollItemProps<any>> | {
        type: import("vue").PropType<ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    secondStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<InputSize> | {
        type: import("vue").PropType<InputSize>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<CSSProperties> | {
        type: import("vue").PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    timeZone: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props?: any) => VNode | string> | {
        type: import("vue").PropType<(props?: any) => VNode | string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<Type> | {
        type: import("vue").PropType<Type>;
        default?: any;
        required?: false;
    };
    use12Hours: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<BaseValueType | BaseValueType[]> | {
        type: import("vue").PropType<BaseValueType | BaseValueType[]>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<{
        (value: Date | Date[], input: string | string[]): void;
        (input: string | string[], value: Date | Date[]): void;
    }> | {
        type: import("vue").PropType<{
            (value: Date | Date[], input: string | string[]): void;
            (input: string | string[], value: Date | Date[]): void;
        }>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onOpenChange: import("vue").PropType<(open: boolean) => void> | {
        type: import("vue").PropType<(open: boolean) => void>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<VueJsxNode> | {
        type: import("vue").PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TimePicker;
