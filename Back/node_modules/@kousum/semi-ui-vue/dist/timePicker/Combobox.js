import { defineComponent as T, useSlots as j, reactive as $, watch as v, createVNode as b, mergeProps as h } from "vue";
import { format as L } from "date-fns";
import { omit as R, noop as O } from "lodash";
import { useBaseComponent as E } from "../_base/baseComponent";
import { strings as U } from '@douyinfe/semi-foundation/lib/es/timePicker/constants';
import k from "../scrollList/index";
import { scrollItemFunc as A } from "../scrollList/scrollItem";
import B, { formatOption as P } from '@douyinfe/semi-foundation/lib/es/timePicker/ComboxFoundation';
import _ from "../locale/localeConsumer";
import * as t from "../PropTypes";
import { vuePropsMake as q } from "../PropTypes";
import { timePickerPropTypes as z } from "./propTypes";
const x = A(), G = A(), J = {
  class: [t.string, t.object],
  className: t.string,
  style: [t.string, t.object],
  format: t.string,
  defaultOpenValue: t.object,
  prefixCls: t.string,
  onChange: t.func,
  showHour: t.bool,
  showMinute: t.bool,
  showSecond: t.bool,
  disabledHours: t.func,
  disabledMinutes: t.func,
  disabledSeconds: t.func,
  hideDisabledOptions: t.bool,
  onCurrentSelectPanelChange: t.func,
  use12Hours: t.bool,
  isAM: t.bool,
  timeStampValue: t.any,
  scrollItemProps: t.object,
  panelHeader: t.string,
  ...R(z, ["prefixCls", "format", "style", "disabledHours", "disabledMinutes", "disabledSeconds", "hideDisabledOptions", "onChange", "use12Hours", "scrollItemProps"]),
  panelFooter: t.node
}, K = {
  disabledHours: O,
  disabledMinutes: O,
  disabledSeconds: O,
  format: U.DEFAULT_FORMAT
}, Q = q(J, K), ie = /* @__PURE__ */ T({
  props: {
    ...Q
  },
  name: "Combobox",
  setup(u, {}) {
    j();
    const S = $({
      hourOptions: [],
      minuteOptions: [],
      secondOptions: [],
      showHour: !1,
      showMinute: !1,
      showSecond: !1
    }), {
      adapter: N
    } = E(u, S), H = new B(N());
    function I() {
      const e = H.initData();
      Object.keys(e).forEach((o) => {
        S[o] = e[o];
      });
    }
    I(), v([() => u.timeStampValue, () => u.format], ([], [e, o]) => {
      (e !== u.timeStampValue || o !== u.format) && I();
    });
    const M = (e, o) => {
      e && typeof e == "string" && N().setCache(e, o);
    }, g = ({
      type: e,
      value: o,
      disabled: c
    }) => {
      let {
        onChange: n,
        use12Hours: r,
        isAM: a,
        format: d,
        timeStampValue: m
      } = u;
      const s = H.getDisplayDateFromTimeStamp(m);
      if (e === "hour")
        r ? a ? s.setHours(Number(o) % 12) : s.setHours(Number(o) % 12 + 12) : s.setHours(Number(o));
      else if (e === "minute")
        s.setMinutes(Number(o));
      else if (e === "ampm") {
        const i = o.toUpperCase();
        r && (i === "PM" && (a = !1, s.getHours() < 12 && s.setHours(s.getHours() % 12 + 12)), i === "AM" && (a = !0, s.getHours() >= 12 && s.setHours(s.getHours() - 12)));
      } else
        s.setSeconds(Number(o));
      n && n({
        isAM: a,
        value: L(s, d && d.replace(/(\s+)A/g, "$1a")),
        // dateFns only supports "h: mm: ss a"
        timeStampValue: Number(s)
      });
    };
    function w(e, o) {
      const {
        prefixCls: c,
        disabledHours: n,
        use12Hours: r,
        scrollItemProps: a
      } = u, {
        showHour: d,
        hourOptions: m
      } = S;
      if (!d)
        return null;
      const s = n();
      let i, p;
      r ? (i = [12].concat(m.filter((f) => f < 12 && f > 0)), p = e % 12 || 12) : (i = m, p = e);
      const C = (f) => f + o.hour, l = `${c}-list-hour`;
      return b(x, h({
        ref: (f) => M("hour", f),
        mode: "normal",
        transform: C,
        className: l,
        list: i.map((f) => P(f, s)),
        selectedIndex: i.indexOf(p),
        type: "hour",
        onSelect: g
      }, a), null);
    }
    function D(e, o) {
      const {
        prefixCls: c,
        disabledMinutes: n,
        timeStampValue: r,
        scrollItemProps: a
      } = u, {
        showMinute: d,
        minuteOptions: m
      } = S;
      if (!d)
        return null;
      const s = new Date(r), i = n && n(s.getHours()), p = `${c}-list-minute`;
      return b(x, h({
        ref: (l) => M("minute", l),
        mode: "normal",
        transform: (l) => l + o.minute,
        list: m.map((l) => P(l, i)),
        selectedIndex: m.indexOf(e),
        type: "minute",
        onSelect: g,
        className: p
      }, a), null);
    }
    function y(e, o) {
      const {
        prefixCls: c,
        disabledSeconds: n,
        timeStampValue: r,
        scrollItemProps: a
      } = u, {
        showSecond: d,
        secondOptions: m
      } = S;
      if (!d)
        return null;
      const s = new Date(r), i = n && n(s.getHours(), s.getMinutes()), p = `${c}-list-second`;
      return b(x, h({
        ref: (l) => M("second", l),
        mode: "normal",
        transform: (l) => String(l) + o.second,
        list: m.map((l) => P(l, i)),
        selectedIndex: m.indexOf(e),
        className: p,
        type: "second",
        onSelect: g
      }, a), null);
    }
    function F(e, o) {
      const {
        prefixCls: c,
        use12Hours: n,
        isAM: r,
        scrollItemProps: a
      } = u;
      if (!n)
        return null;
      const d = [{
        value: "AM",
        text: e.AM || "上午"
      }, {
        value: "PM",
        text: e.PM || "下午"
      }], m = r ? 0 : 1, s = `${c}-list-ampm`;
      return b(G, h({
        ref: (i) => M("ampm", i),
        mode: "normal",
        className: s,
        list: d,
        selectedIndex: m,
        type: "ampm",
        onSelect: g
      }, a), null);
    }
    const V = (e) => H.getDisplayDateFromTimeStamp(e);
    return () => {
      const {
        timeStampValue: e,
        panelHeader: o,
        panelFooter: c
      } = u, n = V(e);
      return b(_, {
        componentName: "TimePicker"
      }, {
        default: (r, a) => b(k, {
          header: o,
          footer: c,
          "x-semi-header-alias": "panelHeader",
          "x-semi-footer-alias": "panelFooter"
        }, {
          default: () => [F(r), w(n.getHours(), r), D(n.getMinutes(), r), y(n.getSeconds(), r)]
        })
      });
    };
  }
});
export {
  ie as default,
  Q as vuePropsType
};
//# sourceMappingURL=Combobox.js.map
