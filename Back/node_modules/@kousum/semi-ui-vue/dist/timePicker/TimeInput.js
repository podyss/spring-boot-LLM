import { defineComponent as I, reactive as L, onMounted as M, watch as N, createVNode as c, mergeProps as P } from "vue";
import * as e from "../PropTypes";
import { vuePropsMake as R } from "../PropTypes";
import j from "classnames";
import { strings as p } from '@douyinfe/semi-foundation/lib/es/timePicker/constants';
import { noop as n } from "lodash";
import E from "../input";
import { useBaseComponent as $ } from "../_base/baseComponent";
import q from '@douyinfe/semi-foundation/lib/es/timePicker/inputFoundation';
import { IconClock as H } from "@kousum/semi-icons-vue";
const _ = {
  value: String,
  borderless: e.bool,
  format: {
    type: e.string,
    default: p.DEFAULT_FORMAT
  },
  prefixCls: e.string,
  placeholder: e.string,
  clearText: e.string,
  inputReadOnly: {
    type: e.bool,
    default: !1
  },
  hourOptions: e.array,
  minuteOptions: e.array,
  secondOptions: e.array,
  disabledHours: {
    type: e.func,
    default: n
  },
  disabledMinutes: {
    type: e.func,
    default: n
  },
  disabledSeconds: {
    type: e.func,
    default: n
  },
  onChange: {
    type: e.func,
    default: n
  },
  onFocus: {
    type: e.func,
    default: n
  },
  onBlur: {
    type: e.func,
    default: n
  },
  onEsc: e.func,
  onClick: {
    type: e.func,
    default: n
  },
  defaultOpenValue: e.object,
  currentSelectPanel: e.string,
  focusOnOpen: e.bool,
  timeStampValue: e.any,
  locale: e.object,
  localeCode: e.string,
  insetLabel: e.node,
  validateStatus: e.string,
  preventScroll: e.bool,
  disabled: e.bool,
  type: e.string,
  timeZone: [e.string, e.number],
  defaultOpen: e.bool,
  dateFnsLocale: e.object,
  style: e.object,
  className: e.string,
  invalid: e.bool
}, D = {
  borderless: !1,
  inputReadOnly: !1,
  onChange: n,
  onBlur: n,
  onFocus: n,
  onClick: n,
  disabledHours: n,
  disabledMinutes: n,
  disabledSeconds: n,
  format: p.DEFAULT_FORMAT
}, U = R(_, D), Ce = /* @__PURE__ */ I({
  props: {
    ...U
  },
  name: "TimeInput",
  setup(o, {
    slots: Z
  }) {
    const i = L({
      // focusing: props.focusOnOpen,
    }), {
      adapter: m,
      isControlled: b
    } = $(o, i);
    function y() {
      return {
        ...m(),
        notifyChange: (...t) => o.onChange(...t),
        notifyFocus: (...t) => o.onFocus(...t),
        notifyBlur: (...t) => o.onBlur(...t)
      };
    }
    const r = y(), l = new q(r);
    M(() => {
      const {
        focusOnOpen: t,
        preventScroll: s
      } = o;
      t && (window.requestAnimationFrame || window.setTimeout)(() => {
        const a = r.getCache("inputNode");
        a && (a.focus({
          preventScroll: s
        }), a.select());
      });
    }), N([() => o.timeStampValue, () => i.timeStampValue, () => o.value], (t, [s, u, a]) => {
      const {
        timeStampValue: d
      } = o;
      b("timeStampValue") && d !== i.timeStampValue && l.restoreCursor(), o.value !== a && l.restoreCursor();
    }, {
      immediate: !0
    });
    const C = (t) => r.setCache("inputNode", t), g = (t) => o.onClick(t), h = (t) => l.handleFocus(t), S = (t) => l.handleBlur(t), v = (t) => l.handleChange(t);
    function F() {
      const {
        prefixCls: t,
        placeholder: s,
        inputReadOnly: u,
        onFocus: a,
        disabled: d,
        type: O,
        locale: T,
        localeCode: z,
        insetLabel: V,
        validateStatus: B,
        value: x,
        onChange: G,
        invalid: f,
        format: J,
        clearText: K,
        disabledHours: Q,
        disabledMinutes: W,
        disabledSeconds: X,
        onEsc: Y,
        defaultOpenValue: ee,
        currentSelectPanel: te,
        focusOnOpen: ne,
        timeStampValue: oe,
        timeZone: ae,
        defaultOpen: le,
        dateFnsLocale: se,
        onBlur: ue,
        ...k
      } = o, w = j(`${t}-input`, {
        [`${t}-input-invalid`]: f,
        [`${t}-input-readonly`]: u
      }), A = f ? "error" : B;
      return c(E, P(k, {
        hideSuffix: !0,
        className: w,
        ref: C,
        value: x,
        placeholder: s || T.placeholder[O],
        readonly: !!u,
        onChange: v,
        onFocus: h,
        onBlur: S,
        suffix: c(H, {
          onClick: g
        }, null),
        validateStatus: A,
        disabled: d,
        insetLabel: V
      }), null);
    }
    return () => {
      const {
        prefixCls: t
      } = o;
      return c("div", {
        class: `${t}-input-wrap`
      }, [F()]);
    };
  }
});
export {
  Ce as default,
  U as vuePropsType
};
//# sourceMappingURL=TimeInput.js.map
