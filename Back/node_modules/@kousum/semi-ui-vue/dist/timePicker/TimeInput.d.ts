import { PropType } from 'vue';
import { BaseProps } from '../_base/baseComponent';
import { TimePickerProps } from './TimePicker';
import { CombineProps } from '../interface';
export type TimeInputProps = Pick<TimePickerProps, 'value' | 'format' | 'prefixCls' | 'placeholder' | 'clearText' | 'inputReadOnly' | 'disabled' | 'type' | 'timeZone' | 'defaultOpen' | 'disabledHours' | 'disabledMinutes' | 'disabledSeconds' | 'dateFnsLocale' | 'onFocus' | 'onBlur' | 'focusOnOpen' | 'locale' | 'localeCode' | 'insetLabel' | 'validateStatus' | 'borderless' | 'preventScroll'> & BaseProps & {
    onChange?: (value: string) => void;
    onEsc?: () => void;
    onClick?: any;
    defaultOpenValue?: boolean;
    currentSelectPanel?: string;
    timeStampValue?: any;
    invalid?: boolean;
    hourOptions?: any[];
    minuteOptions?: any[];
    secondOptions?: any[];
};
export declare const vuePropsType: CombineProps<TimeInputProps>;
declare const TimeInput: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    type: PropType<import("./TimePicker").Type> | {
        type: PropType<import("./TimePicker").Type>;
        default?: any;
        required?: false;
    };
    value: PropType<import("./TimePicker").BaseValueType | import("./TimePicker").BaseValueType[]> | {
        type: PropType<import("./TimePicker").BaseValueType | import("./TimePicker").BaseValueType[]>;
        default?: any;
        required?: false;
    };
    timeZone: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    locale: PropType<{
        placeholder: {
            time: string;
            timeRange: string;
        };
        begin: string;
        end: string;
        hour: string;
        minute: string;
        second: string;
        AM: string;
        PM: string;
    }> | {
        type: PropType<{
            placeholder: {
                time: string;
                timeRange: string;
            };
            begin: string;
            end: string;
            hour: string;
            minute: string;
            second: string;
            AM: string;
            PM: string;
        }>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: PropType<Locale> | {
        type: PropType<Locale>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<"default" | "error" | "warning" | "success"> | {
        type: PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    defaultOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    inputReadOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    localeCode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabledMinutes: PropType<(selectedHour: number) => number[]> | {
        type: PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledHours: PropType<() => number[]> | {
        type: PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    clearText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    focusOnOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string) => void> | {
        type: PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
    onEsc: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    defaultOpenValue: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    currentSelectPanel: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    timeStampValue: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    invalid: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hourOptions: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    minuteOptions: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    secondOptions: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: PropType<import("./TimePicker").Type> | {
        type: PropType<import("./TimePicker").Type>;
        default?: any;
        required?: false;
    };
    value: PropType<import("./TimePicker").BaseValueType | import("./TimePicker").BaseValueType[]> | {
        type: PropType<import("./TimePicker").BaseValueType | import("./TimePicker").BaseValueType[]>;
        default?: any;
        required?: false;
    };
    timeZone: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    locale: PropType<{
        placeholder: {
            time: string;
            timeRange: string;
        };
        begin: string;
        end: string;
        hour: string;
        minute: string;
        second: string;
        AM: string;
        PM: string;
    }> | {
        type: PropType<{
            placeholder: {
                time: string;
                timeRange: string;
            };
            begin: string;
            end: string;
            hour: string;
            minute: string;
            second: string;
            AM: string;
            PM: string;
        }>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: PropType<Locale> | {
        type: PropType<Locale>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<"default" | "error" | "warning" | "success"> | {
        type: PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    defaultOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    inputReadOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    localeCode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabledMinutes: PropType<(selectedHour: number) => number[]> | {
        type: PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledHours: PropType<() => number[]> | {
        type: PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    clearText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    focusOnOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string) => void> | {
        type: PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
    onEsc: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    defaultOpenValue: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    currentSelectPanel: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    timeStampValue: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    invalid: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hourOptions: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    minuteOptions: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    secondOptions: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TimeInput;
