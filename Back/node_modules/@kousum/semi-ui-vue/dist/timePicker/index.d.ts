import type { TimePickerProps as BasePickerProps, BaseValueType } from './TimePicker';
import type { ValidateStatus } from '../_base/baseComponent';
import type { ScrollItemProps } from '../scrollList';
export type { TimeInputProps } from './TimeInput';
export type { TimePickerProps } from './TimePicker';
export { BaseValueType, ScrollItemProps, ValidateStatus };
export type LocalePickerProps = BasePickerProps;
export declare const vuePropsType: import("../interface").CombineProps<BasePickerProps>;
declare const index: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearText: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: import("vue").PropType<globalThis.Locale> | {
        type: import("vue").PropType<globalThis.Locale>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<BaseValueType | BaseValueType[]> | {
        type: import("vue").PropType<BaseValueType | BaseValueType[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledHours: import("vue").PropType<() => number[]> | {
        type: import("vue").PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    disabledMinutes: import("vue").PropType<(selectedHour: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    focusOnOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hourStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    inputReadOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    locale: import("vue").PropType<{
        placeholder: {
            time: string;
            timeRange: string;
        };
        begin: string;
        end: string;
        hour: string;
        minute: string;
        second: string;
        AM: string;
        PM: string;
    }> | {
        type: import("vue").PropType<{
            placeholder: {
                time: string;
                timeRange: string;
            };
            begin: string;
            end: string;
            hour: string;
            minute: string;
            second: string;
            AM: string;
            PM: string;
        }>;
        default?: any;
        required?: false;
    };
    localeCode: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    minuteStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<import("../_base/base").Motion> | {
        type: import("vue").PropType<import("../_base/base").Motion>;
        default?: any;
        required?: false;
    };
    open: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    panelFooter: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panelHeader: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panels: import("vue").PropType<import("./TimePicker").Panel[]> | {
        type: import("vue").PropType<import("./TimePicker").Panel[]>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    scrollItemProps: import("vue").PropType<ScrollItemProps<any>> | {
        type: import("vue").PropType<ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    secondStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("../input").InputSize> | {
        type: import("vue").PropType<import("../input").InputSize>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    timeZone: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props?: any) => import("vue").VNode | string> | {
        type: import("vue").PropType<(props?: any) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("./TimePicker").Type> | {
        type: import("vue").PropType<import("./TimePicker").Type>;
        default?: any;
        required?: false;
    };
    use12Hours: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<BaseValueType | BaseValueType[]> | {
        type: import("vue").PropType<BaseValueType | BaseValueType[]>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<{
        (value: Date | Date[], input: string | string[]): void;
        (input: string | string[], value: Date | Date[]): void;
    }> | {
        type: import("vue").PropType<{
            (value: Date | Date[], input: string | string[]): void;
            (input: string | string[], value: Date | Date[]): void;
        }>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onOpenChange: import("vue").PropType<(open: boolean) => void> | {
        type: import("vue").PropType<(open: boolean) => void>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearText: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: import("vue").PropType<globalThis.Locale> | {
        type: import("vue").PropType<globalThis.Locale>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<BaseValueType | BaseValueType[]> | {
        type: import("vue").PropType<BaseValueType | BaseValueType[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledHours: import("vue").PropType<() => number[]> | {
        type: import("vue").PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    disabledMinutes: import("vue").PropType<(selectedHour: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    focusOnOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hourStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    inputReadOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    locale: import("vue").PropType<{
        placeholder: {
            time: string;
            timeRange: string;
        };
        begin: string;
        end: string;
        hour: string;
        minute: string;
        second: string;
        AM: string;
        PM: string;
    }> | {
        type: import("vue").PropType<{
            placeholder: {
                time: string;
                timeRange: string;
            };
            begin: string;
            end: string;
            hour: string;
            minute: string;
            second: string;
            AM: string;
            PM: string;
        }>;
        default?: any;
        required?: false;
    };
    localeCode: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    minuteStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<import("../_base/base").Motion> | {
        type: import("vue").PropType<import("../_base/base").Motion>;
        default?: any;
        required?: false;
    };
    open: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    panelFooter: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panelHeader: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panels: import("vue").PropType<import("./TimePicker").Panel[]> | {
        type: import("vue").PropType<import("./TimePicker").Panel[]>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    scrollItemProps: import("vue").PropType<ScrollItemProps<any>> | {
        type: import("vue").PropType<ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    secondStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("../input").InputSize> | {
        type: import("vue").PropType<import("../input").InputSize>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    timeZone: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props?: any) => import("vue").VNode | string> | {
        type: import("vue").PropType<(props?: any) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("./TimePicker").Type> | {
        type: import("vue").PropType<import("./TimePicker").Type>;
        default?: any;
        required?: false;
    };
    use12Hours: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<BaseValueType | BaseValueType[]> | {
        type: import("vue").PropType<BaseValueType | BaseValueType[]>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<{
        (value: Date | Date[], input: string | string[]): void;
        (input: string | string[], value: Date | Date[]): void;
    }> | {
        type: import("vue").PropType<{
            (value: Date | Date[], input: string | string[]): void;
            (input: string | string[], value: Date | Date[]): void;
        }>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onOpenChange: import("vue").PropType<(open: boolean) => void> | {
        type: import("vue").PropType<(open: boolean) => void>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default index;
