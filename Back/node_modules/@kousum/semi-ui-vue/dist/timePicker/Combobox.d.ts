import { PropType } from 'vue';
import { BaseProps } from '../_base/baseComponent';
import { formatOption } from '@douyinfe/semi-foundation/lib/es/timePicker/ComboxFoundation';
import type { TimePickerProps } from './TimePicker';
import { CombineProps } from '../interface';
export type ComboboxProps = Pick<TimePickerProps, 'format' | 'prefixCls' | 'disabledHours' | 'disabledMinutes' | 'disabledSeconds' | 'hideDisabledOptions' | 'use12Hours' | 'scrollItemProps' | 'panelFooter' | 'panelHeader'> & BaseProps & {
    defaultOpenValue?: TimePickerProps['value'];
    showHour?: boolean;
    showMinute?: boolean;
    showSecond?: boolean;
    onChange?: (value: {
        isAM: boolean;
        value: string;
        timeStampValue: number;
    }) => void;
    onCurrentSelectPanelChange?: (range: string) => void;
    isAM?: boolean;
    timeStampValue?: any;
    class?: string;
};
export interface ComboboxState {
    showHour: boolean;
    showMinute: boolean;
    showSecond: boolean;
    hourOptions: number[];
    minuteOptions: number[];
    secondOptions: number[];
}
export type FormatOptionReturn = ReturnType<typeof formatOption>;
export interface AMPMOptionItem {
    value: string;
    text: string;
}
export declare const vuePropsType: CombineProps<ComboboxProps>;
declare const Combobox: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledMinutes: PropType<(selectedHour: number) => number[]> | {
        type: PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    use12Hours: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledHours: PropType<() => number[]> | {
        type: PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    panelFooter: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panelHeader: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    scrollItemProps: PropType<import("../scrollList/scrollItem").ScrollItemProps<any>> | {
        type: PropType<import("../scrollList/scrollItem").ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultOpenValue: PropType<import("./TimePicker").BaseValueType | import("./TimePicker").BaseValueType[]> | {
        type: PropType<import("./TimePicker").BaseValueType | import("./TimePicker").BaseValueType[]>;
        default?: any;
        required?: false;
    };
    showHour: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showMinute: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showSecond: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: {
        isAM: boolean;
        value: string;
        timeStampValue: number;
    }) => void> | {
        type: PropType<(value: {
            isAM: boolean;
            value: string;
            timeStampValue: number;
        }) => void>;
        default?: any;
        required?: false;
    };
    onCurrentSelectPanelChange: PropType<(range: string) => void> | {
        type: PropType<(range: string) => void>;
        default?: any;
        required?: false;
    };
    isAM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    timeStampValue: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledMinutes: PropType<(selectedHour: number) => number[]> | {
        type: PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    use12Hours: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledHours: PropType<() => number[]> | {
        type: PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    panelFooter: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panelHeader: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    scrollItemProps: PropType<import("../scrollList/scrollItem").ScrollItemProps<any>> | {
        type: PropType<import("../scrollList/scrollItem").ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultOpenValue: PropType<import("./TimePicker").BaseValueType | import("./TimePicker").BaseValueType[]> | {
        type: PropType<import("./TimePicker").BaseValueType | import("./TimePicker").BaseValueType[]>;
        default?: any;
        required?: false;
    };
    showHour: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showMinute: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showSecond: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: {
        isAM: boolean;
        value: string;
        timeStampValue: number;
    }) => void> | {
        type: PropType<(value: {
            isAM: boolean;
            value: string;
            timeStampValue: number;
        }) => void>;
        default?: any;
        required?: false;
    };
    onCurrentSelectPanelChange: PropType<(range: string) => void> | {
        type: PropType<(range: string) => void>;
        default?: any;
        required?: false;
    };
    isAM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    timeStampValue: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Combobox;
