import { defineComponent as pe, reactive as me, ref as w, nextTick as de, watch as k, createVNode as p, mergeProps as fe } from "vue";
import f from "classnames";
import { noop as g, get as C } from "lodash";
import { useHasInProps as ge, useBaseComponent as Pe } from "../_base/baseComponent";
import { strings as P, cssClasses as v } from '@douyinfe/semi-foundation/lib/es/timePicker/constants';
import he from "../popover";
import { numbers as Ce } from '@douyinfe/semi-foundation/lib/es/popover/constants';
import ve from '@douyinfe/semi-foundation/lib/es/timePicker/foundation';
import Se from '@douyinfe/semi-foundation/lib/es/utils/isNullOrUndefined';
import A from "./Combobox";
import Te from "./TimeInput";
import { PanelShapeDefaults as Ee } from "./PanelShape";
import '@douyinfe/semi-foundation/lib/es/timePicker/timePicker.css';
import ye from "../trigger";
import { vuePropsMake as Re } from "../PropTypes";
import { timePickerPropTypes as Fe } from "./propTypes";
const Ie = Fe, Ne = {
  autoAdjustOverflow: !0,
  getPopupContainer: () => document.body,
  showClear: !0,
  zIndex: Ce.DEFAULT_Z_INDEX,
  rangeSeparator: P.DEFAULT_RANGE_SEPARATOR,
  onOpenChange: g,
  clearText: "clear",
  prefixCls: v.PREFIX,
  borderless: !1,
  inputReadOnly: !1,
  style: {},
  stopPropagation: !0,
  className: "",
  popupClassName: "",
  popupStyle: {
    left: "0px",
    top: "0px"
  },
  disabledHours: () => [],
  disabledMinutes: () => [],
  disabledSeconds: () => [],
  hideDisabledOptions: !1,
  // position: 'bottomLeft',
  onFocus: g,
  onBlur: g,
  onChange: g,
  onChangeWithDateFirst: !0,
  use12Hours: !1,
  focusOnOpen: !1,
  onKeyDown: g,
  size: "default",
  type: P.DEFAULT_TYPE,
  motion: !0,
  ...Ee
  // format: strings.DEFAULT_FORMAT,
  // open and value controlled
}, Oe = Re(Ie, Ne), an = /* @__PURE__ */ pe({
  props: {
    ...Oe
  },
  name: "TimePicker",
  setup(t, {
    slots: we
  }) {
    const {
      getProps: b
    } = ge(), {
      format: h = P.DEFAULT_FORMAT
    } = t, l = me({
      open: t.open || t.defaultOpen || !1,
      value: [],
      // Date[]
      inputValue: "",
      // time string
      currentSelectPanel: 0,
      isAM: [!0, !1],
      showHour: !!h.match(/HH|hh|H|h/g),
      showMinute: !!h.match(/mm/g),
      showSecond: !!h.match(/ss/g),
      invalid: void 0
    }), S = w(), T = w();
    let E = typeof t.triggerRender == "function", m;
    const {
      adapter: _,
      isControlled: H
    } = Pe(t, l), r = new ve(d());
    function d() {
      return {
        ..._(),
        togglePanel: (e) => {
          l.open = e;
        },
        registerClickOutSide: () => {
          m && d().unregisterClickOutSide(), m = (e) => {
            const n = T.value, o = S.value, a = e.target, s = e.composedPath && e.composedPath() || [a];
            !(n && n.contains(a)) && !(o && o.contains(a)) && !(s.includes(o) || s.includes(n)) && r.handlePanelClose(!0, e);
          }, document.addEventListener("mousedown", m);
        },
        setInputValue: (e, n) => {
          l.inputValue = e, de(() => {
            n();
          });
        },
        unregisterClickOutSide: () => {
          m && (document.removeEventListener("mousedown", m), m = null);
        },
        notifyOpenChange: (...e) => t.onOpenChange(...e),
        notifyChange: (e, n) => t.onChange && t.onChange(e, n),
        notifyFocus: (...e) => t.onFocus && t.onFocus(...e),
        notifyBlur: (...e) => t.onBlur && t.onBlur(...e),
        isRangePicker: () => t.type === P.TYPE_TIME_RANGE_PICKER
      };
    }
    function x(e, n) {
      return "open" in b(e) && e.open !== n.open ? {
        open: e.open
      } : null;
    }
    k([() => t.open, () => l.open], (e) => {
      const n = x({
        ...t
      }, {
        ...l
      });
      n && Object.keys(n).forEach((o) => {
        l[o] = n[o];
      });
    }, {
      immediate: !0
    }), k([() => t.value, () => t.timeZone, () => l.value], (e, n) => {
      H("value") && e[0] !== n[0] ? r.refreshProps({
        ...t
      }) : e[1] !== n[1] && r.refreshProps({
        timeZone: t.timeZone,
        __prevTimeZone: n[1],
        value: l.value
      });
    }, {
      immediate: !0
    });
    const y = (e) => {
      l.currentSelectPanel = e;
    }, R = (e, n) => {
      r.handlePanelChange(e, n);
    }, F = (e) => {
      r.handleInputChange(e);
    }, I = (e = 0) => {
      const {
        panels: n,
        panelFooter: o,
        panelHeader: a,
        locale: s
      } = t, i = {
        panelHeader: a,
        panelFooter: o
      };
      if (d().isRangePicker()) {
        const u = {
          0: s.begin,
          1: s.end
        };
        i.panelHeader = C(n, e, Se(a) ? C(u, e, null) : a), i.panelFooter = C(n, e, o);
      }
      return i;
    };
    function D() {
      const {
        prefixCls: e,
        type: n
      } = t, {
        isAM: o,
        value: a
      } = l, s = r.getDefaultFormatIfNeed(), i = [p(A, {
        ...t,
        key: 0,
        format: s,
        isAM: o[0],
        timeStampValue: a[0],
        prefixCls: `${e}-panel`,
        onChange: (c) => R(c, 0),
        onCurrentSelectPanelChange: y,
        ...I(0)
      }, null)];
      n === P.TYPE_TIME_RANGE_PICKER && i.push(p(A, {
        ...t,
        key: 1,
        format: s,
        isAM: o[1],
        timeStampValue: a[1],
        prefixCls: `${e}-panel`,
        onChange: (c) => R(c, 1),
        onCurrentSelectPanelChange: y,
        ...I(1)
      }, null));
      const u = f({
        [v.RANGE_PANEL_LISTS]: d().isRangePicker()
      });
      return p("div", {
        ref: T,
        class: u
      }, [i.map((c) => c)]);
    }
    function M() {
      const {
        use12Hours: e,
        prefixCls: n,
        popupClassName: o
      } = t, {
        showHour: a,
        showMinute: s,
        showSecond: i
      } = l;
      let u = 0;
      return a && (u += 1), s && (u += 1), i && (u += 1), e && (u += 1), f(`${n}-panel`, o, {
        [`${n}-panel-narrow`]: (!a || !s || !i) && !e,
        [v.RANGE_PICKER]: d().isRangePicker()
      }, `${n}-panel-column-${u}`);
    }
    const B = () => {
      r.handlePanelOpen();
    }, L = (e) => {
      r.handleFocus(e);
    }, $ = (e) => r.handleInputBlur(e), V = (e) => S.value = e;
    return () => {
      const {
        prefixCls: e,
        placeholder: n,
        disabled: o,
        defaultValue: a,
        dropdownMargin: s,
        className: i,
        popupStyle: u,
        size: c,
        style: j,
        locale: z,
        localeCode: G,
        zIndex: U,
        getPopupContainer: Z,
        insetLabel: K,
        insetLabelId: Y,
        inputStyle: W,
        showClear: X,
        panelHeader: ke,
        panelFooter: Ae,
        rangeSeparator: be,
        onOpenChange: _e,
        onChangeWithDateFirst: He,
        popupClassName: xe,
        hideDisabledOptions: De,
        use12Hours: Me,
        minuteStep: Be,
        hourStep: Le,
        secondStep: $e,
        scrollItemProps: Ve,
        triggerRender: q,
        motion: J,
        autoAdjustOverflow: Q,
        stopPropagation: ee,
        ...ne
      } = t, te = r.getDefaultFormatIfNeed(), oe = r.getPosition(), {
        open: ae,
        inputValue: N,
        invalid: se,
        value: le
      } = l, re = M(), ie = f({
        [`${e}-header`]: !0
      }), ue = f({
        [`${e}-panel`]: !0,
        [`${e}-panel-${c}`]: c
      }), ce = {
        ...ne,
        disabled: o,
        prefixCls: e,
        size: c,
        showClear: o ? !1 : X,
        style: W,
        value: N,
        onFocus: L,
        insetLabel: K,
        insetLabelId: Y,
        format: te,
        locale: z,
        localeCode: G,
        invalid: se,
        placeholder: n,
        onChange: F,
        onBlur: $
      }, O = {};
      return E && (O.onClick = B), p("div", fe({
        ref: V,
        class: f({
          [e]: !0
        }, i),
        style: j
      }, O), [p(he, {
        getPopupContainer: Z,
        zIndex: U,
        prefixCls: ue,
        contentClassName: re,
        style: u,
        content: D(),
        trigger: "custom",
        position: oe,
        visible: o ? !1 : !!ae,
        motion: J,
        margin: s,
        autoAdjustOverflow: Q,
        stopPropagation: ee
      }, {
        default: () => [E ? p(ye, {
          triggerRender: q,
          disabled: o,
          value: le,
          inputValue: N,
          onChange: F,
          placeholder: n,
          componentName: "TimePicker",
          componentProps: {
            ...t
          }
        }, null) : p("span", {
          class: ie
        }, [p(Te, ce, null)])]
      })]);
    };
  }
});
export {
  an as default,
  Ne as defaultProps,
  Ie as propTypes,
  Oe as vuePropsType
};
//# sourceMappingURL=TimePicker.js.map
