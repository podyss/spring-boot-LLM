import { defineComponent as u, useSlots as p, reactive as f, ref as v, onMounted as y, onBeforeUnmount as b, createVNode as z } from "vue";
import R from "classnames";
import * as e from "../../PropTypes";
import { vuePropsMake as g } from "../../PropTypes";
import { ResizableHandlerFoundation as w } from '@douyinfe/semi-foundation/lib/es/resizable/foundation';
import { cssClasses as E } from '@douyinfe/semi-foundation/lib/es/resizable/constants';
import { directionStyles as H } from '@douyinfe/semi-foundation/lib/es/resizable/singleConstants';
import { useBaseComponent as P } from "../../_base/baseComponent";
const C = E.PREFIX, M = {
  direction: e.string,
  onResizeStart: e.func,
  className: e.string,
  disabled: e.bool,
  style: e.object
}, N = {}, D = g(M, N), A = /* @__PURE__ */ u({
  props: {
    ...D
  },
  name: "ResizableHandler",
  setup(t, {
    attrs: S
  }) {
    const n = p(), a = f({
      direction: t.direction
    }), r = v(), {
      adapter: i,
      getDataAttr: T
    } = P(t, a);
    function d() {
      return {
        ...i(),
        registerEvent: () => {
          r.value.addEventListener("mousedown", o.onMouseDown);
        },
        unregisterEvent: () => {
          r.value.removeEventListener("mousedown", o.onMouseDown);
        }
      };
    }
    const c = d(), o = new w(c);
    return y(() => {
      o.init();
    }), b(() => {
      o.destroy();
    }), () => {
      var s;
      const {
        style: l,
        className: m
      } = t;
      return z("div", {
        class: R(m, C + "-resizableHandler"),
        style: {
          ...H[t.direction],
          ...l
        },
        ref: r
      }, [(s = n.default) == null ? void 0 : s.call(n)]);
    };
  }
});
export {
  A as default,
  D as vuePropsType
};
//# sourceMappingURL=resizableHandler.js.map
