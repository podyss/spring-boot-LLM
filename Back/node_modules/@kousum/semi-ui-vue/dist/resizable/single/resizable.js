import { defineComponent as x, useSlots as S, ref as E, reactive as W, onMounted as k, onBeforeUnmount as C, createVNode as u, mergeProps as j } from "vue";
import H from "classnames";
import * as e from "../../PropTypes";
import { vuePropsMake as M } from "../../PropTypes";
import { ResizableFoundation as T } from '@douyinfe/semi-foundation/lib/es/resizable/foundation';
import { cssClasses as L } from '@douyinfe/semi-foundation/lib/es/resizable/constants';
import { directions as A } from '@douyinfe/semi-foundation/lib/es/resizable/singleConstants';
import B from "./resizableHandler";
import '@douyinfe/semi-foundation/lib/es/resizable/resizable.css';
import { useBaseComponent as O } from "../../_base/baseComponent";
const P = L.PREFIX, N = {
  style: e.object,
  className: e.string,
  //@ts-ignore
  grid: e.array,
  snap: e.object,
  snapGap: e.number,
  bounds: e.node,
  boundElement: e.node,
  boundsByDirection: e.bool,
  size: e.object,
  minWidth: e.oneOfType([e.string, e.number]),
  minHeight: e.oneOfType([e.string, e.number]),
  maxWidth: e.oneOfType([e.string, e.number]),
  maxHeight: e.oneOfType([e.string, e.number]),
  lockAspectRatio: e.oneOfType([e.bool, e.number]),
  lockAspectRatioExtraWidth: e.number,
  lockAspectRatioExtraHeight: e.number,
  enable: e.object,
  handleStyle: e.object,
  handleClass: e.object,
  handleWrapperStyle: e.object,
  handleWrapperClass: e.string,
  handleNode: e.object,
  onResizeStart: e.func,
  onChange: e.func,
  onResizeEnd: e.func,
  defaultSize: e.object,
  scale: e.number,
  ratio: e.oneOfType([e.number, e.array])
}, U = {
  onResizeStart: () => {
  },
  onChange: () => {
  },
  onResizeEnd: () => {
  },
  enable: {
    top: !0,
    right: !0,
    bottom: !0,
    left: !0,
    topRight: !0,
    bottomRight: !0,
    bottomLeft: !0,
    topLeft: !0
  },
  style: {},
  grid: [1, 1],
  lockAspectRatio: !1,
  lockAspectRatioExtraWidth: 0,
  lockAspectRatioExtraHeight: 0,
  scale: 1,
  ratio: 1,
  snapGap: 0
}, I = M(N, U), Y = /* @__PURE__ */ x({
  props: {
    ...I
  },
  name: "Resizable",
  setup(p, {
    attrs: D
  }) {
    const m = S(), a = E(), n = W({
      isResizing: !1,
      width: "auto",
      height: "auto",
      direction: "right",
      original: {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      backgroundStyle: {
        height: "100%",
        width: "100%",
        backgroundColor: "rgba(0,0,0,0)",
        cursor: "auto",
        opacity: 0,
        position: "fixed",
        zIndex: 9999,
        top: "0",
        left: "0",
        bottom: "0",
        right: "0"
      },
      flexBasis: void 0
    }), {
      adapter: g,
      getDataAttr: b
    } = O(p, n);
    function y() {
      return {
        ...g(),
        getResizable: R,
        registerEvent: () => {
          let t = o.window;
          t == null || t.addEventListener("mouseup", o.onMouseUp), t == null || t.addEventListener("mousemove", o.onMouseMove), t == null || t.addEventListener("mouseleave", o.onMouseUp);
        },
        unregisterEvent: () => {
          let t = o.window;
          t == null || t.removeEventListener("mouseup", o.onMouseUp), t == null || t.removeEventListener("mousemove", o.onMouseMove), t == null || t.removeEventListener("mouseleave", o.onMouseUp);
        }
      };
    }
    const v = y(), o = new T(v);
    n.width = o.propSize.width ?? "auto", n.height = o.propSize.height ?? "auto", k(() => {
      o.init();
    }), C(() => {
      o.destroy();
    });
    function R() {
      return a == null ? void 0 : a.value;
    }
    const z = () => {
      const {
        enable: t,
        handleStyle: l,
        handleClass: r,
        handleNode: i,
        handleWrapperStyle: c,
        handleWrapperClass: d
      } = p;
      if (!t)
        return null;
      const h = A.map((s) => t[s] !== !1 ? u(B, {
        key: s,
        direction: s,
        onResizeStart: o.onResizeStart,
        style: l && l[s],
        className: r && r[s]
      }, {
        default: () => [(i == null ? void 0 : i[s]) ?? null]
      }) : null);
      return u("div", {
        class: d,
        style: c
      }, [h]);
    };
    return () => {
      var f;
      const t = (f = m.default) == null ? void 0 : f.call(m), {
        className: l,
        style: r,
        maxHeight: i,
        maxWidth: c,
        minHeight: d,
        minWidth: h
      } = p, s = {
        userSelect: n.isResizing ? "none" : "auto",
        maxWidth: c,
        maxHeight: i,
        minWidth: h,
        minHeight: d,
        ...r,
        // Vue 保持响应
        width: n.width,
        height: n.height,
        ...o.sizeStyle
      };
      return n != null && n.flexBasis && (r.flexBasis = n.flexBasis), u("div", j({
        style: s,
        class: H(l, P + "-resizable"),
        ref: a
      }, b()), [n.isResizing && u("div", {
        style: n.backgroundStyle
      }, null), t, z()]);
    };
  }
});
export {
  Y as default,
  I as vuePropsType
};
//# sourceMappingURL=resizable.js.map
