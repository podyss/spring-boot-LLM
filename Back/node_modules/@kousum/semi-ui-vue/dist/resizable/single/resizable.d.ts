import { Direction, Size, Enable, ResizeStartCallback, ResizeCallback, HandleClassName } from '@douyinfe/semi-foundation/lib/es/resizable/singleConstants';
import '@douyinfe/semi-foundation/lib/es/resizable/resizable.css';
import { CSSProperties, PropType, VNode } from 'vue';
import { CombineProps } from '../../interface';
export interface HandleComponent {
    top?: VNode;
    right?: VNode;
    bottom?: VNode;
    left?: VNode;
    topRight?: VNode;
    bottomRight?: VNode;
    bottomLeft?: VNode;
    topLeft?: VNode;
}
export interface HandleStyle {
    top?: CSSProperties;
    right?: CSSProperties;
    bottom?: CSSProperties;
    left?: CSSProperties;
    topRight?: CSSProperties;
    bottomRight?: CSSProperties;
    bottomLeft?: CSSProperties;
    topLeft?: CSSProperties;
}
export interface ResizableProps {
    style?: CSSProperties;
    className?: string;
    grid?: [number, number];
    snap?: {
        x?: number[];
        y?: number[];
    };
    snapGap?: number;
    bounds?: any;
    boundElement?: 'parent' | 'window' | HTMLElement;
    boundsByDirection?: boolean;
    size?: Size;
    minWidth?: string | number;
    minHeight?: string | number;
    maxWidth?: string | number;
    maxHeight?: string | number;
    lockAspectRatio?: boolean | number;
    lockAspectRatioExtraWidth?: number;
    lockAspectRatioExtraHeight?: number;
    enable?: Enable | false;
    handleStyle?: HandleStyle;
    handleClass?: HandleClassName;
    handleWrapperStyle?: CSSProperties;
    handleWrapperClass?: string;
    handleNode?: HandleComponent;
    onResizeStart?: ResizeStartCallback;
    onChange?: ResizeCallback;
    onResizeEnd?: ResizeCallback;
    defaultSize?: Size;
    scale?: number;
    ratio?: number | [number, number];
}
export interface ResizableState {
    isResizing: boolean;
    direction: Direction;
    original: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    width: number | string;
    height: number | string;
    backgroundStyle: CSSProperties;
    flexBasis?: string | number;
}
export declare const vuePropsType: CombineProps<ResizableProps>;
declare const Resizable: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    grid: PropType<[number, number]> | {
        type: PropType<[number, number]>;
        default?: any;
        required?: false;
    };
    snap: PropType<{
        x?: number[];
        y?: number[];
    }> | {
        type: PropType<{
            x?: number[];
            y?: number[];
        }>;
        default?: any;
        required?: false;
    };
    snapGap: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    bounds: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    boundElement: PropType<HTMLElement | "parent" | "window"> | {
        type: PropType<HTMLElement | "parent" | "window">;
        default?: any;
        required?: false;
    };
    boundsByDirection: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    minWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    minHeight: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    maxWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    maxHeight: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    lockAspectRatio: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    lockAspectRatioExtraWidth: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    lockAspectRatioExtraHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    enable: PropType<false | Enable> | {
        type: PropType<false | Enable>;
        default?: any;
        required?: false;
    };
    handleStyle: PropType<HandleStyle> | {
        type: PropType<HandleStyle>;
        default?: any;
        required?: false;
    };
    handleClass: PropType<HandleClassName> | {
        type: PropType<HandleClassName>;
        default?: any;
        required?: false;
    };
    handleWrapperStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    handleWrapperClass: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    handleNode: PropType<HandleComponent> | {
        type: PropType<HandleComponent>;
        default?: any;
        required?: false;
    };
    onResizeStart: PropType<ResizeStartCallback> | {
        type: PropType<ResizeStartCallback>;
        default?: any;
        required?: false;
    };
    onChange: PropType<ResizeCallback> | {
        type: PropType<ResizeCallback>;
        default?: any;
        required?: false;
    };
    onResizeEnd: PropType<ResizeCallback> | {
        type: PropType<ResizeCallback>;
        default?: any;
        required?: false;
    };
    defaultSize: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    scale: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    ratio: PropType<number | [number, number]> | {
        type: PropType<number | [number, number]>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    grid: PropType<[number, number]> | {
        type: PropType<[number, number]>;
        default?: any;
        required?: false;
    };
    snap: PropType<{
        x?: number[];
        y?: number[];
    }> | {
        type: PropType<{
            x?: number[];
            y?: number[];
        }>;
        default?: any;
        required?: false;
    };
    snapGap: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    bounds: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    boundElement: PropType<HTMLElement | "parent" | "window"> | {
        type: PropType<HTMLElement | "parent" | "window">;
        default?: any;
        required?: false;
    };
    boundsByDirection: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    minWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    minHeight: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    maxWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    maxHeight: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    lockAspectRatio: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    lockAspectRatioExtraWidth: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    lockAspectRatioExtraHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    enable: PropType<false | Enable> | {
        type: PropType<false | Enable>;
        default?: any;
        required?: false;
    };
    handleStyle: PropType<HandleStyle> | {
        type: PropType<HandleStyle>;
        default?: any;
        required?: false;
    };
    handleClass: PropType<HandleClassName> | {
        type: PropType<HandleClassName>;
        default?: any;
        required?: false;
    };
    handleWrapperStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    handleWrapperClass: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    handleNode: PropType<HandleComponent> | {
        type: PropType<HandleComponent>;
        default?: any;
        required?: false;
    };
    onResizeStart: PropType<ResizeStartCallback> | {
        type: PropType<ResizeStartCallback>;
        default?: any;
        required?: false;
    };
    onChange: PropType<ResizeCallback> | {
        type: PropType<ResizeCallback>;
        default?: any;
        required?: false;
    };
    onResizeEnd: PropType<ResizeCallback> | {
        type: PropType<ResizeCallback>;
        default?: any;
        required?: false;
    };
    defaultSize: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    scale: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    ratio: PropType<number | [number, number]> | {
        type: PropType<number | [number, number]>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Resizable;
