import '@douyinfe/semi-foundation/lib/es/resizable/resizable.css';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../../interface';
export interface ResizeGroupProps {
    direction?: 'horizontal' | 'vertical';
    className?: string;
}
export interface ResizeGroupState {
    isResizing: boolean;
    originalPosition: {
        x: number;
        y: number;
        lastItemSize: number;
        nextItemSize: number;
        lastOffset: number;
        nextOffset: number;
    };
    backgroundStyle: CSSProperties;
    curHandler: number;
}
export declare const vuePropsType: CombineProps<ResizeGroupProps>;
declare const ResizeGroup: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    direction: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    direction: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ResizeGroup;
