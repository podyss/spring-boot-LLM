import { ResizeCallback, ResizeStartCallback } from '@douyinfe/semi-foundation/lib/es/resizable/singleConstants';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../../interface';
export interface ResizeItemProps {
    style?: CSSProperties;
    className?: string;
    min?: string;
    max?: string;
    onResizeStart?: ResizeStartCallback;
    onChange?: ResizeCallback;
    onResizeEnd?: ResizeCallback;
    defaultSize?: string | number;
}
export interface ResizeItemState {
}
export declare const vuePropsType: CombineProps<ResizeItemProps>;
declare const ResizeItem: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    min: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    max: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onResizeStart: PropType<ResizeStartCallback> | {
        type: PropType<ResizeStartCallback>;
        default?: any;
        required?: false;
    };
    onChange: PropType<ResizeCallback> | {
        type: PropType<ResizeCallback>;
        default?: any;
        required?: false;
    };
    onResizeEnd: PropType<ResizeCallback> | {
        type: PropType<ResizeCallback>;
        default?: any;
        required?: false;
    };
    defaultSize: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    min: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    max: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onResizeStart: PropType<ResizeStartCallback> | {
        type: PropType<ResizeStartCallback>;
        default?: any;
        required?: false;
    };
    onChange: PropType<ResizeCallback> | {
        type: PropType<ResizeCallback>;
        default?: any;
        required?: false;
    };
    onResizeEnd: PropType<ResizeCallback> | {
        type: PropType<ResizeCallback>;
        default?: any;
        required?: false;
    };
    defaultSize: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ResizeItem;
