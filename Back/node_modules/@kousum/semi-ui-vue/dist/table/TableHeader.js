import { defineComponent as T, useSlots as g, reactive as H, createVNode as h, isVNode as j } from "vue";
import { useHasInProps as x, useBaseComponent as E } from "../_base/baseComponent";
import * as o from "../PropTypes";
import { vuePropsMake as L } from "../PropTypes";
import { cssClasses as N, strings as y } from '@douyinfe/semi-foundation/lib/es/table/constants';
import { noop as C, isFunction as P } from "lodash";
import { shouldShowEllipsisTitle as _ } from '@douyinfe/semi-foundation/lib/es/table/utils';
import O from "./TableHeaderRow";
import { BodyPropTypes as U } from "./Body";
function k(s) {
  return typeof s == "function" || Object.prototype.toString.call(s) === "[object Object]" && !j(s);
}
function K(s) {
  const n = [];
  function f(r, a, l = [], i = 0, w = 0) {
    n[i] = n[i] || [];
    let c = a;
    return r.map((e) => {
      const t = {
        key: e.key,
        className: e.className || "",
        children: P(e.title) ? e.title() : e.title,
        column: e,
        colStart: c,
        level: w,
        parents: l
      };
      let p = 1;
      const d = e.children;
      d && d.length > 0 && (p = f(d, c, [...l, t], i + 1, w + 1).reduce((R, b) => R + b, 0), t.hasSubColumns = !0), "colSpan" in e && ({
        colSpan: p
      } = e), "rowSpan" in e && (t.rowSpan = e.rowSpan), e.key === y.DEFAULT_KEY_COLUMN_SCROLLBAR && (t["x-type"] = y.DEFAULT_KEY_COLUMN_SCROLLBAR), t.colSpan = p, t.colEnd = t.colStart + p - 1, n[i].push(t), c += p;
      const S = e == null ? void 0 : e.ellipsis;
      return _(S) && typeof t.children == "string" && (t.title = t.children), p;
    });
  }
  f(s, 0);
  const u = n.length;
  for (let r = 0; r < u; r += 1)
    n[r].forEach((a) => {
      !("rowSpan" in a) && !a.hasSubColumns && (a.rowSpan = u - r);
    });
  return n;
}
const A = {
  ...U,
  components: o.any,
  columns: o.array,
  columnManager: o.object,
  prefixCls: o.string,
  onHeaderRow: o.func,
  onDidUpdate: o.func,
  fixed: o.oneOfType([o.bool, o.string]),
  selectedRowKeysSet: {
    type: o.object,
    required: !0
  },
  forwardedRef: [o.func, o.object],
  style: o.object,
  className: o.string
}, B = {
  columns: [],
  prefixCls: N.PREFIX,
  onHeaderRow: C,
  onDidUpdate: C,
  components: {
    header: {
      wrapper: "thead",
      row: "tr",
      cell: "th"
    }
  }
}, D = L(A, B), $ = /* @__PURE__ */ T({
  props: {
    ...D
  },
  name: "TableHeader",
  setup(s, {}) {
    const {
      getProps: n
    } = x();
    g();
    const f = H({}), {
      adapter: u
    } = E(s, f);
    return u(), () => {
      let r;
      const {
        components: a,
        columns: l,
        prefixCls: i,
        fixed: w,
        onHeaderRow: c,
        forwardedRef: m,
        selectedRowKeysSet: e
      } = n(s), t = K(l), p = a.header.wrapper;
      return h(p, {
        className: `${i}-thead`,
        ref: m
      }, k(r = t.map((d, S) => h(O, {
        prefixCls: i,
        key: S,
        index: S,
        fixed: w,
        columns: l,
        row: d,
        components: a,
        onHeaderRow: c,
        selectedRowKeysSet: e
      }, null))) ? r : {
        default: () => [r]
      });
    };
  }
});
export {
  $ as default,
  D as vuePropsType
};
//# sourceMappingURL=TableHeader.js.map
