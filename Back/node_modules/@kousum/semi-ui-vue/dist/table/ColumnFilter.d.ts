import type { DropdownProps } from '../dropdown';
import { FilterIcon, Filter, OnFilterDropdownVisibleChange, RenderFilterDropdownItem } from './interface';
import { CombineProps, VueJsxNode } from '../interface';
import { VNode } from 'vue';
export declare const ColumnFilterVueProps: CombineProps<ColumnFilterProps>;
export declare const ColumnFilter: import("vue").DefineComponent<import("vue").ExtractPropTypes<CombineProps<ColumnFilterProps>>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<CombineProps<ColumnFilterProps>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export interface ColumnFilterProps extends Omit<RenderDropdownProps, keyof RenderFilterDropdownProps> {
    prefixCls?: string;
    filteredValue?: any[];
    filterIcon?: FilterIcon;
    filterDropdown?: VueJsxNode;
    filterDropdownProps?: FilterDropdownProps;
    filters?: Filter[];
    title?: any;
    dataIndex?: string | number;
    width?: string | number;
    fixed?: string | boolean;
}
export interface RenderDropdownProps extends FilterDropdownProps, RenderFilterDropdownProps {
    filterMultiple?: boolean;
    filters?: Filter[];
    filteredValue?: any[];
    filterDropdownVisible?: boolean;
    onSelect?: (data: OnSelectData) => void;
    onFilterDropdownVisibleChange?: OnFilterDropdownVisibleChange;
    renderFilterDropdown?: (props?: RenderFilterDropdownProps) => VNode;
    renderFilterDropdownItem?: RenderFilterDropdownItem;
}
export interface FilterDropdownProps extends Omit<DropdownProps, 'render' | 'onVisibleChange'> {
}
export interface OnSelectData {
    value?: any;
    /** only this value is used now  */
    filteredValue: any;
    included?: boolean;
    domEvent?: MouseEvent;
}
export interface RenderFilterDropdownProps {
    /** temporary filteredValue  */
    tempFilteredValue: any[];
    /** set temporary filteredValue  */
    setTempFilteredValue: (tempFilteredValue: any[]) => void;
    /** set tempFilteredValue to filteredValue. You can also pass filteredValue to directly set the filteredValue  */
    confirm: (props?: {
        closeDropdown?: boolean;
        filteredValue?: any[];
    }) => void;
    /** clear tempFilteredValue and filteredValue  */
    clear: (props?: {
        closeDropdown?: boolean;
    }) => void;
    /** close dropdown  */
    close: () => void;
    /** column filters  */
    filters?: RenderDropdownProps['filters'];
}
export default ColumnFilter;
