{"version":3,"file":"TableHeaderRow.js","sources":["../../src/components/table/TableHeaderRow.tsx"],"sourcesContent":["import classnames from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { get, noop, map, set, omit, findIndex } from 'lodash';\n\nimport { cssClasses } from '@douyinfe/semi-foundation/table/constants';\nimport {\n  arrayAdd,\n  isFirstFixedRight,\n  isLastLeftFixed,\n  isFixedLeft,\n  isFixedRight,\n  sliceColumnsByLevel,\n  getRTLAlign,\n} from '@douyinfe/semi-foundation/table/utils';\nimport { TableComponents, OnHeaderRow, Fixed, TableLocale } from './interface';\nimport {\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  h,\n  PropType,\n  reactive,\n  useSlots,\n  VNode,\n  watch,\n} from 'vue';\nimport { vuePropsMake } from '../PropTypes';\nimport { useBaseComponent } from '../_base/baseComponent';\nimport { TableSelectionCellProps } from './ColumnSelection';\nimport { useTableContext } from './tableContext/Consumer';\nimport type { TableHeaderCell } from './TableHeader';\nimport { CombineProps } from '../interface';\nimport Tooltip from '../tooltip';\nimport LocaleConsumer from '../locale/localeConsumer';\nimport { getNextSortOrder } from './utils';\n\nexport interface TableHeaderRowProps {\n  components?: TableComponents;\n  row?: TableHeaderCell[];\n  prefixCls?: string;\n  onHeaderRow?: OnHeaderRow<any>;\n  index?: number;\n  style?: CSSProperties;\n  columns?: any[];\n  fixed?: Fixed;\n  selectedRowKeysSet: Set<any>;\n}\n\nconst propTypes: CombineProps<TableHeaderRowProps> = {\n  components: PropTypes.object,\n  row: PropTypes.array,\n  prefixCls: PropTypes.string,\n  onHeaderRow: PropTypes.func as PropType<TableHeaderRowProps['onHeaderRow']>,\n  index: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.object,\n  columns: PropTypes.array,\n  fixed: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  selectedRowKeysSet: {\n    type: PropTypes.object,\n    required: true\n  },\n};\n\nconst defaultProps = {\n  onHeaderRow: noop,\n  prefixCls: cssClasses.PREFIX,\n  columns: [] as [],\n  components: {\n    header: {\n      wrapper: 'thead',\n      row: 'tr',\n      cell: 'th',\n    },\n  },\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst TableHeaderRow = defineComponent({\n  props: { ...vuePropsType },\n  name: 'TableHeaderRow',\n  setup(props, {}) {\n    const slots = useSlots();\n    let headerNode: HTMLElement = null;\n    const { context } = useTableContext();\n\n    const state = reactive({});\n    const { adapter: adapterInject } = useBaseComponent<TableSelectionCellProps>(props, state);\n\n    const adapter = adapterInject();\n\n    const cacheRef = (node: HTMLElement) => {\n      headerNode = node;\n      if (node && context.value.setHeadWidths) {\n        const { prefixCls, row, index } = props;\n        const cellSelector = `.${prefixCls}-row-head`;\n        const heads = node && node.querySelectorAll && node.querySelectorAll(cellSelector);\n\n        context.value.setHeadWidths(\n          map(heads, (head, headIndex) => {\n            let configWidth = get(row, [headIndex, 'column', 'width']);\n            const key = get(row, [headIndex, 'column', 'key']) as any;\n            if (typeof configWidth !== 'number') {\n              configWidth = (head && head.getBoundingClientRect().width) || 0;\n            }\n            return { width: configWidth, key };\n          }),\n          index\n        );\n      }\n    };\n\n    watch(\n      () => props.columns,\n      (value, oldValue, onCleanup) => {\n        if (oldValue !== props.columns && headerNode) {\n          cacheRef(headerNode);\n        }\n      }\n    );\n\n    return () => {\n      const { components, row, prefixCls, onHeaderRow, index, style, columns } = props;\n      const { getCellWidths, direction } = context.value;\n      const isRTL = direction === 'rtl';\n      const slicedColumns = sliceColumnsByLevel(columns, index);\n      const headWidths = getCellWidths?.(slicedColumns) || [];\n\n      const HeaderRow = get(components, 'header.row', 'tr') as any;\n      const HeaderCell = get(components, 'header.cell', 'th') as any;\n\n      const rowProps = onHeaderRow(columns, index) || {};\n      set(rowProps, 'className', classnames(get(rowProps, 'className'), `${prefixCls}-row`));\n\n      const cells = map(row, (cell, cellIndex) => {\n        const { column, ...cellProps } = cell;\n        const customProps =\n          typeof column.onHeaderCell === 'function' ? column.onHeaderCell(column, cellIndex, index) : {};\n        let cellStyle = { ...customProps.style };\n        if (column.align) {\n          const textAlign = getRTLAlign(column.align, direction);\n          cellStyle = { ...cellStyle, textAlign };\n          customProps.className = classnames(customProps.className, column.className, {\n            [`${prefixCls}-align-${textAlign}`]: Boolean(textAlign),\n          });\n        }\n\n        let fixedLeft, fixedRight, fixedLeftLast, fixedRightFirst;\n        if (isRTL) {\n          fixedLeft = isFixedRight(column);\n          fixedRight = isFixedLeft(column);\n          fixedLeftLast = isFirstFixedRight(slicedColumns, column);\n          fixedRightFirst = isLastLeftFixed(slicedColumns, column);\n        } else {\n          fixedLeft = isFixedLeft(column);\n          fixedRight = isFixedRight(column);\n          fixedLeftLast = isLastLeftFixed(slicedColumns, column);\n          fixedRightFirst = isFirstFixedRight(slicedColumns, column);\n        }\n\n        customProps.className = classnames(\n          `${prefixCls}-row-head`,\n          column.className,\n          customProps.className,\n          // `${prefixCls}-fixed-columns`,\n          {\n            [`${prefixCls}-cell-fixed-left`]: fixedLeft,\n            [`${prefixCls}-cell-fixed-left-last`]: fixedLeftLast,\n            [`${prefixCls}-cell-fixed-right`]: fixedRight,\n            [`${prefixCls}-cell-fixed-right-first`]: fixedRightFirst,\n            [`${prefixCls}-row-head-ellipsis`]: column.ellipsis,\n          }\n        );\n\n        if (headWidths.length && slicedColumns.length) {\n          const indexOfSlicedColumns = findIndex(\n            slicedColumns,\n            (item) => item && item.key != null && item.key === column.key\n          );\n          if (indexOfSlicedColumns > -1) {\n            if (isFixedLeft(column)) {\n              const xPositionKey = isRTL ? 'right' : 'left';\n              cellStyle = {\n                ...cellStyle,\n                position: 'sticky',\n                [xPositionKey]: arrayAdd(headWidths, 0, indexOfSlicedColumns) + 'px',\n              };\n            } else if (isFixedRight(column)) {\n              const xPositionKey = isRTL ? 'left' : 'right';\n              cellStyle = {\n                ...cellStyle,\n                position: 'sticky',\n                [xPositionKey]: arrayAdd(headWidths, indexOfSlicedColumns + 1) + 'px',\n              };\n            }\n          }\n        }\n\n        Object.assign(cellProps, { resize: column.resize });\n        const props = omit({ ...cellProps, ...customProps }, [\n          'colStart',\n          'colEnd',\n          'hasSubColumns',\n          'parents',\n          'level',\n        ]);\n\n        const { rowSpan, colSpan } = props;\n        if (rowSpan === 0 || colSpan === 0) {\n          return null;\n        }\n\n        if (typeof column.clickToSort === 'function') {\n          if (props.onClick) {\n            props.onClick = (e: any) => {\n              props.onClick(e);\n              column.clickToSort(e);\n            };\n          } else {\n            props.onClick = column.clickToSort;\n          }\n        }\n\n        const headerCellNode = (<HeaderCell\n          role=\"columnheader\"\n          aria-colindex={cellIndex + 1}\n          {...(omit(props, 'children'))}\n          style={cellStyle}\n          key={column.key || column.dataIndex || cellIndex}\n        >\n          {props.children}\n        </HeaderCell>);\n        if (typeof column.clickToSort === 'function' && column.showSortTip === true) {\n          let content = getNextSortOrder(column.sortOrder);\n          return (<LocaleConsumer\n            componentName=\"Table\"\n            key={column.key || column.dataIndex || cellIndex}\n          >\n            {(locale: TableLocale, localeCode: string) => (\n              <Tooltip content={locale[content]}>\n                {headerCellNode}\n              </Tooltip>\n            )}\n          </LocaleConsumer>);\n        }\n\n        return headerCellNode;\n      });\n\n      return (\n        <HeaderRow role=\"row\" aria-rowindex={index + 1} {...rowProps} style={style} ref={cacheRef as any}>\n          {cells}\n        </HeaderRow>\n      );\n    };\n  },\n});\n\nexport default TableHeaderRow;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","propTypes","components","PropTypes","object","row","array","prefixCls","string","onHeaderRow","func","index","oneOfType","number","style","columns","fixed","bool","selectedRowKeysSet","type","required","defaultProps","noop","cssClasses","PREFIX","header","wrapper","cell","vuePropsType","vuePropsMake","TableHeaderRow","defineComponent","props","name","setup","useSlots","headerNode","context","useTableContext","state","reactive","adapter","adapterInject","useBaseComponent","cacheRef","node","value","setHeadWidths","cellSelector","heads","querySelectorAll","map","head","headIndex","configWidth","get","key","getBoundingClientRect","width","watch","oldValue","onCleanup","getCellWidths","direction","isRTL","slicedColumns","sliceColumnsByLevel","headWidths","HeaderRow","HeaderCell","rowProps","set","classnames","cells","cellIndex","column","cellProps","customProps","onHeaderCell","cellStyle","align","textAlign","getRTLAlign","className","Boolean","fixedLeft","fixedRight","fixedLeftLast","fixedRightFirst","isFixedRight","isFixedLeft","isFirstFixedRight","isLastLeftFixed","ellipsis","length","indexOfSlicedColumns","findIndex","item","position","arrayAdd","assign","resize","omit","rowSpan","colSpan","clickToSort","onClick","e","headerCellNode","_createVNode","_mergeProps","dataIndex","default","children","showSortTip","content","getNextSortOrder","sortOrder","LocaleConsumer","locale","localeCode","Tooltip"],"mappings":"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"}