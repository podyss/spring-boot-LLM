import { defineComponent as I, useSlots as v, computed as T, isVNode as y, createVNode as s, cloneVNode as E } from "vue";
import * as e from "../PropTypes";
import { vuePropsMake as h } from "../PropTypes";
import { noop as t } from "lodash";
import { IconTreeTriangleDown as M, IconTreeTriangleRight as k, IconChevronDown as P, IconChevronRight as g } from "@kousum/semi-icons-vue";
import { cssClasses as p } from '@douyinfe/semi-foundation/lib/es/table/constants';
import b from '@douyinfe/semi-foundation/lib/es/utils/isEnterPress';
import R from "../_cssAnimation";
const S = {
  expanded: e.bool,
  componentType: String,
  onClick: e.func,
  onMouseEnter: e.func,
  onMouseLeave: e.func,
  expandIcon: e.oneOfType([e.node, e.func]),
  prefixCls: e.string,
  motion: e.bool
}, w = {
  componentType: "expand",
  onClick: t,
  onMouseEnter: t,
  onMouseLeave: t,
  prefixCls: p.PREFIX
}, N = h(S, w), K = /* @__PURE__ */ I({
  props: {
    ...N
  },
  name: "CustomExpandIcon",
  setup(l, {}) {
    v();
    const c = T(() => (o) => {
      typeof l.onClick == "function" && l.onClick(!l.expanded, o);
    });
    return () => {
      const {
        expanded: o,
        componentType: m,
        onClick: F = t,
        onMouseEnter: f = t,
        onMouseLeave: d = t,
        expandIcon: i,
        prefixCls: C = p.PREFIX,
        motion: a = !0
      } = l;
      let n;
      if (y(i) ? n = i : typeof i == "function" ? n = i(o) : m === "tree" ? n = o && !a ? s(M, {
        size: "small"
      }, null) : s(k, {
        size: "small"
      }, null) : n = o && !a ? s(P, null, null) : s(g, null, null), a) {
        const r = n;
        n = s(R, {
          animationState: o ? "enter" : "leave",
          startClassName: `${p.PREFIX}-expandedIcon-${o ? "show" : "hide"}`,
          children: ({
            animationClassName: x
          }) => {
            var u;
            return E(r, {
              class: (((u = r.props) == null ? void 0 : u.class) || "") + " " + x
            });
          }
        }, null);
      }
      return s("span", {
        role: "button",
        "aria-label": "Expand this row",
        tabindex: -1,
        onClick: c.value,
        onMouseenter: f,
        onMouseleave: d,
        class: `${C}-expand-icon`,
        onKeypress: (r) => b(r) && c.value(r)
      }, [n]);
    };
  }
});
export {
  K as default,
  N as vuePropsType
};
//# sourceMappingURL=CustomExpandIcon.js.map
