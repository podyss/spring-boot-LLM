import type { TableProps, ColumnProps } from './interface';
import { PropType } from 'vue';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<TableProps>;
declare const ResizableTable: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    bodyWrapperRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    children: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    childrenRecordName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    clickGroupedRowToExpand: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    components: PropType<import("./interface").TableComponents> | {
        type: PropType<import("./interface").TableComponents>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    defaultExpandAllGroupRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    empty: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    expandAllGroupRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandCellFixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<import("./interface").ExpandIcon> | {
        type: PropType<import("./interface").ExpandIcon>;
        default?: any;
        required?: false;
    };
    expandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandedRowRender: PropType<import("./interface").ExpandedRowRender<any>> | {
        type: PropType<import("./interface").ExpandedRowRender<any>>;
        default?: any;
        required?: false;
    };
    expandRowByClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footer: PropType<import("./interface").Footer<any>> | {
        type: PropType<import("./interface").Footer<any>>;
        default?: any;
        required?: false;
    };
    getVirtualizedListRef: PropType<import("./interface").GetVirtualizedListRef> | {
        type: PropType<import("./interface").GetVirtualizedListRef>;
        default?: any;
        required?: false;
    };
    groupBy: PropType<import("./interface").GroupBy<any>> | {
        type: PropType<import("./interface").GroupBy<any>>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    pagination: PropType<import("./interface").Pagination> | {
        type: PropType<import("./interface").Pagination>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    renderGroupSection: PropType<import("./interface").RenderGroupSection> | {
        type: PropType<import("./interface").RenderGroupSection>;
        default?: any;
        required?: false;
    };
    renderPagination: PropType<import("./interface").RenderPagination> | {
        type: PropType<import("./interface").RenderPagination>;
        default?: any;
        required?: false;
    };
    resizable: PropType<import("./interface").Resizable<any>> | {
        type: PropType<import("./interface").Resizable<any>>;
        default?: any;
        required?: false;
    };
    rowExpandable: PropType<import("./interface").RowExpandable<any>> | {
        type: PropType<import("./interface").RowExpandable<any>>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<import("./interface").RowKey<any>> | {
        type: PropType<import("./interface").RowKey<any>>;
        default?: any;
        required?: false;
    };
    rowSelection: PropType<import("./interface").RowSelection<any>> | {
        type: PropType<import("./interface").RowSelection<any>>;
        default?: any;
        required?: false;
    };
    scroll: PropType<import("./interface").Scroll> | {
        type: PropType<import("./interface").Scroll>;
        default?: any;
        required?: false;
    };
    showHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "middle"> | {
        type: PropType<"small" | "default" | "middle">;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    title: PropType<import("./interface").Title<any>> | {
        type: PropType<import("./interface").Title<any>>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<import("./interface").Virtualized> | {
        type: PropType<import("./interface").Virtualized>;
        default?: any;
        required?: false;
    };
    onChange: PropType<import("./interface").OnChange<any>> | {
        type: PropType<import("./interface").OnChange<any>>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<import("./interface").OnExpand<any>> | {
        type: PropType<import("./interface").OnExpand<any>>;
        default?: any;
        required?: false;
    };
    onExpandedRowsChange: PropType<import("./interface").OnExpandedRowsChange<any>> | {
        type: PropType<import("./interface").OnExpandedRowsChange<any>>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<import("./interface").OnGroupedRow<any>> | {
        type: PropType<import("./interface").OnGroupedRow<any>>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<import("./interface").OnHeaderRow<any>> | {
        type: PropType<import("./interface").OnHeaderRow<any>>;
        default?: any;
        required?: false;
    };
    onRow: PropType<import("./interface").OnRow<any>> | {
        type: PropType<import("./interface").OnRow<any>>;
        default?: any;
        required?: false;
    };
    sticky: PropType<import("./interface").Sticky> | {
        type: PropType<import("./interface").Sticky>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./interface").Direction> | {
        type: PropType<import("./interface").Direction>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    bodyWrapperRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    children: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    childrenRecordName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    clickGroupedRowToExpand: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    components: PropType<import("./interface").TableComponents> | {
        type: PropType<import("./interface").TableComponents>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    defaultExpandAllGroupRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    empty: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    expandAllGroupRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandCellFixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<import("./interface").ExpandIcon> | {
        type: PropType<import("./interface").ExpandIcon>;
        default?: any;
        required?: false;
    };
    expandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandedRowRender: PropType<import("./interface").ExpandedRowRender<any>> | {
        type: PropType<import("./interface").ExpandedRowRender<any>>;
        default?: any;
        required?: false;
    };
    expandRowByClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footer: PropType<import("./interface").Footer<any>> | {
        type: PropType<import("./interface").Footer<any>>;
        default?: any;
        required?: false;
    };
    getVirtualizedListRef: PropType<import("./interface").GetVirtualizedListRef> | {
        type: PropType<import("./interface").GetVirtualizedListRef>;
        default?: any;
        required?: false;
    };
    groupBy: PropType<import("./interface").GroupBy<any>> | {
        type: PropType<import("./interface").GroupBy<any>>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    pagination: PropType<import("./interface").Pagination> | {
        type: PropType<import("./interface").Pagination>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    renderGroupSection: PropType<import("./interface").RenderGroupSection> | {
        type: PropType<import("./interface").RenderGroupSection>;
        default?: any;
        required?: false;
    };
    renderPagination: PropType<import("./interface").RenderPagination> | {
        type: PropType<import("./interface").RenderPagination>;
        default?: any;
        required?: false;
    };
    resizable: PropType<import("./interface").Resizable<any>> | {
        type: PropType<import("./interface").Resizable<any>>;
        default?: any;
        required?: false;
    };
    rowExpandable: PropType<import("./interface").RowExpandable<any>> | {
        type: PropType<import("./interface").RowExpandable<any>>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<import("./interface").RowKey<any>> | {
        type: PropType<import("./interface").RowKey<any>>;
        default?: any;
        required?: false;
    };
    rowSelection: PropType<import("./interface").RowSelection<any>> | {
        type: PropType<import("./interface").RowSelection<any>>;
        default?: any;
        required?: false;
    };
    scroll: PropType<import("./interface").Scroll> | {
        type: PropType<import("./interface").Scroll>;
        default?: any;
        required?: false;
    };
    showHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "middle"> | {
        type: PropType<"small" | "default" | "middle">;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    title: PropType<import("./interface").Title<any>> | {
        type: PropType<import("./interface").Title<any>>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<import("./interface").Virtualized> | {
        type: PropType<import("./interface").Virtualized>;
        default?: any;
        required?: false;
    };
    onChange: PropType<import("./interface").OnChange<any>> | {
        type: PropType<import("./interface").OnChange<any>>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<import("./interface").OnExpand<any>> | {
        type: PropType<import("./interface").OnExpand<any>>;
        default?: any;
        required?: false;
    };
    onExpandedRowsChange: PropType<import("./interface").OnExpandedRowsChange<any>> | {
        type: PropType<import("./interface").OnExpandedRowsChange<any>>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<import("./interface").OnGroupedRow<any>> | {
        type: PropType<import("./interface").OnGroupedRow<any>>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<import("./interface").OnHeaderRow<any>> | {
        type: PropType<import("./interface").OnHeaderRow<any>>;
        default?: any;
        required?: false;
    };
    onRow: PropType<import("./interface").OnRow<any>> | {
        type: PropType<import("./interface").OnRow<any>>;
        default?: any;
        required?: false;
    };
    sticky: PropType<import("./interface").Sticky> | {
        type: PropType<import("./interface").Sticky>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./interface").Direction> | {
        type: PropType<import("./interface").Direction>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ResizableTable;
