{"version":3,"file":"TableHeader.js","sources":["../../src/components/table/TableHeader.tsx"],"sourcesContent":["import { BaseProps, useBaseComponent, useHasInProps } from '../_base/baseComponent';\nimport * as PropTypes from '../PropTypes';\nimport { strings, cssClasses } from '@douyinfe/semi-foundation/table/constants';\nimport { noop, isFunction, get } from 'lodash';\nimport { shouldShowEllipsisTitle } from '@douyinfe/semi-foundation/table/utils';\n\nimport TableHeaderRow from './TableHeaderRow';\nimport {\n  ComponentObjectPropsOptions,\n  defineComponent,\n  DefineSetupFnComponent,\n  h,\n  PropType,\n  reactive,\n  useSlots,\n  VNode,\n} from 'vue';\nimport { CombineProps, VueJsxNode } from '../interface';\nimport { vuePropsMake } from '../PropTypes';\nimport { TableSelectionCellProps } from './ColumnSelection';\nimport { BodyPropTypes } from './Body';\nimport type { Fixed, TableComponents, OnHeaderRow, ColumnProps } from './interface';\n\nfunction parseHeaderRows(columns: any[]) {\n  const rows: any[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function fillRowCells(columns: any[], colIndex: number, parents: any[] = [], rowIndex = 0, level = 0) {\n    // Init rows\n    rows[rowIndex] = rows[rowIndex] || [];\n\n    let currentColIndex = colIndex;\n    const colSpans = columns.map((column) => {\n      const cell: TableHeaderCell = {\n        key: column.key,\n        className: column.className || '',\n        children: isFunction(column.title) ? column.title() : column.title,\n        column,\n        colStart: currentColIndex,\n        level,\n        parents,\n      };\n\n      let colSpan = 1;\n\n      /**\n       * Calculate header column merge colSpan\n       *  - If the current cell has children, colSpan = the sum of children rowSpan\n       *  - If the current cell has no children, colSpan = 1\n       */\n      const subColumns = column.children;\n      if (subColumns && subColumns.length > 0) {\n        colSpan = fillRowCells(subColumns, currentColIndex, [...parents, cell], rowIndex + 1, level + 1).reduce(\n          (total, count) => total + count,\n          0\n        );\n        cell.hasSubColumns = true;\n      }\n\n      if ('colSpan' in column) {\n        ({ colSpan } = column);\n      }\n\n      if ('rowSpan' in column) {\n        cell.rowSpan = column.rowSpan;\n      }\n\n      if (column.key === strings.DEFAULT_KEY_COLUMN_SCROLLBAR) {\n        cell['x-type'] = strings.DEFAULT_KEY_COLUMN_SCROLLBAR;\n      }\n\n      cell.colSpan = colSpan;\n      cell.colEnd = cell.colStart + colSpan - 1;\n      rows[rowIndex].push(cell);\n\n      currentColIndex += colSpan;\n      const ellipsis = column?.ellipsis;\n      const shouldShowTitle = shouldShowEllipsisTitle(ellipsis);\n      if (shouldShowTitle && typeof cell.children === 'string') {\n        cell.title = cell.children;\n      }\n\n      return colSpan;\n    });\n\n    return colSpans;\n  }\n\n  // Generate `rows` cell data\n  fillRowCells(columns, 0);\n\n  /**\n   * Calculate header row merge rowSpan\n   *  - If the current cell has no children, you need to calculate rowSpan, rowSpan = the total number of rows in the header-which row currently belongs to\n   *  - If the current cell has children, there is no need to calculate rowSpan\n   *\n   * 计算表头行合并 rowSpan\n   *  - 如果当前cell没有children，则需要计算rowSpan，rowSpan = 表头总行数 - 当前属于第几行\n   *  - 如果当前cell有children，则无需计算rowSpan\n   */\n  const rowCount = rows.length;\n  for (let rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {\n    rows[rowIndex].forEach((cell: TableHeaderCell) => {\n      if (!('rowSpan' in cell) && !cell.hasSubColumns) {\n        // eslint-disable-next-line no-param-reassign\n        cell.rowSpan = rowCount - rowIndex;\n      }\n    });\n  }\n\n  return rows;\n}\n\nexport interface TableHeaderProps extends BaseProps {\n  columns?: any[];\n  components?: TableComponents;\n  fixed?: Fixed;\n  forwardedRef?: any;\n  onDidUpdate?: (ref: any) => void;\n  onHeaderRow?: OnHeaderRow<any>;\n  prefixCls?: string;\n  selectedRowKeysSet: Set<any>;\n  columnManager?: any;\n}\n\n/**\n * Render the header of the table header, and control the merging of the columns of the header\n */\n\nconst propTypes: CombineProps<TableHeaderProps> = {\n  ...BodyPropTypes,\n  components: PropTypes.any as PropType<TableHeaderProps['components']>,\n  columns: PropTypes.array,\n  columnManager: PropTypes.object as PropType<TableHeaderProps['columnManager']>,\n  prefixCls: PropTypes.string,\n  onHeaderRow: PropTypes.func as PropType<TableHeaderProps['onHeaderRow']>,\n  onDidUpdate: PropTypes.func as PropType<TableHeaderProps['onDidUpdate']>,\n  fixed: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  selectedRowKeysSet: {\n    type: PropTypes.object,\n    required: true\n  },\n  forwardedRef: [PropTypes.func, PropTypes.object] as PropType<TableHeaderProps['forwardedRef']>,\n  style: PropTypes.object,\n  className: PropTypes.string,\n};\n\nconst defaultProps = {\n  columns: [] as [],\n  prefixCls: cssClasses.PREFIX,\n  onHeaderRow: noop,\n  onDidUpdate: noop,\n  components: {\n    header: {\n      wrapper: 'thead',\n      row: 'tr',\n      cell: 'th',\n    },\n  },\n};\n\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst TableHeader = defineComponent({\n  props: { ...vuePropsType },\n  name: 'TableHeader',\n  setup(props, {}) {\n    const {getProps} = useHasInProps()\n    const slots = useSlots();\n\n    const state = reactive({});\n    const { adapter: adapterInject } = useBaseComponent<TableSelectionCellProps>(props, state);\n    const adapter = adapterInject();\n    return () => {\n      const { components, columns, prefixCls, fixed, onHeaderRow, forwardedRef, selectedRowKeysSet } = getProps(props);\n\n      const rows = parseHeaderRows(columns);\n      const HeaderWrapper = components.header.wrapper;\n\n      return (\n        <HeaderWrapper className={`${prefixCls}-thead`} ref={forwardedRef}>\n          {rows.map((row, idx) => (\n            <TableHeaderRow\n              prefixCls={prefixCls}\n              key={idx}\n              index={idx}\n              fixed={fixed}\n              columns={columns}\n              row={row}\n              components={components}\n              onHeaderRow={onHeaderRow}\n              selectedRowKeysSet={selectedRowKeysSet}\n            />\n          ))}\n        </HeaderWrapper>\n      );\n    };\n  },\n});\n\nexport default TableHeader;\n\nexport interface TableHeaderCell {\n  key: string | number;\n  className: string;\n  children: VueJsxNode;\n  column: ColumnProps;\n  colStart: number;\n  level: number;\n  parents: any[];\n  hasSubColumns?: boolean;\n  rowSpan?: number;\n  colSpan?: number;\n  colEnd?: number;\n  title?: string;\n}\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","parseHeaderRows","columns","rows","fillRowCells","colIndex","parents","rowIndex","level","currentColIndex","map","column","cell","key","className","children","isFunction","title","colStart","colSpan","subColumns","length","reduce","total","count","hasSubColumns","rowSpan","strings","DEFAULT_KEY_COLUMN_SCROLLBAR","colEnd","push","ellipsis","shouldShowEllipsisTitle","rowCount","forEach","propTypes","BodyPropTypes","components","PropTypes","any","array","columnManager","object","prefixCls","string","onHeaderRow","func","onDidUpdate","fixed","oneOfType","bool","selectedRowKeysSet","type","required","forwardedRef","style","defaultProps","cssClasses","PREFIX","noop","header","wrapper","row","vuePropsType","vuePropsMake","TableHeader","defineComponent","props","name","setup","getProps","useHasInProps","useSlots","state","reactive","adapter","adapterInject","useBaseComponent","_slot","HeaderWrapper","_createVNode","idx","TableHeaderRow","default"],"mappings":"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"}