{"version":3,"file":"ColumnSelection.js","sources":["../../src/components/table/ColumnSelection.tsx"],"sourcesContent":["/* eslint-disable max-len */\nimport classnames from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { noop } from 'lodash';\n\nimport { cssClasses } from '@douyinfe/semi-foundation/table/constants';\nimport TableSelectionCellFoundation, {\n  TableSelectionCellAdapter,\n  TableSelectionCellEvent,\n} from '@douyinfe/semi-foundation/table/tableSelectionCellFoundation';\n\nimport { Checkbox, CheckboxEvent, CheckboxProps } from '../checkbox';\nimport { ComponentObjectPropsOptions, defineComponent, h, PropType, reactive, useSlots } from 'vue';\nimport { AriaAttributes } from '../AriaAttributes';\nimport { vuePropsMake } from '../PropTypes';\nimport { useBaseComponent } from '../_base/baseComponent';\nimport { BaseFormProps } from '../form';\nimport { CombineProps } from '../interface';\n\nexport interface TableSelectionCellProps {\n  columnTitle?: string; // TODO: future api\n  getCheckboxProps?: () => CheckboxProps;\n  type?: string; // TODO: future api\n  onChange?: (checked: boolean, e: TableSelectionCellEvent) => void;\n  selected?: boolean;\n  disabled?: boolean;\n  indeterminate?: boolean; // Intermediate state, shown as a solid horizontal line\n  prefixCls?: string;\n  className?: string;\n  'aria-label'?: AriaAttributes['aria-label'];\n}\n\n/**\n * render selection cell\n */\n\nconst propTypes: CombineProps<TableSelectionCellProps> = {\n  columnTitle: PropTypes.string,\n  getCheckboxProps: PropTypes.func as PropType<TableSelectionCellProps['getCheckboxProps']>,\n  type: PropTypes.string,\n  onChange: PropTypes.func as PropType<TableSelectionCellProps['onChange']>,\n  selected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indeterminate: PropTypes.bool,\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  'aria-label': PropTypes.string,\n};\n\nconst defaultProps = {\n  disabled: false,\n  onChange: noop,\n  prefixCls: cssClasses.PREFIX,\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst TableSelectionCell = defineComponent({\n  props: { ...vuePropsType },\n  name: 'TableSelectionCell',\n  setup(props, {}) {\n    const slots = useSlots();\n    const state = reactive({});\n    const { adapter: adapterInject } = useBaseComponent<TableSelectionCellProps>(props, state);\n    function adapter_(): TableSelectionCellAdapter {\n      return {\n        ...adapterInject(),\n        notifyChange: (...args) => props.onChange(...args),\n      };\n    }\n    const adapter = adapter_();\n    const foundation = new TableSelectionCellFoundation(adapter);\n\n    const handleChange = (e: CheckboxEvent) => foundation.handleChange(e);\n\n    return () => {\n      const { selected, getCheckboxProps, indeterminate, disabled, prefixCls, className } = props;\n      const ariaLabel = props['aria-label'];\n      let checkboxProps = {\n        onChange: handleChange,\n        disabled,\n        indeterminate,\n        checked: selected,\n      };\n\n      if (typeof getCheckboxProps === 'function') {\n        checkboxProps = { ...checkboxProps, ...getCheckboxProps() };\n      }\n\n      const wrapCls = classnames(\n        `${prefixCls}-selection-wrap`,\n        {\n          [`${prefixCls}-selection-disabled`]: disabled,\n        },\n        className\n      );\n\n      return (\n        <span class={wrapCls}>\n          <Checkbox aria-label={ariaLabel} {...checkboxProps} />\n        </span>\n      );\n    };\n  },\n});\n\nexport default TableSelectionCell;\n"],"names":["propTypes","columnTitle","PropTypes","string","getCheckboxProps","func","type","onChange","selected","bool","disabled","indeterminate","prefixCls","className","defaultProps","noop","cssClasses","PREFIX","vuePropsType","vuePropsMake","TableSelectionCell","defineComponent","props","name","setup","useSlots","state","reactive","adapter","adapterInject","useBaseComponent","adapter_","notifyChange","args","foundation","TableSelectionCellFoundation","handleChange","e","ariaLabel","checkboxProps","checked","wrapCls","classnames","_createVNode","Checkbox","_mergeProps"],"mappings":";;;;;;;;;AAoCA,MAAMA,IAAmD;AAAA,EACvDC,aAAaC,EAAUC;AAAAA,EACvBC,kBAAkBF,EAAUG;AAAAA,EAC5BC,MAAMJ,EAAUC;AAAAA,EAChBI,UAAUL,EAAUG;AAAAA,EACpBG,UAAUN,EAAUO;AAAAA,EACpBC,UAAUR,EAAUO;AAAAA,EACpBE,eAAeT,EAAUO;AAAAA,EACzBG,WAAWV,EAAUC;AAAAA,EACrBU,WAAWX,EAAUC;AAAAA,EACrB,cAAcD,EAAUC;AAC1B,GAEMW,IAAe;AAAA,EACnBJ,UAAU;AAAA,EACVH,UAAUQ;AAAAA,EACVH,WAAWI,EAAWC;AACxB,GACaC,IAAeC,EAAanB,GAAWc,CAAY,GAC1DM,IAAqBC,gBAAAA,EAAgB;AAAA,EACzCC,OAAO;AAAA,IAAE,GAAGJ;AAAAA,EAAc;AAAA,EAC1BK,MAAM;AAAA,EACNC,MAAMF,GAAO,IAAI;AACDG,IAAAA,EAAU;AACxB,UAAMC,IAAQC,EAAS,CAAA,CAAE,GACnB;AAAA,MAAEC,SAASC;AAAAA,IAAc,IAAIC,EAA0CR,GAAOI,CAAK;AACzF,aAASK,IAAsC;AAC7C,aAAO;AAAA,QACL,GAAGF,EAAe;AAAA,QAClBG,cAAcA,IAAIC,MAASX,EAAMf,SAAS,GAAG0B,CAAI;AAAA;IAErD;AACA,UAAML,IAAUG,KACVG,IAAa,IAAIC,EAA6BP,CAAO,GAErDQ,IAAgBC,CAAAA,MAAqBH,EAAWE,aAAaC,CAAC;AAEpE,WAAO,MAAM;AACX,YAAM;AAAA,QAAE7B,UAAAA;AAAAA,QAAUJ,kBAAAA;AAAAA,QAAkBO,eAAAA;AAAAA,QAAeD,UAAAA;AAAAA,QAAUE,WAAAA;AAAAA,QAAWC,WAAAA;AAAAA,MAAW,IAAGS,GAChFgB,IAAYhB,EAAM,YAAY;AACpC,UAAIiB,IAAgB;AAAA,QAClBhC,UAAU6B;AAAAA,QACV1B,UAAAA;AAAAA,QACAC,eAAAA;AAAAA,QACA6B,SAAShC;AAAAA;AAGX,MAAI,OAAOJ,KAAqB,eAC9BmC,IAAgB;AAAA,QAAE,GAAGA;AAAAA,QAAe,GAAGnC,EAAiB;AAAA;AAG1D,YAAMqC,IAAUC,EACd,GAAG9B,CAAS,mBACZ;AAAA,QACE,CAAC,GAAGA,CAAS,qBAAqB,GAAGF;AAAAA,MACtC,GACDG,CACF;AAEA,aAAA8B,EAAA,QAAA;AAAA,QAAA,OACeF;AAAAA,MAAO,GAAA,CAAAE,EAAAC,GAAAC,EAAA;AAAA,QAAA,cACIP;AAAAA,MAAS,GAAMC,CAAa,GAAA,IAAA,CAAA,CAAA;AAAA;EAI1D;AACF,CAAC;"}