{"version":3,"file":"Table.js","sources":["../../src/components/table/Table.tsx"],"sourcesContent":["import * as PropTypes from '../PropTypes';\nimport { vuePropsMake } from '../PropTypes';\nimport classnames from 'classnames';\nimport {\n  debounce,\n  difference,\n  each,\n  find,\n  findIndex,\n  flattenDeep,\n  get,\n  includes,\n  isFunction,\n  isObject,\n  isPlainObject,\n  noop,\n  omit, pick,\n  some,\n} from 'lodash';\n\nimport {\n  assignColumnKeys,\n  equalWith,\n  flattenColumns,\n  getAllDisabledRowKeys,\n  mergeQueries,\n  shouldShowEllipsisTitle,\n} from '@douyinfe/semi-foundation/table/utils';\nimport Store from '@douyinfe/semi-foundation/utils/Store';\nimport TableFoundation, {\n  BaseHeadWidth,\n  BasePageData,\n  BaseRowKeyType,\n  TableAdapter,\n} from '@douyinfe/semi-foundation/table/foundation';\nimport { TableSelectionCellEvent } from '@douyinfe/semi-foundation/table/tableSelectionCellFoundation';\nimport { cssClasses, numbers, strings } from '@douyinfe/semi-foundation/table/constants';\nimport '@douyinfe/semi-foundation/table/table.scss';\n\nimport Spin from '../spin';\nimport LocaleConsumer from '../locale/localeConsumer';\nimport getColumnsImport from './getColumns';\nimport { TableContextProps } from './table-context';\nimport TableContextProvider from './TableContextProvider';\nimport ColumnSelection from './ColumnSelection';\nimport TablePagination from './TablePagination';\nimport ColumnFilter, { ColumnFilterVueProps, OnSelectData } from './ColumnFilter';\nimport ColumnSorter from './ColumnSorter';\nimport ExpandedIcon from './CustomExpandIcon';\nimport HeadTable, { HeadTableProps } from './HeadTable';\nimport BodyTable, { BodyProps } from './Body';\nimport { cloneDeep, logger, mergeColumns, mergeComponents } from './utils';\nimport type {\n  BodyScrollEvent,\n  BodyScrollPosition,\n  ColumnProps,\n  ColumnTitleProps,\n  Data,\n  ExpandIcon,\n  Pagination,\n  RenderPagination,\n  RowSelectionProps,\n  TableComponents,\n  TableLocale,\n  TablePaginationProps,\n  TableProps,\n} from './interface';\nimport { ArrayElement } from '../_base/base';\n\nimport { CombineProps, VueJsxNode } from '../interface';\nimport {\n  CSSProperties,\n  defineComponent,\n  Fragment,\n  h,\n  isVNode,\n  onBeforeUnmount,\n  onMounted,\n  PropType,\n  reactive,\n  ref,\n  toRaw,\n  useSlots,\n  watch,\n} from 'vue';\nimport { useBaseComponent, useHasInProps } from '../_base/baseComponent';\nimport { useTableContext } from './tableContext/Consumer';\n\n\nexport type NormalTableProps<RecordType extends Record<string, any> = Data> = Omit<TableProps<RecordType>, 'resizable'>;\n\nexport interface NormalTableState<RecordType extends Record<string, any> = Data> {\n  cachedColumns?: ColumnProps<RecordType>[];\n  cachedChildren?: VueJsxNode;\n  flattenColumns?: ColumnProps<RecordType>[];\n  components?: TableComponents;\n  queries?: ColumnProps<RecordType>[];\n  dataSource?: RecordType[];\n  flattenData?: RecordType[];\n  expandedRowKeys?: (string | number)[];\n  rowSelection?: TableStateRowSelection<RecordType>;\n  pagination?: Pagination;\n  groups?: Map<string, RecordType[]>;\n  allRowKeys?: (string | number)[];\n  disabledRowKeys?: (string | number)[];\n  disabledRowKeysSet?: Set<string | number>;\n  headWidths?: Array<Array<BaseHeadWidth>>;\n  bodyHasScrollBar?: boolean;\n  prePropRowSelection?: TableStateRowSelection<RecordType>;\n  tableWidth?: number;\n  prePagination?: Pagination /**\n   * Disabled row keys in sorted and filtered data\n   */;\n  allDisabledRowKeys?: BaseRowKeyType[];\n  /**\n   * Disabled row keys set in sorted and filtered data\n   */\n  allDisabledRowKeysSet?: Set<BaseRowKeyType>;\n}\n\nexport type TableStateRowSelection<RecordType extends Record<string, any> = Data> =\n  | (RowSelectionProps<RecordType> & { selectedRowKeysSet?: Set<string | number> })\n  | boolean;\n\nexport interface RenderTableProps<RecordType> extends HeadTableProps, BodyProps {\n  filteredColumns: ColumnProps<RecordType>[];\n  useFixedHeader: boolean;\n  bodyRef: any;\n  rowSelection: TableStateRowSelection<RecordType>;\n  bodyHasScrollBar: boolean;\n}\n\nconst propTypes: CombineProps<NormalTableProps<any>> = {\n  children: PropTypes.any as PropType<NormalTableProps['children']>,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  prefixCls: PropTypes.string,\n  components: PropTypes.any as PropType<NormalTableProps['components']>,\n  bordered: PropTypes.bool,\n  loading: PropTypes.bool,\n  size: PropTypes.string as PropType<NormalTableProps['size']>,\n  // @ts-ignore\n  tableLayout: PropTypes.string as PropType<any>,\n  columns: PropTypes.array as PropType<NormalTableProps['columns']>,\n  hideExpandedColumn: PropTypes.bool,\n  id: PropTypes.string,\n  expandIcon: PropTypes.oneOfType([PropTypes.bool, PropTypes.func, PropTypes.node]),\n  expandCellFixed: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.func]),\n  onHeaderRow: PropTypes.func as PropType<NormalTableProps['onHeaderRow']>,\n  showHeader: PropTypes.bool,\n  indentSize: PropTypes.number,\n  rowKey: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.number]),\n  onRow: PropTypes.func as PropType<NormalTableProps['onRow']>,\n  onExpandedRowsChange: PropTypes.func as PropType<NormalTableProps['onExpandedRowsChange']>,\n  onExpand: PropTypes.func as PropType<NormalTableProps['onExpand']>,\n  rowExpandable: PropTypes.func as PropType<NormalTableProps['rowExpandable']>,\n  expandedRowRender: PropTypes.func as PropType<NormalTableProps['expandedRowRender']>,\n  expandedRowKeys: PropTypes.array,\n  defaultExpandAllRows: PropTypes.bool,\n  expandAllRows: PropTypes.bool,\n  defaultExpandAllGroupRows: PropTypes.bool,\n  expandAllGroupRows: PropTypes.bool,\n  defaultExpandedRowKeys: PropTypes.array,\n  pagination: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  renderPagination: PropTypes.func as PropType<NormalTableProps['renderPagination']>,\n  footer: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.node]),\n  empty: PropTypes.node,\n  dataSource: PropTypes.array,\n  childrenRecordName: PropTypes.string, // children data property name\n  rowSelection: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  onChange: PropTypes.func as PropType<NormalTableProps['onChange']>,\n  scroll: PropTypes.object,\n  groupBy: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  renderGroupSection: PropTypes.oneOfType([PropTypes.func]),\n  onGroupedRow: PropTypes.func as PropType<NormalTableProps['onGroupedRow']>,\n  clickGroupedRowToExpand: PropTypes.bool,\n  virtualized: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  dropdownPrefixCls: PropTypes.string, // TODO: future api\n  expandRowByClick: PropTypes.bool, // TODO: future api\n  getVirtualizedListRef: PropTypes.func as PropType<NormalTableProps['getVirtualizedListRef']>, // TODO: future api\n  bodyWrapperRef: [PropTypes.func, PropTypes.object],\n  sticky: [Boolean, Object],\n  direction: PropTypes.string as PropType<NormalTableProps['direction']>,\n};\nexport { propTypes as TablePropTypes };\nconst defaultProps = {\n  // rowExpandable: stubTrue,\n  tableLayout: '',\n  dataSource: [] as [],\n  prefixCls: cssClasses.PREFIX,\n  rowSelection: null as null,\n  className: '',\n  childrenRecordName: 'children',\n  size: 'default',\n  loading: false,\n  bordered: false,\n  expandCellFixed: false,\n  hideExpandedColumn: true,\n  showHeader: true,\n  indentSize: numbers.DEFAULT_INDENT_WIDTH,\n  onChange: noop,\n  pagination: true,\n  rowKey: 'key',\n  defaultExpandedRowKeys: [] as [],\n  defaultExpandAllRows: false,\n  defaultExpandAllGroupRows: false,\n  expandAllRows: false,\n  expandAllGroupRows: false,\n  onFilterDropdownVisibleChange: noop,\n  onExpand: noop,\n  onExpandedRowsChange: noop,\n  expandRowByClick: false,\n};\n// NormalTableProps<RecordType>, NormalTableState<RecordType>\n// 需要返回范型组件\nfunction Table<RecordType extends Record<string, any>>() {\n  const vuePropsType = vuePropsMake<NormalTableProps<RecordType>>(propTypes, defaultProps);\n  const TableComp = defineComponent({\n    props: { ...vuePropsType },\n    name: 'Table',\n    setup(props, { expose }) {\n      const {getProps} = useHasInProps()\n      const slots = useSlots();\n\n      let lastScrollTop!: number;\n      let lastScrollLeft!: number;\n      let scrollPosition!: BodyScrollPosition;\n      let position!: BodyScrollPosition;\n      let { context } = useTableContext();\n\n      let cachedFilteredSortedDataSource: RecordType[] = [];\n      let cachedFilteredSortedRowKeys: BaseRowKeyType[] = [];\n      let cachedFilteredSortedRowKeysSet: Set<string | number> = new Set();\n\n      // columns cannot be deepClone, otherwise the comparison will be false\n      const columns = getColumns(props.columns, props.children);\n      const cachedflattenColumns = flattenColumns(columns);\n      const queries = TableFoundation.initColumnsFilteredValueAndSorterOrder(cloneDeep(cachedflattenColumns));\n\n      const rootWrapRef = ref();\n      const wrapRef = ref(); // table's outside wrap\n\n      const bodyWrapRef = ref();\n      const headerWrapRef = ref();\n\n      const state = reactive<NormalTableState<RecordType>>({\n        /**\n         * Cached props\n         */\n        cachedColumns: columns, // update cachedColumns after columns or children change\n        cachedChildren: props.children,\n        flattenColumns: cachedflattenColumns,\n        components: mergeComponents(props.components, props.virtualized), // cached components\n\n        /**\n         * State calculated based on prop\n         */\n        queries, // flatten columns, update when sorting or filtering\n        dataSource: [], // data after paging\n        flattenData: [],\n        expandedRowKeys: [...(props.expandedRowKeys || []), ...(props.defaultExpandedRowKeys || [])], // cached expandedRowKeys\n        rowSelection: props.rowSelection ? (isObject(props.rowSelection) ? { ...props.rowSelection } : {}) : null,\n        pagination:\n          props.pagination && typeof props.pagination === 'object'\n            ? { ...props.pagination }\n            : props.pagination || false,\n\n        /**\n         * Internal state\n         */\n        groups: null,\n        allRowKeys: [], // row keys after paging\n        disabledRowKeys: [], // disabled row keys after paging\n        disabledRowKeysSet: new Set(),\n        allDisabledRowKeys: [],\n        allDisabledRowKeysSet: new Set(),\n        headWidths: [], // header cell width\n        bodyHasScrollBar: false,\n        prePropRowSelection: undefined,\n        prePagination: undefined,\n      });\n      const { adapter: adapterInject, getDataAttr } = useBaseComponent<NormalTableProps<RecordType>>(props, state);\n\n      function adapter_(): TableAdapter<RecordType> {\n        return {\n          ...adapterInject(),\n          resetScrollY: () => {\n            if (bodyWrapRef.value) {\n              bodyWrapRef.value.scrollTop = 0;\n            }\n          },\n          setSelectedRowKeys: (selectedRowKeys) => {\n            state.rowSelection = {\n              ...(state.rowSelection as Record<string, any>),\n              selectedRowKeys: [...selectedRowKeys],\n              selectedRowKeysSet: new Set(selectedRowKeys),\n            };\n          },\n          setDisabledRowKeys: (disabledRowKeys) => {\n            state.disabledRowKeys = disabledRowKeys;\n            state.disabledRowKeysSet = new Set(disabledRowKeys);\n          },\n          setCurrentPage: (currentPage) => {\n            const { pagination } = state;\n            if (typeof pagination === 'object') {\n              state.pagination = { ...(pagination as any), currentPage };\n            } else {\n              state.pagination = { currentPage };\n            }\n          },\n          setPagination: (pagination) => {\n            state.pagination = pagination;\n          },\n          setGroups: (groups) => {\n            state.groups = groups as any;\n          },\n          setDataSource: (dataSource) => {\n            state.dataSource = dataSource as any;\n          },\n          setExpandedRowKeys: (expandedRowKeys) => {\n            state.expandedRowKeys = [...expandedRowKeys];\n          },\n          setQuery: (query = {}) => {\n            let queries = [...state.queries];\n            queries = mergeQueries(query, queries);\n            state.queries = queries;\n          },\n          // Update queries when filtering or sorting\n          setQueries: (queries: ColumnProps<RecordType>[]) => (state.queries = queries as any),\n          setFlattenData: (flattenData) => (state.flattenData = flattenData as any),\n          setAllRowKeys: (allRowKeys) => (state.allRowKeys = allRowKeys),\n          setHoveredRowKey: (hoveredRowKey) => {\n            store.setState({ hoveredRowKey });\n          },\n          setCachedFilteredSortedDataSource: (filteredSortedDataSource) => {\n            cachedFilteredSortedDataSource = filteredSortedDataSource;\n          },\n          setCachedFilteredSortedRowKeys: (filteredSortedRowKeys) => {\n            cachedFilteredSortedRowKeys = filteredSortedRowKeys;\n            cachedFilteredSortedRowKeysSet = new Set(filteredSortedRowKeys);\n          },\n          setAllDisabledRowKeys: (allDisabledRowKeys) => {\n            const allDisabledRowKeysSet = new Set(allDisabledRowKeys);\n            state.allDisabledRowKeys = allDisabledRowKeys;\n            state.allDisabledRowKeysSet = allDisabledRowKeysSet;\n          },\n          getCurrentPage: () => get(state as any, 'pagination.currentPage', 1),\n          getCurrentPageSize: () => get(state as any, 'pagination.pageSize', numbers.DEFAULT_PAGE_SIZE),\n          getCachedFilteredSortedDataSource: () => cachedFilteredSortedDataSource,\n          getCachedFilteredSortedRowKeys: () => cachedFilteredSortedRowKeys,\n          getCachedFilteredSortedRowKeysSet: () => cachedFilteredSortedRowKeysSet,\n          getAllDisabledRowKeys: () => state.allDisabledRowKeys,\n          getAllDisabledRowKeysSet: () => state.allDisabledRowKeysSet,\n          notifyFilterDropdownVisibleChange: (visible, dataIndex) =>\n            _invokeColumnFn(dataIndex, 'onFilterDropdownVisibleChange', visible),\n          notifyChange: (...args) => props.onChange(...args),\n          notifyExpand: (...args) => props.onExpand(...args),\n          notifyExpandedRowsChange: (...args) => props.onExpandedRowsChange(...args),\n          notifySelect: (...args) => _invokeRowSelection('onSelect', ...args),\n          notifySelectAll: (...args) => _invokeRowSelection('onSelectAll', ...args),\n          notifySelectInvert: (...args) => _invokeRowSelection('onSelectInvert', ...args),\n          notifySelectionChange: (...args) => _invokeRowSelection('onChange', ...args),\n          isAnyColumnFixed: (columns: ColumnProps<RecordType>[]) =>\n            some(getColumns(columns || props.columns, props.children), (column) => Boolean(column.fixed)),\n          useFixedHeader: () => {\n            const { scroll, sticky } = props;\n\n            if (get(scroll, 'y')) {\n              return true;\n            }\n\n            if (sticky) {\n              return true;\n            }\n\n            return false;\n          },\n          getTableLayout: () => {\n            let isFixed = false;\n            const { flattenColumns } = state;\n\n            if (Array.isArray(flattenColumns)) {\n              isFixed = flattenColumns.some((column) => Boolean(column.ellipsis) || Boolean(column.fixed));\n            }\n            if (adapter.useFixedHeader()) {\n              isFixed = true;\n            }\n            return isFixed ? 'fixed' : 'auto';\n          },\n          setHeadWidths: (headWidths: Array<BaseHeadWidth>, index = 0) => {\n            if (!equalWith(state.headWidths[index], headWidths)) {\n              // The map call depends on the last state\n              const newHeadWidths: Array<Array<BaseHeadWidth>> = [...state.headWidths];\n              newHeadWidths[index] = [...headWidths];\n              state.headWidths = newHeadWidths;\n            }\n          },\n          getHeadWidths: (index = 0) => {\n            if (state.headWidths.length && typeof index === 'number') {\n              const configs = state.headWidths[index] || [];\n              return configs.map((item) => item.width);\n            }\n            return [];\n          },\n          // This method is called by row rendering function\n          getCellWidths: (\n            flattenedColumns: ColumnProps<RecordType>[],\n            flattenedWidths: BaseHeadWidth[] = null,\n            ignoreScrollBarKey = false\n          ): number[] => {\n            if (Array.isArray(flattenedColumns) && flattenedColumns.length) {\n              flattenedWidths = flattenedWidths == null && state.headWidths.length ? flattenDeep(state.headWidths) : [];\n              if (Array.isArray(flattenedWidths) && flattenedWidths.length) {\n                return flattenedColumns.reduce((result, column) => {\n                  const found =\n                    column.key === strings.DEFAULT_KEY_COLUMN_SCROLLBAR && ignoreScrollBarKey\n                      ? null\n                      : find(flattenedWidths, (item) => item && item.key != null && item.key === column.key);\n                  if (found) {\n                    result.push(found.width);\n                  }\n\n                  return result;\n                }, [] as number[]);\n              }\n            }\n            return [];\n          },\n          mergedRowExpandable: (record) => {\n            const { expandedRowRender, childrenRecordName, rowExpandable } = props;\n            const children = get(record, childrenRecordName);\n            const hasExpandedRowRender = typeof expandedRowRender === 'function';\n            const hasRowExpandable = typeof rowExpandable === 'function';\n            const hasChildren = Array.isArray(children) && children.length;\n            const strictExpandableResult = hasRowExpandable && rowExpandable(record);\n            const looseExpandableResult = !hasRowExpandable || strictExpandableResult;\n\n            return (\n              ((hasExpandedRowRender || hasChildren) && looseExpandableResult) ||\n              (!(hasExpandedRowRender || hasChildren) && strictExpandableResult)\n            );\n          },\n          isAnyColumnUseFullRender: (columns: ColumnProps<RecordType>[]) => {\n            return some(columns, (column) => {\n              //@ts-ignore\n              Boolean(column.useFullRender);\n            });\n          },\n          //TODO 类型没对上\n          getNormalizeColumns: () => normalizeColumns as any,\n          getHandleColumns: () => handleColumns as any,\n          getMergePagination: () => mergePagination,\n          setBodyHasScrollbar: (bodyHasScrollBar) => {\n            if (bodyHasScrollBar !== state.bodyHasScrollBar) {\n              state.bodyHasScrollBar = bodyHasScrollBar;\n            }\n          },\n          stopPropagation(e: TableSelectionCellEvent) {\n            // The event definition here is not very accurate for now, it belongs to a broad structure definition\n            if (e && typeof e === 'object') {\n              if (typeof e.stopPropagation === 'function') {\n                e.stopPropagation();\n              }\n              if (e.nativeEvent && typeof e.nativeEvent.stopPropagation === 'function') {\n                e.nativeEvent.stopPropagation();\n              } else if (typeof e.stopImmediatePropagation === 'function') {\n                e.stopImmediatePropagation();\n              }\n            }\n          },\n        };\n      }\n      const adapter = adapter_();\n      const foundation = new TableFoundation<RecordType>(adapter);\n\n      const filteredSortedDataSource = foundation.getFilteredSortedDataSource(props.dataSource, queries);\n      const newPagination = isPlainObject(props.pagination) ? props.pagination : ({} as any);\n      const pageData: BasePageData<RecordType> = foundation.getCurrentPageData(\n        filteredSortedDataSource,\n        newPagination,\n        queries\n      );\n      state.dataSource = pageData.dataSource as any;\n      state.pagination = pageData.pagination;\n\n      const store = new Store({\n        hoveredRowKey: null,\n      });\n\n      let debouncedWindowResize = debounce(handleWindowResize, 150);\n\n      function getDerivedStateFromProps(props: NormalTableProps) {\n        const willUpdateStates: Partial<NormalTableState> = {};\n        const { rowSelection, dataSource, childrenRecordName, rowKey, pagination } = props;\n        props.columns &&\n          props.children &&\n          logger.warn('columns should not given by object and children at the same time');\n\n        // @ts-ignore\n        if (props.columns && props.columns !== state.cachedColumns) {\n          const newFlattenColumns = flattenColumns(props.columns);\n          willUpdateStates.flattenColumns = newFlattenColumns;\n          willUpdateStates.queries = mergeColumns(state.queries, newFlattenColumns, null, false);\n          willUpdateStates.cachedColumns = props.columns;\n          willUpdateStates.cachedChildren = null;\n        } else if (props.children && props.children !== state.cachedChildren) {\n          const newNestedColumns = getColumnsImport(props.children);\n          const newFlattenColumns = flattenColumns(newNestedColumns);\n          const columns = mergeColumns(state.queries, newFlattenColumns, null, false);\n          willUpdateStates.flattenColumns = newFlattenColumns;\n          willUpdateStates.queries = [...columns];\n          willUpdateStates.cachedColumns = [...newNestedColumns];\n          willUpdateStates.cachedChildren = props.children;\n        }\n\n        // Update controlled selection column\n        if (rowSelection !== state.prePropRowSelection) {\n          let newSelectionStates: TableStateRowSelection = {};\n          if (isObject(state.rowSelection)) {\n            // @ts-ignore\n            newSelectionStates = { ...newSelectionStates, ...state.rowSelection };\n          }\n          if (isObject(rowSelection)) {\n            // @ts-ignore\n            newSelectionStates = { ...newSelectionStates, ...rowSelection };\n          }\n          const selectedRowKeys = get(rowSelection, 'selectedRowKeys');\n          const getCheckboxProps = get(rowSelection, 'getCheckboxProps');\n          if (selectedRowKeys && Array.isArray(selectedRowKeys)) {\n            // @ts-ignore\n            newSelectionStates.selectedRowKeysSet = new Set(selectedRowKeys);\n          }\n          // The return value of getCheckboxProps affects the disabled rows\n          if (isFunction(getCheckboxProps)) {\n            const disabledRowKeys = getAllDisabledRowKeys({ dataSource, getCheckboxProps, childrenRecordName, rowKey });\n            const disabledRowKeysSet = new Set(disabledRowKeys);\n            willUpdateStates.disabledRowKeys = disabledRowKeys;\n            willUpdateStates.disabledRowKeysSet = disabledRowKeysSet;\n            willUpdateStates.allDisabledRowKeys = disabledRowKeys;\n            willUpdateStates.allDisabledRowKeysSet = disabledRowKeysSet;\n          }\n          willUpdateStates.rowSelection = newSelectionStates;\n          willUpdateStates.prePropRowSelection = rowSelection;\n        }\n        if (pagination !== state.prePagination) {\n          let newPagination: Pagination = {};\n          if (isObject(state.pagination)) {\n            // @ts-ignore\n            newPagination = { ...newPagination, ...state.pagination };\n          }\n          if (isObject(pagination)) {\n            // @ts-ignore\n            newPagination = { ...newPagination, ...pagination };\n          }\n          willUpdateStates.pagination = newPagination;\n          willUpdateStates.prePagination = pagination;\n        }\n        return willUpdateStates;\n      }\n\n      watch(\n        () => props,\n        () => {\n          const newState = getDerivedStateFromProps({ ...props } as any);\n          newState &&\n            Object.keys(newState).forEach((key) => {\n              state[key] = newState[key];\n            });\n        },\n        { deep: true, immediate: true }\n      );\n\n      onMounted(() => {\n        setScrollPosition('left');\n\n        if (adapter.isAnyColumnFixed() || (props.showHeader && adapter.useFixedHeader())) {\n          handleWindowResize();\n          window.addEventListener('resize', debouncedWindowResize);\n        }\n      });\n\n      // TODO: Extract the setState operation to the adapter or getDerivedStateFromProps function\n      // @ts-ignore\n      watch(\n        [\n          () => props.expandedRowKeys,\n          () => props.components,\n          () => props.virtualized,\n          () => props.expandAllRows,\n          () => props.expandAllGroupRows,\n          () => props.dataSource,\n          () => state.cachedColumns,\n          () => state.cachedChildren,\n        ],\n        (\n          value,\n          [\n            prevPropsExpandedRowKeys,\n            prevPropsComponents,\n            prevPropsVirtualized,\n            prevPropsExpandAllRows,\n            prevPropsExpandAllGroupRows,\n            prevPropsDataSource,\n            prevStateCachedColumns,\n            prevStateCachedChildren,\n          ]\n        ) => {\n          const {\n            dataSource,\n            expandedRowKeys,\n            expandAllRows,\n            expandAllGroupRows,\n            virtualized,\n            components,\n            pagination: propsPagination,\n          } = props;\n\n          const {\n            pagination: statePagination,\n            queries: stateQueries,\n            cachedColumns: stateCachedColumns,\n            // @ts-ignore\n            cachedChildren: stateCachedChildren,\n            groups: stateGroups,\n          } = state;\n\n          /**\n           * State related to paging\n           *\n           * @param dataSource\n           * @param groups\n           * @param pagination\n           * @param disabledRowKeys\n           * @param allRowKeys\n           * @param queries\n           */\n          const states: Partial<NormalTableState<RecordType>> = {};\n\n          _warnIfNoKey();\n\n          /**\n           * The state that needs to be updated after props changes\n           */\n\n          // Update controlled expand column\n          if (Array.isArray(expandedRowKeys) && expandedRowKeys !== prevPropsExpandedRowKeys) {\n            state.expandedRowKeys = expandedRowKeys;\n          }\n\n          // Update components\n          if (components !== prevPropsComponents || virtualized !== prevPropsVirtualized) {\n            state.components = mergeComponents(components, virtualized);\n          }\n\n          // Update the default expanded column\n          if (expandAllRows !== prevPropsExpandAllRows || expandAllGroupRows !== prevPropsExpandAllGroupRows) {\n            foundation.initExpandedRowKeys({ groups: stateGroups as any });\n          }\n\n          /**\n           * After dataSource is updated || (cachedColumns || cachedChildren updated)\n           * 1. Cache filtered sorted data and a collection of data rows, stored in this\n           * 2. Update pager and group, stored in state\n           */\n          if (\n            dataSource !== prevPropsDataSource ||\n            stateCachedColumns !== prevStateCachedColumns ||\n            stateCachedChildren !== prevStateCachedChildren\n          ) {\n            // TODO: foundation.getFilteredSortedDataSource has side effects and will be modified to the dataSource reference\n            // Temporarily use _dataSource=[...dataSource] for processing\n            const _dataSource = [...dataSource];\n            const filteredSortedDataSource = foundation.getFilteredSortedDataSource(_dataSource, stateQueries as any);\n            const allDataDisabledRowKeys = foundation.getAllDisabledRowKeys(filteredSortedDataSource);\n            foundation.setCachedFilteredSortedDataSource(filteredSortedDataSource);\n            foundation.setAllDisabledRowKeys(allDataDisabledRowKeys);\n            states.dataSource = filteredSortedDataSource;\n\n            if (props.groupBy) {\n              states.groups = null;\n            }\n          }\n\n          // when dataSource has change, should reset currentPage\n          if (dataSource !== prevPropsDataSource) {\n            // @ts-ignore\n            states.pagination = typeof statePagination !== 'boolean'\n              ? {\n                  ...statePagination,\n                  currentPage:\n                  //@ts-ignore\n                    isObject(propsPagination) && propsPagination.currentPage ? propsPagination.currentPage : 1,\n                }\n              : statePagination;\n          }\n\n          if (Object.keys(states).length) {\n            const {\n              // eslint-disable-next-line @typescript-eslint/no-shadow\n              pagination: mergedStatePagination = null,\n              queries: stateQueries = null,\n              dataSource: stateDataSource = null,\n            } = states;\n            const handledProps: Partial<NormalTableState<RecordType>> = foundation.getCurrentPageData(\n              stateDataSource,\n              mergedStatePagination as TablePaginationProps,\n              stateQueries as any\n            );\n\n            // After the pager is updated, reset allRowKeys of the current page\n            adapter.setAllRowKeys(handledProps.allRowKeys);\n            adapter.setDisabledRowKeys(handledProps.disabledRowKeys);\n\n            if ('dataSource' in states) {\n              if (\n                (props.defaultExpandAllRows && handledProps.groups && handledProps.groups.size) ||\n                props.expandAllRows ||\n                props.expandAllGroupRows\n              ) {\n                foundation.initExpandedRowKeys(handledProps);\n              }\n              states.pagination = handledProps.pagination;\n            }\n\n            // Centrally update paging related state\n            const statesKeys: any[] = Object.keys(states);\n            for (const k of statesKeys) {\n              state[k] = handledProps[k];\n            }\n          }\n\n          if (adapter.isAnyColumnFixed() || (props.showHeader && adapter.useFixedHeader())) {\n            if (!debouncedWindowResize) {\n              window.addEventListener('resize', debouncedWindowResize);\n            }\n          }\n        },\n        { immediate: true }\n      );\n\n      onBeforeUnmount(() => {\n        if (debouncedWindowResize) {\n          window.removeEventListener('resize', debouncedWindowResize);\n          (debouncedWindowResize as any).cancel();\n          debouncedWindowResize = null;\n        }\n      });\n\n      // TODO: notify when data don't have key\n      function _warnIfNoKey() {\n        if (\n          (props.rowSelection || props.expandedRowRender) &&\n          some(props.dataSource, (record) => foundation.getRecordKey(record) == null)\n        ) {\n          logger.error(\n            'You must specify a key for each element in the dataSource or use \"rowKey\" to specify an attribute name as the primary key!'\n          );\n        }\n      }\n\n      const _invokeRowSelection = (funcName: string, ...args: any[]) => {\n        const func = get(state as any, ['rowSelection', funcName]);\n\n        if (typeof func === 'function') {\n          func(...args);\n        }\n      };\n\n      const _invokeColumnFn = (key: string, funcName: string, ...args: any[]) => {\n        if (key && funcName) {\n          const column = foundation.getQuery(key);\n          const func = get(column, funcName, null);\n\n          if (typeof func === 'function') {\n            func(...args);\n          }\n        }\n      };\n\n      const _cacheHeaderRef = (node: HTMLDivElement) => {\n        headerWrapRef.value = node;\n      };\n\n      const getCurrentPageData = () => {\n        const pageData = foundation.getCurrentPageData();\n        const retObj: Pick<BasePageData<RecordType>, 'dataSource' | 'groups'> = ['dataSource', 'groups'].reduce(\n          (result, key) => {\n            if (pageData[key]) {\n              result[key] = pageData[key];\n            }\n            return result;\n          },\n          {}\n        );\n\n        return cloneDeep(retObj);\n      };\n\n      function getColumns(columns: ColumnProps<RecordType>[], children: VueJsxNode) {\n        return !Array.isArray(columns) || !columns || !columns.length ? getColumnsImport(children) : columns;\n      }\n\n      // @ts-ignore\n      const getCellWidths = (...args: any[]) => foundation.getCellWidths(...args);\n      // @ts-ignore\n      const setHeadWidths = (...args: any[]) => foundation.setHeadWidths(...args);\n      // @ts-ignore\n      const getHeadWidths = (...args: any[]) => foundation.getHeadWidths(...args);\n      // @ts-ignore\n      const mergedRowExpandable = (...args: any[]) => foundation.mergedRowExpandable(...args);\n      // @ts-ignore\n      const setBodyHasScrollbar = (...args: any[]) => foundation.setBodyHasScrollbar(...args);\n\n      const handleWheel = (event: WheelEvent) => {\n        const { scroll = {} } = props;\n        if (window.navigator?.userAgent.match(/Trident\\/7\\./) && scroll.y) {\n          event.preventDefault();\n          const wd = event.deltaY;\n          const { target } = event;\n          // const { bodyTable, fixedColumnsBodyLeft, fixedColumnsBodyRight } = this;\n          const bodyTable = bodyWrapRef.value;\n\n          let scrollTop = 0;\n\n          if (lastScrollTop) {\n            scrollTop = lastScrollTop + wd;\n          } else {\n            scrollTop = wd;\n          }\n\n          if (bodyTable && target !== bodyTable) {\n            bodyTable.scrollTop = scrollTop;\n          }\n        }\n      };\n\n      const handleBodyScrollLeft = (e: BodyScrollEvent) => {\n        if (e.currentTarget !== e.target) {\n          return;\n        }\n        const { target } = e;\n        // const { headTable, bodyTable } = this;\n        const headTable = headerWrapRef.value?.$el;\n        const bodyTable = bodyWrapRef.value;\n        if (target.scrollLeft !== lastScrollLeft) {\n          if (target === bodyTable && headTable) {\n            headTable.scrollLeft = target.scrollLeft;\n          } else if (target === headTable && bodyTable) {\n            bodyTable.scrollLeft = target.scrollLeft;\n          }\n          setScrollPositionClassName();\n        }\n        // Remember last scrollLeft for scroll direction detecting.\n        lastScrollLeft = target.scrollLeft;\n      };\n\n      function handleWindowResize() {\n        syncTableWidth();\n        setScrollPositionClassName();\n      }\n\n      const handleBodyScrollTop = (e: BodyScrollEvent) => {\n        const { target } = e;\n        if (e.currentTarget !== target) {\n          return;\n        }\n        const { scroll = {} } = props;\n        // const { headTable, bodyTable, fixedColumnsBodyLeft, fixedColumnsBodyRight } = this;\n        const headTable = headerWrapRef.value;\n        const bodyTable = bodyWrapRef.value;\n\n        if (target.scrollTop !== lastScrollTop && scroll.y && target !== headTable) {\n          const { scrollTop } = target;\n\n          if (bodyTable && target !== bodyTable) {\n            bodyTable.scrollTop = scrollTop;\n          }\n        }\n        // Remember last scrollTop for scroll direction detecting.\n        lastScrollTop = target.scrollTop;\n      };\n\n      const handleBodyScroll = (e: BodyScrollEvent) => {\n        handleBodyScrollLeft(e);\n        handleBodyScrollTop(e);\n      };\n\n      const setScrollPosition = (position: BodyScrollPosition) => {\n        const { prefixCls } = props;\n        const positionAll = [\n          `${prefixCls}-scroll-position-both`,\n          `${prefixCls}-scroll-position-middle`,\n          `${prefixCls}-scroll-position-left`,\n          `${prefixCls}-scroll-position-right`,\n        ];\n        scrollPosition = position;\n        const tableNode = wrapRef.value;\n        if (tableNode && tableNode.nodeType) {\n          if (position === 'both') {\n            const acceptPosition = [`${prefixCls}-scroll-position-left`, `${prefixCls}-scroll-position-right`];\n            tableNode.classList.remove(...difference(positionAll, acceptPosition));\n            tableNode.classList.add(...acceptPosition);\n          } else {\n            const acceptPosition = [`${prefixCls}-scroll-position-${position}`];\n            tableNode.classList.remove(...difference(positionAll, acceptPosition));\n            tableNode.classList.add(...acceptPosition);\n          }\n        }\n      };\n\n      const setScrollPositionClassName = () => {\n        const node = bodyWrapRef.value;\n        if (node && node.children && node.children.length) {\n          const scrollToLeft = node.scrollLeft === 0;\n          // why use Math.abs? @see https://bugzilla.mozilla.org/show_bug.cgi?id=1447743\n          const scrollToRight =\n            Math.abs(node.scrollLeft) + 1 >=\n            node.children[0].getBoundingClientRect().width - node.getBoundingClientRect().width;\n          if (scrollToLeft && scrollToRight) {\n            setScrollPosition('both');\n          } else if (scrollToLeft) {\n            setScrollPosition('left');\n          } else if (scrollToRight) {\n            setScrollPosition('right');\n          } else if (scrollPosition !== 'middle') {\n            setScrollPosition('middle');\n          }\n        }\n      };\n\n      const syncTableWidth = () => {\n        if (rootWrapRef && rootWrapRef.value) {\n          state.tableWidth = rootWrapRef.value.getBoundingClientRect().width;\n        }\n      };\n\n      const renderSelection = (record = {} as any, inHeader = false, index?: number): VueJsxNode => {\n        const { rowSelection, allDisabledRowKeysSet } = state;\n\n        if (rowSelection && typeof rowSelection === 'object') {\n          const {\n            selectedRowKeys = [],\n            selectedRowKeysSet = new Set(),\n            getCheckboxProps,\n            disabled,\n            renderCell,\n          } = rowSelection;\n          const allRowKeys = cachedFilteredSortedRowKeys;\n          const allRowKeysSet = cachedFilteredSortedRowKeysSet;\n          const allIsSelected = foundation.allIsSelected(selectedRowKeysSet, allDisabledRowKeysSet, allRowKeys);\n          const hasRowSelected = foundation.hasRowSelected(selectedRowKeys, allRowKeysSet);\n          const indeterminate = hasRowSelected && !allIsSelected;\n\n          if (inHeader) {\n            const columnKey = get(rowSelection, 'key', strings.DEFAULT_KEY_COLUMN_SELECTION);\n\n            const originNode = (\n              <ColumnSelection\n                aria-label={`${allIsSelected ? 'Deselect' : 'Select'} all rows`}\n                disabled={disabled}\n                key={columnKey}\n                selected={allIsSelected}\n                indeterminate={indeterminate}\n                onChange={(selected, e) => {\n                  toggleSelectAllRow(selected, e);\n                }}\n              />\n            );\n\n            const selectAll = (selected: boolean, e: Event) =>\n              toggleSelectAllRow(selected, e as TableSelectionCellEvent);\n\n            return isFunction(renderCell)\n              ? renderCell({\n                  selected: allIsSelected,\n                  record,\n                  originNode,\n                  inHeader,\n                  disabled,\n                  indeterminate,\n                  selectAll,\n                })\n              : originNode;\n          } else {\n            const key = foundation.getRecordKey(record);\n            const selected = selectedRowKeysSet.has(key);\n            const checkboxPropsFn = () => (typeof getCheckboxProps === 'function' ? getCheckboxProps(record) : {});\n            const originNode = (\n              <ColumnSelection\n                aria-label={`${selected ? 'Deselect' : 'Select'} this row`}\n                getCheckboxProps={checkboxPropsFn}\n                selected={selected}\n                onChange={(status, e) => toggleSelectRow(status, key, e)}\n              />\n            );\n            const selectRow = (selected: boolean, e: Event) =>\n              toggleSelectRow(selected, key, e as TableSelectionCellEvent);\n\n            return isFunction(renderCell)\n              ? renderCell({\n                  selected,\n                  record,\n                  index,\n                  originNode,\n                  inHeader: false,\n                  disabled,\n                  indeterminate,\n                  selectRow,\n                })\n              : originNode;\n          }\n        }\n        return null;\n      };\n\n      const renderRowSelectionCallback = (text: string, record: RecordType = {} as RecordType, index: number) =>\n        renderSelection(record, false, index);\n      const renderTitleSelectionCallback = () => renderSelection(undefined, true);\n\n      const normalizeSelectionColumn = (\n        props: { rowSelection?: TableStateRowSelection<RecordType>; prefixCls?: string } = {}\n      ) => {\n        const { rowSelection, prefixCls } = props;\n        let column: ColumnProps = {};\n        if (rowSelection) {\n          const needOmitSelectionKey = ['selectedRowKeys', 'selectedRowKeysSet'];\n          column = { key: strings.DEFAULT_KEY_COLUMN_SELECTION };\n\n          if (isObject(rowSelection)) {\n            column = { ...column, ...omit(rowSelection, needOmitSelectionKey) };\n          }\n\n          column.className = classnames(column.className, `${prefixCls}-column-selection`);\n\n          column.title = renderTitleSelectionCallback;\n\n          column.render = renderRowSelectionCallback;\n        }\n        return column;\n      };\n\n      // If there is a scroll bar, manually construct a column and insert it into the header\n      const normalizeScrollbarColumn = (\n        props: { scrollbarWidth?: number } = {}\n      ): { key: 'column-scrollbar'; width: number; fixed: 'right' } => {\n        const { scrollbarWidth = 0 } = props;\n\n        return {\n          key: strings.DEFAULT_KEY_COLUMN_SCROLLBAR as 'column-scrollbar',\n          width: scrollbarWidth,\n          fixed: 'right',\n        };\n      };\n\n      /**\n       * render expand icon\n       * @param {Object} record\n       * @param {Boolean} isNested\n       * @param {String} groupKey\n       * @returns {VueJsxNode}\n       */\n      const renderExpandIcon = (record = {}, isNested = false, groupKey: string | number = null) => {\n        const { expandedRowKeys } = state;\n        const { expandIcon } = props;\n        const key =\n          typeof groupKey === 'string' || typeof groupKey === 'number'\n            ? groupKey\n            : foundation.getRecordKey(record as RecordType);\n\n        return (\n          <ExpandedIcon\n            key={key}\n            componentType={isNested ? 'tree' : 'expand'}\n            expanded={includes(expandedRowKeys, key)}\n            expandIcon={expandIcon}\n            onClick={(expanded, e) => handleRowExpanded(expanded, key, e)}\n          />\n        );\n      };\n\n      // @ts-ignore\n      const handleRowExpanded = (...args: any[]) => foundation.handleRowExpanded(...args);\n\n      const normalizeExpandColumn = (\n        props: {\n          prefixCls?: string;\n          expandCellFixed?: ArrayElement<typeof strings.FIXED_SET>;\n          expandIcon?: ExpandIcon;\n        } = {}\n      ) => {\n        let column: ColumnProps = null;\n\n        const { prefixCls, expandCellFixed, expandIcon } = props;\n\n        column = { fixed: expandCellFixed, key: strings.DEFAULT_KEY_COLUMN_EXPAND };\n\n        column.className = classnames(column.className, `${prefixCls}-column-expand`);\n\n        column.render =\n          expandIcon !== false\n            ? (text = '', record, index) => (adapter.mergedRowExpandable(record) ? renderExpandIcon(record) : null)\n            : () => null;\n\n        return column;\n      };\n\n      /**\n       * Add sorting, filtering, and rendering functions to columns, and add column event handling\n       * Title support function, passing parameters as {filter: node, sorter: node, selection: node}\n       * @param {*} column\n       */\n      const addFnsInColumn = (column: ColumnProps = {}) => {\n        const { prefixCls } = props;\n        if (column && (column.sorter || column.filters || column.onFilter || column.useFullRender)) {\n          let hasSorter = typeof column.sorter === 'function' || column.sorter === true;\n          let hasFilter = (Array.isArray(column.filters) && column.filters.length) ||\n            isVNode(column.filterDropdown) ||\n            typeof column.renderFilterDropdown === 'function';\n          let hasSorterOrFilter = false;\n          const sortOrderNotControlled = !('sortOrder' in column);\n          const showSortTip = sortOrderNotControlled && column.showSortTip === true;\n          const { dataIndex, title: rawTitle, useFullRender } = column;\n          const clickColumnToSorter = hasSorter && !hasFilter && !Boolean(useFullRender);\n          const curQuery = foundation.getQuery(dataIndex);\n          const titleMap: ColumnTitleProps = {};\n          const titleArr = [];\n\n          // useFullRender adds select buttons to each column\n          if (useFullRender) {\n            titleMap.selection = renderSelection(null, true);\n          }\n\n          const stateSortOrder = get(curQuery, 'sortOrder');\n          const defaultSortOrder = get(curQuery, 'defaultSortOrder', false);\n          const sortOrder = foundation.isSortOrderValid(stateSortOrder) ? stateSortOrder : defaultSortOrder;\n          const showEllipsisTitle = shouldShowEllipsisTitle(column.ellipsis);\n          const TitleNode = typeof rawTitle !== 'function' && (\n            <span\n              class={`${prefixCls}-row-head-title`}\n              key={strings.DEFAULT_KEY_COLUMN_TITLE}\n              title={showEllipsisTitle && typeof rawTitle === 'string' ? rawTitle : undefined}\n            >\n              {rawTitle}\n            </span>\n          );\n          if (hasSorter) {\n            // In order to increase the click hot area of ​​sorting, when sorting is required & useFullRender is false,\n            // both the title and sorting areas are used as the click hot area for sorting。\n            const sorter = (\n              <ColumnSorter\n                key={strings.DEFAULT_KEY_COLUMN_SORTER}\n                sortOrder={sortOrder}\n                sortIcon={column.sortIcon}\n                onClick={useFullRender || hasFilter ? e => foundation.handleSort(column, e) : null}\n                title={TitleNode}\n                showTooltip={!clickColumnToSorter && showSortTip}\n              />\n            );\n            useFullRender && (titleMap.sorter = sorter);\n            hasSorterOrFilter = true;\n            titleArr.push(sorter);\n          } else {\n            titleArr.push(TitleNode);\n          }\n\n          const stateFilteredValue = get(curQuery, 'filteredValue');\n          const defaultFilteredValue = get(curQuery, 'defaultFilteredValue');\n          const filteredValue = stateFilteredValue ? stateFilteredValue : defaultFilteredValue;\n\n          if (hasFilter) {\n            const filter = (\n              <ColumnFilter\n                key={strings.DEFAULT_KEY_COLUMN_FILTER}\n                {...({\n                  ...pick(curQuery, ...Object.keys(ColumnFilterVueProps)),\n                  onFilterDropdownVisibleChange: (visible: boolean) => foundation.toggleShowFilter(dataIndex, visible)\n                })}\n                filteredValue={filteredValue}\n                onSelect={(data: OnSelectData) => {\n                  foundation.handleFilterSelect(dataIndex, data);\n                }}\n              />\n            );\n            useFullRender && (titleMap.filter = filter);\n            hasSorterOrFilter = true;\n            titleArr.push(filter);\n          }\n\n          const newTitle =\n            typeof rawTitle === 'function' ? (\n              () => rawTitle(titleMap)\n            ) : hasSorterOrFilter ? (\n              <div class={`${prefixCls}-operate-wrapper`}>{titleArr}</div>\n            ) : (\n              titleArr\n            );\n          column = { ...column, title: newTitle };\n          if (clickColumnToSorter) {\n            column.clickToSort = e => {\n              foundation.handleSort(column, e);\n            };\n            column.sortOrder = sortOrder;\n            column.showSortTip = showSortTip;\n          }\n        }\n\n        return column;\n      };\n\n      const toggleSelectRow = (selected: boolean, realKey: string | number, e: TableSelectionCellEvent) => {\n        foundation.handleSelectRow(realKey, selected, e);\n      };\n\n      const toggleSelectAllRow = (selected: boolean, e: TableSelectionCellEvent) => {\n        foundation.handleSelectAllRow(selected, e);\n      };\n\n      /**\n       * render pagination\n       * @param {object} pagination\n       * @param {object} propRenderPagination\n       */\n      const renderPagination = (pagination: TablePaginationProps, propRenderPagination: RenderPagination) => {\n        if (!pagination) {\n          return null;\n        }\n\n        // use memoized pagination\n        const mergedPagination = foundation.memoizedPagination(pagination);\n\n        return (\n          <LocaleConsumer componentName=\"Table\">\n            {(locale: TableLocale) => {\n              const info = foundation.formatPaginationInfo(mergedPagination, locale.pageText);\n              return (\n                <TablePagination info={info} pagination={mergedPagination} renderPagination={propRenderPagination} />\n              );\n            }}\n          </LocaleConsumer>\n        );\n      };\n\n      const renderTitle = (\n        props: {\n          title?: VueJsxNode | ((dataSource?: RecordType[]) => VueJsxNode);\n          prefixCls?: string;\n          dataSource?: any[];\n        } = {}\n      ) => {\n        let { title } = props;\n        const { prefixCls, dataSource } = props;\n\n        if (typeof title === 'function') {\n          title = title(dataSource);\n        }\n\n        return isVNode(title) || typeof title === 'string' ? (\n          <div class={`${prefixCls}-title`} x-semi-prop=\"title\">\n            {title}\n          </div>\n        ) : null;\n      };\n\n      const renderEmpty = (props: { prefixCls?: string; empty?: VueJsxNode; dataSource?: RecordType[] } = {}) => {\n        const { prefixCls, empty, dataSource } = props;\n        const wrapCls = `${prefixCls}-placeholder`;\n        const isEmpty = foundation.isEmpty(dataSource);\n\n        if (!isEmpty) {\n          return null;\n        }\n\n        return (\n          <LocaleConsumer componentName=\"Table\" key={'emptyText'}>\n            {(locale: TableLocale, localeCode: string) => (\n              <div class={wrapCls}>\n                <div class={`${prefixCls}-empty`} x-semi-prop=\"empty\">\n                  {empty || locale.emptyText}\n                </div>\n              </div>\n            )}\n          </LocaleConsumer>\n        );\n      };\n\n      const renderFooter = (\n        props: {\n          footer?: VueJsxNode | ((dataSource?: RecordType[]) => VueJsxNode);\n          prefixCls?: string;\n          dataSource?: RecordType[];\n        } = {}\n      ) => {\n        let { footer } = props;\n        const { prefixCls, dataSource } = props;\n\n        if (typeof footer === 'function') {\n          footer = footer(dataSource);\n        }\n\n        return isVNode(footer) || typeof footer === 'string' ? (\n          <div class={`${prefixCls}-footer`} key=\"footer\" x-semi-prop=\"footer\">\n            {footer}\n          </div>\n        ) : null;\n      };\n\n      const renderMainTable = (props_: any) => {\n        const useFixedHeader = adapter.useFixedHeader();\n        const emptySlot = renderEmpty(props_);\n\n        const table = [\n          renderTable({\n            ...props_,\n            fixed: false,\n            useFixedHeader,\n            headerRef: _cacheHeaderRef,\n            bodyRef: bodyWrapRef,\n            includeHeader: !useFixedHeader,\n            emptySlot,\n          }),\n          renderFooter(props_),\n        ];\n\n        return table;\n      };\n\n      const renderTable = (props_: RenderTableProps<RecordType>) => {\n        const {\n          columns,\n          filteredColumns,\n          fixed,\n          useFixedHeader,\n          scroll,\n          prefixCls,\n          anyColumnFixed,\n          includeHeader,\n          showHeader,\n          components,\n          headerRef,\n          bodyRef,\n          onHeaderRow,\n          rowSelection,\n          dataSource,\n          bodyHasScrollBar,\n          disabledRowKeysSet,\n          sticky,\n        } = props_;\n        const selectedRowKeysSet = get(rowSelection, 'selectedRowKeysSet', new Set());\n        const tableLayout = adapter.getTableLayout();\n        const headTable =\n          fixed || useFixedHeader ? (\n            <HeadTable\n              key=\"head\"\n              tableLayout={tableLayout}\n              ref={headerRef}\n              columns={filteredColumns}\n              prefixCls={prefixCls}\n              fixed={fixed}\n              handleBodyScroll={handleBodyScrollLeft}\n              components={components}\n              scroll={scroll}\n              showHeader={showHeader}\n              selectedRowKeysSet={selectedRowKeysSet}\n              onHeaderRow={onHeaderRow}\n              dataSource={dataSource}\n              bodyHasScrollBar={bodyHasScrollBar}\n              sticky={sticky}\n            />\n          ) : null;\n        const bodyTable = (\n          <BodyTable\n            {...(omit(props_, ['rowSelection', 'headWidths', 'allDisabledRowKeys', 'allDisabledRowKeysSet']) as any)}\n            key=\"body\"\n            forwardedRef={bodyRef}\n            columns={filteredColumns}\n            fixed={fixed}\n            prefixCls={prefixCls}\n            handleWheel={handleWheel}\n            handleBodyScroll={handleBodyScroll}\n            anyColumnFixed={anyColumnFixed}\n            tableLayout={tableLayout}\n            includeHeader={includeHeader}\n            showHeader={showHeader}\n            scroll={scroll}\n            components={components}\n            store={store}\n            selectedRowKeysSet={selectedRowKeysSet}\n            disabledRowKeysSet={disabledRowKeysSet}\n          />\n        );\n\n        return [headTable, bodyTable];\n      };\n\n      /**\n       * When columns change, call this function to get the latest withFnsColumns\n       * In addition to changes in columns, these props changes must be recalculated\n       *  - hideExpandedColumn\n       *  -rowSelection changes from trusy to falsy or rowSelection.hidden changes\n       *  -isAnyFixedRight(columns) || get(scroll,'y') changes\n       *\n       * columns变化时，调用此函数获取最新的withFnsColumns\n       * 除了 columns 变化，这些 props 变化也要重新计算\n       *  - hideExpandedColumn\n       *  - rowSelection 从 trusy 变为 falsy 或 rowSelection.hidden 发生变化\n       *  - isAnyFixedRight(columns) || get(scroll, 'y') 发生变化\n       *\n       * @param {Array} queries\n       * @param {Array} cachedColumns\n       * @returns columns after adding extended functions\n       */\n      function handleColumns(queries: ColumnProps<RecordType>[], cachedColumns: ColumnProps<RecordType>[]) {\n        const { hideExpandedColumn, scroll, prefixCls, expandCellFixed, expandIcon, rowSelection } = props;\n        const childrenColumnName = 'children';\n        let columns: ColumnProps<RecordType>[] = cloneDeep(cachedColumns);\n\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const addFns = (columns: ColumnProps<RecordType>[] = []) => {\n          if (Array.isArray(columns) && columns.length) {\n            each(columns, (column, index, originColumns) => {\n              const newColumn = addFnsInColumn(column);\n              const children = column[childrenColumnName];\n              if (Array.isArray(children) && children.length) {\n                const newChildren = [...children];\n                addFns(newChildren);\n                newColumn[childrenColumnName] = newChildren;\n              }\n              originColumns[index] = newColumn;\n            });\n          }\n        };\n\n        addFns(columns);\n\n        // hideExpandedColumn=false render expand column separately\n        if (!hideExpandedColumn) {\n          const column = normalizeExpandColumn({ prefixCls, expandCellFixed, expandIcon });\n\n          const destIndex = findIndex(columns, (item) => item.key === strings.DEFAULT_KEY_COLUMN_EXPAND);\n          if (column) {\n            if (destIndex > -1) {\n              columns[destIndex] = { ...column, ...columns[destIndex] };\n            } else if (column.fixed === 'right') {\n              columns = [...columns, column];\n            } else {\n              columns = [column, ...columns];\n            }\n          }\n        }\n\n        // selection column\n        if (rowSelection && !get(rowSelection, 'hidden')) {\n          const destIndex = findIndex(columns, (item) => item.key === strings.DEFAULT_KEY_COLUMN_SELECTION);\n          const column = normalizeSelectionColumn({ rowSelection, prefixCls });\n\n          if (destIndex > -1) {\n            columns[destIndex] = { ...column, ...columns[destIndex] };\n          } else if (column.fixed === 'right') {\n            columns = [...columns, column];\n          } else {\n            columns = [column, ...columns];\n          }\n        }\n\n        assignColumnKeys(columns);\n\n        return columns;\n      }\n\n      /**\n       * Convert children to columns object\n       * @param {Array} columns\n       * @param {VueJsxNode} children\n       * @returns {Array}\n       */\n      const normalizeColumns = (columns: ColumnProps<RecordType>[], children: VueJsxNode) => {\n        // TODO\n        console.error('TODO');\n        const normalColumns = cloneDeep(getColumns(columns, children));\n        return normalColumns;\n      };\n\n      /**\n       * Combine pagination and table paging processing functions\n       */\n      function mergePagination(pagination: TablePaginationProps) {\n        const newPagination = { onChange: foundation.setPage, ...pagination };\n        return newPagination;\n      }\n\n      expose({\n        getCurrentPageData,\n      });\n      return () => {\n        let {\n          scroll,\n          prefixCls,\n          className,\n          style = {},\n          bordered,\n          id,\n          pagination: propPagination,\n          virtualized,\n          size,\n          renderPagination: propRenderPagination,\n          getVirtualizedListRef,\n          loading,\n          hideExpandedColumn,\n          rowSelection: propRowSelection,\n          children,\n          ...rest\n        } = getProps(props);\n        const wrapStyle: CSSProperties = {\n          ...props.style,\n        };\n\n        let columns: ColumnProps<RecordType>[];\n        /**\n         * As state.queries will change, the columns should be refreshed as a whole at this time\n         * The scene of changes in queries\n         * 1. Filter\n         * 2. Pagination\n         *\n         * useFullRender needs to be passed to the user selection VueJsxNode, so columns need to be recalculated every time the selectedRowKeys changes\n         * TODO: In the future, the selection passed to the user can be changed to the function type, allowing the user to execute the function to obtain the real-time status of the selection title\n         *\n         * 由于state.queries会发生变化，此时columns应该整体刷新\n         * queries变化的场景\n         *  1. 筛选\n         *  2. 分页\n         * useFullRender需要传给用户selection VueJsxNode，因此需要每次selectedRowKeys变化时重新计算columns\n         * TODO: 未来可以将传给用户的selection改为函数类型，让用户执行函数获取selection title的实时状态\n         */\n        if (!adapter.isAnyColumnUseFullRender(state.queries as any)) {\n          const rowSelectionUpdate: boolean = propRowSelection && !get(propRowSelection, 'hidden');\n          columns = foundation.memoizedWithFnsColumns(\n            state.queries as any,\n            state.cachedColumns as any,\n            rowSelectionUpdate,\n            hideExpandedColumn,\n            // Update the columns after the body scrollbar changes to ensure that the head and body are aligned\n            state.bodyHasScrollBar\n          );\n        } else {\n          columns = handleColumns(state.queries as any, state.cachedColumns as any);\n        }\n        const filteredColumns: ColumnProps<RecordType>[] = foundation.memoizedFilterColumns(columns as any);\n        const flattenFnsColumns: ColumnProps<RecordType>[] = foundation.memoizedFlattenFnsColumns(columns as any);\n\n        const anyColumnFixed = adapter.isAnyColumnFixed(columns as any);\n\n        /**\n         * - If it is the first page break, you need to calculate the current page\n         * - If it is manual paging, call foundation to modify the state\n         *\n         * TODO: After merging issue 1007, you can place it in the constructor to complete\n         * The reason is that #1007 exposes the parameters required by getCurrentPageData in the constructor\n         */\n        // if (isNull(state.dataSource)) {\n        //   const pageData: BasePageData<RecordType> = foundation.getCurrentPageData(props.dataSource);\n        //   state.dataSource = pageData.dataSource as any;\n        //   state.pagination = pageData.pagination;\n        // }\n        // TODO 拿到state的原始数据\n        const stateObj = { ...toRaw(state) };\n\n        const props_ = {\n          ...rest,\n          ...stateObj,\n          // props not in rest\n          virtualized,\n          scroll,\n          prefixCls,\n          size,\n          hideExpandedColumn,\n          // renamed state\n          columns,\n          // calculated value\n          anyColumnFixed,\n          rowExpandable: mergedRowExpandable,\n          pagination: state.pagination,\n          dataSource: state.dataSource,\n          rowSelection: state.rowSelection,\n          expandedRowKeys: state.expandedRowKeys,\n          renderExpandIcon: renderExpandIcon,\n          filteredColumns,\n        };\n\n        const x = get(scroll, 'x');\n        const y = get(scroll, 'y');\n\n        if (virtualized) {\n          if (isNaN(parseInt('' + wrapStyle.width))) {\n            wrapStyle.width = x + 'px';\n          } else {\n            wrapStyle.width = typeof wrapStyle.width === 'string' ? wrapStyle.width : wrapStyle.width + 'px';\n          }\n        }\n\n        const wrapCls = classnames({\n          [`${prefixCls}-${strings.SIZE_SMALL}`]: size === strings.SIZE_SMALL,\n          [`${prefixCls}-${strings.SIZE_MIDDLE}`]: size === strings.SIZE_MIDDLE,\n          [`${prefixCls}-virtualized`]: Boolean(virtualized),\n          [`${prefixCls}-bordered`]: bordered,\n          [`${prefixCls}-fixed-header`]: Boolean(y),\n          [`${prefixCls}-scroll-position-left`]: ['both', 'left'].includes(position),\n          [`${prefixCls}-scroll-position-right`]: ['both', 'right'].includes(position),\n        });\n\n        // pagination\n        const tablePagination =\n          state.pagination && propPagination ? renderPagination(state.pagination as any, propRenderPagination) : null;\n        const paginationPosition = get(propPagination, 'position', 'bottom');\n\n        const tableContextValue: TableContextProps = {\n          ...(context.value as any),\n          headWidths: state.headWidths as any,\n          tableWidth: state.tableWidth as any,\n          anyColumnFixed,\n          flattenedColumns: flattenFnsColumns,\n          renderExpandIcon: renderExpandIcon,\n          renderSelection: renderSelection,\n          setHeadWidths: setHeadWidths,\n          getHeadWidths: getHeadWidths,\n          getCellWidths: getCellWidths,\n          handleRowExpanded: handleRowExpanded,\n          getVirtualizedListRef,\n          setBodyHasScrollbar: setBodyHasScrollbar,\n        };\n        if (props.direction) {\n          tableContextValue.direction = props.direction;\n        }\n        const dataAttr = getDataAttr();\n        return (\n          <div\n            ref={rootWrapRef}\n            class={classnames(className, `${prefixCls}-wrapper`, `${prefixCls}-wrapper-${props.direction}`)}\n            data-column-fixed={anyColumnFixed}\n            style={wrapStyle}\n            id={id}\n            {...dataAttr}\n          >\n            <TableContextProvider {...tableContextValue}>\n              <Spin spinning={loading} size=\"large\">\n                <div ref={wrapRef} class={wrapCls}>\n                  <Fragment key={'pagination-top'}>\n                    {['top', 'both'].includes(paginationPosition) ? tablePagination : null}\n                  </Fragment>{' '}\n                  {renderTitle({\n                    title: (props as any).title,\n                    dataSource: props.dataSource,\n                    prefixCls: props.prefixCls,\n                  })}\n                  <div class={`${prefixCls}-container`}>{renderMainTable({ ...props_ })}</div>\n                  <Fragment key={'pagination-bottom'}>\n                    {['bottom', 'both'].includes(paginationPosition) ? tablePagination : null}\n                  </Fragment>\n                </div>\n              </Spin>\n            </TableContextProvider>\n          </div>\n        );\n      };\n    },\n  });\n\n  return TableComp;\n}\n\nexport default Table;\n"],"names":["propTypes","children","PropTypes","any","className","string","style","object","prefixCls","components","bordered","bool","loading","size","tableLayout","columns","array","hideExpandedColumn","id","expandIcon","oneOfType","func","node","expandCellFixed","title","onHeaderRow","showHeader","indentSize","number","rowKey","onRow","onExpandedRowsChange","onExpand","rowExpandable","expandedRowRender","expandedRowKeys","defaultExpandAllRows","expandAllRows","defaultExpandAllGroupRows","expandAllGroupRows","defaultExpandedRowKeys","pagination","renderPagination","footer","empty","dataSource","childrenRecordName","rowSelection","onChange","scroll","groupBy","renderGroupSection","onGroupedRow","clickGroupedRowToExpand","virtualized","dropdownPrefixCls","expandRowByClick","getVirtualizedListRef","bodyWrapperRef","sticky","Boolean","Object","direction","defaultProps","cssClasses","PREFIX","numbers","DEFAULT_INDENT_WIDTH","noop","onFilterDropdownVisibleChange","Table","vuePropsType","vuePropsMake","defineComponent","props","name","setup","expose","getProps","useHasInProps","useSlots","lastScrollTop","lastScrollLeft","scrollPosition","position","context","useTableContext","cachedFilteredSortedDataSource","cachedFilteredSortedRowKeys","cachedFilteredSortedRowKeysSet","Set","getColumns","cachedflattenColumns","flattenColumns","queries","TableFoundation","initColumnsFilteredValueAndSorterOrder","cloneDeep","rootWrapRef","ref","wrapRef","bodyWrapRef","headerWrapRef","state","reactive","cachedColumns","cachedChildren","mergeComponents","flattenData","isObject","groups","allRowKeys","disabledRowKeys","disabledRowKeysSet","allDisabledRowKeys","allDisabledRowKeysSet","headWidths","bodyHasScrollBar","prePropRowSelection","undefined","prePagination","adapter","adapterInject","getDataAttr","useBaseComponent","adapter_","resetScrollY","value","scrollTop","setSelectedRowKeys","selectedRowKeys","selectedRowKeysSet","setDisabledRowKeys","setCurrentPage","currentPage","setPagination","setGroups","setDataSource","setExpandedRowKeys","setQuery","query","mergeQueries","setQueries","setFlattenData","setAllRowKeys","setHoveredRowKey","hoveredRowKey","store","setState","setCachedFilteredSortedDataSource","filteredSortedDataSource","setCachedFilteredSortedRowKeys","filteredSortedRowKeys","setAllDisabledRowKeys","getCurrentPage","get","getCurrentPageSize","DEFAULT_PAGE_SIZE","getCachedFilteredSortedDataSource","getCachedFilteredSortedRowKeys","getCachedFilteredSortedRowKeysSet","getAllDisabledRowKeys","getAllDisabledRowKeysSet","notifyFilterDropdownVisibleChange","visible","dataIndex","_invokeColumnFn","notifyChange","args","notifyExpand","notifyExpandedRowsChange","notifySelect","_invokeRowSelection","notifySelectAll","notifySelectInvert","notifySelectionChange","isAnyColumnFixed","some","column","fixed","useFixedHeader","getTableLayout","isFixed","Array","isArray","ellipsis","setHeadWidths","index","equalWith","newHeadWidths","getHeadWidths","length","map","item","width","getCellWidths","flattenedColumns","flattenedWidths","ignoreScrollBarKey","flattenDeep","reduce","result","found","key","strings","DEFAULT_KEY_COLUMN_SCROLLBAR","find","push","mergedRowExpandable","record","hasExpandedRowRender","hasRowExpandable","hasChildren","strictExpandableResult","isAnyColumnUseFullRender","useFullRender","getNormalizeColumns","normalizeColumns","getHandleColumns","handleColumns","getMergePagination","mergePagination","setBodyHasScrollbar","stopPropagation","e","nativeEvent","stopImmediatePropagation","foundation","getFilteredSortedDataSource","newPagination","isPlainObject","pageData","getCurrentPageData","Store","debouncedWindowResize","debounce","handleWindowResize","getDerivedStateFromProps","willUpdateStates","logger","warn","newFlattenColumns","mergeColumns","newNestedColumns","getColumnsImport","newSelectionStates","getCheckboxProps","isFunction","watch","newState","keys","forEach","deep","immediate","onMounted","setScrollPosition","window","addEventListener","prevPropsExpandedRowKeys","prevPropsComponents","prevPropsVirtualized","prevPropsExpandAllRows","prevPropsExpandAllGroupRows","prevPropsDataSource","prevStateCachedColumns","prevStateCachedChildren","propsPagination","statePagination","stateQueries","stateCachedColumns","stateCachedChildren","stateGroups","states","_warnIfNoKey","initExpandedRowKeys","_dataSource","allDataDisabledRowKeys","mergedStatePagination","stateDataSource","handledProps","statesKeys","k","onBeforeUnmount","removeEventListener","cancel","getRecordKey","error","funcName","getQuery","_cacheHeaderRef","retObj","handleWheel","event","navigator","userAgent","match","y","preventDefault","wd","deltaY","target","bodyTable","handleBodyScrollLeft","currentTarget","headTable","$el","scrollLeft","setScrollPositionClassName","syncTableWidth","handleBodyScrollTop","handleBodyScroll","positionAll","tableNode","nodeType","acceptPosition","classList","remove","difference","add","scrollToLeft","scrollToRight","Math","abs","getBoundingClientRect","tableWidth","renderSelection","inHeader","disabled","renderCell","allRowKeysSet","allIsSelected","indeterminate","hasRowSelected","columnKey","DEFAULT_KEY_COLUMN_SELECTION","originNode","_createVNode","ColumnSelection","selected","toggleSelectAllRow","selectAll","has","checkboxPropsFn","status","toggleSelectRow","selectRow","renderRowSelectionCallback","text","renderTitleSelectionCallback","normalizeSelectionColumn","needOmitSelectionKey","omit","classnames","render","renderExpandIcon","isNested","groupKey","ExpandedIcon","includes","onClick","expanded","handleRowExpanded","normalizeExpandColumn","DEFAULT_KEY_COLUMN_EXPAND","addFnsInColumn","sorter","filters","onFilter","hasSorter","hasFilter","isVNode","filterDropdown","renderFilterDropdown","hasSorterOrFilter","showSortTip","rawTitle","clickColumnToSorter","curQuery","titleMap","titleArr","selection","stateSortOrder","defaultSortOrder","sortOrder","isSortOrderValid","showEllipsisTitle","shouldShowEllipsisTitle","TitleNode","DEFAULT_KEY_COLUMN_TITLE","ColumnSorter","DEFAULT_KEY_COLUMN_SORTER","sortIcon","handleSort","stateFilteredValue","defaultFilteredValue","filteredValue","filter","ColumnFilter","_mergeProps","DEFAULT_KEY_COLUMN_FILTER","pick","ColumnFilterVueProps","toggleShowFilter","data","handleFilterSelect","newTitle","clickToSort","realKey","handleSelectRow","handleSelectAllRow","propRenderPagination","mergedPagination","memoizedPagination","LocaleConsumer","default","locale","info","formatPaginationInfo","pageText","TablePagination","renderTitle","renderEmpty","wrapCls","isEmpty","localeCode","emptyText","renderFooter","renderMainTable","props_","emptySlot","renderTable","headerRef","bodyRef","includeHeader","filteredColumns","anyColumnFixed","HeadTable","BodyTable","childrenColumnName","addFns","each","originColumns","newColumn","newChildren","destIndex","findIndex","assignColumnKeys","console","setPage","propPagination","propRowSelection","rest","wrapStyle","rowSelectionUpdate","memoizedWithFnsColumns","memoizedFilterColumns","flattenFnsColumns","memoizedFlattenFnsColumns","stateObj","toRaw","x","isNaN","parseInt","SIZE_SMALL","SIZE_MIDDLE","tablePagination","paginationPosition","tableContextValue","dataAttr","TableContextProvider","Spin","_Fragment"],"mappings":"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"}