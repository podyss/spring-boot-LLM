{"version":3,"file":"ResizableHeaderCell.js","sources":["../../src/components/table/ResizableHeaderCell.tsx"],"sourcesContent":["import { Resizable } from '@kousum/vue-resizable';\nimport { ComponentObjectPropsOptions, defineComponent, Fragment, h, PropType, useSlots } from 'vue';\nimport { omit } from 'lodash';\nimport { CombineProps } from '../interface';\nimport { getFragmentChildren } from '../_utils';\n\nexport interface ResizableHeaderCellProps {\n  onResize?: ResizeFn;\n  onResizeStart?: ResizeFn;\n  onResizeStop?: ResizeFn;\n  width?: number | string;\n  /** For compatibility with previous versions, the default value is true. If you don't want to resize, set it to false */\n  resize?: boolean;\n}\nexport const vuePropsType: CombineProps<ResizableHeaderCellProps> = {\n  onResize: Function as PropType<ResizableHeaderCellProps['onResize']>,\n  onResizeStart: Function as PropType<ResizableHeaderCellProps['onResizeStart']>,\n  onResizeStop: Function as PropType<ResizableHeaderCellProps['onResizeStop']>,\n  width: [Number, String],\n  resize: Boolean,\n};\nconst ResizableHeaderCell = defineComponent({\n  props: { ...vuePropsType },\n  name: 'ResizableHeaderCell',\n  setup(props, { attrs }) {\n    const slots = useSlots();\n\n    return () => {\n      const { onResize, onResizeStart, onResizeStop, width, resize, ...restProps } = props;\n\n      const domProps = omit(attrs, 'onResize', 'onResizeStart', 'onResizeStop', 'width');\n\n      if (typeof width !== 'number' || resize === false) {\n        return <th {...domProps} />;\n      }\n\n      let children = getFragmentChildren(slots) || [];\n\n      // Fragment must be used here, otherwise there will be an error (seemingly a react-resizable@1.9.0 problem)\n      children = children.map((child, index) => <Fragment key={index}>{child}</Fragment>);\n\n      return (\n        // @ts-ignore\n        <Resizable\n          width={width as number}\n          height={0}\n          onResize={onResize}\n          onResizeStart={onResizeStart}\n          onResizeStop={onResizeStop}\n          draggableOpts={{ enableUserSelectHack: false }}\n          children={<th {...domProps}>{children}</th>}\n          axis=\"x\"\n        ></Resizable>\n      );\n    };\n  },\n});\n\nexport type ResizeFn = (e: any) => any;\nexport default ResizableHeaderCell;\n"],"names":["vuePropsType","onResize","Function","onResizeStart","onResizeStop","width","Number","String","resize","Boolean","ResizableHeaderCell","defineComponent","props","name","setup","attrs","slots","useSlots","restProps","domProps","omit","_createVNode","children","getFragmentChildren","map","child","index","_Fragment","Resizable","enableUserSelectHack"],"mappings":";;;;AAcO,MAAMA,IAAuD;AAAA,EAClEC,UAAUC;AAAAA,EACVC,eAAeD;AAAAA,EACfE,cAAcF;AAAAA,EACdG,OAAO,CAACC,QAAQC,MAAM;AAAA,EACtBC,QAAQC;AACV,GACMC,IAAsBC,gBAAAA,EAAgB;AAAA,EAC1CC,OAAO;AAAA,IAAE,GAAGZ;AAAAA,EAAc;AAAA,EAC1Ba,MAAM;AAAA,EACNC,MAAMF,GAAO;AAAA,IAAEG,OAAAA;AAAAA,EAAM,GAAG;AACtB,UAAMC,IAAQC;AAEd,WAAO,MAAM;AACX,YAAM;AAAA,QAAEhB,UAAAA;AAAAA,QAAUE,eAAAA;AAAAA,QAAeC,cAAAA;AAAAA,QAAcC,OAAAA;AAAAA,QAAOG,QAAAA;AAAAA,QAAQ,GAAGU;AAAAA,MAAW,IAAGN,GAEzEO,IAAWC,EAAKL,GAAO,YAAY,iBAAiB,gBAAgB,OAAO;AAEjF,UAAI,OAAOV,KAAU,YAAYG,MAAW;AAC1C,eAAAa,QAAeF,GAAQ,IAAA;AAGzB,UAAIG,IAAWC,EAAoBP,CAAK,KAAK,CAAA;AAG7CM,aAAAA,IAAWA,EAASE,IAAI,CAACC,GAAOC,MAAKL,EAAAM,GAAA;AAAA,QAAA,KAAoBD;AAAAA,SAAQD,CAAAA,CAAK,EAAY;AAAA,MAGhFJ,EAAAO,GAAA;AAAA,QAAA,OAESvB;AAAAA,QAAK,QACJ;AAAA,QAAC,UACCJ;AAAAA,QAAQ,eACHE;AAAAA,QAAa,cACdC;AAAAA,QAAY,eACX;AAAA,UAAEyB,sBAAsB;AAAA,QAAO;AAAA,QAAA,UAAAR,EAAA,MAC5BF,GAAQ,CAAGG,CAAQ,CAAA;AAAA,QAAA,MAAA;AAAA,MAAA,GAAA,IAAA;AAAA;EAK7C;AACF,CAAC;"}