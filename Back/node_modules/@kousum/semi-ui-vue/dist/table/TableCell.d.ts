import { BaseProps } from '../_base/baseComponent';
import { ColumnProps, ExpandIcon } from './interface';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface TableCellProps extends BaseProps {
    record?: Record<string, any>;
    prefixCls?: string;
    index?: number;
    fixedLeft?: boolean | number;
    lastFixedLeft?: boolean;
    fixedRight?: boolean | number;
    firstFixedRight?: boolean;
    indent?: number;
    indentSize?: number;
    column?: ColumnProps;
    /**
     * Does the first column include expandIcon
     * When hideExpandedColumn is true or isSection is true
     * expandIcon is a custom icon or true
     */
    expandIcon?: ExpandIcon;
    renderExpandIcon?: (record: Record<string, any>) => VueJsxNode;
    hideExpandedColumn?: boolean;
    component?: any;
    onClick?: (record: Record<string, any>, e: MouseEvent) => void;
    onDidUpdate?: (ref: any) => void;
    isSection?: boolean;
    width?: string | number;
    height?: string | number;
    selected?: boolean;
    expanded?: boolean;
    disabled?: boolean;
    colIndex?: number;
}
export declare const vuePropsType: CombineProps<TableCellProps>;
declare const TableCell: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    record: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    fixedLeft: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    lastFixedLeft: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    fixedRight: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    firstFixedRight: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    indent: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    column: PropType<ColumnProps<any>> | {
        type: PropType<ColumnProps<any>>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<ExpandIcon> | {
        type: PropType<ExpandIcon>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<(record: Record<string, any>) => VueJsxNode> | {
        type: PropType<(record: Record<string, any>) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    component: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onDidUpdate: PropType<(ref: any) => void> | {
        type: PropType<(ref: any) => void>;
        default?: any;
        required?: false;
    };
    isSection: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    colIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    record: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    fixedLeft: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    lastFixedLeft: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    fixedRight: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    firstFixedRight: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    indent: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    column: PropType<ColumnProps<any>> | {
        type: PropType<ColumnProps<any>>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<ExpandIcon> | {
        type: PropType<ExpandIcon>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<(record: Record<string, any>) => VueJsxNode> | {
        type: PropType<(record: Record<string, any>) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    component: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onDidUpdate: PropType<(ref: any) => void> | {
        type: PropType<(ref: any) => void>;
        default?: any;
        required?: false;
    };
    isSection: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    colIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TableCell;
