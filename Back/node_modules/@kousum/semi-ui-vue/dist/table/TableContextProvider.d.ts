import { PropType } from 'vue';
import { TableContextProps } from './table-context';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<TableContextProps>;
declare const TableContextProvider: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    anyColumnFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    flattenedColumns: PropType<import("./interface").ColumnProps<any>[]> | {
        type: PropType<import("./interface").ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    tableWidth: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    headWidths: PropType<import("@douyinfe/semi-foundation/lib/es/table/foundation").BaseHeadWidth[][]> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/table/foundation").BaseHeadWidth[][]>;
        default?: any;
        required?: false;
    };
    setHeadWidths: PropType<(headWidth?: import("@douyinfe/semi-foundation/lib/es/table/foundation").BaseHeadWidth[], index?: number) => void> | {
        type: PropType<(headWidth?: import("@douyinfe/semi-foundation/lib/es/table/foundation").BaseHeadWidth[], index?: number) => void>;
        default?: any;
        required?: false;
    };
    getHeadWidths: PropType<(index?: number) => number[]> | {
        type: PropType<(index?: number) => number[]>;
        default?: any;
        required?: false;
    };
    getCellWidths: PropType<(flattenColumns: import("./interface").ColumnProps[], flattenedWidths?: number[], ignoreScrollBarKey?: boolean) => number[]> | {
        type: PropType<(flattenColumns: import("./interface").ColumnProps[], flattenedWidths?: number[], ignoreScrollBarKey?: boolean) => number[]>;
        default?: any;
        required?: false;
    };
    handleRowExpanded: PropType<(expanded: boolean, realKey: import("./interface").RowKey<any>, domEvent: MouseEvent) => void> | {
        type: PropType<(expanded: boolean, realKey: import("./interface").RowKey<any>, domEvent: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<(record: Record<string, any>, isNested?: boolean, groupKey?: string | number) => import("../interface").VueJsxNode> | {
        type: PropType<(record: Record<string, any>, isNested?: boolean, groupKey?: string | number) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSelection: PropType<(record?: Record<string, any>, isHeader?: boolean) => import("../interface").VueJsxNode> | {
        type: PropType<(record?: Record<string, any>, isHeader?: boolean) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    getVirtualizedListRef: PropType<import("./interface").GetVirtualizedListRef> | {
        type: PropType<import("./interface").GetVirtualizedListRef>;
        default?: any;
        required?: false;
    };
    setBodyHasScrollbar: PropType<(bodyHasScrollBar: boolean) => void> | {
        type: PropType<(bodyHasScrollBar: boolean) => void>;
        default?: any;
        required?: false;
    };
    direction: PropType<"ltr" | "rtl"> | {
        type: PropType<"ltr" | "rtl">;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    anyColumnFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    flattenedColumns: PropType<import("./interface").ColumnProps<any>[]> | {
        type: PropType<import("./interface").ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    tableWidth: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    headWidths: PropType<import("@douyinfe/semi-foundation/lib/es/table/foundation").BaseHeadWidth[][]> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/table/foundation").BaseHeadWidth[][]>;
        default?: any;
        required?: false;
    };
    setHeadWidths: PropType<(headWidth?: import("@douyinfe/semi-foundation/lib/es/table/foundation").BaseHeadWidth[], index?: number) => void> | {
        type: PropType<(headWidth?: import("@douyinfe/semi-foundation/lib/es/table/foundation").BaseHeadWidth[], index?: number) => void>;
        default?: any;
        required?: false;
    };
    getHeadWidths: PropType<(index?: number) => number[]> | {
        type: PropType<(index?: number) => number[]>;
        default?: any;
        required?: false;
    };
    getCellWidths: PropType<(flattenColumns: import("./interface").ColumnProps[], flattenedWidths?: number[], ignoreScrollBarKey?: boolean) => number[]> | {
        type: PropType<(flattenColumns: import("./interface").ColumnProps[], flattenedWidths?: number[], ignoreScrollBarKey?: boolean) => number[]>;
        default?: any;
        required?: false;
    };
    handleRowExpanded: PropType<(expanded: boolean, realKey: import("./interface").RowKey<any>, domEvent: MouseEvent) => void> | {
        type: PropType<(expanded: boolean, realKey: import("./interface").RowKey<any>, domEvent: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<(record: Record<string, any>, isNested?: boolean, groupKey?: string | number) => import("../interface").VueJsxNode> | {
        type: PropType<(record: Record<string, any>, isNested?: boolean, groupKey?: string | number) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSelection: PropType<(record?: Record<string, any>, isHeader?: boolean) => import("../interface").VueJsxNode> | {
        type: PropType<(record?: Record<string, any>, isHeader?: boolean) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    getVirtualizedListRef: PropType<import("./interface").GetVirtualizedListRef> | {
        type: PropType<import("./interface").GetVirtualizedListRef>;
        default?: any;
        required?: false;
    };
    setBodyHasScrollbar: PropType<(bodyHasScrollBar: boolean) => void> | {
        type: PropType<(bodyHasScrollBar: boolean) => void>;
        default?: any;
        required?: false;
    };
    direction: PropType<"ltr" | "rtl"> | {
        type: PropType<"ltr" | "rtl">;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TableContextProvider;
