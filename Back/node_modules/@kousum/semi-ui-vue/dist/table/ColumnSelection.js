import { defineComponent as h, useSlots as P, reactive as x, createVNode as l, mergeProps as T } from "vue";
import k from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as y } from "../PropTypes";
import { noop as S } from "lodash";
import { cssClasses as v } from '@douyinfe/semi-foundation/lib/es/table/constants';
import w from '@douyinfe/semi-foundation/lib/es/table/tableSelectionCellFoundation';
import { Checkbox as N } from "../checkbox";
import { useBaseComponent as F } from "../_base/baseComponent";
const I = {
  columnTitle: e.string,
  getCheckboxProps: e.func,
  type: e.string,
  onChange: e.func,
  selected: e.bool,
  disabled: e.bool,
  indeterminate: e.bool,
  prefixCls: e.string,
  className: e.string,
  "aria-label": e.string
}, $ = {
  disabled: !1,
  onChange: S,
  prefixCls: v.PREFIX
}, j = y(I, $), q = /* @__PURE__ */ h({
  props: {
    ...j
  },
  name: "TableSelectionCell",
  setup(t, {}) {
    P();
    const i = x({}), {
      adapter: c
    } = F(t, i);
    function p() {
      return {
        ...c(),
        notifyChange: (...o) => t.onChange(...o)
      };
    }
    const m = p(), d = new w(m), f = (o) => d.handleChange(o);
    return () => {
      const {
        selected: o,
        getCheckboxProps: a,
        indeterminate: C,
        disabled: s,
        prefixCls: r,
        className: b
      } = t, u = t["aria-label"];
      let n = {
        onChange: f,
        disabled: s,
        indeterminate: C,
        checked: o
      };
      typeof a == "function" && (n = {
        ...n,
        ...a()
      });
      const g = k(`${r}-selection-wrap`, {
        [`${r}-selection-disabled`]: s
      }, b);
      return l("span", {
        class: g
      }, [l(N, T({
        "aria-label": u
      }, n), null)]);
    };
  }
});
export {
  q as default,
  j as vuePropsType
};
//# sourceMappingURL=ColumnSelection.js.map
