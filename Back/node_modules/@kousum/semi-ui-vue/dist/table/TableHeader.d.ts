import { BaseProps } from '../_base/baseComponent';
import { PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
import type { Fixed, TableComponents, OnHeaderRow, ColumnProps } from './interface';
export interface TableHeaderProps extends BaseProps {
    columns?: any[];
    components?: TableComponents;
    fixed?: Fixed;
    forwardedRef?: any;
    onDidUpdate?: (ref: any) => void;
    onHeaderRow?: OnHeaderRow<any>;
    prefixCls?: string;
    selectedRowKeysSet: Set<any>;
    columnManager?: any;
}
export declare const vuePropsType: CombineProps<TableHeaderProps>;
declare const TableHeader: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    columns: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    forwardedRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onDidUpdate: PropType<(ref: any) => void> | {
        type: PropType<(ref: any) => void>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<OnHeaderRow<any>> | {
        type: PropType<OnHeaderRow<any>>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    selectedRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
    columnManager: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    columns: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    forwardedRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onDidUpdate: PropType<(ref: any) => void> | {
        type: PropType<(ref: any) => void>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<OnHeaderRow<any>> | {
        type: PropType<OnHeaderRow<any>>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    selectedRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
    columnManager: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TableHeader;
export interface TableHeaderCell {
    key: string | number;
    className: string;
    children: VueJsxNode;
    column: ColumnProps;
    colStart: number;
    level: number;
    parents: any[];
    hasSubColumns?: boolean;
    rowSpan?: number;
    colSpan?: number;
    colEnd?: number;
    title?: string;
}
