import { defineComponent as d, useSlots as u, createVNode as e, Fragment as c } from "vue";
import { Resizable as h } from "@kousum/vue-resizable";
import { omit as S } from "lodash";
import { getFragmentChildren as f } from "../_utils";
const b = {
  onResize: Function,
  onResizeStart: Function,
  onResizeStop: Function,
  width: [Number, String],
  resize: Boolean
}, y = /* @__PURE__ */ d({
  props: {
    ...b
  },
  name: "ResizableHeaderCell",
  setup(r, {
    attrs: s
  }) {
    const i = u();
    return () => {
      const {
        onResize: a,
        onResizeStart: l,
        onResizeStop: p,
        width: o,
        resize: m,
        ...g
      } = r, n = S(s, "onResize", "onResizeStart", "onResizeStop", "width");
      if (typeof o != "number" || m === !1)
        return e("th", n, null);
      let t = f(i) || [];
      return t = t.map((z, R) => e(c, {
        key: R
      }, [z])), // @ts-ignore
      e(h, {
        width: o,
        height: 0,
        onResize: a,
        onResizeStart: l,
        onResizeStop: p,
        draggableOpts: {
          enableUserSelectHack: !1
        },
        children: e("th", n, [t]),
        axis: "x"
      }, null);
    };
  }
});
export {
  y as default,
  b as vuePropsType
};
//# sourceMappingURL=ResizableHeaderCell.js.map
