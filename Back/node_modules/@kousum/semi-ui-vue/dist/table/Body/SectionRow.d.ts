import Store from '@douyinfe/semi-foundation/lib/es/utils/Store';
import { ColumnProps, RenderGroupSection, OnGroupedRow, TableComponents, Virtualized, RowKey } from '../interface';
import { CombineProps, VueJsxNode } from '../../interface';
import { CSSProperties, PropType } from 'vue';
export interface SectionRowProps {
    record?: Record<string, any>;
    index?: number;
    columns?: ColumnProps[];
    group?: (string | number)[];
    groupKey: string | number;
    data?: Record<string, any>[];
    renderGroupSection?: RenderGroupSection;
    onGroupedRow?: OnGroupedRow<Record<string, any>>;
    clickGroupedRowToExpand?: boolean;
    components?: TableComponents;
    expanded?: boolean;
    prefixCls?: string;
    onExpand?: (willExpanded: boolean, groupKey: number | string, e: MouseEvent) => void;
    virtualized?: Virtualized;
    style?: CSSProperties;
    renderExpandIcon?: (record: Record<string, any>, isNested: boolean, groupKey: string | number) => VueJsxNode | null;
    className?: string;
    store?: Store;
    rowKey?: RowKey<any>;
}
/**
 * Grouping component title row
 */
declare const propTypes: CombineProps<SectionRowProps>;
export { propTypes as SectionRowPropTypes };
export declare const vuePropsType: CombineProps<SectionRowProps>;
declare const SectionRow: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    record: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    group: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    groupKey: {
        type: PropType<string | number>;
        default?: any;
        required: true;
    };
    data: PropType<Record<string, any>[]> | {
        type: PropType<Record<string, any>[]>;
        default?: any;
        required?: false;
    };
    renderGroupSection: PropType<RenderGroupSection> | {
        type: PropType<RenderGroupSection>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<OnGroupedRow<Record<string, any>>> | {
        type: PropType<OnGroupedRow<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    clickGroupedRowToExpand: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<(willExpanded: boolean, groupKey: number | string, e: MouseEvent) => void> | {
        type: PropType<(willExpanded: boolean, groupKey: number | string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<Virtualized> | {
        type: PropType<Virtualized>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<(record: Record<string, any>, isNested: boolean, groupKey: string | number) => VueJsxNode | null> | {
        type: PropType<(record: Record<string, any>, isNested: boolean, groupKey: string | number) => VueJsxNode | null>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    store: PropType<Store<Record<string, any>>> | {
        type: PropType<Store<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<RowKey<any>> | {
        type: PropType<RowKey<any>>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    record: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    group: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    groupKey: {
        type: PropType<string | number>;
        default?: any;
        required: true;
    };
    data: PropType<Record<string, any>[]> | {
        type: PropType<Record<string, any>[]>;
        default?: any;
        required?: false;
    };
    renderGroupSection: PropType<RenderGroupSection> | {
        type: PropType<RenderGroupSection>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<OnGroupedRow<Record<string, any>>> | {
        type: PropType<OnGroupedRow<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    clickGroupedRowToExpand: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<(willExpanded: boolean, groupKey: number | string, e: MouseEvent) => void> | {
        type: PropType<(willExpanded: boolean, groupKey: number | string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<Virtualized> | {
        type: PropType<Virtualized>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<(record: Record<string, any>, isNested: boolean, groupKey: string | number) => VueJsxNode | null> | {
        type: PropType<(record: Record<string, any>, isNested: boolean, groupKey: string | number) => VueJsxNode | null>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    store: PropType<Store<Record<string, any>>> | {
        type: PropType<Store<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<RowKey<any>> | {
        type: PropType<RowKey<any>>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default SectionRow;
