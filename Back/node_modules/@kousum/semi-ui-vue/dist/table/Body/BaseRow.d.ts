import Store from '@douyinfe/semi-foundation/lib/es/utils/Store';
import { BaseRowKeyType } from '@douyinfe/semi-foundation/lib/es/table/foundation';
import { ColumnProps, Fixed, TableComponents, Virtualized, ExpandIcon, OnRow, RowExpandable } from '../interface';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../../interface';
export interface BaseRowProps {
    anyColumnFixed?: boolean;
    cellWidths?: number[];
    className?: string;
    columns: ColumnProps[];
    components?: TableComponents;
    disabled?: boolean;
    expandIcon?: ExpandIcon;
    expandableRow?: boolean;
    expanded?: boolean;
    expandedRow?: boolean;
    fixed?: Fixed;
    height?: string | number;
    hideExpandedColumn?: boolean;
    hovered?: boolean;
    indent?: number;
    indentSize?: number;
    index?: number;
    isSection?: boolean;
    level?: number;
    onDidUpdate?: (ref: any) => void;
    onHover?: (mouseEnter: boolean, rowKey: string | number) => void;
    onRow?: OnRow<any>;
    onRowClick?: (rowKey: BaseRowKeyType, e: MouseEvent, expand: boolean) => void;
    onRowContextMenu?: (record: Record<string, any>, e: MouseEvent) => void;
    onRowDoubleClick?: (record: Record<string, any>, e: MouseEvent) => void;
    onRowMouseEnter?: (record: Record<string, any>, e: MouseEvent) => void;
    onRowMouseLeave?: (record: Record<string, any>, e: MouseEvent) => void;
    prefixCls?: string;
    record?: Record<string, any>;
    renderExpandIcon?: RenderExpandIcon;
    replaceClassName?: string;
    rowExpandable?: RowExpandable<any>;
    rowKey?: string | number;
    selected?: boolean;
    store?: Store;
    style?: CSSProperties;
    virtualized?: Virtualized;
    visible?: boolean;
    /** whether display none */
    displayNone?: boolean;
}
declare const propTypes: CombineProps<BaseRowProps>;
export { propTypes as BaseRowPropTypes };
export declare const vuePropsType: CombineProps<BaseRowProps>;
declare const TableRow: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    anyColumnFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    cellWidths: PropType<number[]> | {
        type: PropType<number[]>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    columns: {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required: true;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<ExpandIcon> | {
        type: PropType<ExpandIcon>;
        default?: any;
        required?: false;
    };
    expandableRow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandedRow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hovered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    indent: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    isSection: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    level: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onDidUpdate: PropType<(ref: any) => void> | {
        type: PropType<(ref: any) => void>;
        default?: any;
        required?: false;
    };
    onHover: PropType<(mouseEnter: boolean, rowKey: string | number) => void> | {
        type: PropType<(mouseEnter: boolean, rowKey: string | number) => void>;
        default?: any;
        required?: false;
    };
    onRow: PropType<OnRow<any>> | {
        type: PropType<OnRow<any>>;
        default?: any;
        required?: false;
    };
    onRowClick: PropType<(rowKey: BaseRowKeyType, e: MouseEvent, expand: boolean) => void> | {
        type: PropType<(rowKey: BaseRowKeyType, e: MouseEvent, expand: boolean) => void>;
        default?: any;
        required?: false;
    };
    onRowContextMenu: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRowDoubleClick: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRowMouseEnter: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRowMouseLeave: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    record: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<RenderExpandIcon> | {
        type: PropType<RenderExpandIcon>;
        default?: any;
        required?: false;
    };
    replaceClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rowExpandable: PropType<RowExpandable<any>> | {
        type: PropType<RowExpandable<any>>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    store: PropType<Store<Record<string, any>>> | {
        type: PropType<Store<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<Virtualized> | {
        type: PropType<Virtualized>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    displayNone: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    anyColumnFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    cellWidths: PropType<number[]> | {
        type: PropType<number[]>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    columns: {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required: true;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<ExpandIcon> | {
        type: PropType<ExpandIcon>;
        default?: any;
        required?: false;
    };
    expandableRow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandedRow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hovered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    indent: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    isSection: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    level: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onDidUpdate: PropType<(ref: any) => void> | {
        type: PropType<(ref: any) => void>;
        default?: any;
        required?: false;
    };
    onHover: PropType<(mouseEnter: boolean, rowKey: string | number) => void> | {
        type: PropType<(mouseEnter: boolean, rowKey: string | number) => void>;
        default?: any;
        required?: false;
    };
    onRow: PropType<OnRow<any>> | {
        type: PropType<OnRow<any>>;
        default?: any;
        required?: false;
    };
    onRowClick: PropType<(rowKey: BaseRowKeyType, e: MouseEvent, expand: boolean) => void> | {
        type: PropType<(rowKey: BaseRowKeyType, e: MouseEvent, expand: boolean) => void>;
        default?: any;
        required?: false;
    };
    onRowContextMenu: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRowDoubleClick: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRowMouseEnter: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRowMouseLeave: PropType<(record: Record<string, any>, e: MouseEvent) => void> | {
        type: PropType<(record: Record<string, any>, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    record: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<RenderExpandIcon> | {
        type: PropType<RenderExpandIcon>;
        default?: any;
        required?: false;
    };
    replaceClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rowExpandable: PropType<RowExpandable<any>> | {
        type: PropType<RowExpandable<any>>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    store: PropType<Store<Record<string, any>>> | {
        type: PropType<Store<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<Virtualized> | {
        type: PropType<Virtualized>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    displayNone: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TableRow;
export type RenderExpandIcon = (record: Record<string, any>, isNested: boolean) => VueJsxNode | null;
