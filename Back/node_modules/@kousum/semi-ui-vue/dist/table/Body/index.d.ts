import { FlattenData, GroupFlattenData } from '@douyinfe/semi-foundation/lib/es/table/bodyFoundation';
import Store from '@douyinfe/semi-foundation/lib/es/utils/Store';
import { BaseProps } from '../../_base/baseComponent';
import type { ExpandedRowRender, Virtualized, GetVirtualizedListRef, ColumnProps, Size, BodyScrollEvent, Scroll, Fixed, TableComponents, RowExpandable, VirtualizedOnScroll, RowKey } from '../interface';
import { CombineProps, VueJsxNode } from '../../interface';
import { CSSProperties, PropType } from 'vue';
export interface BodyProps extends BaseProps {
    tableLayout?: 'fixed' | 'auto';
    anyColumnFixed?: boolean;
    columns?: ColumnProps[];
    dataSource?: Record<string, any>[];
    disabledRowKeysSet: Set<any>;
    emptySlot?: VueJsxNode;
    expandedRowKeys?: (string | number)[];
    expandedRowRender?: ExpandedRowRender<Record<string, any>>;
    fixed?: Fixed;
    forwardedRef?: any;
    handleBodyScroll?: (e: BodyScrollEvent) => void;
    handleWheel?: (e: WheelEvent) => void;
    includeHeader?: boolean;
    prefixCls?: string;
    scroll?: Scroll;
    selectedRowKeysSet: Set<any>;
    showHeader?: boolean;
    size?: Size;
    virtualized?: Virtualized;
    components?: TableComponents;
    store: Store;
    groups?: Map<string, Record<string, any>[]>[];
    rowKey?: RowKey<Record<string, any>>;
    childrenRecordName?: string;
    rowExpandable?: RowExpandable<Record<string, any>>;
    renderExpandIcon: (record: Record<string, any>, isNested: boolean) => VueJsxNode | null;
    headerRef?: any;
    onScroll?: VirtualizedOnScroll;
    keepDOM?: boolean;
    bodyWrapperRef?: any;
    expandRowByClick?: boolean;
    tableWidth?: number;
    expandIcon?: any;
    expandCellFixed?: any;
    title?: string;
    indentSize?: any;
    defaultExpandAllRows?: any;
    expandAllRows?: any;
    defaultExpandAllGroupRows?: any;
    expandAllGroupRows?: any;
    defaultExpandedRowKeys?: any;
    footer?: any;
    empty?: any;
    groupBy?: any;
    renderGroupSection?: any;
    clickGroupedRowToExpand?: any;
    dropdownPrefixCls?: any;
    cachedColumns?: any;
    cachedChildren?: any;
    flattenColumns?: any;
    queries?: any;
    flattenData?: any;
    pagination?: any;
    allRowKeys?: any;
    disabledRowKeys?: any;
    bodyHasScrollBar?: any;
    prePropRowSelection?: any;
    prePagination?: any;
    hideExpandedColumn?: any;
    filteredColumns?: any;
    useFixedHeader?: any;
    bodyRef?: any;
    onExpandedRowsChange?: any;
    onExpand?: any;
    onChange?: any;
    onRow?: any;
    onGroupedRow?: any;
}
export interface BodyState {
    virtualizedData?: Array<FlattenData | GroupFlattenData>;
    cache?: {
        virtualizedScrollTop?: number;
        virtualizedScrollLeft?: number;
    };
    cachedExpandBtnShouldInRow?: boolean;
    cachedExpandRelatedProps?: any[];
}
export interface BodyContext {
    getVirtualizedListRef: GetVirtualizedListRef;
    flattenedColumns: ColumnProps[];
    getCellWidths: (flattenedColumns: ColumnProps[]) => number[];
}
declare const propTypes: CombineProps<BodyProps>;
export { propTypes as BodyPropTypes };
export declare const vuePropsType: CombineProps<BodyProps>;
declare const Body: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    tableLayout: PropType<"fixed" | "auto"> | {
        type: PropType<"fixed" | "auto">;
        default?: any;
        required?: false;
    };
    anyColumnFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<Record<string, any>[]> | {
        type: PropType<Record<string, any>[]>;
        default?: any;
        required?: false;
    };
    disabledRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
    emptySlot: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    expandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandedRowRender: PropType<ExpandedRowRender<Record<string, any>>> | {
        type: PropType<ExpandedRowRender<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    forwardedRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    handleBodyScroll: PropType<(e: BodyScrollEvent) => void> | {
        type: PropType<(e: BodyScrollEvent) => void>;
        default?: any;
        required?: false;
    };
    handleWheel: PropType<(e: WheelEvent) => void> | {
        type: PropType<(e: WheelEvent) => void>;
        default?: any;
        required?: false;
    };
    includeHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    scroll: PropType<Scroll> | {
        type: PropType<Scroll>;
        default?: any;
        required?: false;
    };
    selectedRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
    showHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "middle"> | {
        type: PropType<"small" | "default" | "middle">;
        default?: any;
        required?: false;
    };
    virtualized: PropType<Virtualized> | {
        type: PropType<Virtualized>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    store: {
        type: PropType<Store<Record<string, any>>>;
        default?: any;
        required: true;
    };
    groups: PropType<Map<string, Record<string, any>[]>[]> | {
        type: PropType<Map<string, Record<string, any>[]>[]>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<RowKey<Record<string, any>>> | {
        type: PropType<RowKey<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    childrenRecordName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rowExpandable: PropType<RowExpandable<Record<string, any>>> | {
        type: PropType<RowExpandable<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: {
        type: PropType<(record: Record<string, any>, isNested: boolean) => VueJsxNode | null>;
        default?: any;
        required: true;
    };
    headerRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onScroll: PropType<VirtualizedOnScroll> | {
        type: PropType<VirtualizedOnScroll>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    bodyWrapperRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expandRowByClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    tableWidth: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expandCellFixed: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    title: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    defaultExpandAllRows: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expandAllRows: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    defaultExpandAllGroupRows: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expandAllGroupRows: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    defaultExpandedRowKeys: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    footer: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    empty: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    groupBy: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    renderGroupSection: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    clickGroupedRowToExpand: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    dropdownPrefixCls: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    cachedColumns: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    cachedChildren: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    flattenColumns: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    queries: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    flattenData: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    pagination: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    allRowKeys: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    disabledRowKeys: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    bodyHasScrollBar: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    prePropRowSelection: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    prePagination: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    filteredColumns: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    useFixedHeader: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    bodyRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onExpandedRowsChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onRow: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    tableLayout: PropType<"fixed" | "auto"> | {
        type: PropType<"fixed" | "auto">;
        default?: any;
        required?: false;
    };
    anyColumnFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<Record<string, any>[]> | {
        type: PropType<Record<string, any>[]>;
        default?: any;
        required?: false;
    };
    disabledRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
    emptySlot: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    expandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandedRowRender: PropType<ExpandedRowRender<Record<string, any>>> | {
        type: PropType<ExpandedRowRender<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    forwardedRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    handleBodyScroll: PropType<(e: BodyScrollEvent) => void> | {
        type: PropType<(e: BodyScrollEvent) => void>;
        default?: any;
        required?: false;
    };
    handleWheel: PropType<(e: WheelEvent) => void> | {
        type: PropType<(e: WheelEvent) => void>;
        default?: any;
        required?: false;
    };
    includeHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    scroll: PropType<Scroll> | {
        type: PropType<Scroll>;
        default?: any;
        required?: false;
    };
    selectedRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
    showHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "middle"> | {
        type: PropType<"small" | "default" | "middle">;
        default?: any;
        required?: false;
    };
    virtualized: PropType<Virtualized> | {
        type: PropType<Virtualized>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    store: {
        type: PropType<Store<Record<string, any>>>;
        default?: any;
        required: true;
    };
    groups: PropType<Map<string, Record<string, any>[]>[]> | {
        type: PropType<Map<string, Record<string, any>[]>[]>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<RowKey<Record<string, any>>> | {
        type: PropType<RowKey<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    childrenRecordName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rowExpandable: PropType<RowExpandable<Record<string, any>>> | {
        type: PropType<RowExpandable<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: {
        type: PropType<(record: Record<string, any>, isNested: boolean) => VueJsxNode | null>;
        default?: any;
        required: true;
    };
    headerRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onScroll: PropType<VirtualizedOnScroll> | {
        type: PropType<VirtualizedOnScroll>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    bodyWrapperRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expandRowByClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    tableWidth: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expandCellFixed: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    title: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    defaultExpandAllRows: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expandAllRows: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    defaultExpandAllGroupRows: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expandAllGroupRows: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    defaultExpandedRowKeys: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    footer: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    empty: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    groupBy: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    renderGroupSection: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    clickGroupedRowToExpand: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    dropdownPrefixCls: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    cachedColumns: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    cachedChildren: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    flattenColumns: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    queries: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    flattenData: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    pagination: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    allRowKeys: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    disabledRowKeys: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    bodyHasScrollBar: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    prePropRowSelection: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    prePagination: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    filteredColumns: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    useFixedHeader: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    bodyRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onExpandedRowsChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onRow: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Body;
export interface RenderExpandedRowProps {
    style?: CSSProperties;
    components?: TableComponents;
    renderExpandIcon: (record?: Record<string, any>, isNested?: boolean) => VueJsxNode | null;
    expandedRowRender?: ExpandedRowRender<Record<string, any>>;
    record?: Record<string, any>;
    columns?: ColumnProps[];
    expanded?: boolean;
    index?: number;
    rowKey?: RowKey<Record<string, any>>;
    virtualized?: Virtualized;
    level?: number;
    keepDOM?: boolean;
    displayNone?: boolean;
}
export interface RenderSectionRowProps {
    dataSource?: Record<string, any>[];
    columns?: ColumnProps[];
    rowKey?: RowKey<Record<string, any>>;
    group?: any;
    groupKey: string | number;
    index?: number;
    expanded?: boolean;
}
