import { defineComponent as I, useSlots as k, isVNode as A, createVNode as m } from "vue";
import * as e from "../../PropTypes";
import { vuePropsMake as F } from "../../PropTypes";
import u from "classnames";
import { isNull as K, get as $, set as r } from "lodash";
import { cssClasses as M, strings as V } from '@douyinfe/semi-foundation/lib/es/table/constants';
import { arrayAdd as _, filterColumns as q } from '@douyinfe/semi-foundation/lib/es/table/utils';
import B from "./BaseRow";
import { amendTableWidth as D } from "../utils";
import { useTableContext as L } from "../tableContext/Consumer";
import { styleNum as U } from "../../_utils";
const X = {
  cellWidths: {
    type: e.array,
    required: !0
  },
  className: e.string,
  columns: e.array,
  components: e.object,
  defaultExpandAllRows: e.bool,
  defaultExpandedRowKeys: e.array,
  expandIcon: e.oneOfType([e.object, e.node, e.func]),
  expandRowByClick: e.bool,
  expanded: e.bool,
  expandedRowKeys: e.array,
  expandedRowRender: e.func,
  indentSize: e.number,
  index: e.oneOfType([e.string, e.number]),
  onExpand: e.func,
  onExpandedRowsChange: e.func,
  prefixCls: e.string,
  record: e.object,
  renderExpandIcon: e.func,
  store: e.object,
  style: e.object,
  virtualized: e.oneOfType([e.bool, e.object]),
  displayNone: e.bool
}, G = {
  record: {},
  prefixCls: M.PREFIX
}, H = F(X, G), de = /* @__PURE__ */ I({
  props: {
    ...H
  },
  name: "TableExpandedRow",
  setup(f, {}) {
    k();
    const {
      context: y
    } = L();
    return () => {
      const {
        record: l,
        columns: s = [],
        prefixCls: d,
        className: x,
        expanded: b,
        expandedRowRender: h,
        renderExpandIcon: w,
        index: C,
        store: R,
        components: a,
        style: T,
        virtualized: p,
        indentSize: E,
        cellWidths: N,
        displayNone: g
      } = f, {
        tableWidth: j,
        anyColumnFixed: v,
        getCellWidths: O
      } = y.value, o = h(l, C, b);
      let t = null;
      const n = {};
      let i = {};
      if (K(o))
        return null;
      if (A(o))
        t = o;
      else if (o && Object.prototype.toString.call(o) === "[object Object]") {
        const {
          children: W,
          fixed: J,
          ...z
        } = o;
        t = W, i = {
          ...z
        };
      }
      $(a, "body.cell") !== V.DEFAULT_COMPONENTS.body.cell ? (p && r(n, "style.height", "100%"), r(n, "style.display", "block"), r(n, "style.width", _(N, 0, s.length))) : n.colSpan = q(s).length;
      const c = [{
        render: () => ({
          props: n,
          children: m("div", {
            class: u(`${d}-expand-inner`),
            style: {
              width: v ? U(D(j)) : void 0
            }
          }, [t])
        }),
        ...i
      }], P = u(x, `${d}-row-expand`), S = O(c);
      return m(B, {
        style: T,
        components: a,
        className: P,
        expandedRow: !0,
        renderExpandIcon: w,
        rowKey: `${l.key}-expanded-row`,
        columns: c,
        store: R,
        virtualized: p,
        indentSize: E,
        cellWidths: S,
        displayNone: g
      }, null);
    };
  }
});
export {
  de as default,
  H as vuePropsType
};
//# sourceMappingURL=ExpandedRow.js.map
