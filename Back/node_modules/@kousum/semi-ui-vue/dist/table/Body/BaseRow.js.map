{"version":3,"file":"BaseRow.js","sources":["../../../src/components/table/Body/BaseRow.tsx"],"sourcesContent":["import classnames from 'classnames';\nimport * as PropTypes from '../../PropTypes';\nimport { each, noop, get, stubTrue, omit, isEqual, pick } from 'lodash';\n\nimport { strings, cssClasses } from '@douyinfe/semi-foundation/table/constants';\nimport shallowEqualObjects from '@douyinfe/semi-foundation/utils/shallowEqualObjects';\nimport TableRowFoundation, { TableRowAdapter } from '@douyinfe/semi-foundation/table/tableRowFoundation';\nimport {\n  isLastLeftFixed,\n  arrayAdd,\n  isFixedLeft,\n  isFixedRight,\n  isScrollbarColumn,\n  isFirstFixedRight,\n  isInnerColumnKey,\n  isExpandedColumn,\n} from '@douyinfe/semi-foundation/table/utils';\nimport Store from '@douyinfe/semi-foundation/utils/Store';\nimport { BaseRowKeyType } from '@douyinfe/semi-foundation/table/foundation';\n\nimport TableCell from '../TableCell';\nimport { ColumnProps, Fixed, TableComponents, Virtualized, ExpandIcon, OnRow, RowExpandable } from '../interface';\nimport {\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  getCurrentInstance,\n  h,\n  PropType,\n  useSlots,\n} from 'vue';\nimport { vuePropsMake } from '../../PropTypes';\nimport { useBaseComponent } from '../../_base/baseComponent';\nimport { CombineProps, VueJsxNode } from '../../interface';\n\nexport interface BaseRowProps {\n  anyColumnFixed?: boolean;\n  cellWidths?: number[];\n  className?: string;\n  columns: ColumnProps[]; // required\n  components?: TableComponents; // required\n  disabled?: boolean;\n  expandIcon?: ExpandIcon;\n  expandableRow?: boolean;\n  expanded?: boolean;\n  expandedRow?: boolean;\n  fixed?: Fixed;\n  height?: string | number;\n  hideExpandedColumn?: boolean;\n  hovered?: boolean; // required\n  indent?: number;\n  indentSize?: number;\n  index?: number;\n  isSection?: boolean;\n  level?: number;\n  onDidUpdate?: (ref: any) => void;\n  onHover?: (mouseEnter: boolean, rowKey: string | number) => void;\n  onRow?: OnRow<any>;\n  onRowClick?: (rowKey: BaseRowKeyType, e: MouseEvent, expand: boolean) => void;\n  onRowContextMenu?: (record: Record<string, any>, e: MouseEvent) => void;\n  onRowDoubleClick?: (record: Record<string, any>, e: MouseEvent) => void;\n  onRowMouseEnter?: (record: Record<string, any>, e: MouseEvent) => void;\n  onRowMouseLeave?: (record: Record<string, any>, e: MouseEvent) => void;\n  prefixCls?: string;\n  record?: Record<string, any>;\n  renderExpandIcon?: RenderExpandIcon;\n  replaceClassName?: string;\n  rowExpandable?: RowExpandable<any>;\n  rowKey?: string | number; // required, this place rowKey is a real key of the row\n  selected?: boolean;\n  store?: Store;\n  style?: CSSProperties;\n  virtualized?: Virtualized;\n  visible?: boolean; // required\n  /** whether display none */\n  displayNone?: boolean;\n}\n\nconst propTypes: CombineProps<BaseRowProps> = {\n  anyColumnFixed: PropTypes.bool,\n  cellWidths: PropTypes.array,\n  className: PropTypes.string,\n  columns: {\n    type: PropTypes.array,\n    required: true\n  },\n  components: PropTypes.object,\n  disabled: PropTypes.bool,\n  expandIcon: PropTypes.oneOfType([PropTypes.bool, PropTypes.func, PropTypes.node]),\n  expandableRow: PropTypes.bool,\n  expanded: PropTypes.bool,\n  displayNone: PropTypes.bool,\n  expandedRow: PropTypes.bool,\n  fixed: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  hideExpandedColumn: PropTypes.bool,\n  hovered: PropTypes.bool,\n  indent: PropTypes.number,\n  indentSize: PropTypes.number,\n  index: PropTypes.number,\n  isSection: PropTypes.bool,\n  level: PropTypes.number,\n  onDidUpdate: PropTypes.func as PropType<BaseRowProps['onDidUpdate']>,\n  onHover: PropTypes.func as PropType<BaseRowProps['onHover']>,\n  onRow: PropTypes.func as PropType<BaseRowProps['onRow']>,\n  onRowClick: PropTypes.func as PropType<BaseRowProps['onRowClick']>,\n  onRowContextMenu: PropTypes.func as PropType<BaseRowProps['onRowContextMenu']>,\n  onRowDoubleClick: PropTypes.func as PropType<BaseRowProps['onRowDoubleClick']>,\n  onRowMouseEnter: PropTypes.func as PropType<BaseRowProps['onRowMouseEnter']>,\n  onRowMouseLeave: PropTypes.func as PropType<BaseRowProps['onRowMouseLeave']>,\n  prefixCls: PropTypes.string,\n  record: PropTypes.object,\n  renderExpandIcon: PropTypes.func as PropType<BaseRowProps['renderExpandIcon']>,\n  replaceClassName: PropTypes.string,\n  rowExpandable: PropTypes.func as PropType<BaseRowProps['rowExpandable']>,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), // real key of the row\n  selected: PropTypes.bool,\n  store: PropTypes.object,\n  style: PropTypes.object,\n  virtualized: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  visible: PropTypes.bool,\n  // data: [Array] as PropType<BaseRowProps['data']>,\n};\n\nexport { propTypes as BaseRowPropTypes };\nconst defaultProps = {\n  columns: [] as [],\n  rowExpandable: stubTrue,\n  components: {\n    body: {\n      row: 'tr',\n      cell: 'td',\n    },\n  },\n  prefixCls: cssClasses.PREFIX,\n  onRow: noop,\n  onRowClick: noop,\n  onRowDoubleClick: noop,\n  onRowMouseEnter: noop,\n  onRowMouseLeave: noop,\n  onHover: noop,\n  onDidUpdate: noop,\n  visible: true,\n  hovered: false,\n  selected: false,\n  disabled: false,\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst TableRow = defineComponent({\n  props: { ...vuePropsType },\n  name: 'TableRow',\n  setup(props, { attrs }) {\n    const slots = useSlots();\n\n    const { adapter: adapterInject } = useBaseComponent<BaseRowProps>(props, {});\n    function adapter_(): TableRowAdapter<BaseRowProps> {\n      return {\n        ...adapterInject(),\n        notifyClick: (...args) => props.onRowClick(...args),\n        notifyDoubleClick: (...args) => props.onRowDoubleClick(...args),\n        notifyMouseLeave: (...args) => {\n          props.onHover(false, props.rowKey);\n          props.onRowMouseEnter(...args);\n        },\n        notifyMouseEnter: (...args) => {\n          props.onHover(true, props.rowKey);\n          props.onRowMouseEnter(...args);\n        },\n      };\n    }\n\n    const adapter = adapter_();\n    const foundation = new TableRowFoundation(adapter);\n\n    const instance = getCurrentInstance();\n\n    // TODO\n    //组件是否需要更新，需要返回一个布尔值，返回true则更新，返回flase不更新，这是一个关键点\n    function shouldComponentUpdate(nextProps: BaseRowProps) {\n      /**\n       * Shallow comparison of incoming props to simulate PureComponent\n       * Deep comparison cellWidths\n       *\n       * 浅层对比传入的 props，模拟 PureComponent\n       * 深比较 cellWidths\n       */\n      const omitProps = ['cellWidths'];\n      const isPropsShallowEqual = shallowEqualObjects(omit(nextProps, omitProps), omit(props, omitProps));\n      if (!isPropsShallowEqual || !isEqual(pick(nextProps, omitProps), pick(props, omitProps))) {\n        return true;\n      }\n      return false;\n    }\n    // watch([()=>props], (value)=>{\n    //     if (shouldComponentUpdate(value)){\n    //         // @ts-ignore\n    //         instance.ctx?.$forceUpdate?.()\n    //         console.log(props.styleTrue)\n    //     }\n    // }, {deep: true})\n\n    // Pass true to render the tree-shaped expand button\n    const renderExpandIcon = (record: Record<string, any>) => {\n      const { renderExpandIcon } = props;\n      return renderExpandIcon(record, true);\n    };\n\n    function renderCells() {\n      const {\n        columns,\n        record,\n        index,\n        prefixCls,\n        fixed,\n        components,\n        expandableRow,\n        level,\n        expandIcon,\n        rowExpandable,\n        isSection,\n        expandedRow,\n        virtualized,\n        indentSize,\n        hideExpandedColumn,\n        cellWidths,\n        selected,\n        expanded,\n        disabled,\n        onDidUpdate,\n      } = props;\n\n      const BodyCell = get(components, 'body.cell', strings.DEFAULT_COMPONENTS.body.cell);\n\n      const cells: VueJsxNode[] = [];\n      const displayExpandedColumn = rowExpandable(record);\n\n      let firstIndex = 0;\n      // const dataColumns = getDataColumns(columns);\n\n      each(columns, (column, columnIndex) => {\n        const columnKey = get(column, 'key');\n        const expandableProps: {\n          renderExpandIcon?: (record: Record<string, any>) => VueJsxNode;\n          expandIcon?: ExpandIcon;\n          indent?: number;\n        } = {};\n\n        if (fixed !== 'right') {\n          if (isInnerColumnKey(columnKey as any)) {\n            firstIndex++;\n          }\n\n          if (expandableRow && columnIndex === firstIndex) {\n            expandableProps.renderExpandIcon = renderExpandIcon;\n            if (hideExpandedColumn || isSection) {\n              expandableProps.expandIcon = expandIcon != null ? expandIcon : true;\n            }\n          }\n\n          // Only the first data row will be indented\n          if (level != null && columnIndex === firstIndex) {\n            expandableProps.indent = level;\n            const isBool = typeof expandIcon === 'boolean';\n            const hasExpandIcon = expandIcon !== false || !isBool && expandIcon !== null;\n\n            // 如果 expandIcon 为空，不需要 indent\n            if (!expandableRow && hideExpandedColumn && hasExpandIcon) {\n              expandableProps.indent = level + 1;\n            }\n          }\n        }\n\n        if (isExpandedColumn(column) && !displayExpandedColumn) {\n          cells.push(<TableCell key={columnIndex} colIndex={columnIndex} isSection={isSection} />);\n        } else if (!isScrollbarColumn(column)) {\n          const diyProps: { width?: number } = {};\n\n          if (BodyCell !== strings.DEFAULT_COMPONENTS.body.cell && virtualized && !expandedRow) {\n            diyProps.width = get(cellWidths, columnIndex);\n          }\n          cells.push(\n            <TableCell\n              colIndex={columnIndex}\n              {...{\n                ...expandableProps,\n                ...diyProps,\n              }}\n              hideExpandedColumn={hideExpandedColumn}\n              indentSize={indentSize}\n              isSection={isSection}\n              prefixCls={`${prefixCls}`}\n              column={column}\n              key={columnIndex}\n              index={index}\n              record={record}\n              component={BodyCell}\n              fixedLeft={isFixedLeft(column) && arrayAdd(cellWidths, 0, columnIndex)}\n              lastFixedLeft={isLastLeftFixed(columns, column)}\n              fixedRight={isFixedRight(column) && arrayAdd(cellWidths, columnIndex + 1)}\n              firstFixedRight={isFirstFixedRight(columns, column)}\n              selected={selected}\n              expanded={expanded}\n              disabled={disabled}\n              onDidUpdate={onDidUpdate}\n            />\n          );\n        }\n      });\n\n      return cells;\n    }\n\n    const handleMouseEnter = (e: MouseEvent) => {\n      foundation.handleMouseEnter(e);\n\n      const customRowProps = adapter.getCache('customRowProps');\n\n      if (typeof customRowProps?.onMouseEnter === 'function') {\n        customRowProps.onMouseEnter(e);\n      }\n    };\n\n    const handleMouseLeave = (e: MouseEvent) => {\n      foundation.handleMouseLeave(e);\n\n      const customRowProps = adapter.getCache('customRowProps');\n\n      if (typeof customRowProps?.onMouseLeave === 'function') {\n        customRowProps.onMouseLeave(e);\n      }\n    };\n\n    const handleClick = (e: MouseEvent) => {\n      foundation.handleClick(e);\n\n      const customRowProps = adapter.getCache('customRowProps');\n\n      if (customRowProps && typeof customRowProps.onClick === 'function') {\n        customRowProps.onClick(e);\n      }\n    };\n\n    return () => {\n      const { style } = props;\n      const {\n        components,\n        prefixCls,\n        selected,\n        onRow,\n        index,\n        className,\n        replaceClassName,\n        record,\n        hovered,\n        expanded,\n        displayNone,\n        expandableRow,\n        level,\n        expandedRow,\n        isSection,\n        rowKey,\n      } = props;\n\n      const BodyRow = components.body.row;\n\n      const { className: customClassName, style: customStyle, ...rowProps } = onRow(record, index) || {};\n\n      adapter.setCache('customRowProps', { ...rowProps });\n\n      const baseRowStyle = { ...style, ...customStyle };\n\n      const rowCls =\n        typeof replaceClassName === 'string' && replaceClassName.length\n          ? classnames(replaceClassName, customClassName)\n          : classnames(\n              className,\n              `${prefixCls}-row`,\n              {\n                [`${prefixCls}-row-selected`]: selected,\n                [`${prefixCls}-row-expanded`]: expanded,\n                [`${prefixCls}-row-hovered`]: hovered,\n                [`${prefixCls}-row-hidden`]: displayNone,\n              },\n              customClassName\n            );\n      const ariaProps = {};\n      if (typeof index === 'number') {\n        ariaProps['aria-rowindex'] = index + 1;\n      }\n      if (expandableRow) {\n        ariaProps['aria-expanded'] = expanded;\n      }\n      // if row is expandedRow, set it's level to 2\n      if (expanded || expandedRow) {\n        ariaProps['aria-level'] = 2;\n      }\n      if (typeof level === 'number') {\n        ariaProps['aria-level'] = level + 1;\n      }\n      if (isSection) {\n        ariaProps['aria-level'] = 1;\n      }\n\n      return (\n        <BodyRow\n          role=\"row\"\n          {...ariaProps}\n          {...{\n            ...rowProps,\n            onMouseenter: handleMouseEnter,\n            onMouseleave: handleMouseLeave,\n            onClick: handleClick,\n          }}\n          style={baseRowStyle}\n          className={rowCls}\n          // used for dnd-kit sortable\n          data-row-key={rowKey}\n        >\n          {renderCells()}\n        </BodyRow>\n      );\n    };\n  },\n});\n\nexport default TableRow;\n\nexport type RenderExpandIcon = (record: Record<string, any>, isNested: boolean) => VueJsxNode | null;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","propTypes","anyColumnFixed","PropTypes","bool","cellWidths","array","className","string","columns","type","required","components","object","disabled","expandIcon","oneOfType","func","node","expandableRow","expanded","displayNone","expandedRow","fixed","height","number","hideExpandedColumn","hovered","indent","indentSize","index","isSection","level","onDidUpdate","onHover","onRow","onRowClick","onRowContextMenu","onRowDoubleClick","onRowMouseEnter","onRowMouseLeave","prefixCls","record","renderExpandIcon","replaceClassName","rowExpandable","rowKey","selected","store","style","virtualized","visible","defaultProps","stubTrue","body","row","cell","cssClasses","PREFIX","noop","vuePropsType","vuePropsMake","TableRow","defineComponent","props","name","setup","attrs","useSlots","adapter","adapterInject","useBaseComponent","adapter_","notifyClick","args","notifyDoubleClick","notifyMouseLeave","notifyMouseEnter","foundation","TableRowFoundation","getCurrentInstance","renderCells","BodyCell","get","strings","DEFAULT_COMPONENTS","cells","displayExpandedColumn","firstIndex","each","column","columnIndex","columnKey","expandableProps","isInnerColumnKey","isExpandedColumn","push","_createVNode","TableCell","isScrollbarColumn","diyProps","width","_mergeProps","isFixedLeft","arrayAdd","isLastLeftFixed","isFixedRight","isFirstFixedRight","handleMouseEnter","e","customRowProps","getCache","onMouseEnter","handleMouseLeave","onMouseLeave","handleClick","onClick","_slot","BodyRow","customClassName","customStyle","rowProps","setCache","baseRowStyle","rowCls","length","classnames","ariaProps","onMouseenter","onMouseleave","default"],"mappings":"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"}