import { defineComponent as k, useSlots as v, isVNode as G, createVNode as I } from "vue";
import * as o from "../../PropTypes";
import { vuePropsMake as K } from "../../PropTypes";
import O from "classnames";
import "lodash";
import { cssClasses as N } from '@douyinfe/semi-foundation/lib/es/table/constants';
import { filterColumns as z } from '@douyinfe/semi-foundation/lib/es/table/utils';
import W from "./BaseRow";
import { useTableContext as V } from "../tableContext/Consumer";
const q = {
  record: o.object,
  index: o.number,
  columns: o.array,
  group: o.object,
  groupKey: {
    type: o.oneOfType([o.string, o.number]),
    required: !0
  },
  data: o.array,
  renderGroupSection: o.func,
  // render group title
  onGroupedRow: o.func,
  clickGroupedRowToExpand: o.bool,
  components: o.object,
  expanded: o.bool,
  prefixCls: o.string,
  onExpand: o.func,
  virtualized: o.oneOfType([o.bool, o.object]),
  style: o.object,
  renderExpandIcon: o.func,
  // passing to baseRow
  className: o.string,
  store: o.object,
  rowKey: o.oneOfType([o.string, o.number, o.func])
}, B = {
  prefixCls: N.PREFIX,
  components: {
    body: {
      row: "tr",
      cell: "td"
    }
  }
}, F = K(q, B), L = /* @__PURE__ */ k({
  props: {
    ...F
  },
  name: "SectionRow",
  setup(u, {}) {
    v();
    const {
      context: x
    } = V(), b = (...r) => {
      const {
        onGroupedRow: e,
        clickGroupedRowToExpand: t,
        onExpand: c,
        groupKey: p,
        expanded: l
      } = u, n = {};
      return typeof e == "function" && Object.assign(n, e(...r)), {
        ...n,
        onClick: (i) => {
          typeof c == "function" && t && c(!l, p, i), typeof n.onClick == "function" && n.onClick(i);
        }
      };
    }, w = (r) => {
      const {
        renderExpandIcon: e,
        groupKey: t
      } = u;
      return typeof e == "function" ? e(r, !1, t) : null;
    };
    return () => {
      const {
        record: r,
        columns: e = [],
        prefixCls: t,
        className: c,
        expanded: p,
        renderGroupSection: l,
        components: n,
        index: i,
        store: C,
        group: g,
        groupKey: a,
        virtualized: R,
        style: j
      } = u, f = {};
      let m = {}, d = null;
      const s = typeof l == "function" ? l(a, [...g]) : null;
      if (G(s))
        d = s;
      else if (s && Object.prototype.toString.call(s) === "[object Object]") {
        const {
          children: P,
          ...h
        } = s;
        d = P, m = {
          ...h
        };
      }
      f.colSpan = z(e).length;
      const y = [{
        render: () => ({
          props: f,
          children: d
        }),
        ...m
      }], T = O(c, `${t}-row-section`, {
        on: p
      }), {
        getCellWidths: E
      } = x.value, S = E(y, null, !0);
      return I(W, {
        components: n,
        virtualized: R,
        index: i,
        onRow: b,
        expanded: p,
        expandIcon: !0,
        isSection: !0,
        record: r,
        replaceClassName: T,
        expandableRow: !0,
        renderExpandIcon: w,
        rowKey: a,
        columns: y,
        store: C,
        style: j,
        cellWidths: S
      }, null);
    };
  }
});
export {
  q as SectionRowPropTypes,
  L as default,
  F as vuePropsType
};
//# sourceMappingURL=SectionRow.js.map
