{"version":3,"file":"index.js","sources":["../../../src/components/table/Body/index.tsx"],"sourcesContent":["import * as PropTypes from '../../PropTypes';\nimport { get, size, isMap, each, isEqual, pick, isNull, isFunction, omit } from 'lodash';\nimport classnames from 'classnames';\nimport { VariableSizeList as List } from '@kousum/vue3-window';\n\nimport {\n  arrayAdd,\n  getRecordKey,\n  isExpanded,\n  isSelected,\n  isDisabled,\n  getRecord,\n  genExpandedRowKey,\n  getDefaultVirtualizedRowConfig,\n  isTreeTable,\n} from '@douyinfe/semi-foundation/table/utils';\nimport BodyFoundation, {\n  BodyAdapter,\n  FlattenData,\n  GroupFlattenData,\n} from '@douyinfe/semi-foundation/table/bodyFoundation';\nimport { strings } from '@douyinfe/semi-foundation/table/constants';\nimport Store from '@douyinfe/semi-foundation/utils/Store';\n\nimport { BaseProps, useBaseComponent } from '../../_base/baseComponent';\nimport { logger } from '../utils';\nimport ColGroup from '../ColGroup';\nimport BaseRow, { BaseRowPropTypes } from './BaseRow';\nimport ExpandedRow from './ExpandedRow';\nimport SectionRow, { SectionRowPropTypes } from './SectionRow';\n\nimport TableHeader from '../TableHeader';\nimport ConfigContext from '../../configProvider/context';\nimport TableContext, { TableContextProps } from '../table-context';\n\nimport type {\n  ExpandedRowRender,\n  Virtualized,\n  VirtualizedItemSize,\n  GetVirtualizedListRef,\n  ColumnProps,\n  Size,\n  BodyScrollEvent,\n  Scroll,\n  Fixed,\n  TableComponents,\n  RowExpandable,\n  VirtualizedOnScroll,\n  Direction,\n  RowKey,\n} from '../interface';\nimport { CombineProps, VueJsxNode } from '../../interface';\nimport {\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  Fragment,\n  FunctionalComponent,\n  h,\n  nextTick,\n  PropType,\n  reactive,\n  ref,\n  useSlots,\n  watch,\n  WatchStopHandle,\n} from 'vue';\nimport { vuePropsMake } from '../../PropTypes';\nimport { useTableContext } from '../tableContext/Consumer';\nimport { FooterProps } from '../../image/interface';\n\nexport interface BodyProps extends BaseProps {\n  tableLayout?: 'fixed' | 'auto';\n  anyColumnFixed?: boolean;\n  columns?: ColumnProps[];\n  dataSource?: Record<string, any>[];\n  disabledRowKeysSet: Set<any>; // required\n  emptySlot?: VueJsxNode;\n  expandedRowKeys?: (string | number)[];\n  expandedRowRender?: ExpandedRowRender<Record<string, any>>;\n  fixed?: Fixed;\n  forwardedRef?: any;\n  handleBodyScroll?: (e: BodyScrollEvent) => void;\n  handleWheel?: (e: WheelEvent) => void;\n  includeHeader?: boolean;\n  prefixCls?: string;\n  scroll?: Scroll;\n  selectedRowKeysSet: Set<any>; // required\n  showHeader?: boolean;\n  size?: Size;\n  virtualized?: Virtualized;\n  components?: TableComponents;\n  store: Store;\n  groups?: Map<string, Record<string, any>[]>[];\n  rowKey?: RowKey<Record<string, any>>;\n  childrenRecordName?: string;\n  rowExpandable?: RowExpandable<Record<string, any>>;\n  renderExpandIcon: (record: Record<string, any>, isNested: boolean) => VueJsxNode | null;\n  headerRef?: any;\n  onScroll?: VirtualizedOnScroll;\n  keepDOM?: boolean;\n\n  bodyWrapperRef?: any;\n\n  expandRowByClick?: boolean;\n  tableWidth?: number;\n  expandIcon?: any;\n  expandCellFixed?: any;\n  title?: string;\n  indentSize?: any;\n  defaultExpandAllRows?: any;\n  expandAllRows?: any;\n  defaultExpandAllGroupRows?: any;\n  expandAllGroupRows?: any;\n  defaultExpandedRowKeys?: any;\n  footer?: any;\n  empty?: any;\n  groupBy?: any;\n  renderGroupSection?: any;\n  clickGroupedRowToExpand?: any;\n  dropdownPrefixCls?: any;\n  cachedColumns?: any;\n  cachedChildren?: any;\n  flattenColumns?: any;\n  queries?: any;\n  flattenData?: any;\n  pagination?: any;\n  allRowKeys?: any;\n  disabledRowKeys?: any;\n  bodyHasScrollBar?: any;\n  prePropRowSelection?: any;\n  prePagination?: any;\n  hideExpandedColumn?: any;\n  filteredColumns?: any;\n  useFixedHeader?: any;\n  bodyRef?: any;\n  onExpandedRowsChange?: any;\n  onExpand?: any;\n  onChange?: any;\n  onRow?: any;\n  onGroupedRow?: any;\n}\n\nexport interface BodyState {\n  virtualizedData?: Array<FlattenData | GroupFlattenData>;\n  cache?: {\n    virtualizedScrollTop?: number;\n    virtualizedScrollLeft?: number;\n  };\n  cachedExpandBtnShouldInRow?: boolean;\n  cachedExpandRelatedProps?: any[];\n}\n\nexport interface BodyContext {\n  getVirtualizedListRef: GetVirtualizedListRef;\n  flattenedColumns: ColumnProps[];\n  getCellWidths: (flattenedColumns: ColumnProps[]) => number[];\n}\n\nconst propTypes: CombineProps<BodyProps> = {\n  anyColumnFixed: PropTypes.bool,\n  childrenRecordName: PropTypes.string,\n  columns: PropTypes.array,\n  components: PropTypes.object,\n  dataSource: PropTypes.array,\n  disabledRowKeysSet: {\n    type: PropTypes.object,\n    required: true\n  },\n  emptySlot: PropTypes.node,\n  expandRowByClick: PropTypes.bool as PropType<BodyProps['expandRowByClick']>,\n  expandedRowKeys: PropTypes.array,\n  expandedRowRender: PropTypes.func as PropType<BodyProps['expandedRowRender']>,\n  fixed: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  forwardedRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  groups: PropTypes.object,\n  handleBodyScroll: PropTypes.func as PropType<BodyProps['handleBodyScroll']>,\n  handleWheel: PropTypes.func as PropType<BodyProps['handleWheel']>,\n  headerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  includeHeader: PropTypes.bool,\n  onScroll: PropTypes.func as PropType<BodyProps['onScroll']>,\n  prefixCls: PropTypes.string,\n  renderExpandIcon: {\n    type: PropTypes.func as PropType<BodyProps['renderExpandIcon']>,\n    required: true\n  },\n  rowExpandable: PropTypes.func as PropType<BodyProps['rowExpandable']>,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  scroll: PropTypes.object,\n  selectedRowKeysSet: {\n    type: PropTypes.object,\n    required: true\n  },\n  showHeader: PropTypes.bool,\n  size: PropTypes.string as PropType<BodyProps['size']>,\n  store: {\n    type: PropTypes.object,\n    required: true\n  },\n  virtualized: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n\n  tableWidth: PropTypes.number as PropType<BodyProps['tableWidth']>,\n  tableLayout: PropTypes.any as PropType<BodyProps['tableLayout']>,\n  expandIcon: PropTypes.any as PropType<BodyProps['expandIcon']>,\n  expandCellFixed: PropTypes.any as PropType<BodyProps['expandCellFixed']>,\n  title: PropTypes.any as PropType<BodyProps['title']>,\n  indentSize: PropTypes.any as PropType<BodyProps['indentSize']>,\n  defaultExpandAllRows: PropTypes.any as PropType<BodyProps['defaultExpandAllRows']>,\n  expandAllRows: PropTypes.any as PropType<BodyProps['expandAllRows']>,\n  defaultExpandAllGroupRows: PropTypes.any as PropType<BodyProps['defaultExpandAllGroupRows']>,\n  expandAllGroupRows: PropTypes.any as PropType<BodyProps['expandAllGroupRows']>,\n  defaultExpandedRowKeys: PropTypes.any as PropType<BodyProps['defaultExpandedRowKeys']>,\n  footer: PropTypes.any as PropType<BodyProps['footer']>,\n  empty: PropTypes.any as PropType<BodyProps['empty']>,\n  groupBy: PropTypes.any as PropType<BodyProps['groupBy']>,\n  renderGroupSection: PropTypes.any as PropType<BodyProps['renderGroupSection']>,\n  clickGroupedRowToExpand: PropTypes.any as PropType<BodyProps['clickGroupedRowToExpand']>,\n  dropdownPrefixCls: PropTypes.any as PropType<BodyProps['dropdownPrefixCls']>,\n  cachedColumns: PropTypes.any as PropType<BodyProps['cachedColumns']>,\n  cachedChildren: PropTypes.any as PropType<BodyProps['cachedChildren']>,\n  flattenColumns: PropTypes.any as PropType<BodyProps['flattenColumns']>,\n  queries: PropTypes.any as PropType<BodyProps['queries']>,\n  flattenData: PropTypes.any as PropType<BodyProps['flattenData']>,\n  pagination: PropTypes.any as PropType<BodyProps['pagination']>,\n  allRowKeys: PropTypes.any as PropType<BodyProps['allRowKeys']>,\n  disabledRowKeys: PropTypes.any as PropType<BodyProps['disabledRowKeys']>,\n  bodyHasScrollBar: PropTypes.any as PropType<BodyProps['bodyHasScrollBar']>,\n  prePropRowSelection: PropTypes.any as PropType<BodyProps['prePropRowSelection']>,\n  prePagination: PropTypes.any as PropType<BodyProps['prePagination']>,\n  hideExpandedColumn: PropTypes.any as PropType<BodyProps['hideExpandedColumn']>,\n  filteredColumns: PropTypes.any as PropType<BodyProps['filteredColumns']>,\n  useFixedHeader: PropTypes.any as PropType<BodyProps['useFixedHeader']>,\n  bodyRef: PropTypes.any as PropType<BodyProps['bodyRef']>,\n  onExpandedRowsChange: PropTypes.func as PropType<BodyProps['onExpandedRowsChange']>,\n  onExpand: PropTypes.func as PropType<BodyProps['onExpand']>,\n  onChange: PropTypes.func as PropType<BodyProps['onChange']>,\n\n  onRow: PropTypes.func as PropType<BodyProps['onRow']>,\n  bodyWrapperRef: [PropTypes.func, PropTypes.object],\n  onGroupedRow: PropTypes.func as PropType<BodyProps['onGroupedRow']>,\n  keepDOM: PropTypes.bool,\n  style: PropTypes.object,\n  className: PropTypes.string\n};\nexport { propTypes as BodyPropTypes };\nexport const vuePropsType = vuePropsMake<BodyProps>(propTypes, {});\nconst Body = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Body',\n  setup(props, {}) {\n    const slots = useSlots();\n\n    const nodeRef = ref();\n    const listRef = ref();\n    let observer: ResizeObserver;\n    let cellWidths: number[];\n    let flattenedColumns: ColumnProps[];\n    const { context } = useTableContext();\n    const state = reactive<BodyState>({\n      virtualizedData: [],\n      cache: {\n        virtualizedScrollTop: null,\n        virtualizedScrollLeft: null,\n      },\n      cachedExpandBtnShouldInRow: null,\n      cachedExpandRelatedProps: [],\n    });\n\n    let one1: WatchStopHandle;\n    one1 = watch(\n      () => context.value.getVirtualizedListRef,\n      (value) => {\n        flattenedColumns = context.value.flattenedColumns as any;\n        cellWidths = context.value.getCellWidths?.(flattenedColumns);\n        one1?.();\n      },\n      { immediate: true }\n    );\n    observer = null;\n    const { adapter: adapterInject } = useBaseComponent<BodyProps>(props, {});\n    function adapter_(): BodyAdapter<BodyProps, BodyState> {\n      return {\n        ...adapterInject(),\n        setVirtualizedData: (virtualizedData, cb) => {\n          state.virtualizedData = virtualizedData;\n          nextTick(cb);\n        },\n        setCachedExpandBtnShouldInRow: (cachedExpandBtnShouldInRow) =>\n          (state.cachedExpandBtnShouldInRow = cachedExpandBtnShouldInRow),\n        setCachedExpandRelatedProps: (cachedExpandRelatedProps) =>\n          (state.cachedExpandRelatedProps = cachedExpandRelatedProps),\n        observeBodyResize: (bodyWrapDOM: HTMLDivElement) => {\n          const { setBodyHasScrollbar } = context.value;\n\n          // Callback when the size of the body dom content changes, notifying Table.jsx whether the bodyHasScrollBar exists\n          const resizeCallback = () => {\n            const update = () => {\n              const { offsetWidth, clientWidth } = bodyWrapDOM;\n              const bodyHasScrollBar = clientWidth < offsetWidth;\n              setBodyHasScrollbar(bodyHasScrollBar);\n            };\n            const requestAnimationFrame = window.requestAnimationFrame || window.setTimeout;\n            requestAnimationFrame(update);\n          };\n\n          // Monitor body dom resize\n          if (bodyWrapDOM) {\n            if (get(window, 'ResizeObserver')) {\n              if (observer) {\n                observer.unobserve(bodyWrapDOM);\n                observer = null;\n              }\n              observer = new ResizeObserver(resizeCallback);\n              observer.observe(bodyWrapDOM);\n            } else {\n              logger.warn(\n                'The current browser does not support ResizeObserver,' +\n                  'and the table may be misaligned after plugging and unplugging the mouse and keyboard.' +\n                  'You can try to refresh it.'\n              );\n            }\n          }\n        },\n        unobserveBodyResize: () => {\n          const bodyWrapDOM = nodeRef.value;\n          if (observer) {\n            observer.unobserve(bodyWrapDOM);\n            observer = null;\n          }\n        },\n      };\n    }\n    const adapter = adapter_();\n    const foundation = new BodyFoundation(adapter);\n\n    watch(\n      [\n        () => props.virtualized,\n        () => props.dataSource,\n        () => props.expandedRowKeys,\n        () => props.columns,\n        () => props.scroll,\n        () => state.cachedExpandRelatedProps,\n      ],\n      (\n        value,\n        [\n          prevPropsVirtualized,\n          prevPropsDataSource,\n          prevPropsExpandedRowKeys,\n          prevPropsColumns,\n          prevPropsScroll,\n          prevStateCachedExpandRelatedProps,\n        ]\n      ) => {\n        const { virtualized, dataSource, expandedRowKeys, columns, scroll } = props;\n\n        if (virtualized) {\n          if (\n            prevPropsDataSource !== dataSource ||\n            prevPropsExpandedRowKeys !== expandedRowKeys ||\n            prevPropsColumns !== columns\n          ) {\n            foundation.initVirtualizedData();\n          }\n        }\n\n        const expandRelatedProps = strings.EXPAND_RELATED_PROPS;\n        const newExpandRelatedProps = expandRelatedProps.map((key) => get(props, key, undefined));\n        if (prevStateCachedExpandRelatedProps && !isEqual(newExpandRelatedProps, prevStateCachedExpandRelatedProps)) {\n          foundation.initExpandBtnShouldInRow(newExpandRelatedProps);\n        }\n\n        const scrollY = get(scroll, 'y');\n        const bodyWrapDOM = nodeRef.value;\n        if (scrollY && scrollY !== prevPropsScroll?.y) {\n          foundation.observeBodyResize(bodyWrapDOM);\n        }\n      },\n      { immediate: true }\n    );\n\n    const forwardRef = (node: HTMLDivElement) => {\n      const { forwardedRef } = props;\n      nodeRef.value = node;\n      foundation.observeBodyResize(node);\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(node);\n      } else if (forwardedRef && typeof forwardedRef === 'object') {\n        forwardedRef.value = node;\n      }\n    };\n\n    const setListRef = (listInstance: any) => {\n      listRef.value = listInstance;\n      const { getVirtualizedListRef } = context.value;\n      if (getVirtualizedListRef) {\n        if (props.virtualized) {\n          getVirtualizedListRef(listRef.value);\n        } else {\n          console.warn('getVirtualizedListRef only works with virtualized. ' +\n            'See https://semi.design/en-US/show/table for more information.');\n        }\n      }\n    };\n\n    const itemSize = (index: number) => {\n      const { virtualized, size: tableSize } = props;\n      const { virtualizedData } = state;\n      const virtualizedItem = get(virtualizedData, index);\n      const defaultConfig = getDefaultVirtualizedRowConfig(tableSize, virtualizedItem.sectionRow);\n\n      const itemSize = get(virtualized, 'itemSize', defaultConfig.height) as VirtualizedItemSize;\n\n      let realSize = itemSize as number;\n\n      if (typeof itemSize === 'function') {\n        realSize = itemSize(index, {\n          expandedRow: get(virtualizedItem, 'expandedRow', false),\n          sectionRow: get(virtualizedItem, 'sectionRow', false),\n        });\n      }\n\n      if (realSize < defaultConfig.minHeight) {\n        logger.warn(`The computed real \\`itemSize\\` cannot be less than ${defaultConfig.minHeight}`);\n      }\n\n      return realSize;\n    };\n\n    const itemKey = (index: number, data: Array<FlattenData | GroupFlattenData>) => get(data, [index, 'key'], index);\n\n    const handleRowClick = (rowKey: RowKey<any>, e: MouseEvent, expand: boolean) => {\n      const { handleRowExpanded } = context.value;\n      handleRowExpanded(!expand, rowKey, e);\n    };\n\n    const handleVirtualizedScroll = (props_ = {}) => {\n      const onScroll = get(props.virtualized, 'onScroll') as BodyProps['onScroll'];\n      if (typeof onScroll === 'function') {\n        onScroll(props_);\n      }\n    };\n\n    /**\n     * @param {MouseEvent<HTMLDivElement>} e\n     */\n    const handleVirtualizedBodyScroll = (e: BodyScrollEvent) => {\n      const { handleBodyScroll } = props;\n\n      const newScrollLeft = get(e, 'nativeEvent.target.scrollLeft');\n      const newScrollTop = get(e, 'nativeEvent.target.scrollTop');\n\n      if (newScrollTop === state.cache.virtualizedScrollTop) {\n        handleVirtualizedScroll({ horizontalScrolling: true });\n      }\n\n      state.cache.virtualizedScrollLeft = newScrollLeft;\n      state.cache.virtualizedScrollTop = newScrollTop;\n\n      if (typeof handleBodyScroll === 'function') {\n        handleBodyScroll(e);\n      }\n    };\n\n    const getVirtualizedRowWidth = () => {\n      const { getCellWidths } = context.value;\n      const { columns } = props;\n      const cellWidths = getCellWidths(columns);\n      const rowWidth = arrayAdd(cellWidths, 0, size(columns));\n\n      return rowWidth;\n    };\n\n    const renderVirtualizedRow = (options: { index?: number; style?: CSSProperties; isScrolling?: boolean }) => {\n      const { index, style } = options;\n      const { virtualizedData, cachedExpandBtnShouldInRow } = state;\n      const { flattenedColumns } = context.value;\n      const virtualizedItem: any = get(virtualizedData, [index], {});\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { key, parentKeys, expandedRow, sectionRow, ...rest } = virtualizedItem;\n      const rowWidth = getVirtualizedRowWidth();\n\n      const expandBtnShouldInRow = cachedExpandBtnShouldInRow;\n\n      const props_ = {\n        ...props,\n        style: {\n          ...style,\n          width: rowWidth + 'px',\n        },\n        ...rest,\n        columns: flattenedColumns,\n        index,\n        expandBtnShouldInRow,\n      };\n      // eslint-disable-next-line no-nested-ternary\n      return sectionRow ? renderSectionRow(props_) : expandedRow ? renderExpandedRow(props_) : renderBaseRow(props_);\n    };\n\n    // virtualized List innerElementType\n    const renderTbody: FunctionalComponent<any> = (props_, { slots }) => {\n      return (\n        <div\n          {...props_}\n          onScroll={(...args) => {\n            if (props_.onScroll) {\n              props_.onScroll(...args);\n            }\n          }}\n          class={classnames(props_.className, `${props.prefixCls}-tbody`)}\n          style={{ ...props_.style }}\n        >\n          {slots?.default?.()}\n        </div>\n      );\n    };\n\n    // virtualized List outerElementType\n    const renderOuter: FunctionalComponent<any> = (props_, { slots }) => {\n      const { ...rest } = props_;\n      // eslint-disable-next-line react/no-this-in-sfc\n      const { handleWheel, prefixCls, emptySlot, dataSource } = props;\n\n      // eslint-disable-next-line react/no-this-in-sfc\n      const tableWidth = getVirtualizedRowWidth();\n      const tableCls = classnames(`${prefixCls}`, `${prefixCls}-fixed`);\n\n      return (\n        <div\n          {...rest}\n          onWheel={(...args) => {\n            if (handleWheel) {\n              handleWheel(...args);\n            }\n            if (rest.onWheel) {\n              rest.onWheel(...args);\n            }\n          }}\n          onScroll={(...args) => {\n            // eslint-disable-next-line react/no-this-in-sfc\n            handleVirtualizedBodyScroll(...args);\n            if (rest.onScroll) {\n              rest.onScroll(...args);\n            }\n          }}\n        >\n          <div style={{ width: tableWidth + 'px' }} class={tableCls}>\n            {slots.default?.()}\n          </div>\n          {size(dataSource) === 0 && emptySlot}\n        </div>\n      );\n    };\n\n    const onItemsRendered = (props: {\n      overscanStartIndex: number;\n      overscanStopIndex: number;\n      visibleStartIndex: number;\n      visibleStopIndex: number;\n    }) => {\n      if (state.cache.virtualizedScrollLeft && nodeRef.value) {\n        nodeRef.value.scrollLeft = state.cache.virtualizedScrollLeft;\n      }\n    };\n\n    const renderVirtualizedBody = (direction?: Direction) => {\n      const { scroll, prefixCls, virtualized, columns } = props;\n      const { virtualizedData } = state;\n      const { getCellWidths } = context.value;\n      const cellWidths = getCellWidths(columns);\n\n      if (!size(cellWidths)) {\n        return null;\n      }\n\n      const rawY = get(scroll, 'y');\n      const yIsNumber = typeof rawY === 'number';\n      const y = yIsNumber ? rawY : 600;\n\n      if (!yIsNumber) {\n        logger.warn('You have to specific \"scroll.y\" which must be a number for table virtualization!');\n      }\n\n      const listStyle = {\n        width: '100%',\n        height: virtualizedData?.length ? y + 'px' : null,\n        overflowX: 'auto',\n        overflowY: 'auto',\n      } as const;\n\n      const wrapCls = classnames(`${prefixCls}-body`);\n\n      return (\n        <List\n          {...(typeof virtualized === 'object' ? virtualized : {})}\n          initialScrollOffset={state.cache.virtualizedScrollTop}\n          onScroll={handleVirtualizedScroll}\n          onItemsRendered={onItemsRendered}\n          ref={setListRef}\n          className={wrapCls}\n          outerRef={forwardRef}\n          height={virtualizedData?.length ? y : 0}\n          width={listStyle.width}\n          itemData={virtualizedData}\n          itemSize={itemSize}\n          itemCount={virtualizedData.length}\n          itemKey={itemKey}\n          innerElementType={renderTbody as any}\n          outerElementType={renderOuter as any}\n          style={{ ...listStyle, direction }}\n          direction={direction}\n        >\n          {{ default: renderVirtualizedRow }}\n        </List>\n      );\n    };\n\n    /**\n     * render group title\n     * @param props_\n     */\n    const renderSectionRow = (props_: RenderSectionRowProps = { groupKey: undefined }) => {\n      const { dataSource, rowKey, group, groupKey, index } = props_;\n      const sectionRowPickKeys = Object.keys(SectionRowPropTypes);\n      const sectionRowProps: any = pick(props_, sectionRowPickKeys);\n\n      const { handleRowExpanded } = context.value;\n\n      return (\n        <SectionRow\n          {...{\n            ...sectionRowProps,\n            onExpand: handleRowExpanded,\n            record: {\n              groupKey,\n              records: [...group].map((recordKey) => getRecord(dataSource, recordKey, rowKey)),\n            },\n            index,\n            data: dataSource,\n          }}\n          key={groupKey || index}\n        />\n      );\n    };\n\n    const renderExpandedRow = (props_: RenderExpandedRowProps = { renderExpandIcon: () => null }) => {\n      const {\n        style,\n        components,\n        renderExpandIcon,\n        expandedRowRender,\n        record,\n        columns,\n        expanded,\n        index,\n        rowKey,\n        virtualized,\n        displayNone,\n      } = props_;\n      let key = getRecordKey(record, rowKey);\n\n      if (key == null) {\n        key = index;\n      }\n\n      const { getCellWidths } = context.value;\n\n      // we use memoized cellWidths to avoid re-render expanded row (fix #686)\n      if (flattenedColumns !== (context.value.flattenedColumns as any)) {\n        flattenedColumns = context.value.flattenedColumns as any;\n        cellWidths = getCellWidths(flattenedColumns);\n      }\n\n      return (\n        <ExpandedRow\n          style={style}\n          components={components}\n          renderExpandIcon={renderExpandIcon}\n          expandedRowRender={expandedRowRender}\n          record={record}\n          columns={columns}\n          expanded={expanded}\n          index={index}\n          virtualized={virtualized}\n          key={genExpandedRowKey(key)}\n          cellWidths={cellWidths}\n          displayNone={displayNone}\n        />\n      );\n    };\n\n    /**\n     * render base row\n     * @param {*} props\n     * @returns\n     */\n    function renderBaseRow(props: any = {}) {\n      // console.log(ctx)\n      const {\n        rowKey,\n        columns,\n        expandedRowKeys,\n        rowExpandable,\n        record,\n        index,\n        level,\n        expandBtnShouldInRow, // effect the display of the indent span\n        selectedRowKeysSet,\n        disabledRowKeysSet,\n        expandRowByClick,\n      } = props;\n\n      const baseRowPickKeys = Object.keys(BaseRowPropTypes);\n      const baseRowProps: Record<string, any> = pick(props, baseRowPickKeys);\n\n      let key = getRecordKey(record, rowKey);\n\n      if (key == null) {\n        key = index;\n      }\n\n      const expanded = isExpanded(expandedRowKeys, key);\n      const expandable = rowExpandable && rowExpandable(record);\n\n      const expandableProps: {\n        level?: number;\n        expanded?: boolean;\n        expandableRow?: boolean;\n        onRowClick?: (...args: any[]) => void;\n      } = {\n        level: undefined,\n        expanded,\n      };\n\n      if (expandable || expandBtnShouldInRow) {\n        expandableProps.level = level;\n        expandableProps.expandableRow = expandable;\n        if (expandRowByClick) {\n          expandableProps.onRowClick = handleRowClick;\n        }\n      }\n\n      const selectionProps = {\n        selected: isSelected(selectedRowKeysSet, key),\n        disabled: isDisabled(disabledRowKeysSet, key),\n      };\n\n      const { getCellWidths } = context.value;\n      const cellWidths = getCellWidths(columns, null, true);\n      return (\n        // 这里必须加Fragment，不然BaseRow会传入一个默认的props，来历不明？\n        <Fragment>\n          {/*// @ts-ignore*/}\n          <BaseRow\n            {...{\n              ...baseRowProps,\n              ...expandableProps,\n              ...selectionProps,\n              key,\n              rowKey: key,\n              cellWidths: cellWidths,\n            }}\n          />\n        </Fragment>\n      );\n    }\n\n    /**\n     * render grouped rows\n     * @returns {VueJsxNode[]} renderedRows\n     */\n    const renderGroupedRows = () => {\n      const { groups, dataSource: data, rowKey, expandedRowKeys, keepDOM } = props;\n      const { flattenedColumns } = context.value;\n      const groupsInData = new Map();\n      const renderedRows: VueJsxNode[] = [];\n\n      if (groups != null && Array.isArray(data) && data.length) {\n        data.forEach((record) => {\n          const recordKey = getRecordKey(record, rowKey);\n\n          groups.forEach((group: Map<string, Record<string, any>[]>, key: number) => {\n            if (group.has(recordKey)) {\n              if (!groupsInData.has(key)) {\n                groupsInData.set(key, new Set([]));\n              }\n              groupsInData.get(key).add(recordKey);\n              return false;\n            }\n            return undefined;\n          });\n        });\n      }\n\n      let index = -1;\n      groupsInData.forEach((group, groupKey) => {\n        // Calculate the expanded state of the group\n        const expanded = isExpanded(expandedRowKeys, groupKey);\n\n        // Render the title of the group\n        renderedRows.push(\n          renderSectionRow({\n            ...(props as any),\n            columns: flattenedColumns,\n            index: ++index,\n            group,\n            groupKey,\n            expanded,\n          })\n        );\n\n        // Render the grouped content when the group is expanded\n        if (expanded || keepDOM) {\n          const dataInGroup: any[] = [];\n\n          group.forEach((recordKey: string) => {\n            const record = getRecord(data, recordKey, rowKey);\n\n            if (record != null) {\n              dataInGroup.push(record);\n            }\n          });\n\n          /**\n           * Render the contents of the group row\n           */\n          renderedRows.push(renderBodyRows(dataInGroup, undefined, [], !expanded));\n        }\n      });\n\n      return renderedRows;\n    };\n\n    function renderBodyRows(\n      data: Record<string, any>[] = [],\n      level = 0,\n      renderedRows: VueJsxNode[] = [],\n      displayNone = false\n    ) {\n      const { rowKey, expandedRowRender, expandedRowKeys, childrenRecordName, rowExpandable, keepDOM } = props;\n\n      const hasExpandedRowRender = typeof expandedRowRender === 'function';\n      const expandBtnShouldInRow = state.cachedExpandBtnShouldInRow;\n      const { flattenedColumns } = context.value;\n\n      each(data, (record, index) => {\n        let key = getRecordKey(record, rowKey);\n\n        if (key == null) {\n          key = index;\n        }\n\n        const recordChildren = get(record, childrenRecordName);\n        const recordHasChildren = Boolean(Array.isArray(recordChildren) && recordChildren.length);\n\n        renderedRows.push(\n          renderBaseRow({\n            ...props,\n            columns: flattenedColumns,\n            expandBtnShouldInRow,\n            displayNone,\n            record,\n            key,\n            level,\n            index,\n          })\n        );\n\n        // render expand row\n        const expanded = isExpanded(expandedRowKeys, key);\n        const shouldRenderExpandedRows = expanded || keepDOM;\n        if (hasExpandedRowRender && rowExpandable && rowExpandable(record) && shouldRenderExpandedRows) {\n          const currentExpandRow = renderExpandedRow({\n            ...(props as any),\n            columns: flattenedColumns,\n            level,\n            index,\n            record,\n            expanded,\n            displayNone: displayNone || !expanded,\n          });\n          /**\n           * If expandedRowRender returns falsy, this expanded row will not be rendered\n           * Render an empty div before v1.19.7\n           */\n          if (!isNull(currentExpandRow)) {\n            renderedRows.push(currentExpandRow);\n          }\n        }\n\n        // render tree data\n        if (recordHasChildren && shouldRenderExpandedRows) {\n          const nestedRows = renderBodyRows(recordChildren, level + 1);\n          renderedRows.push(...nestedRows);\n        }\n      });\n\n      return renderedRows;\n    }\n\n    const renderBody = (direction?: Direction) => {\n      const {\n        scroll,\n        prefixCls,\n        columns,\n        components,\n        fixed,\n        handleWheel,\n        headerRef,\n        handleBodyScroll,\n        anyColumnFixed,\n        showHeader,\n        emptySlot,\n        includeHeader,\n        dataSource,\n        onScroll,\n        groups,\n        expandedRowRender,\n        tableLayout,\n      } = props;\n\n      const x = get(scroll, 'x');\n      const y = get(scroll, 'y');\n\n      const bodyStyle: {\n        maxHeight?: string | number;\n        overflow?: string;\n        WebkitTransform?: string;\n      } = {};\n      const tableStyle: {\n        width?: string | number;\n      } = {};\n      const Table = get(components, 'body.outer', 'table');\n      const BodyWrapper = get(components, 'body.wrapper') || 'tbody';\n\n      if (y) {\n        bodyStyle.maxHeight = typeof y === 'string' ? y : y + 'px';\n      }\n\n      if (x) {\n        tableStyle.width = typeof x === 'string' ? x : x + 'px';\n      }\n\n      if (anyColumnFixed && size(dataSource)) {\n        // Auto is better than scroll. For example, when there is only scrollY, the scroll axis is not displayed horizontally.\n        bodyStyle.overflow = 'auto';\n        // Fix weird webkit render bug\n        bodyStyle.WebkitTransform = 'translate3d (0, 0, 0)';\n      }\n\n      const colgroup = <ColGroup components={get(components, 'body')} columns={columns} prefixCls={prefixCls} />;\n      // const tableBody = renderBody();\n      const wrapCls = `${prefixCls}-body`;\n\n      const baseTable = (\n        <div\n          key=\"bodyTable\"\n          class={wrapCls}\n          style={bodyStyle}\n          ref={forwardRef as any}\n          onWheel={handleWheel}\n          onScroll={handleBodyScroll}\n        >\n          <Table\n            role={isMap(groups) || isFunction(expandedRowRender) || isTreeTable({ dataSource }) ? 'treegrid' : 'grid'}\n            aria-rowcount={dataSource && dataSource.length}\n            aria-colcount={columns && columns.length}\n            style={tableStyle}\n            className={classnames(prefixCls, {\n              [`${prefixCls}-fixed`]: tableLayout === 'fixed',\n            })}\n          >\n            {colgroup}\n            {includeHeader && showHeader ? (\n              <TableHeader {...props} ref={headerRef} components={components} columns={columns} />\n            ) : null}\n            <BodyWrapper ref={props.bodyWrapperRef} className={`${prefixCls}-tbody`} onScroll={onScroll as any}>\n              {isMap(groups) ? renderGroupedRows() : renderBodyRows(dataSource)}\n            </BodyWrapper>\n          </Table>\n          {emptySlot}\n        </div>\n      );\n\n      if (fixed && columns.length) {\n        return (\n          <div key=\"bodyTable\" class={`${prefixCls}-body-outer`}>\n            {baseTable}\n          </div>\n        );\n      }\n\n      return baseTable;\n    };\n\n    return () => {\n      const { virtualized } = props;\n      const { direction } = context.value;\n      return virtualized ? renderVirtualizedBody(direction) : renderBody(direction);\n    };\n  },\n});\n\nexport default Body;\n\nexport interface RenderExpandedRowProps {\n  style?: CSSProperties;\n  components?: TableComponents;\n  renderExpandIcon: (record?: Record<string, any>, isNested?: boolean) => VueJsxNode | null;\n  expandedRowRender?: ExpandedRowRender<Record<string, any>>;\n  record?: Record<string, any>;\n  columns?: ColumnProps[];\n  expanded?: boolean;\n  index?: number;\n  rowKey?: RowKey<Record<string, any>>;\n  virtualized?: Virtualized;\n  level?: number;\n  keepDOM?: boolean;\n  displayNone?: boolean;\n}\n\nexport interface RenderSectionRowProps {\n  dataSource?: Record<string, any>[];\n  columns?: ColumnProps[];\n  rowKey?: RowKey<Record<string, any>>;\n  group?: any;\n  groupKey: string | number;\n  index?: number;\n  expanded?: boolean;\n}\n"],"names":["propTypes","anyColumnFixed","PropTypes","bool","childrenRecordName","string","columns","array","components","object","dataSource","disabledRowKeysSet","type","required","emptySlot","node","expandRowByClick","expandedRowKeys","expandedRowRender","func","fixed","oneOfType","forwardedRef","groups","handleBodyScroll","handleWheel","headerRef","includeHeader","onScroll","prefixCls","renderExpandIcon","rowExpandable","rowKey","scroll","selectedRowKeysSet","showHeader","size","store","virtualized","tableWidth","number","tableLayout","any","expandIcon","expandCellFixed","title","indentSize","defaultExpandAllRows","expandAllRows","defaultExpandAllGroupRows","expandAllGroupRows","defaultExpandedRowKeys","footer","empty","groupBy","renderGroupSection","clickGroupedRowToExpand","dropdownPrefixCls","cachedColumns","cachedChildren","flattenColumns","queries","flattenData","pagination","allRowKeys","disabledRowKeys","bodyHasScrollBar","prePropRowSelection","prePagination","hideExpandedColumn","filteredColumns","useFixedHeader","bodyRef","onExpandedRowsChange","onExpand","onChange","onRow","bodyWrapperRef","onGroupedRow","keepDOM","style","className","vuePropsType","vuePropsMake","Body","defineComponent","props","name","setup","useSlots","nodeRef","ref","listRef","observer","cellWidths","flattenedColumns","context","useTableContext","state","reactive","virtualizedData","cache","virtualizedScrollTop","virtualizedScrollLeft","cachedExpandBtnShouldInRow","cachedExpandRelatedProps","one1","watch","value","getVirtualizedListRef","getCellWidths","immediate","adapter","adapterInject","useBaseComponent","adapter_","setVirtualizedData","cb","nextTick","setCachedExpandBtnShouldInRow","setCachedExpandRelatedProps","observeBodyResize","bodyWrapDOM","setBodyHasScrollbar","resizeCallback","update","offsetWidth","clientWidth","requestAnimationFrame","window","setTimeout","get","unobserve","ResizeObserver","observe","logger","warn","unobserveBodyResize","foundation","BodyFoundation","prevPropsVirtualized","prevPropsDataSource","prevPropsExpandedRowKeys","prevPropsColumns","prevPropsScroll","prevStateCachedExpandRelatedProps","initVirtualizedData","newExpandRelatedProps","strings","EXPAND_RELATED_PROPS","map","key","undefined","isEqual","initExpandBtnShouldInRow","scrollY","y","forwardRef","setListRef","listInstance","console","itemSize","index","tableSize","virtualizedItem","defaultConfig","getDefaultVirtualizedRowConfig","sectionRow","height","realSize","expandedRow","minHeight","itemKey","data","handleRowClick","e","expand","handleRowExpanded","handleVirtualizedScroll","props_","handleVirtualizedBodyScroll","newScrollLeft","newScrollTop","horizontalScrolling","getVirtualizedRowWidth","arrayAdd","renderVirtualizedRow","options","parentKeys","rest","rowWidth","expandBtnShouldInRow","width","renderSectionRow","renderExpandedRow","renderBaseRow","renderTbody","slots","_createVNode","_mergeProps","args","classnames","default","renderOuter","tableCls","onWheel","onItemsRendered","scrollLeft","renderVirtualizedBody","direction","rawY","yIsNumber","listStyle","length","overflowX","overflowY","wrapCls","List","groupKey","group","sectionRowPickKeys","Object","keys","SectionRowPropTypes","sectionRowProps","pick","SectionRow","record","records","recordKey","getRecord","expanded","displayNone","getRecordKey","ExpandedRow","genExpandedRowKey","level","baseRowPickKeys","BaseRowPropTypes","baseRowProps","isExpanded","expandable","expandableProps","expandableRow","onRowClick","selectionProps","selected","isSelected","disabled","isDisabled","_Fragment","BaseRow","renderGroupedRows","groupsInData","Map","renderedRows","Array","isArray","forEach","has","set","Set","add","push","dataInGroup","renderBodyRows","hasExpandedRowRender","each","recordChildren","recordHasChildren","Boolean","shouldRenderExpandedRows","currentExpandRow","isNull","nestedRows","renderBody","x","bodyStyle","tableStyle","Table","BodyWrapper","maxHeight","overflow","WebkitTransform","colgroup","ColGroup","baseTable","isMap","isFunction","isTreeTable","TableHeader"],"mappings":"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"}