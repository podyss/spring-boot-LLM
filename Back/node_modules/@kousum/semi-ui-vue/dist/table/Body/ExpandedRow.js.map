{"version":3,"file":"ExpandedRow.js","sources":["../../../src/components/table/Body/ExpandedRow.tsx"],"sourcesContent":["import * as PropTypes from '../../PropTypes';\nimport classnames from 'classnames';\nimport { get, set, isNull } from 'lodash';\n\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/table/constants';\nimport { arrayAdd, filterColumns } from '@douyinfe/semi-foundation/table/utils';\nimport Store from '@douyinfe/semi-foundation/utils/Store';\nimport TableContext, { TableContextProps } from '../table-context';\nimport TableRow from './BaseRow';\nimport { amendTableWidth } from '../utils';\nimport { ColumnProps, ExpandIcon, TableComponents, Virtualized, Fixed } from '../interface';\nimport { ComponentObjectPropsOptions, CSSProperties, defineComponent, h, isVNode, PropType, useSlots } from 'vue';\nimport { vuePropsMake } from '../../PropTypes';\nimport { useTableContext } from '../tableContext/Consumer';\nimport { CombineProps, VueJsxNode } from '../../interface';\nimport { styleNum } from '../../_utils';\n\nexport interface TableExpandedRowProps {\n  cellWidths: number[]; // required\n  className?: string;\n  columns?: ColumnProps[];\n  components?: TableComponents;\n  defaultExpandAllRows?: boolean;\n  defaultExpandedRowKeys?: (string | number)[];\n  expandIcon?: ExpandIcon;\n  expandRowByClick?: boolean;\n  expanded?: boolean;\n  expandedRowKeys?: (string | number)[];\n  expandedRowRender?: (record?: Record<string, any>, index?: number, expanded?: boolean) => ExpandedRowRenderReturnType;\n  indentSize?: number;\n  index?: number;\n  prefixCls?: string;\n  record?: Record<string, any>;\n  renderExpandIcon?: (record?: Record<string, any>, isNested?: boolean) => VueJsxNode | null;\n  store?: Store;\n  style?: CSSProperties;\n  virtualized?: Virtualized;\n  displayNone?: boolean;\n  onExpand?: any;\n  onExpandedRowsChange?: any;\n}\n\nconst propTypes: CombineProps<TableExpandedRowProps> = {\n  cellWidths: {\n    type: PropTypes.array,\n    required: true,\n  },\n  className: PropTypes.string,\n  columns: PropTypes.array,\n  components: PropTypes.object,\n  defaultExpandAllRows: PropTypes.bool,\n  defaultExpandedRowKeys: PropTypes.array,\n  expandIcon: PropTypes.oneOfType([PropTypes.object, PropTypes.node, PropTypes.func]),\n  expandRowByClick: PropTypes.bool,\n  expanded: PropTypes.bool,\n  expandedRowKeys: PropTypes.array,\n  expandedRowRender: PropTypes.func as PropType<TableExpandedRowProps['expandedRowRender']>,\n  indentSize: PropTypes.number,\n  index: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onExpand: PropTypes.func as PropType<TableExpandedRowProps['onExpand']>,\n  onExpandedRowsChange: PropTypes.func as PropType<TableExpandedRowProps['onExpandedRowsChange']>,\n  prefixCls: PropTypes.string,\n  record: PropTypes.object,\n  renderExpandIcon: PropTypes.func as PropType<TableExpandedRowProps['renderExpandIcon']>,\n  store: PropTypes.object,\n  style: PropTypes.object,\n  virtualized: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  displayNone: PropTypes.bool,\n};\nconst defaultProps = {\n  record: {},\n  prefixCls: cssClasses.PREFIX,\n};\n\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst TableExpandedRow = defineComponent({\n  props: { ...vuePropsType },\n  name: 'TableExpandedRow',\n  setup(props, {}) {\n    const slots = useSlots();\n    const { context } = useTableContext();\n\n    return () => {\n      const {\n        record,\n        columns: propColumns = [],\n        prefixCls,\n        className,\n        expanded,\n        expandedRowRender,\n        renderExpandIcon,\n        index,\n        store,\n        components,\n        style,\n        virtualized,\n        indentSize,\n        cellWidths,\n        displayNone,\n      } = props;\n      const { tableWidth, anyColumnFixed, getCellWidths } = context.value;\n      const cell: ExpandedRowRenderReturnType = expandedRowRender(record, index, expanded);\n      let children: VueJsxNode = null;\n      const props_: { colSpan?: number; style?: Record<string, any> } = {};\n      let column = {};\n      if (isNull(cell)) {\n        return null;\n      } else if (isVNode(cell)) {\n        children = cell;\n      } else if (cell && Object.prototype.toString.call(cell) === '[object Object]') {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { children: cellChildren, fixed, ...restProps } = cell as { children: VueJsxNode; fixed: Fixed };\n        children = cellChildren;\n        column = { ...restProps };\n      }\n\n      if ((get(components, 'body.cell') as any) !== strings.DEFAULT_COMPONENTS.body.cell) {\n        if (virtualized) {\n          set(props_, 'style.height', '100%');\n        }\n        set(props_, 'style.display', 'block');\n        set(props_, 'style.width', arrayAdd(cellWidths, 0, propColumns.length));\n      } else {\n        // Remove the row where the scroll bar is located\n        props_.colSpan = filterColumns(propColumns).length;\n      }\n\n      const columns = [\n        {\n          render: () => ({\n            props: props_,\n            children: (\n              <div\n                class={classnames(`${prefixCls}-expand-inner`)}\n                style={{\n                  width: anyColumnFixed ? styleNum(amendTableWidth(tableWidth)) : undefined,\n                }}\n              >\n                {children}\n              </div>\n            ),\n          }),\n          ...column,\n        },\n      ];\n\n      const rowCls = classnames(className, `${prefixCls}-row-expand`);\n      const baseRowCellWidths = getCellWidths(columns);\n\n      return (\n        <TableRow\n          style={style}\n          components={components}\n          className={rowCls}\n          expandedRow={true}\n          renderExpandIcon={renderExpandIcon}\n          rowKey={`${record.key}-expanded-row`}\n          columns={columns}\n          store={store}\n          virtualized={virtualized}\n          indentSize={indentSize}\n          cellWidths={baseRowCellWidths}\n          displayNone={displayNone}\n        />\n      );\n    };\n  },\n});\n\nexport default TableExpandedRow;\n\nexport type ExpandedRowRenderReturnType = VueJsxNode | ({ children: VueJsxNode; fixed: Fixed } & ColumnProps);\n"],"names":["propTypes","cellWidths","type","PropTypes","array","required","className","string","columns","components","object","defaultExpandAllRows","bool","defaultExpandedRowKeys","expandIcon","oneOfType","node","func","expandRowByClick","expanded","expandedRowKeys","expandedRowRender","indentSize","number","index","onExpand","onExpandedRowsChange","prefixCls","record","renderExpandIcon","store","style","virtualized","displayNone","defaultProps","cssClasses","PREFIX","vuePropsType","vuePropsMake","TableExpandedRow","defineComponent","props","name","setup","useSlots","context","useTableContext","propColumns","tableWidth","anyColumnFixed","getCellWidths","value","cell","children","props_","column","isNull","isVNode","Object","prototype","toString","call","cellChildren","fixed","restProps","get","strings","DEFAULT_COMPONENTS","body","set","arrayAdd","length","colSpan","filterColumns","render","_createVNode","classnames","width","styleNum","amendTableWidth","undefined","rowCls","baseRowCellWidths","TableRow","key"],"mappings":"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"}