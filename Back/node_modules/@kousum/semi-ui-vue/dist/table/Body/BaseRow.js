import { defineComponent as X, useSlots as G, getCurrentInstance as J, createVNode as O, mergeProps as j, isVNode as Q } from "vue";
import I from "classnames";
import * as e from "../../PropTypes";
import { vuePropsMake as Y } from "../../PropTypes";
import { stubTrue as Z, noop as a, get as D, each as ee } from "lodash";
import { cssClasses as oe, strings as B } from '@douyinfe/semi-foundation/lib/es/table/constants';
import '@douyinfe/semi-foundation/lib/es/utils/shallowEqualObjects';
import ne from '@douyinfe/semi-foundation/lib/es/table/tableRowFoundation';
import { isInnerColumnKey as te, isExpandedColumn as se, isScrollbarColumn as ie, isFixedLeft as re, arrayAdd as K, isLastLeftFixed as le, isFixedRight as ae, isFirstFixedRight as de } from '@douyinfe/semi-foundation/lib/es/table/utils';
import U from "../TableCell";
import { useBaseComponent as ce } from "../../_base/baseComponent";
function fe(t) {
  return typeof t == "function" || Object.prototype.toString.call(t) === "[object Object]" && !Q(t);
}
const ue = {
  anyColumnFixed: e.bool,
  cellWidths: e.array,
  className: e.string,
  columns: {
    type: e.array,
    required: !0
  },
  components: e.object,
  disabled: e.bool,
  expandIcon: e.oneOfType([e.bool, e.func, e.node]),
  expandableRow: e.bool,
  expanded: e.bool,
  displayNone: e.bool,
  expandedRow: e.bool,
  fixed: e.oneOfType([e.string, e.bool]),
  height: e.oneOfType([e.string, e.number]),
  hideExpandedColumn: e.bool,
  hovered: e.bool,
  indent: e.number,
  indentSize: e.number,
  index: e.number,
  isSection: e.bool,
  level: e.number,
  onDidUpdate: e.func,
  onHover: e.func,
  onRow: e.func,
  onRowClick: e.func,
  onRowContextMenu: e.func,
  onRowDoubleClick: e.func,
  onRowMouseEnter: e.func,
  onRowMouseLeave: e.func,
  prefixCls: e.string,
  record: e.object,
  renderExpandIcon: e.func,
  replaceClassName: e.string,
  rowExpandable: e.func,
  rowKey: e.oneOfType([e.string, e.number]),
  // real key of the row
  selected: e.bool,
  store: e.object,
  style: e.object,
  virtualized: e.oneOfType([e.object, e.bool]),
  visible: e.bool
  // data: [Array] as PropType<BaseRowProps['data']>,
}, pe = {
  columns: [],
  rowExpandable: Z,
  components: {
    body: {
      row: "tr",
      cell: "td"
    }
  },
  prefixCls: oe.PREFIX,
  onRow: a,
  onRowClick: a,
  onRowDoubleClick: a,
  onRowMouseEnter: a,
  onRowMouseLeave: a,
  onHover: a,
  onDidUpdate: a,
  visible: !0,
  hovered: !1,
  selected: !1,
  disabled: !1
}, be = Y(ue, pe), Te = /* @__PURE__ */ X({
  props: {
    ...be
  },
  name: "TableRow",
  setup(t, {
    attrs: ye
  }) {
    G();
    const {
      adapter: $
    } = ce(t, {});
    function z() {
      return {
        ...$(),
        notifyClick: (...o) => t.onRowClick(...o),
        notifyDoubleClick: (...o) => t.onRowDoubleClick(...o),
        notifyMouseLeave: (...o) => {
          t.onHover(!1, t.rowKey), t.onRowMouseEnter(...o);
        },
        notifyMouseEnter: (...o) => {
          t.onHover(!0, t.rowKey), t.onRowMouseEnter(...o);
        }
      };
    }
    const u = z(), h = new ne(u);
    J();
    const _ = (o) => {
      const {
        renderExpandIcon: n
      } = t;
      return n(o, !0);
    };
    function H() {
      const {
        columns: o,
        record: n,
        index: v,
        prefixCls: l,
        fixed: E,
        components: g,
        expandableRow: d,
        level: p,
        expandIcon: i,
        rowExpandable: M,
        isSection: b,
        expandedRow: y,
        virtualized: k,
        indentSize: T,
        hideExpandedColumn: c,
        cellWidths: w,
        selected: P,
        expanded: S,
        disabled: N,
        onDidUpdate: C
      } = t, R = D(g, "body.cell", B.DEFAULT_COMPONENTS.body.cell), f = [], L = M(n);
      let m = 0;
      return ee(o, (s, r) => {
        const q = D(s, "key"), x = {};
        if (E !== "right" && (te(q) && m++, d && r === m && (x.renderExpandIcon = _, (c || b) && (x.expandIcon = i ?? !0)), p != null && r === m && (x.indent = p, !d && c && (i !== !1 || !(typeof i == "boolean") && i !== null) && (x.indent = p + 1))), se(s) && !L)
          f.push(O(U, {
            key: r,
            colIndex: r,
            isSection: b
          }, null));
        else if (!ie(s)) {
          const F = {};
          R !== B.DEFAULT_COMPONENTS.body.cell && k && !y && (F.width = D(w, r)), f.push(O(U, j({
            colIndex: r
          }, {
            ...x,
            ...F
          }, {
            hideExpandedColumn: c,
            indentSize: T,
            isSection: b,
            prefixCls: `${l}`,
            column: s,
            key: r,
            index: v,
            record: n,
            component: R,
            fixedLeft: re(s) && K(w, 0, r),
            lastFixedLeft: le(o, s),
            fixedRight: ae(s) && K(w, r + 1),
            firstFixedRight: de(o, s),
            selected: P,
            expanded: S,
            disabled: N,
            onDidUpdate: C
          }), null));
        }
      }), f;
    }
    const A = (o) => {
      h.handleMouseEnter(o);
      const n = u.getCache("customRowProps");
      typeof (n == null ? void 0 : n.onMouseEnter) == "function" && n.onMouseEnter(o);
    }, V = (o) => {
      h.handleMouseLeave(o);
      const n = u.getCache("customRowProps");
      typeof (n == null ? void 0 : n.onMouseLeave) == "function" && n.onMouseLeave(o);
    }, W = (o) => {
      h.handleClick(o);
      const n = u.getCache("customRowProps");
      n && typeof n.onClick == "function" && n.onClick(o);
    };
    return () => {
      let o;
      const {
        style: n
      } = t, {
        components: v,
        prefixCls: l,
        selected: E,
        onRow: g,
        index: d,
        className: p,
        replaceClassName: i,
        record: M,
        hovered: b,
        expanded: y,
        displayNone: k,
        expandableRow: T,
        level: c,
        expandedRow: w,
        isSection: P,
        rowKey: S
      } = t, N = v.body.row, {
        className: C,
        style: R,
        ...f
      } = g(M, d) || {};
      u.setCache("customRowProps", {
        ...f
      });
      const L = {
        ...n,
        ...R
      }, m = typeof i == "string" && i.length ? I(i, C) : I(p, `${l}-row`, {
        [`${l}-row-selected`]: E,
        [`${l}-row-expanded`]: y,
        [`${l}-row-hovered`]: b,
        [`${l}-row-hidden`]: k
      }, C), s = {};
      return typeof d == "number" && (s["aria-rowindex"] = d + 1), T && (s["aria-expanded"] = y), (y || w) && (s["aria-level"] = 2), typeof c == "number" && (s["aria-level"] = c + 1), P && (s["aria-level"] = 1), O(N, j({
        role: "row"
      }, s, {
        ...f,
        onMouseenter: A,
        onMouseleave: V,
        onClick: W
      }, {
        style: L,
        className: m,
        "data-row-key": S
      }), fe(o = H()) ? o : {
        default: () => [o]
      });
    };
  }
});
export {
  ue as BaseRowPropTypes,
  Te as default,
  be as vuePropsType
};
//# sourceMappingURL=BaseRow.js.map
