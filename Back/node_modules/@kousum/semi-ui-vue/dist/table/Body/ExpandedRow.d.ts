import Store from '@douyinfe/semi-foundation/lib/es/utils/Store';
import { ColumnProps, ExpandIcon, TableComponents, Virtualized, Fixed } from '../interface';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../../interface';
export interface TableExpandedRowProps {
    cellWidths: number[];
    className?: string;
    columns?: ColumnProps[];
    components?: TableComponents;
    defaultExpandAllRows?: boolean;
    defaultExpandedRowKeys?: (string | number)[];
    expandIcon?: ExpandIcon;
    expandRowByClick?: boolean;
    expanded?: boolean;
    expandedRowKeys?: (string | number)[];
    expandedRowRender?: (record?: Record<string, any>, index?: number, expanded?: boolean) => ExpandedRowRenderReturnType;
    indentSize?: number;
    index?: number;
    prefixCls?: string;
    record?: Record<string, any>;
    renderExpandIcon?: (record?: Record<string, any>, isNested?: boolean) => VueJsxNode | null;
    store?: Store;
    style?: CSSProperties;
    virtualized?: Virtualized;
    displayNone?: boolean;
    onExpand?: any;
    onExpandedRowsChange?: any;
}
export declare const vuePropsType: CombineProps<TableExpandedRowProps>;
declare const TableExpandedRow: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    cellWidths: {
        type: PropType<number[]>;
        default?: any;
        required: true;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    defaultExpandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<ExpandIcon> | {
        type: PropType<ExpandIcon>;
        default?: any;
        required?: false;
    };
    expandRowByClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandedRowRender: PropType<(record?: Record<string, any>, index?: number, expanded?: boolean) => ExpandedRowRenderReturnType> | {
        type: PropType<(record?: Record<string, any>, index?: number, expanded?: boolean) => ExpandedRowRenderReturnType>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    record: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<(record?: Record<string, any>, isNested?: boolean) => VueJsxNode | null> | {
        type: PropType<(record?: Record<string, any>, isNested?: boolean) => VueJsxNode | null>;
        default?: any;
        required?: false;
    };
    store: PropType<Store<Record<string, any>>> | {
        type: PropType<Store<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<Virtualized> | {
        type: PropType<Virtualized>;
        default?: any;
        required?: false;
    };
    displayNone: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onExpandedRowsChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    cellWidths: {
        type: PropType<number[]>;
        default?: any;
        required: true;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    defaultExpandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<ExpandIcon> | {
        type: PropType<ExpandIcon>;
        default?: any;
        required?: false;
    };
    expandRowByClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandedRowRender: PropType<(record?: Record<string, any>, index?: number, expanded?: boolean) => ExpandedRowRenderReturnType> | {
        type: PropType<(record?: Record<string, any>, index?: number, expanded?: boolean) => ExpandedRowRenderReturnType>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    record: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    renderExpandIcon: PropType<(record?: Record<string, any>, isNested?: boolean) => VueJsxNode | null> | {
        type: PropType<(record?: Record<string, any>, isNested?: boolean) => VueJsxNode | null>;
        default?: any;
        required?: false;
    };
    store: PropType<Store<Record<string, any>>> | {
        type: PropType<Store<Record<string, any>>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<Virtualized> | {
        type: PropType<Virtualized>;
        default?: any;
        required?: false;
    };
    displayNone: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onExpandedRowsChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TableExpandedRow;
export type ExpandedRowRenderReturnType = VueJsxNode | ({
    children: VueJsxNode;
    fixed: Fixed;
} & ColumnProps);
