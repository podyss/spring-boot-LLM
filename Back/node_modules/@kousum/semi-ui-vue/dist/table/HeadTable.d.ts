import { Fixed, TableComponents, Scroll, BodyScrollEvent, ColumnProps, OnHeaderRow, Sticky } from './interface';
import { PropType } from 'vue';
import { CombineProps } from '../interface';
export interface HeadTableProps {
    tableLayout?: 'fixed' | 'auto';
    anyColumnFixed?: boolean;
    bodyHasScrollBar?: boolean;
    columns?: ColumnProps[];
    components?: TableComponents;
    dataSource?: Record<string, any>[];
    fixed?: Fixed;
    handleBodyScroll?: (e: BodyScrollEvent) => void;
    prefixCls?: string;
    forwardedRef?: any;
    scroll?: Scroll;
    selectedRowKeysSet: Set<any>;
    showHeader?: boolean;
    onDidUpdate?: (ref: any) => void;
    onHeaderRow?: OnHeaderRow<any>;
    sticky?: Sticky;
}
export declare const vuePropsType: CombineProps<HeadTableProps>;
declare const HeadTable: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    tableLayout: PropType<"fixed" | "auto"> | {
        type: PropType<"fixed" | "auto">;
        default?: any;
        required?: false;
    };
    anyColumnFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    bodyHasScrollBar: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<Record<string, any>[]> | {
        type: PropType<Record<string, any>[]>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    handleBodyScroll: PropType<(e: BodyScrollEvent) => void> | {
        type: PropType<(e: BodyScrollEvent) => void>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    forwardedRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    scroll: PropType<Scroll> | {
        type: PropType<Scroll>;
        default?: any;
        required?: false;
    };
    selectedRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
    showHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onDidUpdate: PropType<(ref: any) => void> | {
        type: PropType<(ref: any) => void>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<OnHeaderRow<any>> | {
        type: PropType<OnHeaderRow<any>>;
        default?: any;
        required?: false;
    };
    sticky: PropType<Sticky> | {
        type: PropType<Sticky>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    tableLayout: PropType<"fixed" | "auto"> | {
        type: PropType<"fixed" | "auto">;
        default?: any;
        required?: false;
    };
    anyColumnFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    bodyHasScrollBar: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<any>[]> | {
        type: PropType<ColumnProps<any>[]>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<Record<string, any>[]> | {
        type: PropType<Record<string, any>[]>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    handleBodyScroll: PropType<(e: BodyScrollEvent) => void> | {
        type: PropType<(e: BodyScrollEvent) => void>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    forwardedRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    scroll: PropType<Scroll> | {
        type: PropType<Scroll>;
        default?: any;
        required?: false;
    };
    selectedRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
    showHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onDidUpdate: PropType<(ref: any) => void> | {
        type: PropType<(ref: any) => void>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<OnHeaderRow<any>> | {
        type: PropType<OnHeaderRow<any>>;
        default?: any;
        required?: false;
    };
    sticky: PropType<Sticky> | {
        type: PropType<Sticky>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default HeadTable;
