{"version":3,"file":"ResizableTable.js","sources":["../../src/components/table/ResizableTable.tsx"],"sourcesContent":["import { merge, get, find, noop } from 'lodash';\nimport * as PropTypes from '../PropTypes';\nimport { addClass, removeClass } from '@douyinfe/semi-foundation/utils/classnames';\nimport { strings, numbers } from '@douyinfe/semi-foundation/table/constants';\nimport { assignColumnKeys, findColumn, withResizeWidth } from '@douyinfe/semi-foundation/table/utils';\n\nimport Table_ from './Table';\nimport { cloneDeep, mergeColumns } from './utils';\nimport getColumns from './getColumns';\nimport ResizableHeaderCell from './ResizableHeaderCell';\nimport type { ResizableProps, TableProps, ColumnProps } from './interface';\nimport { ComponentObjectPropsOptions, computed, defineComponent, h, PropType, Ref, ref, useSlots, watch } from 'vue';\nimport { useHasInProps } from '../_base/baseComponent';\nimport { CombineProps } from '../interface';\n\nconst Table = Table_();\nexport const vuePropsType: CombineProps<TableProps> = {\n  bordered: PropTypes.bool,\n  children: PropTypes.element,\n  childrenRecordName: PropTypes.string,\n  className: PropTypes.string,\n  clickGroupedRowToExpand: PropTypes.bool,\n  columns: PropTypes.array,\n  components: PropTypes.element as PropType<TableProps['components']>,\n  dataSource: PropTypes.array,\n  defaultExpandAllGroupRows: PropTypes.bool,\n  defaultExpandAllRows: PropTypes.bool,\n  defaultExpandedRowKeys: PropTypes.array,\n  empty: PropTypes.element,\n  expandAllGroupRows: PropTypes.bool,\n  expandAllRows: PropTypes.bool,\n  expandCellFixed: PropTypes.bool,\n  expandIcon: PropTypes.element,\n  expandedRowKeys: PropTypes.array,\n  expandedRowRender: PropTypes.func as PropType<TableProps['expandedRowRender']>,\n  expandRowByClick: PropTypes.bool,\n  footer: PropTypes.element,\n  getVirtualizedListRef: PropTypes.element as PropType<TableProps['getVirtualizedListRef']>,\n  groupBy: PropTypes.element as PropType<TableProps['groupBy']>,\n  hideExpandedColumn: PropTypes.bool,\n  id: PropTypes.string,\n  indentSize: PropTypes.number,\n  loading: PropTypes.bool,\n  pagination: PropTypes.object,\n  prefixCls: PropTypes.string,\n  renderGroupSection: PropTypes.element as PropType<TableProps['renderGroupSection']>,\n  renderPagination: PropTypes.element as PropType<TableProps['renderPagination']>,\n  resizable: [PropTypes.bool, PropTypes.object],\n  rowExpandable: PropTypes.any as PropType<TableProps['rowExpandable']>,\n  rowKey: PropTypes.string,\n  rowSelection: PropTypes.element as PropType<TableProps['rowSelection']>,\n  scroll: PropTypes.any as PropType<TableProps['scroll']>,\n  showHeader: PropTypes.bool,\n  size: PropTypes.object,\n  style: PropTypes.object,\n  title: PropTypes.element,\n  virtualized: PropTypes.bool,\n  onChange: PropTypes.func as PropType<TableProps['onChange']>,\n  onExpand: PropTypes.func as PropType<TableProps['onExpand']>,\n  onExpandedRowsChange: PropTypes.func as PropType<TableProps['onExpandedRowsChange']>,\n  onGroupedRow: PropTypes.func as PropType<TableProps['onGroupedRow']>,\n  onHeaderRow: PropTypes.func as PropType<TableProps['onHeaderRow']>,\n  onRow: PropTypes.func as PropType<TableProps['onRow']>,\n  sticky: PropTypes.element as PropType<TableProps['sticky']>,\n  direction: PropTypes.string as PropType<TableProps['direction']>,\n  bodyWrapperRef: [PropTypes.func, PropTypes.object] as PropType<TableProps['bodyWrapperRef']>,\n  keepDOM: PropTypes.bool\n};\nconst ResizableTable = defineComponent({\n  props: { ...vuePropsType },\n  name: 'ResizableTable',\n  setup(props, {}) {\n    const {getProps} = useHasInProps()\n    const slots = useSlots();\n    const childrenColumnName = 'children';\n\n    const columns = ref<Record<string, any>[]>([]);\n    watch(\n      [() => props.columns, () => props.expandedRowRender, () => props.hideExpandedColumn, () => props.rowSelection],\n      () => {\n        const { components: propComponents, columns: propColumns, resizable, ...restProps } = getProps(props);\n\n        /**\n         * 此处关于 columns 有三个存储\n         *\n         * 1. rawColumns 是根据 props.columns 或者 props.children 解析出来的原始 columns\n         * 2. newColumns 是 rawColumns 的深拷贝，同时根据 props.expandedRowRender、props.hideExpandedColumn 和 props.rowSelection\n         * 这三个参数加入了【选择列】以及【展开列】\n         * 3. columns 是当前组件中存储的 state，一般情况下与 newColumns 相等，但是会保存列当前伸缩的宽度\n         */\n\n        /**\n         * There are three stores for columns here\n         *\n         * 1. rawColumns are the original columns parsed according to props.columns or props.children\n         * 2. newColumns is a deep copy of rawColumns, based on props.expandedRowRender, props.hideExpandedColumn and props.rowSelection\n         * These three parameters have been added [Select Column] and [Expand Column]\n         * 3. columns is the state stored in the current component, which is generally equal to newColumns, but it will save the current stretched width of the column\n         */\n\n        const parsedColumns =\n          Array.isArray(propColumns) && propColumns.length ? propColumns : getColumns(props.children);\n\n        const rawColumns = assignColumnKeys(cloneDeep(parsedColumns), childrenColumnName);\n\n        const newColumns = assignColumnKeys(cloneDeep(parsedColumns), childrenColumnName);\n\n        if (\n          typeof props.expandedRowRender === 'function' &&\n          !props.hideExpandedColumn &&\n          !find(rawColumns, (item) => item.key === strings.DEFAULT_KEY_COLUMN_EXPAND)\n        ) {\n          newColumns.unshift({ key: strings.DEFAULT_KEY_COLUMN_EXPAND, width: numbers.DEFAULT_WIDTH_COLUMN_EXPAND });\n        }\n\n        if (\n          props.rowSelection &&\n          !get(props.rowSelection, 'hidden') &&\n          !find(rawColumns, (item) => item.key === strings.DEFAULT_KEY_COLUMN_SELECTION)\n        ) {\n          newColumns.unshift({\n            width: get(props, 'rowSelection.width', numbers.DEFAULT_WIDTH_COLUMN_SELECTION),\n            key: strings.DEFAULT_KEY_COLUMN_SELECTION,\n          });\n        }\n\n        const oldColumns = Array.from(columns.value);\n        // If there is a resize value, the width does not use the default value fix#1072\n        const _newColumns = withResizeWidth(oldColumns, newColumns);\n        columns.value = mergeColumns(oldColumns, _newColumns);\n      },\n      { deep: true, immediate: true }\n    );\n\n    const components = computed(() => {\n      return merge(\n        {\n          header: {\n            cell: ResizableHeaderCell,\n          },\n        },\n        props.components\n      );\n    });\n\n    const handleResize =\n      (column: ColumnProps) =>\n      (e: MouseEvent, { size }: { size: { width: number } }) => {\n        const onResize = get(props.resizable, 'onResize', noop) as ResizableProps<any>['onResize'];\n\n        const nextColumns = cloneDeep(columns.value);\n        const curColumn: ColumnProps = findColumn(nextColumns, column, childrenColumnName);\n        let nextColumn = {\n          ...curColumn,\n          width: size.width,\n        };\n\n        const customProps = onResize(nextColumn) || {};\n\n        nextColumn = {\n          ...nextColumn,\n          ...customProps,\n        };\n\n        Object.assign(curColumn, nextColumn);\n        columns.value = nextColumns;\n      };\n\n    const handleResizeStart = (column: ColumnProps<any>) => (e: MouseEvent) => {\n      const onResizeStart = get(props.resizable, 'onResizeStart', noop) as ResizableProps<any>['onResize'];\n      const handlerClassName = get(props.resizable, 'handlerClassName', 'resizing');\n\n      const nextColumns = cloneDeep(columns.value);\n\n      const curColumn: ColumnProps = findColumn(nextColumns, column, childrenColumnName);\n\n      let nextColumn: ColumnProps = {\n        ...curColumn,\n        className: addClass(curColumn.className, handlerClassName),\n      };\n\n      const customProps = onResizeStart(nextColumn) || {};\n\n      nextColumn = {\n        ...nextColumn,\n        ...customProps,\n      };\n\n      Object.assign(curColumn, nextColumn);\n\n      columns.value = nextColumns;\n    };\n\n    const handleResizeStop = (column: ColumnProps) => (e: MouseEvent) => {\n      const onResizeStop = get(props.resizable, 'onResizeStop', noop) as ResizableProps<any>['onResize'];\n      const handlerClassName = get(props.resizable, 'handlerClassName', 'resizing');\n      const nextColumns = cloneDeep(columns.value);\n\n      const curColumn: ColumnProps = findColumn(nextColumns, column, childrenColumnName);\n\n      let nextColumn = {\n        ...curColumn,\n        className: removeClass(curColumn.className, handlerClassName),\n      };\n\n      const customProps = onResizeStop(nextColumn) || {};\n\n      nextColumn = {\n        ...nextColumn,\n        ...customProps,\n      };\n\n      Object.assign(curColumn, nextColumn);\n\n      columns.value = nextColumns;\n    };\n\n    const resizableRender = (col: ColumnProps, index: number, level = 0, originalHeaderCellProps) => ({\n      ...col,\n      onHeaderCell: (column: ColumnProps) => ({\n        ...originalHeaderCellProps,\n        width: column.width,\n        onResize: handleResize(column),\n        onResizeStart: handleResizeStart(column),\n        onResizeStop: handleResizeStop(column),\n      }),\n    });\n\n    const assignResizableRender = (columns: ColumnProps[] = [], level = 0) =>\n      Array.isArray(columns) && columns.length\n        ? columns.map((col, index) => {\n            const originalHeaderCellProps = col.onHeaderCell?.(col, index, level) ?? {};\n            Object.assign(col, resizableRender(col, index, level, originalHeaderCellProps));\n            const children = col[childrenColumnName];\n\n            if (Array.isArray(children) && children.length) {\n              col[childrenColumnName] = assignResizableRender(children, level + 1);\n            }\n\n            return col;\n          })\n        : [];\n\n    const finalColumns: Ref<ColumnProps[]> = ref([]);\n    watch(\n      columns,\n      () => {\n        finalColumns.value = assignResizableRender(columns.value);\n      },\n      { immediate: true }\n    );\n\n    return () => {\n      const { components: propComponents, columns: propColumns, resizable, ...restProps } = getProps(props);\n\n      return <Table {...restProps} columns={finalColumns.value} components={components.value} />;\n    };\n  },\n});\n\nexport default ResizableTable;\n"],"names":["Table","Table_","vuePropsType","bordered","PropTypes","bool","children","element","childrenRecordName","string","className","clickGroupedRowToExpand","columns","array","components","dataSource","defaultExpandAllGroupRows","defaultExpandAllRows","defaultExpandedRowKeys","empty","expandAllGroupRows","expandAllRows","expandCellFixed","expandIcon","expandedRowKeys","expandedRowRender","func","expandRowByClick","footer","getVirtualizedListRef","groupBy","hideExpandedColumn","id","indentSize","number","loading","pagination","object","prefixCls","renderGroupSection","renderPagination","resizable","rowExpandable","any","rowKey","rowSelection","scroll","showHeader","size","style","title","virtualized","onChange","onExpand","onExpandedRowsChange","onGroupedRow","onHeaderRow","onRow","sticky","direction","bodyWrapperRef","keepDOM","ResizableTable","defineComponent","props","name","setup","getProps","useHasInProps","useSlots","childrenColumnName","ref","watch","propComponents","propColumns","restProps","parsedColumns","Array","isArray","length","getColumns","rawColumns","assignColumnKeys","cloneDeep","newColumns","find","item","key","strings","DEFAULT_KEY_COLUMN_EXPAND","unshift","width","numbers","DEFAULT_WIDTH_COLUMN_EXPAND","get","DEFAULT_KEY_COLUMN_SELECTION","DEFAULT_WIDTH_COLUMN_SELECTION","oldColumns","from","value","_newColumns","withResizeWidth","mergeColumns","deep","immediate","computed","merge","header","cell","ResizableHeaderCell","handleResize","column","e","onResize","noop","nextColumns","curColumn","findColumn","nextColumn","customProps","Object","assign","handleResizeStart","onResizeStart","handlerClassName","addClass","handleResizeStop","onResizeStop","removeClass","resizableRender","col","index","level","originalHeaderCellProps","onHeaderCell","assignResizableRender","map","finalColumns","_createVNode","_mergeProps"],"mappings":"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"}