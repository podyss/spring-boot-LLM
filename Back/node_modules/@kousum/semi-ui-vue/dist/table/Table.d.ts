import { BaseHeadWidth, BaseRowKeyType } from '@douyinfe/semi-foundation/lib/es/table/foundation';
import '@douyinfe/semi-foundation/lib/es/table/table.css';
import { HeadTableProps } from './HeadTable';
import { BodyProps } from './Body';
import type { ColumnProps, Data, ExpandIcon, Pagination, RenderPagination, RowSelectionProps, TableComponents, TableProps } from './interface';
import { CombineProps, VueJsxNode } from '../interface';
import { CSSProperties, PropType } from 'vue';
export type NormalTableProps<RecordType extends Record<string, any> = Data> = Omit<TableProps<RecordType>, 'resizable'>;
export interface NormalTableState<RecordType extends Record<string, any> = Data> {
    cachedColumns?: ColumnProps<RecordType>[];
    cachedChildren?: VueJsxNode;
    flattenColumns?: ColumnProps<RecordType>[];
    components?: TableComponents;
    queries?: ColumnProps<RecordType>[];
    dataSource?: RecordType[];
    flattenData?: RecordType[];
    expandedRowKeys?: (string | number)[];
    rowSelection?: TableStateRowSelection<RecordType>;
    pagination?: Pagination;
    groups?: Map<string, RecordType[]>;
    allRowKeys?: (string | number)[];
    disabledRowKeys?: (string | number)[];
    disabledRowKeysSet?: Set<string | number>;
    headWidths?: Array<Array<BaseHeadWidth>>;
    bodyHasScrollBar?: boolean;
    prePropRowSelection?: TableStateRowSelection<RecordType>;
    tableWidth?: number;
    prePagination?: Pagination /**
     * Disabled row keys in sorted and filtered data
     */;
    allDisabledRowKeys?: BaseRowKeyType[];
    /**
     * Disabled row keys set in sorted and filtered data
     */
    allDisabledRowKeysSet?: Set<BaseRowKeyType>;
}
export type TableStateRowSelection<RecordType extends Record<string, any> = Data> = (RowSelectionProps<RecordType> & {
    selectedRowKeysSet?: Set<string | number>;
}) | boolean;
export interface RenderTableProps<RecordType> extends HeadTableProps, BodyProps {
    filteredColumns: ColumnProps<RecordType>[];
    useFixedHeader: boolean;
    bodyRef: any;
    rowSelection: TableStateRowSelection<RecordType>;
    bodyHasScrollBar: boolean;
}
declare const propTypes: CombineProps<NormalTableProps<any>>;
export { propTypes as TablePropTypes };
declare function Table<RecordType extends Record<string, any>>(): import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    title: PropType<import("./interface").Title<RecordType>> | {
        type: PropType<import("./interface").Title<RecordType>>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<RecordType>[]> | {
        type: PropType<ColumnProps<RecordType>[]>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    children: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "middle"> | {
        type: PropType<"small" | "default" | "middle">;
        default?: any;
        required?: false;
    };
    groupBy: PropType<import("./interface").GroupBy<RecordType>> | {
        type: PropType<import("./interface").GroupBy<RecordType>>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./interface").Direction> | {
        type: PropType<import("./interface").Direction>;
        default?: any;
        required?: false;
    };
    footer: PropType<import("./interface").Footer<RecordType>> | {
        type: PropType<import("./interface").Footer<RecordType>>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<import("./interface").OnChange<RecordType>> | {
        type: PropType<import("./interface").OnChange<RecordType>>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    scroll: PropType<import("./interface").Scroll> | {
        type: PropType<import("./interface").Scroll>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    sticky: PropType<import("./interface").Sticky> | {
        type: PropType<import("./interface").Sticky>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<import("./interface").OnExpand<RecordType>> | {
        type: PropType<import("./interface").OnExpand<RecordType>>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<import("./interface").OnGroupedRow<RecordType>> | {
        type: PropType<import("./interface").OnGroupedRow<RecordType>>;
        default?: any;
        required?: false;
    };
    empty: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<ExpandIcon> | {
        type: PropType<ExpandIcon>;
        default?: any;
        required?: false;
    };
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<RecordType[]> | {
        type: PropType<RecordType[]>;
        default?: any;
        required?: false;
    };
    expandedRowRender: PropType<import("./interface").ExpandedRowRender<RecordType>> | {
        type: PropType<import("./interface").ExpandedRowRender<RecordType>>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    childrenRecordName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rowExpandable: PropType<import("./interface").RowExpandable<RecordType>> | {
        type: PropType<import("./interface").RowExpandable<RecordType>>;
        default?: any;
        required?: false;
    };
    pagination: PropType<Pagination> | {
        type: PropType<Pagination>;
        default?: any;
        required?: false;
    };
    defaultExpandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandAllGroupRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandAllGroupRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    rowSelection: PropType<import("./interface").RowSelection<RecordType>> | {
        type: PropType<import("./interface").RowSelection<RecordType>>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<import("./interface").RowKey<RecordType>> | {
        type: PropType<import("./interface").RowKey<RecordType>>;
        default?: any;
        required?: false;
    };
    bodyWrapperRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    getVirtualizedListRef: PropType<import("./interface").GetVirtualizedListRef> | {
        type: PropType<import("./interface").GetVirtualizedListRef>;
        default?: any;
        required?: false;
    };
    renderPagination: PropType<RenderPagination> | {
        type: PropType<RenderPagination>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<import("./interface").OnHeaderRow<RecordType>> | {
        type: PropType<import("./interface").OnHeaderRow<RecordType>>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onRow: PropType<import("./interface").OnRow<RecordType>> | {
        type: PropType<import("./interface").OnRow<RecordType>>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<import("./interface").Virtualized> | {
        type: PropType<import("./interface").Virtualized>;
        default?: any;
        required?: false;
    };
    expandRowByClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onExpandedRowsChange: PropType<import("./interface").OnExpandedRowsChange<RecordType>> | {
        type: PropType<import("./interface").OnExpandedRowsChange<RecordType>>;
        default?: any;
        required?: false;
    };
    renderGroupSection: PropType<import("./interface").RenderGroupSection> | {
        type: PropType<import("./interface").RenderGroupSection>;
        default?: any;
        required?: false;
    };
    clickGroupedRowToExpand: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandCellFixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    title: PropType<import("./interface").Title<RecordType>> | {
        type: PropType<import("./interface").Title<RecordType>>;
        default?: any;
        required?: false;
    };
    columns: PropType<ColumnProps<RecordType>[]> | {
        type: PropType<ColumnProps<RecordType>[]>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    children: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "middle"> | {
        type: PropType<"small" | "default" | "middle">;
        default?: any;
        required?: false;
    };
    groupBy: PropType<import("./interface").GroupBy<RecordType>> | {
        type: PropType<import("./interface").GroupBy<RecordType>>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("./interface").Direction> | {
        type: PropType<import("./interface").Direction>;
        default?: any;
        required?: false;
    };
    footer: PropType<import("./interface").Footer<RecordType>> | {
        type: PropType<import("./interface").Footer<RecordType>>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<import("./interface").OnChange<RecordType>> | {
        type: PropType<import("./interface").OnChange<RecordType>>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    scroll: PropType<import("./interface").Scroll> | {
        type: PropType<import("./interface").Scroll>;
        default?: any;
        required?: false;
    };
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    sticky: PropType<import("./interface").Sticky> | {
        type: PropType<import("./interface").Sticky>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<import("./interface").OnExpand<RecordType>> | {
        type: PropType<import("./interface").OnExpand<RecordType>>;
        default?: any;
        required?: false;
    };
    onGroupedRow: PropType<import("./interface").OnGroupedRow<RecordType>> | {
        type: PropType<import("./interface").OnGroupedRow<RecordType>>;
        default?: any;
        required?: false;
    };
    empty: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<ExpandIcon> | {
        type: PropType<ExpandIcon>;
        default?: any;
        required?: false;
    };
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<RecordType[]> | {
        type: PropType<RecordType[]>;
        default?: any;
        required?: false;
    };
    expandedRowRender: PropType<import("./interface").ExpandedRowRender<RecordType>> | {
        type: PropType<import("./interface").ExpandedRowRender<RecordType>>;
        default?: any;
        required?: false;
    };
    hideExpandedColumn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    childrenRecordName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rowExpandable: PropType<import("./interface").RowExpandable<RecordType>> | {
        type: PropType<import("./interface").RowExpandable<RecordType>>;
        default?: any;
        required?: false;
    };
    pagination: PropType<Pagination> | {
        type: PropType<Pagination>;
        default?: any;
        required?: false;
    };
    defaultExpandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandedRowKeys: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    expandAllRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandAllGroupRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandAllGroupRows: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    rowSelection: PropType<import("./interface").RowSelection<RecordType>> | {
        type: PropType<import("./interface").RowSelection<RecordType>>;
        default?: any;
        required?: false;
    };
    rowKey: PropType<import("./interface").RowKey<RecordType>> | {
        type: PropType<import("./interface").RowKey<RecordType>>;
        default?: any;
        required?: false;
    };
    bodyWrapperRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    getVirtualizedListRef: PropType<import("./interface").GetVirtualizedListRef> | {
        type: PropType<import("./interface").GetVirtualizedListRef>;
        default?: any;
        required?: false;
    };
    renderPagination: PropType<RenderPagination> | {
        type: PropType<RenderPagination>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<import("./interface").OnHeaderRow<RecordType>> | {
        type: PropType<import("./interface").OnHeaderRow<RecordType>>;
        default?: any;
        required?: false;
    };
    indentSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onRow: PropType<import("./interface").OnRow<RecordType>> | {
        type: PropType<import("./interface").OnRow<RecordType>>;
        default?: any;
        required?: false;
    };
    virtualized: PropType<import("./interface").Virtualized> | {
        type: PropType<import("./interface").Virtualized>;
        default?: any;
        required?: false;
    };
    expandRowByClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onExpandedRowsChange: PropType<import("./interface").OnExpandedRowsChange<RecordType>> | {
        type: PropType<import("./interface").OnExpandedRowsChange<RecordType>>;
        default?: any;
        required?: false;
    };
    renderGroupSection: PropType<import("./interface").RenderGroupSection> | {
        type: PropType<import("./interface").RenderGroupSection>;
        default?: any;
        required?: false;
    };
    clickGroupedRowToExpand: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showHeader: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandCellFixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Table;
