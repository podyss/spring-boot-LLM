import { TableSelectionCellEvent } from '@douyinfe/semi-foundation/lib/es/table/tableSelectionCellFoundation';
import { CheckboxProps } from '../checkbox';
import { PropType } from 'vue';
import { AriaAttributes } from '../AriaAttributes';
import { CombineProps } from '../interface';
export interface TableSelectionCellProps {
    columnTitle?: string;
    getCheckboxProps?: () => CheckboxProps;
    type?: string;
    onChange?: (checked: boolean, e: TableSelectionCellEvent) => void;
    selected?: boolean;
    disabled?: boolean;
    indeterminate?: boolean;
    prefixCls?: string;
    className?: string;
    'aria-label'?: AriaAttributes['aria-label'];
}
export declare const vuePropsType: CombineProps<TableSelectionCellProps>;
declare const TableSelectionCell: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    columnTitle: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    getCheckboxProps: PropType<() => CheckboxProps> | {
        type: PropType<() => CheckboxProps>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(checked: boolean, e: TableSelectionCellEvent) => void> | {
        type: PropType<(checked: boolean, e: TableSelectionCellEvent) => void>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    indeterminate: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    columnTitle: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    getCheckboxProps: PropType<() => CheckboxProps> | {
        type: PropType<() => CheckboxProps>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(checked: boolean, e: TableSelectionCellEvent) => void> | {
        type: PropType<(checked: boolean, e: TableSelectionCellEvent) => void>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    indeterminate: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TableSelectionCell;
