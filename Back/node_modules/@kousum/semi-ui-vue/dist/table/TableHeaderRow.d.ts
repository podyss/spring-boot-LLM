import { TableComponents, OnHeaderRow, Fixed } from './interface';
import { CSSProperties, PropType } from 'vue';
import type { TableHeaderCell } from './TableHeader';
import { CombineProps } from '../interface';
export interface TableHeaderRowProps {
    components?: TableComponents;
    row?: TableHeaderCell[];
    prefixCls?: string;
    onHeaderRow?: OnHeaderRow<any>;
    index?: number;
    style?: CSSProperties;
    columns?: any[];
    fixed?: Fixed;
    selectedRowKeysSet: Set<any>;
}
export declare const vuePropsType: CombineProps<TableHeaderRowProps>;
declare const TableHeaderRow: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    row: PropType<TableHeaderCell[]> | {
        type: PropType<TableHeaderCell[]>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<OnHeaderRow<any>> | {
        type: PropType<OnHeaderRow<any>>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    columns: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    selectedRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    components: PropType<TableComponents> | {
        type: PropType<TableComponents>;
        default?: any;
        required?: false;
    };
    row: PropType<TableHeaderCell[]> | {
        type: PropType<TableHeaderCell[]>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onHeaderRow: PropType<OnHeaderRow<any>> | {
        type: PropType<OnHeaderRow<any>>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    columns: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    fixed: PropType<boolean | "left" | "right"> | {
        type: PropType<boolean | "left" | "right">;
        default?: any;
        required?: false;
    };
    selectedRowKeysSet: {
        type: PropType<Set<any>>;
        default?: any;
        required: true;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TableHeaderRow;
