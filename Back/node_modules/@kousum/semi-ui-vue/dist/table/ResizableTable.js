import { defineComponent as v, useSlots as O, ref as z, watch as y, computed as D, createVNode as U, mergeProps as j } from "vue";
import { find as E, get as u, merge as H, noop as f } from "lodash";
import * as e from "../PropTypes";
import { addClass as k, removeClass as K } from '@douyinfe/semi-foundation/lib/es/utils/classnames';
import { strings as C, numbers as x } from '@douyinfe/semi-foundation/lib/es/table/constants';
import { assignColumnKeys as N, withResizeWidth as F, findColumn as R } from '@douyinfe/semi-foundation/lib/es/table/utils';
import I from "./Table";
import { cloneDeep as p, mergeColumns as M } from "./utils";
import G from "./getColumns";
import W from "./ResizableHeaderCell";
import { useHasInProps as Y } from "../_base/baseComponent";
const X = I(), B = {
  bordered: e.bool,
  children: e.element,
  childrenRecordName: e.string,
  className: e.string,
  clickGroupedRowToExpand: e.bool,
  columns: e.array,
  components: e.element,
  dataSource: e.array,
  defaultExpandAllGroupRows: e.bool,
  defaultExpandAllRows: e.bool,
  defaultExpandedRowKeys: e.array,
  empty: e.element,
  expandAllGroupRows: e.bool,
  expandAllRows: e.bool,
  expandCellFixed: e.bool,
  expandIcon: e.element,
  expandedRowKeys: e.array,
  expandedRowRender: e.func,
  expandRowByClick: e.bool,
  footer: e.element,
  getVirtualizedListRef: e.element,
  groupBy: e.element,
  hideExpandedColumn: e.bool,
  id: e.string,
  indentSize: e.number,
  loading: e.bool,
  pagination: e.object,
  prefixCls: e.string,
  renderGroupSection: e.element,
  renderPagination: e.element,
  resizable: [e.bool, e.object],
  rowExpandable: e.any,
  rowKey: e.string,
  rowSelection: e.element,
  scroll: e.any,
  showHeader: e.bool,
  size: e.object,
  style: e.object,
  title: e.element,
  virtualized: e.bool,
  onChange: e.func,
  onExpand: e.func,
  onExpandedRowsChange: e.func,
  onGroupedRow: e.func,
  onHeaderRow: e.func,
  onRow: e.func,
  sticky: e.element,
  direction: e.string,
  bodyWrapperRef: [e.func, e.object],
  keepDOM: e.bool
}, se = /* @__PURE__ */ v({
  props: {
    ...B
  },
  name: "ResizableTable",
  setup(o, {}) {
    const {
      getProps: h
    } = Y();
    O();
    const c = "children", d = z([]);
    y([() => o.columns, () => o.expandedRowRender, () => o.hideExpandedColumn, () => o.rowSelection], () => {
      const {
        components: r,
        columns: i,
        resizable: t,
        ...a
      } = h(o), s = Array.isArray(i) && i.length ? i : G(o.children), l = N(p(s), c), n = N(p(s), c);
      typeof o.expandedRowRender == "function" && !o.hideExpandedColumn && !E(l, (b) => b.key === C.DEFAULT_KEY_COLUMN_EXPAND) && n.unshift({
        key: C.DEFAULT_KEY_COLUMN_EXPAND,
        width: x.DEFAULT_WIDTH_COLUMN_EXPAND
      }), o.rowSelection && !u(o.rowSelection, "hidden") && !E(l, (b) => b.key === C.DEFAULT_KEY_COLUMN_SELECTION) && n.unshift({
        width: u(o, "rowSelection.width", x.DEFAULT_WIDTH_COLUMN_SELECTION),
        key: C.DEFAULT_KEY_COLUMN_SELECTION
      });
      const m = Array.from(d.value), P = F(m, n);
      d.value = M(m, P);
    }, {
      deep: !0,
      immediate: !0
    });
    const A = D(() => H({
      header: {
        cell: W
      }
    }, o.components)), S = (r) => (i, {
      size: t
    }) => {
      const a = u(o.resizable, "onResize", f), s = p(d.value), l = R(s, r, c);
      let n = {
        ...l,
        width: t.width
      };
      const m = a(n) || {};
      n = {
        ...n,
        ...m
      }, Object.assign(l, n), d.value = s;
    }, _ = (r) => (i) => {
      const t = u(o.resizable, "onResizeStart", f), a = u(o.resizable, "handlerClassName", "resizing"), s = p(d.value), l = R(s, r, c);
      let n = {
        ...l,
        className: k(l.className, a)
      };
      const m = t(n) || {};
      n = {
        ...n,
        ...m
      }, Object.assign(l, n), d.value = s;
    }, T = (r) => (i) => {
      const t = u(o.resizable, "onResizeStop", f), a = u(o.resizable, "handlerClassName", "resizing"), s = p(d.value), l = R(s, r, c);
      let n = {
        ...l,
        className: K(l.className, a)
      };
      const m = t(n) || {};
      n = {
        ...n,
        ...m
      }, Object.assign(l, n), d.value = s;
    }, L = (r, i, t = 0, a) => ({
      ...r,
      onHeaderCell: (s) => ({
        ...a,
        width: s.width,
        onResize: S(s),
        onResizeStart: _(s),
        onResizeStop: T(s)
      })
    }), w = (r = [], i = 0) => Array.isArray(r) && r.length ? r.map((t, a) => {
      var n;
      const s = ((n = t.onHeaderCell) == null ? void 0 : n.call(t, t, a, i)) ?? {};
      Object.assign(t, L(t, a, i, s));
      const l = t[c];
      return Array.isArray(l) && l.length && (t[c] = w(l, i + 1)), t;
    }) : [], g = z([]);
    return y(d, () => {
      g.value = w(d.value);
    }, {
      immediate: !0
    }), () => {
      const {
        components: r,
        columns: i,
        resizable: t,
        ...a
      } = h(o);
      return U(X, j(a, {
        columns: g.value,
        components: A.value
      }), null);
    };
  }
});
export {
  se as default,
  B as vuePropsType
};
//# sourceMappingURL=ResizableTable.js.map
