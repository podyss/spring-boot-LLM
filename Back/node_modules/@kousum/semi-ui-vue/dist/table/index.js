import { defineComponent as T, useSlots as b, ref as d, createVNode as a, mergeProps as s } from "vue";
import * as l from "../PropTypes";
import { vuePropsMake as C } from "../PropTypes";
import E, { TablePropTypes as _ } from "./Table";
import P from "./ResizableTable";
import g from "./Column";
import { default as V } from "./Column";
import { strings as i } from '@douyinfe/semi-foundation/lib/es/table/constants';
import { useConfigContext as N } from "../configProvider/context/Consumer";
import { useHasInProps as L } from "../_base/baseComponent";
import { getFragmentChildren as D } from "../_utils";
export * from "./interface";
const U = {
  ..._,
  resizable: [l.bool, l.object]
}, x = {
  hideExpandedColumn: !0
};
function A() {
  const m = E(), c = C(U, x);
  return /* @__PURE__ */ T({
    props: {
      ...c
    },
    name: "TableIndex",
    setup(e, {
      expose: u
    }) {
      const {
        getProps: r
      } = L(), p = b(), o = d(), {
        context: f
      } = N();
      return u({
        getCurrentPageData: () => o.value && o.value.getCurrentPageData()
      }), () => {
        const t = e.direction ?? f.value.direction, n = D(p);
        return e.resizable ? a(P, s(r(e), {
          children: n,
          ref: o,
          direction: t
        }), null) : a(m, s(r(e), {
          children: n,
          ref: o,
          direction: t
        }), null);
      };
    }
  });
}
const M = A(), O = M;
O.Column = g;
const X = i.DEFAULT_KEY_COLUMN_SELECTION, j = i.DEFAULT_KEY_COLUMN_EXPAND;
export {
  j as DEFAULT_KEY_COLUMN_EXPAND,
  X as DEFAULT_KEY_COLUMN_SELECTION,
  V as TableColumn,
  A as TableMaker,
  O as default
};
//# sourceMappingURL=index.js.map
