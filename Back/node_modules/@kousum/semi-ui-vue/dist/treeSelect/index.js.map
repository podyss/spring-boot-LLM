{"version":3,"file":"index.js","sources":["../../src/components/treeSelect/index.tsx"],"sourcesContent":["import cls from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { vuePropsMake } from '../PropTypes';\nimport { isEqual, isString, isEmpty, noop, get, isFunction, isUndefined, isNull, pick } from 'lodash';\nimport TreeSelectFoundation, {\n  BasicTreeSelectInnerData,\n  BasicTreeSelectProps,\n  BasicTriggerRenderProps,\n  Size,\n  TreeSelectAdapter,\n} from '@douyinfe/semi-foundation/treeSelect/foundation';\nimport {\n  calcCheckedKeys,\n  calcDisabledKeys,\n  calcExpandedKeys,\n  calcExpandedKeysForValues,\n  calcMotionKeys,\n  convertDataToEntities,\n  findKeysForValues,\n  flattenTreeData,\n  getValueOrKey,\n  normalizeKeyList,\n  normalizeValue,\n  updateKeys,\n  filterTreeData,\n} from '@douyinfe/semi-foundation/tree/treeUtil';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/treeSelect/constants';\nimport { numbers as popoverNumbers } from '@douyinfe/semi-foundation/popover/constants';\nimport { FixedSizeList as VirtualList } from '@kousum/vue3-window';\nimport '@douyinfe/semi-foundation/tree/tree.scss';\nimport '@douyinfe/semi-foundation/treeSelect/treeSelect.scss';\nimport { useBaseComponent, useHasInProps, ValidateStatus } from '../_base/baseComponent';\nimport TagGroup from '../tag/group';\nimport Tag, { TagProps } from '../tag/index';\nimport Input, { InputProps } from '../input/index';\nimport AutoSizer from '../tree/autoSizer';\nimport TreeContext from '../tree/treeContext';\nimport TreeNode from '../tree/treeNode';\nimport NodeList from '../tree/nodeList';\nimport { cloneDeep } from '../tree/treeUtil';\nimport LocaleConsumer from '../locale/localeConsumer';\nimport { Locale } from '../locale/interface';\nimport Trigger from '../trigger';\nimport TagInput from '../tagInput';\nimport { isSemiIcon, styleNum } from '../_utils';\nimport type { FlattenNode, TreeNodeData, TreeNodeProps, TreeProps, TreeState } from '../tree/interface';\nimport { Motion } from '../_base/base';\nimport { IconChevronDown, IconClear, IconSearch } from '@kousum/semi-icons-vue';\nimport CheckboxGroup from '../checkbox/checkboxGroup';\nimport {\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  Fragment,\n  h,\n  isVNode,\n  nextTick,\n  onMounted,\n  onUnmounted,\n  PropType,\n  reactive,\n  ref,\n  useSlots,\n  VNode,\n  watch,\n} from 'vue';\nimport { AriaAttributes } from '../AriaAttributes';\nimport { CombineProps, VueHTMLAttributes, VueJsxNode, VueJsxNodeSingle } from '../interface';\nimport Popover, { PopoverProps } from '../popover/index';\nimport VirtualRow from '../select/virtualRow';\n\nexport type ListItemKeySelector<T = any> = (index: number, data: T) => string | number;\nexport type ExpandAction = false | 'click' | 'doubleClick';\n\nexport interface TriggerRenderProps extends Omit<BasicTriggerRenderProps, 'componentProps'> {\n  [x: string]: any;\n  componentProps: TreeSelectProps;\n  value: TreeNodeData[];\n  onClear: (e: MouseEvent) => void;\n}\n\nexport interface OnChange {\n  /* onChangeWithObject is false */\n  (\n    value: TreeNodeData['value'] | Array<TreeNodeData['value']>,\n    node: TreeNodeData[] | TreeNodeData,\n    e: MouseEvent\n  ): void;\n  /* onChangeWithObject is true */\n  (node: TreeNodeData[] | TreeNodeData, e: MouseEvent): void;\n}\n\nexport type RenderSelectedItemInSingle = (treeNode: TreeNodeData) => VueJsxNode;\n\nexport type RenderSelectedItemInMultiple = (\n  treeNode: TreeNodeData,\n  otherProps: { index: number | string; onClose: (tagContent: any, e: MouseEvent) => void }\n) => {\n  isRenderInTag: boolean;\n  content: VueJsxNode;\n};\n\nexport type RenderSelectedItem = RenderSelectedItemInSingle | RenderSelectedItemInMultiple;\n\nexport type OverrideCommonProps =\n  | 'renderFullLabel'\n  | 'renderLabel'\n  | 'defaultValue'\n  | 'emptyContent'\n  | 'filterTreeNode'\n  | 'style'\n  | 'treeData'\n  | 'value'\n  | 'onExpand'\n  | 'keyMaps'\n  | 'showLine';\n\n/**\n * Type definition description:\n * TreeSelectProps inherits some properties from BasicTreeSelectProps (from foundation) and TreeProps (from semi-ui-react).\n */\n// eslint-disable-next-line max-len\nexport interface TreeSelectProps\n  extends Omit<BasicTreeSelectProps, OverrideCommonProps | 'validateStatus' | 'searchRender'>,\n    Pick<TreeProps, OverrideCommonProps> {\n  'aria-describedby'?: AriaAttributes['aria-describedby'];\n  'aria-errormessage'?: AriaAttributes['aria-errormessage'];\n  'aria-invalid'?: AriaAttributes['aria-invalid'];\n  'aria-labelledby'?: AriaAttributes['aria-labelledby'];\n  'aria-required'?: AriaAttributes['aria-required'];\n  motion?: Motion;\n  mouseEnterDelay?: number;\n  mouseLeaveDelay?: number;\n  arrowIcon?: VueJsxNode;\n  clearIcon?: VueJsxNode;\n  autoAdjustOverflow?: boolean;\n  clickToHide?: boolean;\n  defaultOpen?: boolean;\n  dropdownClassName?: string;\n  dropdownMatchSelectWidth?: boolean;\n  dropdownStyle?: CSSProperties;\n  dropdownMargin?: PopoverProps['margin'];\n  insetLabel?: VueJsxNode;\n  insetLabelId?: string;\n  maxTagCount?: number;\n  motionExpand?: boolean;\n  optionListStyle?: CSSProperties;\n  outerBottomSlot?: VueJsxNode;\n  outerTopSlot?: VueJsxNode;\n  placeholder?: string;\n  prefix?: VueJsxNode;\n  position?: PopoverProps['position'];\n  searchAutoFocus?: boolean;\n  searchPlaceholder?: string;\n  showSearchClear?: boolean;\n  size?: Size;\n  suffix?: VueJsxNode;\n  treeNodeLabelProp?: string;\n  validateStatus?: ValidateStatus;\n  zIndex?: number;\n  searchPosition?: string;\n  stopPropagation?: boolean | string;\n  searchRender?: boolean | ((inputProps: InputProps) => VueJsxNode);\n  onSelect?: (selectedKey: string, selected: boolean, selectedNode: TreeNodeData) => void;\n  renderSelectedItem?: RenderSelectedItem;\n  getPopupContainer?: () => HTMLElement;\n  triggerRender?: (props?: TriggerRenderProps) => VueJsxNode;\n  onBlur?: (e: MouseEvent) => void;\n  onChange?: OnChange;\n  onFocus?: (e: MouseEvent) => void;\n  onVisibleChange?: (isVisible: boolean) => void;\n  onClear?: (e: MouseEvent | KeyboardEvent) => void;\n  autoMergeValue?: boolean;\n  id?: string;\n}\n\nexport type OverrideCommonState = 'keyEntities' | 'treeData' | 'disabledKeys' | 'flattenNodes';\n\n// eslint-disable-next-line max-len\nexport interface TreeSelectState\n  extends Omit<BasicTreeSelectInnerData, OverrideCommonState | 'prevProps'>,\n    Pick<TreeState, OverrideCommonState> {\n  inputTriggerFocus: boolean;\n  isOpen: boolean;\n  // isInput: boolean;\n  rePosKey: number;\n  dropdownMinWidth: null | number;\n  isHovering: boolean;\n  prevProps: TreeSelectProps;\n  isFocus: boolean;\n}\n\nconst prefixcls = cssClasses.PREFIX;\nconst prefixTree = cssClasses.PREFIX_TREE;\n\nconst key = 0;\n\nconst propTypes: CombineProps<TreeSelectProps> = {\n  'aria-describedby': PropTypes.string,\n  'aria-errormessage': PropTypes.string,\n  'aria-invalid': PropTypes.bool,\n  'aria-labelledby': PropTypes.string,\n  'aria-required': PropTypes.bool,\n  'aria-label': PropTypes.string,\n  borderless: PropTypes.bool,\n  loadedKeys: PropTypes.array as PropType<TreeSelectProps['loadedKeys']>,\n  loadData: PropTypes.func as PropType<TreeSelectProps['loadData']>,\n  onLoad: PropTypes.func as PropType<TreeSelectProps['onLoad']>,\n  arrowIcon: PropTypes.node,\n  clearIcon: PropTypes.node,\n  defaultOpen: PropTypes.bool,\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  defaultExpandAll: PropTypes.bool,\n  defaultExpandedKeys: PropTypes.array,\n  expandAll: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disableStrictly: PropTypes.bool,\n  // Whether to turn on the input box filtering function, when it is a function, it represents a custom filtering function\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  multiple: PropTypes.bool,\n  searchPlaceholder: PropTypes.string,\n  searchAutoFocus: PropTypes.bool,\n  virtualize: PropTypes.object,\n  treeNodeFilterProp: PropTypes.string,\n  onChange: PropTypes.func as PropType<TreeSelectProps['onChange']>,\n  onClear: PropTypes.func as PropType<TreeSelectProps['onClear']>,\n  onSearch: PropTypes.func as PropType<TreeSelectProps['onSearch']>,\n  onSelect: PropTypes.func as PropType<TreeSelectProps['onSelect']>,\n  onExpand: PropTypes.func as PropType<TreeSelectProps['onExpand']>,\n  onChangeWithObject: PropTypes.bool,\n  onBlur: PropTypes.func as PropType<TreeSelectProps['onBlur']>,\n  onFocus: PropTypes.func as PropType<TreeSelectProps['onFocus']>,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array, PropTypes.object]),\n  expandedKeys: PropTypes.array,\n  autoExpandParent: PropTypes.bool,\n  showClear: PropTypes.bool,\n  showSearchClear: PropTypes.bool,\n  autoAdjustOverflow: PropTypes.bool,\n  showFilteredOnly: PropTypes.bool,\n  showLine: PropTypes.bool,\n  motionExpand: PropTypes.bool,\n  emptyContent: PropTypes.node,\n  leafOnly: PropTypes.bool,\n  keyMaps: PropTypes.object,\n  treeData: PropTypes.array,\n  dropdownClassName: PropTypes.string,\n  dropdownStyle: PropTypes.object,\n  motion: PropTypes.oneOfType([PropTypes.bool, PropTypes.object, PropTypes.func]),\n  placeholder: PropTypes.string,\n  maxTagCount: PropTypes.number,\n  size: String as PropType<TreeSelectProps['size']>,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  treeNodeLabelProp: PropTypes.string,\n  suffix: PropTypes.node,\n  prefix: PropTypes.node,\n  insetLabel: PropTypes.node,\n  insetLabelId: PropTypes.string,\n  zIndex: PropTypes.number,\n  getPopupContainer: PropTypes.func as PropType<TreeSelectProps['getPopupContainer']>,\n  dropdownMatchSelectWidth: PropTypes.bool,\n  validateStatus: String as PropType<TreeSelectProps['validateStatus']>,\n  mouseEnterDelay: PropTypes.number,\n  mouseLeaveDelay: PropTypes.number,\n  triggerRender: PropTypes.func as PropType<TreeSelectProps['triggerRender']>,\n  stopPropagation: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  outerBottomSlot: PropTypes.node,\n  outerTopSlot: PropTypes.node,\n  onVisibleChange: PropTypes.func as PropType<TreeSelectProps['onVisibleChange']>,\n  expandAction: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  searchPosition: String,\n  clickToHide: PropTypes.bool,\n  renderLabel: PropTypes.func as PropType<TreeSelectProps['renderLabel']>,\n  renderFullLabel: PropTypes.func as PropType<TreeSelectProps['renderFullLabel']>,\n  labelEllipsis: PropTypes.bool,\n  optionListStyle: PropTypes.object,\n  searchRender: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  renderSelectedItem: PropTypes.func as PropType<TreeSelectProps['renderSelectedItem']>,\n  checkRelation: PropTypes.string as PropType<TreeSelectProps['checkRelation']>,\n  id: PropTypes.string as PropType<TreeSelectProps['id']>,\n  showRestTagsPopover: PropTypes.bool,\n  restTagsPopoverProps: PropTypes.object,\n  preventScroll: PropTypes.bool,\n  clickTriggerToHide: PropTypes.bool,\n  autoMergeValue: PropTypes.bool,\n\n  dropdownMargin: PropTypes.oneOfType([PropTypes.number, PropTypes.object]),\n  position: PropTypes.string as PropType<TreeSelectProps['position']>,\n};\n\nconst defaultProps: Partial<TreeSelectProps> = {\n  borderless: false,\n  searchPosition: strings.SEARCH_POSITION_DROPDOWN,\n  arrowIcon: <IconChevronDown />,\n  autoExpandParent: false,\n  autoAdjustOverflow: true,\n  stopPropagation: true,\n  motion: true,\n  motionExpand: true,\n  expandAll: false,\n  zIndex: popoverNumbers.DEFAULT_Z_INDEX,\n  disableStrictly: false,\n  multiple: false,\n  filterTreeNode: false,\n  size: 'default' as const,\n  treeNodeFilterProp: 'label' as const,\n  onChangeWithObject: false,\n  treeNodeLabelProp: 'label' as const,\n  dropdownMatchSelectWidth: true,\n  defaultOpen: false,\n  showSearchClear: true,\n  showClear: false,\n  onVisibleChange: noop,\n  expandAction: false,\n  clickToHide: true,\n  searchAutoFocus: false,\n  checkRelation: 'related',\n  'aria-label': 'TreeSelect',\n  showRestTagsPopover: false,\n  restTagsPopoverProps: {},\n  clickTriggerToHide: true,\n  autoMergeValue: true,\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst TreeSelect = defineComponent({\n  props: { ...vuePropsType } as CombineProps<TreeSelectProps>,\n  name: 'TreeSelect',\n  setup(props, {}) {\n    const { getProps } = useHasInProps();\n    const slots = useSlots();\n    // let _flattenNodes: TreeState['flattenNodes'];\n    const state = reactive<TreeSelectState>({\n      inputTriggerFocus: false,\n      isOpen: false,\n      isFocus: false,\n      // isInput: false,\n      rePosKey: key,\n      dropdownMinWidth: null,\n      inputValue: '',\n      keyEntities: {},\n      treeData: [],\n      flattenNodes: [],\n      cachedFlattenNodes: undefined,\n      selectedKeys: [],\n      checkedKeys: new Set(),\n      halfCheckedKeys: new Set(),\n      realCheckedKeys: new Set([]),\n      disabledKeys: new Set(),\n      motionKeys: new Set([]),\n      motionType: 'hide',\n      expandedKeys: new Set(props.expandedKeys),\n      filteredKeys: new Set(),\n      filteredExpandedKeys: new Set(),\n      filteredShownKeys: new Set(),\n      prevProps: null,\n      isHovering: false,\n      cachedKeyValuePairs: {},\n      loadedKeys: new Set(),\n      loadingKeys: new Set(),\n    });\n    const inputRef = ref();\n    const tagInputRef = ref();\n    const triggerRef = ref();\n    const optionsRef = ref();\n    let clickOutsideHandler = null;\n    const treeSelectID = Math.random().toString(36).slice(2);\n    let clearInputFlag: boolean = false;\n\n    let onNodeClick;\n    let onNodeDoubleClick;\n\n    // TODO context\n    const { adapter: adapterInject, context, getDataAttr } = useBaseComponent<TreeSelectProps>(props, state);\n    function adapter_(): TreeSelectAdapter<TreeSelectProps, TreeSelectState> {\n      const filterAdapter: Pick<TreeSelectAdapter, 'updateInputValue'> = {\n        updateInputValue: (value) => {\n          state.inputValue = value;\n        },\n      };\n      const treeSelectAdapter: Pick<\n        TreeSelectAdapter,\n        'registerClickOutsideHandler' | 'unregisterClickOutsideHandler' | 'rePositionDropdown'\n      > = {\n        registerClickOutsideHandler: (cb) => {\n          adapter.unregisterClickOutsideHandler();\n          clickOutsideHandler = (e: Event) => {\n            // 当组件内部使用了expose时，使用ref得到的内容只有expose的那部分\n            const optionInstance = optionsRef && optionsRef.value.getRef?.().vnode.el;\n            const triggerDom = triggerRef && triggerRef.value;\n            // eslint-disable-next-line\n            const optionsDom = optionInstance;\n            const target = e.target as Element;\n            const path = (e.composedPath && e.composedPath()) || [target];\n            // console.log(optionsRef.value, (optionInstance as HTMLElement).parentNode, target)\n            if (\n              optionsDom &&\n              (!optionsDom.contains(target) || !optionsDom.contains(target.parentNode)) &&\n              triggerDom &&\n              !triggerDom.contains(target) &&\n              !(path.includes(triggerDom) || path.includes(optionsDom))\n            ) {\n              cb(e);\n            }\n          };\n          document.addEventListener('mousedown', clickOutsideHandler, false);\n        },\n        unregisterClickOutsideHandler: () => {\n          document.removeEventListener('mousedown', clickOutsideHandler, false);\n          clickOutsideHandler = null;\n        },\n        rePositionDropdown: () => {\n          let { rePosKey } = state;\n          rePosKey = rePosKey + 1;\n          state.rePosKey = rePosKey;\n        },\n      };\n      const treeAdapter: Pick<\n        TreeSelectAdapter,\n        'updateState' | 'notifySelect' | 'notifySearch' | 'cacheFlattenNodes' | 'notifyLoad' | 'notifyClear'\n      > = {\n        updateState: (states) => {\n          Object.keys(states).forEach((key) => {\n            state[key] = states[key];\n          });\n        },\n        notifySelect: (selectKey, bool, node) => {\n          props.onSelect && props.onSelect(selectKey, bool, node);\n        },\n        notifySearch: (input, filteredExpandedKeys, filteredNodes) => {\n          props.onSearch && props.onSearch(input, filteredExpandedKeys, filteredNodes);\n        },\n        cacheFlattenNodes: (bool) => {\n          state.cachedFlattenNodes = bool ? cloneDeep(state.flattenNodes) : undefined;\n        },\n        notifyLoad: (newLoadedKeys, data) => {\n          const { onLoad } = props;\n          isFunction(onLoad) && onLoad(newLoadedKeys, data);\n        },\n        notifyClear: (e: MouseEvent | KeyboardEvent) => {\n          props.onClear && props.onClear(e);\n        },\n      };\n      return {\n        ...adapterInject<TreeSelectProps, TreeSelectState>(),\n        ...filterAdapter,\n        ...treeSelectAdapter,\n        ...treeAdapter,\n        updateLoadKeys: (data, resolve) => {\n          // We need to get the latest state of loading/loaded keys\n          const { loadingKeys } = foundation.handleNodeLoad(\n            state.loadedKeys || new Set([]),\n            state.loadingKeys || new Set([]),\n            data,\n            resolve\n          );\n          state.loadingKeys = loadingKeys;\n        },\n        updateState: (states) => {\n          Object.keys(states).forEach((key) => {\n            state[key] = states[key];\n          });\n        },\n        openMenu: () => {\n          state.isOpen = true;\n          nextTick(() => {\n            props.onVisibleChange(true);\n          });\n        },\n        closeMenu: (cb) => {\n          state.isOpen = false;\n          nextTick(() => {\n            cb && cb();\n            props.onVisibleChange(false);\n          });\n        },\n        getTriggerWidth: () => {\n          const el = triggerRef.value;\n          return el && el.getBoundingClientRect().width;\n        },\n        setOptionWrapperWidth: (width) => {\n          state.dropdownMinWidth = width;\n        },\n        notifyChange: (value, node, e) => {\n          props.onChange && props.onChange(value, node, e);\n        },\n        notifyChangeWithObject: (node, e) => {\n          props.onChange && props.onChange(node, e);\n        },\n        notifyExpand: (expandedKeys, { expanded: bool, node }) => {\n          props.onExpand && props.onExpand([...expandedKeys], { expanded: bool, node });\n          if (bool && props.loadData) {\n            onNodeLoad(node);\n          }\n        },\n        notifyFocus: (...v) => {\n          props.onFocus && props.onFocus(...v);\n        },\n        notifyBlur: (...v) => {\n          props.onBlur && props.onBlur(...v);\n        },\n        toggleHovering: (bool) => {\n          state.isHovering = bool;\n        },\n        updateInputFocus: (bool) => {\n          if (bool) {\n            if (inputRef.value) {\n              const { preventScroll } = props;\n              (inputRef.value as any).focus({ preventScroll });\n            }\n            if (tagInputRef.value) {\n              tagInputRef.value.focus();\n            }\n          } else {\n            if (inputRef.value) {\n              (inputRef.value as any).blur();\n            }\n            if (tagInputRef.value) {\n              tagInputRef.value.blur();\n            }\n          }\n        },\n        updateIsFocus: (bool) => {\n          state.isFocus = bool;\n        },\n      };\n    }\n    const adapter = adapter_();\n    const foundation = new TreeSelectFoundation(adapter);\n    const onMotionEnd = () => {\n      adapter.rePositionDropdown();\n    };\n\n    // eslint-disable-next-line max-lines-per-function\n    function getDerivedStateFromProps(props: TreeSelectProps, prevState: TreeSelectState) {\n      const { prevProps, rePosKey } = prevState;\n      const { keyMaps } = props;\n      const needUpdate = (name: string) =>\n        (!prevProps && name in props) || (prevProps && !isEqual(prevProps[name], props[name]));\n\n      let treeData;\n      const withObject = props.onChangeWithObject;\n      let keyEntities = prevState.keyEntities || {};\n      let valueEntities = prevState.cachedKeyValuePairs || {};\n      const newState: Partial<TreeSelectState> = {\n        prevProps: props,\n      };\n      const needUpdateTreeData = needUpdate('treeData');\n      const needUpdateExpandedKeys = needUpdate('expandedKeys');\n      const isExpandControlled = 'expandedKeys' in props;\n      const isSearching = Boolean(props.filterTreeNode && prevState.inputValue && prevState.inputValue.length);\n      // TreeNode\n      if (needUpdateTreeData) {\n        treeData = props.treeData;\n        newState.treeData = treeData;\n        const entitiesMap = convertDataToEntities(treeData, keyMaps);\n        newState.keyEntities = {\n          ...entitiesMap.keyEntities,\n        };\n        keyEntities = newState.keyEntities;\n        newState.cachedKeyValuePairs = { ...entitiesMap.valueEntities };\n        valueEntities = newState.cachedKeyValuePairs;\n      }\n\n      // if treeData keys changes, we won't show animation\n      if (treeData && props.motion && !isEqual(Object.keys(newState.keyEntities), Object.keys(prevState.keyEntities))) {\n        if (prevProps && props.motion) {\n          newState.motionKeys = new Set([]);\n          newState.motionType = null;\n        }\n      }\n      const expandAllWhenDataChange = needUpdateTreeData && props.expandAll;\n      if (!isSearching) {\n        // expandedKeys\n        if (needUpdateExpandedKeys || (prevProps && needUpdate('autoExpandParent'))) {\n          newState.expandedKeys = calcExpandedKeys(\n            props.expandedKeys,\n            keyEntities,\n            props.autoExpandParent || !prevProps\n          );\n          // only show animation when treeData does not change\n          if (prevProps && props.motion && !treeData) {\n            const { motionKeys, motionType } = calcMotionKeys(\n              prevState.expandedKeys,\n              newState.expandedKeys,\n              keyEntities\n            );\n            newState.motionKeys = new Set(motionKeys);\n            newState.motionType = motionType;\n            if (motionType === 'hide') {\n              // cache flatten nodes: expandedKeys changed may not be triggered by interaction\n              newState.cachedFlattenNodes = cloneDeep(prevState.flattenNodes);\n            }\n          }\n        } else if ((!prevProps && (props.defaultExpandAll || props.expandAll)) || expandAllWhenDataChange) {\n          newState.expandedKeys = new Set(Object.keys(keyEntities));\n        } else if (!prevProps && props.defaultExpandedKeys) {\n          newState.expandedKeys = calcExpandedKeys(props.defaultExpandedKeys, keyEntities);\n        } else if (!prevProps && props.defaultValue) {\n          newState.expandedKeys = calcExpandedKeysForValues(\n            normalizeValue(props.defaultValue, withObject, keyMaps),\n            keyEntities,\n            props.multiple,\n            valueEntities\n          );\n        } else if (!prevProps && props.value) {\n          newState.expandedKeys = calcExpandedKeysForValues(\n            normalizeValue(props.value, withObject, keyMaps),\n            keyEntities,\n            props.multiple,\n            valueEntities\n          );\n        }\n\n        if (!newState.expandedKeys) {\n          delete newState.expandedKeys;\n        }\n\n        if (treeData || newState.expandedKeys) {\n          const flattenNodes = flattenTreeData(\n            treeData || prevState.treeData,\n            newState.expandedKeys || prevState.expandedKeys,\n            keyMaps\n          );\n          newState.flattenNodes = flattenNodes;\n        }\n      } else {\n        let filteredState;\n        // treeData changed while searching\n        if (treeData) {\n          // Get filter data\n          filteredState = filterTreeData({\n            treeData,\n            inputValue: prevState.inputValue,\n            filterTreeNode: props.filterTreeNode,\n            filterProps: props.treeNodeFilterProp,\n            showFilteredOnly: props.showFilteredOnly,\n            keyEntities: newState.keyEntities,\n            prevExpandedKeys: [...prevState.filteredExpandedKeys],\n            keyMaps: keyMaps,\n          });\n          newState.flattenNodes = filteredState.flattenNodes;\n          newState.motionKeys = new Set([]);\n          newState.filteredKeys = filteredState.filteredKeys;\n          newState.filteredShownKeys = filteredState.filteredShownKeys;\n          newState.filteredExpandedKeys = filteredState.filteredExpandedKeys;\n        }\n\n        // expandedKeys changed while searching\n        if (props.expandedKeys) {\n          newState.filteredExpandedKeys = calcExpandedKeys(\n            props.expandedKeys,\n            keyEntities,\n            props.autoExpandParent || !prevProps\n          );\n\n          if (prevProps && props.motion) {\n            const prevKeys = prevState ? prevState.filteredExpandedKeys : new Set([]);\n            // only show animation when treeData does not change\n            if (!treeData) {\n              const motionResult = calcMotionKeys(prevKeys, newState.filteredExpandedKeys, keyEntities);\n\n              let { motionKeys } = motionResult;\n              const { motionType } = motionResult;\n              if (props.showFilteredOnly) {\n                motionKeys = motionKeys.filter((key) => prevState.filteredShownKeys.has(key));\n              }\n              if (motionType === 'hide') {\n                // cache flatten nodes: expandedKeys changed may not be triggered by interaction\n                newState.cachedFlattenNodes = cloneDeep(prevState.flattenNodes);\n              }\n              newState.motionKeys = new Set(motionKeys);\n              newState.motionType = motionType;\n            }\n          }\n          newState.flattenNodes = flattenTreeData(\n            treeData || prevState.treeData,\n            newState.filteredExpandedKeys || prevState.filteredExpandedKeys,\n            keyMaps,\n            props.showFilteredOnly && prevState.filteredShownKeys\n          );\n        }\n      }\n\n      // selectedKeys: single mode controlled\n      const isMultiple = props.multiple;\n      if (!isMultiple) {\n        if (needUpdate('value')) {\n          newState.selectedKeys = findKeysForValues(\n            normalizeValue(props.value, withObject, keyMaps),\n            valueEntities,\n            isMultiple\n          );\n        } else if (!prevProps && props.defaultValue) {\n          newState.selectedKeys = findKeysForValues(\n            normalizeValue(props.defaultValue, withObject, keyMaps),\n            valueEntities,\n            isMultiple\n          );\n        } else if (treeData) {\n          // If `treeData` changed, we also need check it\n          if (props.value) {\n            newState.selectedKeys = findKeysForValues(\n              normalizeValue(props.value, withObject, keyMaps) || '',\n              valueEntities,\n              isMultiple\n            );\n          } else {\n            newState.selectedKeys = updateKeys(prevState.selectedKeys, keyEntities);\n          }\n        }\n      } else {\n        // checkedKeys: multiple mode controlled || data changed\n        let checkedKeyValues;\n\n        if (needUpdate('value')) {\n          checkedKeyValues = findKeysForValues(\n            normalizeValue(props.value, withObject, keyMaps),\n            valueEntities,\n            isMultiple\n          );\n        } else if (!prevProps && props.defaultValue) {\n          checkedKeyValues = findKeysForValues(\n            normalizeValue(props.defaultValue, withObject, keyMaps),\n            valueEntities,\n            isMultiple\n          );\n        } else if (treeData) {\n          // If `treeData` changed, we also need check it\n          if (props.value) {\n            checkedKeyValues = findKeysForValues(\n              normalizeValue(props.value, withObject, keyMaps) || [],\n              valueEntities,\n              isMultiple\n            );\n          } else {\n            checkedKeyValues = updateKeys(\n              props.checkRelation === 'related' ? prevState.checkedKeys : prevState.realCheckedKeys,\n              keyEntities\n            );\n          }\n        }\n\n        if (checkedKeyValues) {\n          if (props.checkRelation === 'unRelated') {\n            newState.realCheckedKeys = new Set(checkedKeyValues);\n          } else if (props.checkRelation === 'related') {\n            const { checkedKeys, halfCheckedKeys } = calcCheckedKeys(checkedKeyValues, keyEntities);\n\n            newState.checkedKeys = checkedKeys;\n            newState.halfCheckedKeys = halfCheckedKeys;\n          }\n        }\n      }\n\n      // loadedKeys\n      if (needUpdate('loadedKeys')) {\n        newState.loadedKeys = new Set(props.loadedKeys);\n      }\n\n      // ================== rePosKey ==================\n      if (needUpdateTreeData || needUpdate('value')) {\n        newState.rePosKey = rePosKey + 1;\n      }\n\n      // ================ disableStrictly =================\n      if (treeData && props.disableStrictly && props.checkRelation === 'related') {\n        newState.disabledKeys = calcDisabledKeys(keyEntities, keyMaps);\n      }\n\n      return newState;\n    }\n\n    watch(\n      [\n        () => props.loadedKeys,\n        () => props.loadData,\n        () => props.onLoad,\n        () => props.arrowIcon,\n        () => props.defaultOpen,\n        () => props.defaultValue,\n        () => props.defaultExpandAll,\n        () => props.defaultExpandedKeys,\n        () => props.expandAll,\n        () => props.disabled,\n        () => props.disableStrictly,\n        () => props.filterTreeNode,\n        () => props.multiple,\n        () => props.searchPlaceholder,\n        () => props.searchAutoFocus,\n        () => props.virtualize,\n        () => props.treeNodeFilterProp,\n        () => props.onChange,\n        () => props.onSearch,\n        () => props.onSelect,\n        () => props.onExpand,\n        () => props.onChangeWithObject,\n        () => props.onBlur,\n        () => props.onFocus,\n        () => props.value,\n        () => props.expandedKeys,\n        () => props.autoExpandParent,\n        () => props.showClear,\n        () => props.showSearchClear,\n        () => props.autoAdjustOverflow,\n        () => props.showFilteredOnly,\n        () => props.motionExpand,\n        () => props.emptyContent,\n        () => props.leafOnly,\n        () => props.treeData,\n        () => props.dropdownClassName,\n        () => props.dropdownStyle,\n        () => props.motion,\n        () => props.placeholder,\n        () => props.maxTagCount,\n        () => props.size,\n        () => props.className,\n        () => props.style,\n        () => props.treeNodeLabelProp,\n        () => props.suffix,\n        () => props.prefix,\n        () => props.insetLabel,\n        () => props.insetLabelId,\n        () => props.zIndex,\n        () => props.getPopupContainer,\n        () => props.dropdownMatchSelectWidth,\n        () => props.validateStatus,\n        () => props.mouseEnterDelay,\n        () => props.mouseLeaveDelay,\n        () => props.triggerRender,\n        () => props.stopPropagation,\n        () => props.outerBottomSlot,\n        () => props.outerTopSlot,\n        () => props.onVisibleChange,\n        () => props.expandAction,\n        () => props.searchPosition,\n        () => props.clickToHide,\n        () => props.renderLabel,\n        () => props.renderFullLabel,\n        () => props.labelEllipsis,\n        () => props.optionListStyle,\n        () => props.searchRender,\n        () => props.renderSelectedItem,\n        () => props.checkRelation,\n        () => slots.defautl,\n      ],\n      () => {\n        const newState = getDerivedStateFromProps({ ...props }, { ...state } as any);\n        Object.keys(newState).forEach((key) => {\n          // @ts-ignore\n          state[key] = newState[key];\n        });\n      },\n      { immediate: true }\n    );\n\n    onMounted(() => {\n      foundation.init();\n    });\n\n    onUnmounted(() => {\n      foundation.destroy();\n    });\n\n    const renderSuffix = () => {\n      const { suffix }: any = props;\n      const suffixWrapperCls = cls({\n        [`${prefixcls}-suffix`]: true,\n        [`${prefixcls}-suffix-text`]: suffix && isString(suffix),\n        [`${prefixcls}-suffix-icon`]: isSemiIcon(suffix),\n      });\n      return (\n        <div class={suffixWrapperCls} x-semi-prop=\"suffix\">\n          {suffix}\n        </div>\n      );\n    };\n\n    const renderPrefix = () => {\n      const { prefix, insetLabel, insetLabelId }: any = props;\n      const labelNode = prefix || insetLabel;\n      const prefixWrapperCls = cls({\n        [`${prefixcls}-prefix`]: true,\n        // to be doublechecked\n        [`${prefixcls}-inset-label`]: insetLabel,\n        [`${prefixcls}-prefix-text`]: labelNode && isString(labelNode),\n        [`${prefixcls}-prefix-icon`]: isSemiIcon(labelNode),\n      });\n\n      return (\n        <div class={prefixWrapperCls} id={insetLabelId} x-semi-prop=\"prefix,insetLabel\">\n          {labelNode}\n        </div>\n      );\n    };\n\n    const renderContent = () => {\n      const { dropdownMinWidth } = state;\n      const { dropdownStyle, dropdownClassName } = props;\n      const style = {\n        minWidth: isNaN(dropdownMinWidth) ? dropdownMinWidth : dropdownMinWidth + 'px',\n        ...dropdownStyle,\n      };\n      const popoverCls = cls(dropdownClassName, `${prefixcls}-popover`);\n      return (\n        <div class={popoverCls} style={style} onKeydown={foundation.handleKeyDown}>\n          {renderTree()}\n        </div>\n      );\n    };\n\n    const removeTag = (removedKey: TreeNodeData['key']) => {\n      foundation.removeTag(removedKey);\n    };\n\n    const handleClick = (e: MouseEvent) => {\n      foundation.handleClick(e);\n    };\n\n    const getDataForKeyNotInKeyEntities = (key: string) => {\n      return foundation.getDataForKeyNotInKeyEntities(key);\n    };\n\n    /* istanbul ignore next */\n    const handleSelectionEnterPress = (e: KeyboardEvent) => {\n      foundation.handleSelectionEnterPress(e);\n    };\n\n    const hasValue = (): boolean => {\n      const { multiple, checkRelation } = props;\n      const { realCheckedKeys, checkedKeys, selectedKeys } = state;\n      let hasValue = false;\n      if (multiple) {\n        if (checkRelation === 'related') {\n          hasValue = Boolean(checkedKeys.size);\n        } else if (checkRelation === 'unRelated') {\n          hasValue = Boolean(realCheckedKeys.size);\n        }\n      } else {\n        hasValue = Boolean(selectedKeys.length);\n      }\n      return hasValue;\n    };\n\n    const showClearBtn = () => {\n      const { showClear, disabled, searchPosition } = props;\n      const { inputValue, isOpen, isHovering } = state;\n      const triggerSearchHasInputValue = searchPosition === strings.SEARCH_POSITION_TRIGGER && inputValue;\n\n      return showClear && (hasValue() || triggerSearchHasInputValue) && !disabled && (isOpen || isHovering);\n    };\n\n    const renderTagList = (triggerRenderKeys: string[]) => {\n      const { keyEntities, disabledKeys } = state;\n      const {\n        treeNodeLabelProp,\n        leafOnly,\n        disabled,\n        disableStrictly,\n        size,\n        renderSelectedItem: propRenderSelectedItem,\n        keyMaps,\n      } = props;\n      const realLabelName = get(keyMaps, 'label', treeNodeLabelProp);\n      const renderSelectedItem = isFunction(propRenderSelectedItem)\n        ? propRenderSelectedItem\n        : (item: TreeNodeData) => ({\n            isRenderInTag: true,\n            content: get(item, realLabelName, null),\n          });\n\n      const tagList: VueJsxNodeSingle[] = [];\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      triggerRenderKeys.forEach((key: TreeNodeData['key'], index) => {\n        const item =\n          keyEntities[key] && keyEntities[key].key === key ? keyEntities[key].data : getDataForKeyNotInKeyEntities(key);\n        const onClose = (tagContent: any, e: MouseEvent) => {\n          if (e && typeof e.preventDefault === 'function') {\n            // make sure that tag will not hidden immediately in controlled mode\n            e.preventDefault();\n          }\n          removeTag(key);\n        };\n        const { content, isRenderInTag } = item\n          ? (renderSelectedItem as RenderSelectedItemInMultiple)(item, { index, onClose })\n          : ({} as any);\n        if (!content) {\n          return;\n        }\n        const isDisabled = disabled || item.disabled || (disableStrictly && disabledKeys.has(item.key));\n        const tag: Partial<TagProps> & VueHTMLAttributes = {\n          closable: !isDisabled,\n          color: 'white',\n          visible: true,\n          onClose,\n          key: `tag-${key}-${index}`,\n          size: size === 'small' ? 'small' : 'large',\n        };\n        if (isRenderInTag) {\n          // pass VueJsxNode list to tagList when using tagGroup custom mode\n          tagList.push(<Tag {...tag}>{content}</Tag>);\n        } else {\n          tagList.push(content as VNode);\n        }\n      });\n      return tagList;\n    };\n\n    /**\n     * When single selection and the search box is on trigger, the items displayed in the rendered search box\n     */\n    const renderSingleTriggerSearchItem = () => {\n      const { placeholder, disabled } = props;\n      const { inputTriggerFocus } = state;\n      const renderText = foundation.getRenderTextInSingle();\n      const spanCls = cls(`${prefixcls}-selection-TriggerSearchItem`, {\n        [`${prefixcls}-selection-TriggerSearchItem-placeholder`]: (inputTriggerFocus || !renderText) && !disabled,\n        [`${prefixcls}-selection-TriggerSearchItem-disabled`]: disabled,\n      });\n      return (\n        <span class={spanCls} onClick={foundation.onClickSingleTriggerSearchItem}>\n          {renderText ? renderText : placeholder}\n        </span>\n      );\n    };\n\n    /**\n     * Single selection and the search box content rendered when the search box is on trigger\n     */\n    const renderSingleTriggerSearch = () => {\n      const { inputValue } = state;\n      return (\n        <>\n          {renderInput()}\n          {!inputValue && renderSingleTriggerSearchItem()}\n        </>\n      );\n    };\n\n    const renderSelectContent = (triggerRenderKeys: string[]) => {\n      const {\n        multiple,\n        placeholder,\n        maxTagCount,\n        searchPosition,\n        filterTreeNode,\n        showRestTagsPopover,\n        restTagsPopoverProps,\n      } = props;\n      const isTriggerPositionSearch = filterTreeNode && searchPosition === strings.SEARCH_POSITION_TRIGGER;\n      // searchPosition = trigger\n      if (isTriggerPositionSearch) {\n        return multiple ? renderTagInput(triggerRenderKeys) : renderSingleTriggerSearch();\n      }\n      // searchPosition = dropdown and single seleciton\n      if (!multiple || !hasValue()) {\n        const renderText = foundation.getRenderTextInSingle();\n        const spanCls = cls(`${prefixcls}-selection-content`, {\n          [`${prefixcls}-selection-placeholder`]: !renderText,\n        });\n        return <span class={spanCls}>{renderText ? renderText : placeholder}</span>;\n      }\n      // searchPosition = dropdown and multiple seleciton\n      const tagList = renderTagList(triggerRenderKeys);\n      // mode=custom to return tagList directly\n      return (\n        <TagGroup\n          maxTagCount={maxTagCount}\n          tagList={tagList as any}\n          size=\"large\"\n          mode=\"custom\"\n          showPopover={showRestTagsPopover}\n          popoverProps={restTagsPopoverProps}\n        />\n      );\n    };\n\n    const handleClear = (e: MouseEvent) => {\n      e && e.stopPropagation();\n      foundation.handleClear(e);\n    };\n\n    /* istanbul ignore next */\n    const handleClearEnterPress = (e: KeyboardEvent) => {\n      e && e.stopPropagation();\n      foundation.handleClearEnterPress(e);\n    };\n\n    const handleMouseOver = (e: MouseEvent) => {\n      foundation.toggleHoverState(true);\n    };\n\n    const handleMouseLeave = (e: MouseEvent) => {\n      foundation.toggleHoverState(false);\n    };\n\n    const search = (value: string) => {\n      const { isOpen } = state;\n      if (!isOpen) {\n        foundation.open();\n      }\n      foundation.handleInputChange(value);\n    };\n\n    const close = () => {\n      foundation.close(null);\n    };\n\n    const renderArrow = () => {\n      const showClearBtn_ = showClearBtn();\n      const { arrowIcon } = props;\n      if (showClearBtn_) {\n        return null;\n      }\n      return arrowIcon ? (\n        <div class={cls(`${prefixcls}-arrow`)} x-semi-prop=\"arrowIcon\">\n          {arrowIcon}\n        </div>\n      ) : null;\n    };\n\n    const renderClearBtn = () => {\n      const showClearBtn_ = showClearBtn();\n      const { clearIcon } = props;\n      const clearCls = cls(`${prefixcls}-clearbtn`);\n      if (showClearBtn_) {\n        return (\n          <div\n            role=\"button\"\n            tabindex={0}\n            aria-label=\"Clear TreeSelect value\"\n            class={clearCls}\n            onClick={handleClear}\n            onKeypress={handleClearEnterPress}\n          >\n            {clearIcon ? clearIcon : <IconClear />}\n          </div>\n        );\n      }\n      return null;\n    };\n\n    const renderSelection = () => {\n      const {\n        disabled,\n        multiple,\n        filterTreeNode,\n        validateStatus,\n        prefix,\n        suffix,\n        style,\n        size,\n        insetLabel,\n        className,\n        placeholder,\n        showClear,\n        leafOnly,\n        searchPosition,\n        triggerRender,\n        borderless,\n        autoMergeValue,\n        checkRelation,\n        ...rest\n      } = props;\n      const { inputValue, selectedKeys, checkedKeys, keyEntities, isFocus, realCheckedKeys } = state;\n      const filterable = Boolean(filterTreeNode);\n      const useCustomTrigger = typeof triggerRender === 'function';\n      const mouseEvent: VueHTMLAttributes = showClear\n        ? {\n            onMouseenter: (e: MouseEvent) => handleMouseOver(e),\n            onMouseleave: (e: MouseEvent) => handleMouseLeave(e),\n          }\n        : {};\n      const isTriggerPositionSearch = searchPosition === strings.SEARCH_POSITION_TRIGGER && filterable;\n      const isEmptyTriggerSearch = isTriggerPositionSearch && isEmpty(checkedKeys);\n      const isValueTriggerSearch = isTriggerPositionSearch && !isEmpty(checkedKeys);\n      const classNames = useCustomTrigger\n        ? cls(className)\n        : cls(\n            prefixcls,\n            {\n              [`${prefixcls}-borderless`]: borderless,\n              [`${prefixcls}-focus`]: isFocus,\n              [`${prefixcls}-disabled`]: disabled,\n              [`${prefixcls}-single`]: !multiple,\n              [`${prefixcls}-multiple`]: multiple,\n              [`${prefixcls}-multiple-tagInput-empty`]: multiple && isEmptyTriggerSearch,\n              [`${prefixcls}-multiple-tagInput-notEmpty`]: multiple && isValueTriggerSearch,\n              [`${prefixcls}-filterable`]: filterable,\n              [`${prefixcls}-error`]: validateStatus === 'error',\n              [`${prefixcls}-warning`]: validateStatus === 'warning',\n              [`${prefixcls}-small`]: size === 'small',\n              [`${prefixcls}-large`]: size === 'large',\n              [`${prefixcls}-with-prefix`]: prefix || insetLabel,\n              [`${prefixcls}-with-suffix`]: suffix,\n              [`${prefixcls}-with-suffix`]: suffix,\n            },\n            className\n          );\n      let inner: VNode | VNode[];\n      let triggerRenderKeys = [];\n      if (multiple) {\n        if (!autoMergeValue) {\n          triggerRenderKeys = [...checkedKeys];\n        } else if (checkRelation === 'related') {\n          triggerRenderKeys = normalizeKeyList([...checkedKeys], keyEntities, leafOnly, true);\n        } else if (checkRelation === 'unRelated') {\n          triggerRenderKeys = [...realCheckedKeys];\n        }\n      } else {\n        triggerRenderKeys = selectedKeys;\n      }\n      if (useCustomTrigger) {\n        inner = (\n          <Trigger\n            inputValue={inputValue}\n            value={triggerRenderKeys.map((key: string) => get(keyEntities, [key, 'data']))}\n            disabled={disabled}\n            placeholder={placeholder}\n            onClear={handleClear}\n            componentName={'TreeSelect'}\n            triggerRender={triggerRender}\n            componentProps={{ ...props }}\n            onSearch={search}\n            onRemove={removeTag}\n          />\n        );\n      } else {\n        inner = [\n          <Fragment key={'prefix'}>{prefix || insetLabel ? renderPrefix() : null}</Fragment>,\n          <Fragment key={'selection'}>\n            <div class={`${prefixcls}-selection`}>{renderSelectContent(triggerRenderKeys)}</div>\n          </Fragment>,\n          <Fragment key={'suffix'}>{suffix ? renderSuffix() : null}</Fragment>,\n          <Fragment key={'clearBtn'}>\n            {showClear || (isTriggerPositionSearch && inputValue) ? renderClearBtn() : null}\n          </Fragment>,\n          <Fragment key={'arrow'}>{renderArrow()}</Fragment>,\n        ];\n      }\n\n      const tabindex = disabled ? null : 0;\n      /**\n       * Reasons for disabling the a11y eslint rule:\n       * The following attributes(aria-controls,aria-expanded) will be automatically added by Tooltip, no need to declare here\n       */\n      return (\n        <div\n          // eslint-disable-next-line jsx-a11y/role-has-required-aria-props\n          role=\"combobox\"\n          aria-disabled={disabled}\n          aria-haspopup=\"tree\"\n          tabindex={tabindex}\n          class={classNames}\n          style={style}\n          ref={triggerRef}\n          onClick={handleClick}\n          onKeypress={handleSelectionEnterPress}\n          aria-invalid={props['aria-invalid']}\n          aria-errormessage={props['aria-errormessage']}\n          aria-label={props['aria-label']}\n          aria-labelledby={props['aria-labelledby']}\n          aria-describedby={props['aria-describedby']}\n          aria-required={props['aria-required']}\n          {...mouseEvent}\n          {...getDataAttr()}\n        >\n          {{ default: () => inner }}\n        </div>\n      );\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const renderTagItem = (key: string, idx: number) => {\n      const { keyEntities, disabledKeys } = state;\n      const {\n        size,\n        leafOnly,\n        disabled,\n        disableStrictly,\n        renderSelectedItem: propRenderSelectedItem,\n        treeNodeLabelProp,\n        keyMaps,\n      } = props;\n      const realLabelName = get(keyMaps, 'label', treeNodeLabelProp);\n      const keyList = normalizeKeyList([key], keyEntities, leafOnly, true);\n      const nodes = keyList.map((i) =>\n        keyEntities[key] && keyEntities[key].key === key ? keyEntities[key].data : getDataForKeyNotInKeyEntities(key)\n      );\n      const value = getValueOrKey(nodes, keyMaps);\n      const tagCls = cls(`${prefixcls}-selection-tag`, {\n        [`${prefixcls}-selection-tag-disabled`]: disabled,\n      });\n      const nodeHaveData = !isEmpty(nodes) && !isEmpty(nodes[0]);\n      const isDisableStrictlyNode = disableStrictly && nodeHaveData && disabledKeys.has(nodes[0].key);\n      const closable = nodeHaveData && !nodes[0].disabled && !disabled && !isDisableStrictlyNode;\n      const onClose = (tagChildren: VueJsxNode, e: MouseEvent) => {\n        // When value has not changed, prevent clicking tag closeBtn to close tag\n        e.preventDefault();\n        removeTag(key);\n      };\n      const tagProps: Partial<TagProps> & VueHTMLAttributes = {\n        size: size === 'small' ? 'small' : 'large',\n        key: `tag-${value}-${idx}`,\n        color: 'white',\n        className: tagCls,\n        closable,\n        onClose,\n      };\n      const item = nodes[0];\n      const renderSelectedItem = isFunction(propRenderSelectedItem)\n        ? propRenderSelectedItem\n        : (selectedItem: TreeNodeData) => ({\n            isRenderInTag: true,\n            content: get(selectedItem, treeNodeLabelProp, null),\n          });\n      if (isFunction(renderSelectedItem)) {\n        const { content, isRenderInTag } = item\n          ? (renderSelectedItem as RenderSelectedItemInMultiple)(item, { index: idx, onClose })\n          : ({} as any);\n        if (isRenderInTag) {\n          return <Tag {...tagProps}>{content}</Tag>;\n        } else {\n          return content;\n        }\n      }\n      return <Tag {...tagProps}>{value}</Tag>;\n    };\n\n    const renderTagInput = (triggerRenderKeys: string[]) => {\n      const {\n        disabled,\n        size,\n        searchAutoFocus,\n        placeholder,\n        maxTagCount,\n        showRestTagsPopover,\n        restTagsPopoverProps,\n        searchPosition,\n        filterTreeNode,\n        preventScroll,\n      } = props;\n      const { inputValue } = state;\n      // auto focus search input divide into two parts\n      // 1. filterTreeNode && searchPosition === strings.SEARCH_POSITION_TRIGGER\n      //    Implemented by passing autofocus to the underlying input's autofocus\n      // 2. filterTreeNode && searchPosition === strings.SEARCH_POSITION_DROPDOWN\n      //    Due to the off-screen rendering in the tooltip implementation mechanism, if it is implemented through the\n      //    autofocus of the input, when the option panel is opened, the page will scroll to top, so it is necessary\n      //    to call the focus method through ref in the onVisibleChange callback of the Popover to achieve focus\n      const autoFocus =\n        filterTreeNode && searchPosition === strings.SEARCH_POSITION_TRIGGER ? searchAutoFocus : undefined;\n      return (\n        <TagInput\n          maxTagCount={maxTagCount}\n          disabled={disabled}\n          onInputChange={(v) => search(v)}\n          ref={tagInputRef}\n          placeholder={placeholder}\n          value={triggerRenderKeys}\n          inputValue={inputValue}\n          size={size}\n          showRestTagsPopover={showRestTagsPopover}\n          restTagsPopoverProps={restTagsPopoverProps}\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus={autoFocus}\n          renderTagItem={(itemKey, index) => renderTagItem(itemKey, index)}\n          onRemove={(itemKey) => removeTag(itemKey)}\n          expandRestTagsOnClick={false}\n          preventScroll={preventScroll}\n        />\n      );\n    };\n\n    // render Tree\n    const renderInput = () => {\n      const {\n        searchPlaceholder,\n        searchRender,\n        showSearchClear,\n        searchPosition,\n        searchAutoFocus,\n        multiple,\n        disabled,\n        preventScroll,\n      } = props;\n      const isDropdownPositionSearch = searchPosition === strings.SEARCH_POSITION_DROPDOWN;\n      const inputcls = cls({\n        [`${prefixTree}-input`]: isDropdownPositionSearch,\n        [`${prefixcls}-inputTrigger`]: !isDropdownPositionSearch,\n      });\n      const { inputValue } = state;\n      const baseInputProps = {\n        value: inputValue,\n        className: inputcls,\n        preventScroll,\n        onChange: (value: string) => search(value),\n      };\n      const inputDropdownProps = {\n        showClear: showSearchClear,\n        prefix: <IconSearch />,\n      };\n      const inputTriggerProps = {\n        autofocus: searchAutoFocus,\n        onFocus: (e: FocusEvent) => foundation.handleInputTriggerFocus(),\n        onBlur: (e: FocusEvent) => foundation.handleInputTriggerBlur(),\n        disabled,\n      };\n      const realInputProps = isDropdownPositionSearch ? inputDropdownProps : inputTriggerProps;\n      const wrapperCls = cls({\n        [`${prefixTree}-search-wrapper`]: isDropdownPositionSearch,\n        [`${prefixcls}-triggerSingleSearch-wrapper`]: !isDropdownPositionSearch && !multiple,\n      });\n      const useCusSearch = typeof searchRender === 'function' || typeof searchRender === 'boolean';\n      if (useCusSearch && !searchRender) {\n        return null;\n      }\n      return (\n        <div class={wrapperCls}>\n          <LocaleConsumer componentName=\"TreeSelect\">\n            {(locale: Locale['TreeSelect']) => {\n              const placeholder = isDropdownPositionSearch ? searchPlaceholder || locale.searchPlaceholder : '';\n              if (useCusSearch) {\n                return (searchRender as any)({ ...realInputProps, ...baseInputProps, placeholder });\n              }\n              return (\n                <Input\n                  aria-label=\"Filter TreeSelect item\"\n                  ref={inputRef as any}\n                  // autofocus={searchAutoFocus}\n                  placeholder={placeholder}\n                  {...baseInputProps}\n                  {...realInputProps}\n                />\n              );\n            }}\n          </LocaleConsumer>\n        </div>\n      );\n    };\n\n    const renderEmpty = () => {\n      const { emptyContent } = props;\n      if (emptyContent === null) {\n        return null;\n      }\n      if (emptyContent) {\n        return <TreeNode key={'treeSelectTreeNode'} empty emptyContent={props.emptyContent} />;\n      } else {\n        return (\n          <LocaleConsumer componentName=\"Tree\">\n            {(locale: Locale['Tree']) => <TreeNode key={'treeSelectTreeNode'} empty emptyContent={locale.emptyText} />}\n          </LocaleConsumer>\n        );\n      }\n    };\n\n    const onNodeLoad = (data: TreeNodeData) => new Promise((resolve) => foundation.setLoadKeys(data, resolve));\n\n    const onNodeSelect = (e: MouseEvent | KeyboardEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeSelect(e, treeNode);\n    };\n\n    const onNodeCheck = (e: MouseEvent | KeyboardEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeSelect(e, treeNode);\n    };\n\n    const onNodeExpand = (e: MouseEvent | KeyboardEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeExpand(e, treeNode);\n    };\n\n    const getTreeNodeRequiredProps = () => {\n      const { expandedKeys, selectedKeys, checkedKeys, halfCheckedKeys, keyEntities, filteredKeys } = state;\n      return {\n        expandedKeys: expandedKeys || new Set(),\n        selectedKeys: selectedKeys || [],\n        checkedKeys: checkedKeys || new Set(),\n        halfCheckedKeys: halfCheckedKeys || new Set(),\n        filteredKeys: filteredKeys || new Set(),\n        keyEntities,\n      };\n    };\n\n    const getTreeNodeKey = (treeNode: TreeNodeData) => {\n      const { data } = treeNode;\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const { key }: { key: string } = data;\n      return key;\n    };\n\n    /* Event handler function after popover visible change */\n    const handlePopoverVisibleChange = (isVisible) => {\n      foundation.handlePopoverVisibleChange(isVisible);\n    };\n\n    const afterClose = () => {\n      foundation.handleAfterClose();\n    };\n\n    const renderTreeNode = (treeNode: FlattenNode, ind: number, style: CSSProperties) => {\n      const { data, key } = treeNode;\n      const treeNodeProps = foundation.getTreeNodeProps(key);\n      const { showLine } = props;\n      if (!treeNodeProps) {\n        return null;\n      }\n      const props_: any = pick(treeNode, ['key', 'label', 'disabled', 'isLeaf', 'icon', 'isEnd']);\n      const { keyMaps } = props_;\n      const children = data[get(keyMaps, 'children', 'children')];\n      !isUndefined(children) && (props_.children = children);\n      // 不要删除，更新用\n      console.debug(state.loadingKeys.size);\n      return <TreeNode {...treeNodeProps} {...data} {...props_} data={data} style={style} showLine={showLine} />;\n    };\n\n    const itemKey = (index: number, data: Record<string, any>) => {\n      const { visibleOptions } = data;\n      // Find the item at the specified index.\n      const item = visibleOptions[index];\n      // Return a value that uniquely identifies this item.\n      return item.key;\n    };\n\n    const renderNodeList = () => {\n      const { flattenNodes, cachedFlattenNodes, motionKeys, motionType, filteredKeys } = state;\n      const { direction } = context.value;\n      const { virtualize, motionExpand } = props;\n      const isExpandControlled = 'expandedKeys' in getProps(props);\n      if (!virtualize || isEmpty(virtualize)) {\n        return (\n          <NodeList\n            flattenNodes={flattenNodes as FlattenNode[]}\n            flattenList={cachedFlattenNodes}\n            motionKeys={motionExpand ? motionKeys : new Set([])}\n            motionType={motionType}\n            // When motionKeys is empty, but filteredKeys is not empty (that is, the search hits), this situation should be distinguished from ordinary motionKeys\n            searchTargetIsDeep={isExpandControlled && motionExpand && isEmpty(motionKeys) && !isEmpty(filteredKeys)}\n            onMotionEnd={onMotionEnd}\n            renderTreeNode={renderTreeNode}\n          />\n        );\n      }\n\n      const data = {\n        visibleOptions: flattenNodes,\n        renderOption: renderTreeNode,\n      };\n\n      return (\n        <AutoSizer\n          defaultHeight={styleNum(virtualize.height)}\n          defaultWidth={styleNum(virtualize.width)}\n          children={({ height, width }) => (\n            <VirtualList\n              itemCount={flattenNodes.length}\n              itemSize={virtualize.itemSize}\n              height={height as any}\n              width={width}\n              // @ts-ignore avoid strict check of itemKey\n              itemKey={itemKey}\n              itemData={data}\n              className={`${prefixTree}-virtual-list`}\n              style={{ direction }}\n            >\n              {VirtualRow}\n            </VirtualList>\n          )}\n        ></AutoSizer>\n      );\n    };\n\n    const renderTree = () => {\n      const {\n        keyEntities,\n        motionKeys,\n        motionType,\n        inputValue,\n        filteredKeys,\n        flattenNodes,\n        checkedKeys,\n        realCheckedKeys,\n      } = state;\n      const {\n        loadData,\n        filterTreeNode,\n        disabled,\n        multiple,\n        showFilteredOnly,\n        motionExpand,\n        outerBottomSlot,\n        outerTopSlot,\n        expandAction,\n        labelEllipsis,\n        virtualize,\n        optionListStyle,\n        searchPosition,\n        renderLabel,\n        renderFullLabel,\n        checkRelation,\n        emptyContent\n      } = props;\n      const wrapperCls = cls(`${prefixTree}-wrapper`);\n      const searchNoRes = Boolean(inputValue) && !filteredKeys.size;\n      const noData = isEmpty(flattenNodes) || (showFilteredOnly && searchNoRes);\n      const isDropdownPositionSearch = searchPosition === strings.SEARCH_POSITION_DROPDOWN;\n      const listCls = cls(`${prefixTree}-option-list ${prefixTree}-option-list-block`, {\n        [`${prefixTree}-option-list-hidden`]: emptyContent === null && noData,\n      });\n      return (\n        <TreeContext.Provider\n          value={{\n            loadData,\n            treeDisabled: disabled,\n            motion: motionExpand,\n            motionKeys,\n            motionType,\n            expandAction,\n            filterTreeNode,\n            keyEntities,\n            onNodeClick: onNodeClick,\n            onNodeDoubleClick: onNodeDoubleClick,\n            // tree node will call this function when treeNode is right clicked\n            onNodeRightClick: noop,\n            onNodeExpand: onNodeExpand,\n            onNodeSelect: onNodeSelect,\n            onNodeCheck: onNodeCheck,\n            renderTreeNode: renderTreeNode,\n            multiple,\n            showFilteredOnly,\n            isSearching: Boolean(inputValue),\n            renderLabel,\n            renderFullLabel,\n            labelEllipsis: typeof labelEllipsis === 'undefined' ? virtualize : labelEllipsis,\n          }}\n        >\n          <div class={wrapperCls}>\n            {outerTopSlot}\n            {!outerTopSlot && filterTreeNode && isDropdownPositionSearch && renderInput()}\n            <div class={listCls} role=\"tree\" aria-multiselectable={multiple ? true : false} style={optionListStyle}>\n              {noData ? (\n                renderEmpty()\n              ) : multiple ? (\n                <CheckboxGroup value={Array.from(checkRelation === 'related' ? checkedKeys : realCheckedKeys)}>\n                  {renderNodeList()}\n                </CheckboxGroup>\n              ) : (\n                renderNodeList()\n              )}\n            </div>\n            {outerBottomSlot}\n          </div>\n        </TreeContext.Provider>\n      );\n    };\n\n    return () => {\n      const content = renderContent();\n      const {\n        motion,\n        zIndex,\n        mouseLeaveDelay,\n        mouseEnterDelay,\n        autoAdjustOverflow,\n        stopPropagation,\n        getPopupContainer,\n        dropdownMargin,\n        position,\n      } = props;\n      const { isOpen, rePosKey } = state;\n      const selection = renderSelection();\n      const pos = position ? position : 'bottomLeft';\n      return (\n        <Popover\n          stopPropagation={stopPropagation}\n          getPopupContainer={getPopupContainer}\n          zIndex={zIndex}\n          motion={motion}\n          margin={dropdownMargin}\n          ref={optionsRef}\n          content={content}\n          visible={isOpen}\n          trigger=\"custom\"\n          rePosKey={rePosKey}\n          position={pos}\n          autoAdjustOverflow={autoAdjustOverflow}\n          mouseLeaveDelay={mouseLeaveDelay}\n          mouseEnterDelay={mouseEnterDelay}\n          onVisibleChange={handlePopoverVisibleChange}\n          afterClose={afterClose}\n        >\n          {selection}\n        </Popover>\n      );\n    };\n  },\n});\n\nexport default TreeSelect;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefixcls","cssClasses","PREFIX","prefixTree","PREFIX_TREE","key","propTypes","PropTypes","string","bool","borderless","loadedKeys","array","loadData","func","onLoad","arrowIcon","node","clearIcon","defaultOpen","defaultValue","oneOfType","defaultExpandAll","defaultExpandedKeys","expandAll","disabled","disableStrictly","filterTreeNode","multiple","searchPlaceholder","searchAutoFocus","virtualize","object","treeNodeFilterProp","onChange","onClear","onSearch","onSelect","onExpand","onChangeWithObject","onBlur","onFocus","value","number","expandedKeys","autoExpandParent","showClear","showSearchClear","autoAdjustOverflow","showFilteredOnly","showLine","motionExpand","emptyContent","leafOnly","keyMaps","treeData","dropdownClassName","dropdownStyle","motion","placeholder","maxTagCount","size","String","className","style","treeNodeLabelProp","suffix","prefix","insetLabel","insetLabelId","zIndex","getPopupContainer","dropdownMatchSelectWidth","validateStatus","mouseEnterDelay","mouseLeaveDelay","triggerRender","stopPropagation","outerBottomSlot","outerTopSlot","onVisibleChange","expandAction","searchPosition","clickToHide","renderLabel","renderFullLabel","labelEllipsis","optionListStyle","searchRender","renderSelectedItem","checkRelation","id","showRestTagsPopover","restTagsPopoverProps","preventScroll","clickTriggerToHide","autoMergeValue","dropdownMargin","position","defaultProps","strings","SEARCH_POSITION_DROPDOWN","_createVNode","IconChevronDown","popoverNumbers","DEFAULT_Z_INDEX","noop","vuePropsType","vuePropsMake","TreeSelect","defineComponent","props","name","setup","getProps","useHasInProps","slots","useSlots","state","reactive","inputTriggerFocus","isOpen","isFocus","rePosKey","dropdownMinWidth","inputValue","keyEntities","flattenNodes","cachedFlattenNodes","undefined","selectedKeys","checkedKeys","Set","halfCheckedKeys","realCheckedKeys","disabledKeys","motionKeys","motionType","filteredKeys","filteredExpandedKeys","filteredShownKeys","prevProps","isHovering","cachedKeyValuePairs","loadingKeys","inputRef","ref","tagInputRef","triggerRef","optionsRef","clickOutsideHandler","Math","random","slice","onNodeClick","onNodeDoubleClick","adapter","adapterInject","context","getDataAttr","useBaseComponent","adapter_","filterAdapter","updateInputValue","treeSelectAdapter","registerClickOutsideHandler","cb","unregisterClickOutsideHandler","e","optionInstance","getRef","vnode","el","triggerDom","optionsDom","target","path","composedPath","contains","parentNode","includes","document","addEventListener","removeEventListener","rePositionDropdown","treeAdapter","updateState","states","keys","forEach","notifySelect","selectKey","notifySearch","input","filteredNodes","cacheFlattenNodes","cloneDeep","notifyLoad","newLoadedKeys","data","isFunction","notifyClear","updateLoadKeys","resolve","foundation","handleNodeLoad","openMenu","nextTick","closeMenu","getTriggerWidth","getBoundingClientRect","width","setOptionWrapperWidth","notifyChange","notifyChangeWithObject","notifyExpand","expanded","onNodeLoad","notifyFocus","v","notifyBlur","toggleHovering","updateInputFocus","focus","blur","updateIsFocus","TreeSelectFoundation","onMotionEnd","getDerivedStateFromProps","prevState","needUpdate","isEqual","withObject","valueEntities","newState","needUpdateTreeData","needUpdateExpandedKeys","isSearching","Boolean","length","entitiesMap","convertDataToEntities","expandAllWhenDataChange","filteredState","filterTreeData","filterProps","prevExpandedKeys","calcExpandedKeys","prevKeys","motionResult","calcMotionKeys","filter","has","flattenTreeData","calcExpandedKeysForValues","normalizeValue","isMultiple","findKeysForValues","updateKeys","checkedKeyValues","calcCheckedKeys","calcDisabledKeys","watch","defautl","immediate","onMounted","init","onUnmounted","destroy","renderSuffix","suffixWrapperCls","cls","isString","isSemiIcon","renderPrefix","labelNode","prefixWrapperCls","renderContent","minWidth","isNaN","popoverCls","handleKeyDown","renderTree","removeTag","removedKey","handleClick","getDataForKeyNotInKeyEntities","handleSelectionEnterPress","hasValue","showClearBtn","triggerSearchHasInputValue","SEARCH_POSITION_TRIGGER","renderTagList","triggerRenderKeys","propRenderSelectedItem","realLabelName","get","item","isRenderInTag","content","tagList","index","onClose","tagContent","preventDefault","tag","closable","color","visible","push","Tag","default","renderSingleTriggerSearchItem","renderText","getRenderTextInSingle","spanCls","onClickSingleTriggerSearchItem","renderSingleTriggerSearch","_Fragment","renderInput","renderSelectContent","renderTagInput","TagGroup","handleClear","handleClearEnterPress","handleMouseOver","toggleHoverState","handleMouseLeave","search","open","handleInputChange","renderArrow","showClearBtn_","renderClearBtn","clearCls","IconClear","renderSelection","rest","filterable","useCustomTrigger","mouseEvent","onMouseenter","onMouseleave","isTriggerPositionSearch","isEmptyTriggerSearch","isEmpty","isValueTriggerSearch","classNames","inner","normalizeKeyList","Trigger","map","_mergeProps","renderTagItem","idx","nodes","i","getValueOrKey","tagCls","nodeHaveData","isDisableStrictlyNode","tagChildren","tagProps","selectedItem","autoFocus","TagInput","itemKey","isDropdownPositionSearch","inputcls","baseInputProps","inputDropdownProps","IconSearch","realInputProps","autofocus","handleInputTriggerFocus","handleInputTriggerBlur","wrapperCls","useCusSearch","LocaleConsumer","locale","Input","renderEmpty","TreeNode","emptyText","Promise","setLoadKeys","onNodeSelect","treeNode","handleNodeSelect","onNodeCheck","onNodeExpand","handleNodeExpand","handlePopoverVisibleChange","isVisible","afterClose","handleAfterClose","renderTreeNode","ind","treeNodeProps","getTreeNodeProps","props_","pick","children","isUndefined","console","debug","visibleOptions","renderNodeList","direction","isExpandControlled","NodeList","renderOption","AutoSizer","styleNum","height","VirtualList","itemSize","VirtualRow","_slot","searchNoRes","noData","listCls","TreeContext","Provider","treeDisabled","onNodeRightClick","CheckboxGroup","Array","from","selection","Popover"],"mappings":"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"}