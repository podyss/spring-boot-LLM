{"version":3,"file":"index.js","sources":["../../src/components/progress/index.tsx"],"sourcesContent":["import cls from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/progress/constants';\nimport '@douyinfe/semi-foundation/progress/progress.scss';\nimport { Animation } from '@douyinfe/semi-animation';\nimport { Motion } from '../_base/base';\nimport { generateColor, StrokeArr } from '@douyinfe/semi-foundation/progress/generates';\nimport {\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  h,\n  onUnmounted,\n  PropType,\n  reactive,\n  useAttrs,\n  useSlots,\n  VNode,\n  watch,\n} from 'vue';\nimport { vuePropsMake } from '../PropTypes';\nimport getDataAttr from '@douyinfe/semi-foundation/utils/getDataAttr';\nimport { CombineProps } from '../interface';\n\nconst prefixCls = cssClasses.PREFIX;\n\nexport interface ProgressProps {\n  'aria-label'?: string | undefined;\n  'aria-labelledby'?: string | undefined;\n  'aria-valuetext'?: string | undefined;\n  className?: string;\n  direction?: 'horizontal' | 'vertical';\n  format?: (percent: number) => VNode | string;\n  id?: string;\n  motion?: Motion;\n  orbitStroke?: string;\n  percent?: number;\n  showInfo?: boolean;\n  size?: 'default' | 'small' | 'large';\n  stroke?: string | StrokeArr;\n  strokeGradient?: boolean;\n  strokeLinecap?: 'round' | 'square';\n  strokeWidth?: number;\n  style?: CSSProperties;\n  type?: 'line' | 'circle';\n  width?: number;\n}\n\nexport interface ProgressState {\n  percentNumber: number;\n}\n\nconst propTypes: CombineProps<ProgressProps> = {\n  'aria-label': PropTypes.string,\n  'aria-labelledby': PropTypes.string,\n  'aria-valuetext': PropTypes.string,\n  className: PropTypes.string,\n  direction: String as PropType<ProgressProps['direction']>,\n  format: [Function, ...PropTypes.node] as PropType<ProgressProps['format']>,\n  id: PropTypes.string,\n  motion: PropTypes.oneOfType([PropTypes.bool, PropTypes.func, PropTypes.object]),\n  orbitStroke: PropTypes.string,\n  percent: PropTypes.number,\n  // scale: PropTypes.number as PropType<ProgressProps['scale']>,\n  showInfo: PropTypes.bool,\n  size: String as PropType<ProgressProps['size']>,\n  stroke: [PropTypes.string, PropTypes.array],\n  strokeGradient: PropTypes.bool,\n  strokeLinecap: String as PropType<ProgressProps['strokeLinecap']>,\n  strokeWidth: PropTypes.number,\n  style: PropTypes.object,\n  type: String as PropType<ProgressProps['type']>,\n  width: PropTypes.number,\n};\n\nconst defaultProps = {\n  className: '',\n  direction: strings.DEFAULT_DIRECTION,\n  format:\n    () =>\n    (text: string): string =>\n      `${text}%`,\n  motion: true,\n  orbitStroke: 'var(--semi-color-fill-0)',\n  percent: 0,\n  showInfo: false,\n  size: strings.DEFAULT_SIZE,\n  stroke: strings.STROKE_DEFAULT,\n  strokeGradient: false,\n  strokeLinecap: strings.DEFAULT_LINECAP,\n  strokeWidth: 4,\n  style: {},\n  type: strings.DEFAULT_TYPE,\n};\nexport const vuePropsType = vuePropsMake<ProgressProps>(propTypes, defaultProps);\nconst Progress = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Progress',\n  setup(props, {}) {\n    const attr = useAttrs();\n    const slots = useSlots();\n    let _mounted: boolean = true;\n\n    let animation: Animation;\n    const state = reactive<ProgressState>({\n      percentNumber: props.percent, // Specially used for animation of numbers\n    });\n\n    watch(\n      () => props.percent,\n      (value, oldValue) => {\n        if (isNaN(value) || isNaN(oldValue)) {\n          throw new Error('[Semi Progress]:percent can not be NaN');\n          return;\n        }\n      }\n    );\n\n    watch(\n      () => props.percent,\n      (value, oldValue) => {\n        if (!props.motion) {\n          // eslint-disable-next-line\n          state.percentNumber = props.percent;\n          return;\n        }\n        if (animation && animation.destroy) {\n          animation.destroy();\n        }\n        animation = new Animation(\n          {\n            from: { value: oldValue },\n            to: { value: props.percent },\n          },\n          {\n            // easing: 'cubic-bezier(0, .68, .3, 1)'\n            easing: 'linear',\n            duration: 300,\n          }\n        );\n        animation.on('frame', (props: any) => {\n          // prevent setState while component is unmounted but this timer is called\n          if (_mounted === false) {\n            return;\n          }\n          // let percentNumber = Number.isInteger(props.value) ? props.value : Math.floor(props.value * 100) / 100;\n          const percentNumber = parseInt(props.value);\n          state.percentNumber = percentNumber;\n        });\n        animation.on('rest', () => {\n          // prevent setState while component is unmounted but this timer is called\n          if (_mounted === false) {\n            return;\n          }\n          state.percentNumber = props.percent;\n        });\n        animation.start();\n      }\n    );\n\n    onUnmounted(() => {\n      animation && animation.destroy();\n      _mounted = false;\n    });\n\n    function renderCircleProgress(): VNode {\n      const {\n        strokeLinecap,\n        style,\n        className,\n        strokeWidth,\n        format,\n        size,\n        stroke,\n        strokeGradient,\n        showInfo,\n        percent,\n        orbitStroke,\n        id,\n        ...rest\n      } = props;\n      const ariaLabel = props['aria-label'];\n      const ariaLabelledBy = props['aria-labelledby'];\n      const ariaValueText = props['aria-valuetext'];\n      const { percentNumber } = state;\n      const classNames = {\n        wrapper: cls(`${prefixCls}-circle`, className),\n        svg: cls(`${prefixCls}-circle-ring`),\n        circle: cls(`${prefixCls}-circle-ring-inner`),\n      };\n      const perc = calcPercent(percent);\n      const percNumber = calcPercent(percentNumber);\n\n      let width;\n      if (props.width) {\n        width = props.width;\n      } else {\n        size === strings.DEFAULT_SIZE ? (width = 72) : (width = 24);\n      }\n\n      // parse stroke & generate gradients\n      const _stroke = selectStroke(stroke, percent, strokeGradient);\n\n      // cx, cy is circle center\n      const cy = width / 2;\n      const cx = width / 2;\n      const radius = (width - strokeWidth) / 2; // radius\n      const circumference = radius * 2 * Math.PI;\n      const strokeDashoffset = (1 - perc / 100) * circumference; // Offset\n      const strokeDasharray = `${circumference} ${circumference}`;\n\n      const text = format(percNumber);\n\n      return (\n        <div\n          id={id}\n          class={classNames.wrapper}\n          style={style}\n          role=\"progressbar\"\n          aria-valuemin={0}\n          aria-valuemax={100}\n          aria-valuenow={percNumber}\n          aria-labelledby={ariaLabelledBy}\n          aria-label={ariaLabel}\n          aria-valuetext={ariaValueText}\n          {...getDataAttr({ ...rest, ...attr })}\n        >\n          <svg key={size} class={classNames.svg} height={width} width={width} aria-hidden>\n            <circle\n              stroke-dashoffset={0}\n              stroke-width={strokeWidth}\n              stroke-dasharray={strokeDasharray}\n              stroke-linecap={strokeLinecap}\n              fill=\"transparent\"\n              stroke={orbitStroke}\n              r={radius}\n              cx={cx}\n              cy={cy}\n              aria-hidden\n            />\n            <circle\n              class={classNames.circle}\n              stroke-dashoffset={strokeDashoffset}\n              stroke-width={strokeWidth}\n              stroke-dasharray={strokeDasharray}\n              stroke-linecap={strokeLinecap}\n              fill=\"transparent\"\n              stroke={_stroke}\n              r={radius}\n              cx={cx}\n              cy={cy}\n              aria-hidden\n            />\n          </svg>\n          {showInfo && size !== 'small' ? <span class={`${prefixCls}-circle-text`}>{text}</span> : null}\n        </div>\n      );\n    }\n\n    function calcPercent(percent: number): number {\n      let perc;\n      if (percent > 100) {\n        perc = 100;\n      } else if (percent < 0) {\n        perc = 0;\n      } else {\n        perc = percent;\n      }\n      return perc;\n    }\n\n    function selectStroke(stroke: string | StrokeArr, percent: number, strokeGradient): string {\n      if (typeof stroke === 'string') {\n        return stroke;\n      }\n      const color = generateColor(stroke, percent, strokeGradient);\n      if (typeof color !== 'undefined') {\n        return color;\n      }\n      return strings.STROKE_DEFAULT;\n    }\n\n    function renderLineProgress(): VNode {\n      const {\n        className,\n        style,\n        stroke,\n        strokeGradient,\n        direction,\n        format,\n        showInfo,\n        size,\n        percent,\n        orbitStroke,\n        id,\n        ...rest\n      } = props;\n      const ariaLabel = props['aria-label'];\n      const ariaLabelledBy = props['aria-labelledby'];\n      const ariaValueText = props['aria-valuetext'];\n      const { percentNumber } = state;\n      const progressWrapperCls = cls(prefixCls, className, {\n        [`${prefixCls}-horizontal`]: direction === strings.DEFAULT_DIRECTION,\n        [`${prefixCls}-vertical`]: direction !== strings.DEFAULT_DIRECTION,\n        [`${prefixCls}-large`]: size === 'large',\n      });\n      const progressTrackCls = cls({\n        [`${prefixCls}-track`]: true,\n      });\n      const innerCls = cls(`${prefixCls}-track-inner`);\n\n      const perc = calcPercent(percent);\n      const percNumber = calcPercent(percentNumber);\n\n      // parse stroke & generate gradients\n      const _stroke = selectStroke(stroke, percent, strokeGradient);\n\n      const innerStyle: Record<string, any> = {\n        background: _stroke,\n      };\n      if (direction === strings.DEFAULT_DIRECTION) {\n        innerStyle.width = `${perc}%`;\n      } else {\n        innerStyle.height = `${perc}%`;\n      }\n\n      const text = format(percNumber);\n\n      return (\n        <div\n          id={id}\n          class={progressWrapperCls}\n          style={style}\n          role=\"progressbar\"\n          aria-valuemin={0}\n          aria-valuemax={100}\n          aria-valuenow={perc}\n          aria-labelledby={ariaLabelledBy}\n          aria-label={ariaLabel}\n          aria-valuetext={ariaValueText}\n          {...getDataAttr({ ...rest, ...attr })}\n        >\n          <div class={progressTrackCls} style={orbitStroke ? { backgroundColor: orbitStroke } : {}} aria-hidden>\n            <div class={innerCls} style={innerStyle} aria-hidden />\n          </div>\n          {showInfo ? <div class={`${prefixCls}-line-text`}>{text}</div> : null}\n        </div>\n      );\n    }\n\n    return () => {\n      const { type } = props;\n      if (type === 'line') {\n        return renderLineProgress();\n      } else {\n        return renderCircleProgress();\n      }\n    };\n  },\n});\n\nexport default Progress;\n"],"names":["prefixCls","cssClasses","PREFIX","propTypes","PropTypes","string","className","direction","String","format","Function","node","id","motion","oneOfType","bool","func","object","orbitStroke","percent","number","showInfo","size","stroke","array","strokeGradient","strokeLinecap","strokeWidth","style","type","width","defaultProps","strings","DEFAULT_DIRECTION","text","DEFAULT_SIZE","STROKE_DEFAULT","DEFAULT_LINECAP","DEFAULT_TYPE","vuePropsType","vuePropsMake","Progress","defineComponent","props","name","setup","attr","useAttrs","useSlots","_mounted","animation","state","reactive","percentNumber","watch","value","oldValue","isNaN","Error","destroy","Animation","from","to","easing","duration","on","parseInt","start","onUnmounted","renderCircleProgress","rest","ariaLabel","ariaLabelledBy","ariaValueText","classNames","wrapper","cls","svg","circle","perc","calcPercent","percNumber","_stroke","selectStroke","cy","cx","radius","circumference","Math","PI","strokeDashoffset","strokeDasharray","_createVNode","_mergeProps","getDataAttr","color","generateColor","renderLineProgress","progressWrapperCls","progressTrackCls","innerCls","innerStyle","background","height","backgroundColor"],"mappings":";;;;;;;;;AAwBA,MAAMA,IAAYC,EAAWC,QA4BvBC,KAAyC;AAAA,EAC7C,cAAcC,EAAUC;AAAAA,EACxB,mBAAmBD,EAAUC;AAAAA,EAC7B,kBAAkBD,EAAUC;AAAAA,EAC5BC,WAAWF,EAAUC;AAAAA,EACrBE,WAAWC;AAAAA,EACXC,QAAQ,CAACC,UAAU,GAAGN,EAAUO,IAAI;AAAA,EACpCC,IAAIR,EAAUC;AAAAA,EACdQ,QAAQT,EAAUU,UAAU,CAACV,EAAUW,MAAMX,EAAUY,MAAMZ,EAAUa,MAAM,CAAC;AAAA,EAC9EC,aAAad,EAAUC;AAAAA,EACvBc,SAASf,EAAUgB;AAAAA;AAAAA,EAEnBC,UAAUjB,EAAUW;AAAAA,EACpBO,MAAMd;AAAAA,EACNe,QAAQ,CAACnB,EAAUC,QAAQD,EAAUoB,KAAK;AAAA,EAC1CC,gBAAgBrB,EAAUW;AAAAA,EAC1BW,eAAelB;AAAAA,EACfmB,aAAavB,EAAUgB;AAAAA,EACvBQ,OAAOxB,EAAUa;AAAAA,EACjBY,MAAMrB;AAAAA,EACNsB,OAAO1B,EAAUgB;AACnB,GAEMW,KAAe;AAAA,EACnBzB,WAAW;AAAA,EACXC,WAAWyB,EAAQC;AAAAA,EACnBxB,QACEA,MACCyB,CAAAA,MACC,GAAGA,CAAI;AAAA,EACXrB,QAAQ;AAAA,EACRK,aAAa;AAAA,EACbC,SAAS;AAAA,EACTE,UAAU;AAAA,EACVC,MAAMU,EAAQG;AAAAA,EACdZ,QAAQS,EAAQI;AAAAA,EAChBX,gBAAgB;AAAA,EAChBC,eAAeM,EAAQK;AAAAA,EACvBV,aAAa;AAAA,EACbC,OAAO,CAAE;AAAA,EACTC,MAAMG,EAAQM;AAChB,GACaC,KAAeC,EAA4BrC,IAAW4B,EAAY,GACzEU,KAAWC,gBAAAA,EAAgB;AAAA,EAC/BC,OAAO;AAAA,IAAE,GAAGJ;AAAAA,EAAc;AAAA,EAC1BK,MAAM;AAAA,EACNC,MAAMF,GAAO,IAAI;AACf,UAAMG,IAAOC;AACCC,IAAAA,EAAU;AACxB,QAAIC,IAAoB,IAEpBC;AACJ,UAAMC,IAAQC,EAAwB;AAAA,MACpCC,eAAeV,EAAMxB;AAAAA;AAAAA,IACvB,CAAC;AAEDmC,IAAAA,EACE,MAAMX,EAAMxB,SACZ,CAACoC,GAAOC,MAAa;AACnB,UAAIC,MAAMF,CAAK,KAAKE,MAAMD,CAAQ;AAChC,cAAM,IAAIE,MAAM,wCAAwC;AAAA,IAG5D,CACF,GAEAJ,EACE,MAAMX,EAAMxB,SACZ,CAACoC,GAAOC,MAAa;AACnB,UAAI,CAACb,EAAM9B,QAAQ;AAEjBsC,QAAAA,EAAME,gBAAgBV,EAAMxB;AAC5B;AAAA,MACF;AACA,MAAI+B,KAAaA,EAAUS,WACzBT,EAAUS,QAAO,GAEnBT,IAAY,IAAIU,EACd;AAAA,QACEC,MAAM;AAAA,UAAEN,OAAOC;AAAAA,QAAU;AAAA,QACzBM,IAAI;AAAA,UAAEP,OAAOZ,EAAMxB;AAAAA,QAAQ;AAAA,MAC7B,GACA;AAAA;AAAA,QAEE4C,QAAQ;AAAA,QACRC,UAAU;AAAA,MACZ,CACF,GACAd,EAAUe,GAAG,SAAUtB,CAAAA,MAAe;AAEpC,YAAIM,MAAa;AACf;AAGF,cAAMI,IAAgBa,SAASvB,EAAMY,KAAK;AAC1CJ,QAAAA,EAAME,gBAAgBA;AAAAA,MACxB,CAAC,GACDH,EAAUe,GAAG,QAAQ,MAAM;AAEzB,QAAIhB,MAAa,OAGjBE,EAAME,gBAAgBV,EAAMxB;AAAAA,MAC9B,CAAC,GACD+B,EAAUiB,MAAK;AAAA,IACjB,CACF,GAEAC,EAAY,MAAM;AAChBlB,MAAAA,KAAaA,EAAUS,WACvBV,IAAW;AAAA,IACb,CAAC;AAED,aAASoB,IAA8B;AACrC,YAAM;AAAA,QACJ3C,eAAAA;AAAAA,QACAE,OAAAA;AAAAA,QACAtB,WAAAA;AAAAA,QACAqB,aAAAA;AAAAA,QACAlB,QAAAA;AAAAA,QACAa,MAAAA;AAAAA,QACAC,QAAAA;AAAAA,QACAE,gBAAAA;AAAAA,QACAJ,UAAAA;AAAAA,QACAF,SAAAA;AAAAA,QACAD,aAAAA;AAAAA,QACAN,IAAAA;AAAAA,QACA,GAAG0D;AAAAA,MACJ,IAAG3B,GACE4B,IAAY5B,EAAM,YAAY,GAC9B6B,IAAiB7B,EAAM,iBAAiB,GACxC8B,IAAgB9B,EAAM,gBAAgB,GACtC;AAAA,QAAEU,eAAAA;AAAAA,MAAe,IAAGF,GACpBuB,IAAa;AAAA,QACjBC,SAASC,EAAI,GAAG5E,CAAS,WAAWM,CAAS;AAAA,QAC7CuE,KAAKD,EAAI,GAAG5E,CAAS,cAAc;AAAA,QACnC8E,QAAQF,EAAI,GAAG5E,CAAS,oBAAoB;AAAA,SAExC+E,IAAOC,EAAY7D,CAAO,GAC1B8D,IAAaD,EAAY3B,CAAa;AAE5C,UAAIvB;AACJ,MAAIa,EAAMb,QACRA,IAAQa,EAAMb,QAEdR,MAASU,EAAQG,eAAgBL,IAAQ,KAAOA,IAAQ;AAI1D,YAAMoD,IAAUC,EAAa5D,GAAQJ,GAASM,CAAc,GAGtD2D,IAAKtD,IAAQ,GACbuD,IAAKvD,IAAQ,GACbwD,KAAUxD,IAAQH,KAAe,GACjC4D,IAAgBD,IAAS,IAAIE,KAAKC,IAClCC,KAAoB,IAAIX,IAAO,OAAOQ,GACtCI,IAAkB,GAAGJ,CAAa,IAAIA,CAAa,IAEnDrD,IAAOzB,EAAOwE,CAAU;AAE9B,aAAAW,SAAAC,EAAA;AAAA,QAAA,IAEQjF;AAAAA,QAAE,OACC8D,EAAWC;AAAAA,QAAO,OAClB/C;AAAAA,QAAK,MAAA;AAAA,QAAA,iBAEG;AAAA,QAAC,iBACD;AAAA,QAAG,iBACHqD;AAAAA,QAAU,mBACRT;AAAAA,QAAc,cACnBD;AAAAA,QAAS,kBACLE;AAAAA,MAAa,GACzBqB,EAAY;AAAA,QAAE,GAAGxB;AAAAA,QAAM,GAAGxB;AAAAA,OAAM,CAAC,IAAA8C,EAAA,OAAA;AAAA,QAAA,KAE3BtE;AAAAA,QAAI,OAASoD,EAAWG;AAAAA,QAAG,QAAU/C;AAAAA,QAAK,OAASA;AAAAA,QAAK,eAAA;AAAA,MAAA,GAAA,CAAA8D,EAAA,UAAA;AAAA,QAAA,qBAE3C;AAAA,QAAC,gBACNjE;AAAAA,QAAW,oBACPgE;AAAAA,QAAe,kBACjBjE;AAAAA,QAAa,MAAA;AAAA,QAAA,QAErBR;AAAAA,QAAW,GAChBoE;AAAAA,QAAM,IACLD;AAAAA,QAAE,IACFD;AAAAA,QAAE,eAAA;AAAA,MAAA,GAAA,IAAA,GAAAQ,EAAA,UAAA;AAAA,QAAA,OAIClB,EAAWI;AAAAA,QAAM,qBACLY;AAAAA,QAAgB,gBACrB/D;AAAAA,QAAW,oBACPgE;AAAAA,QAAe,kBACjBjE;AAAAA,QAAa,MAAA;AAAA,QAAA,QAErBwD;AAAAA,QAAO,GACZI;AAAAA,QAAM,IACLD;AAAAA,QAAE,IACFD;AAAAA,QAAE,eAAA;AAAA,MAAA,GAAA,IAAA,CAAA,CAAA,GAIT/D,KAAYC,MAAS,UAAOsE,EAAA,QAAA;AAAA,QAAA,OAAgB,GAAG5F,CAAS;AAAA,MAAiBkC,GAAAA,CAAAA,CAAI,KAAW,IAAI,CAAA;AAAA,IAGnG;AAEA,aAAS8C,EAAY7D,GAAyB;AAC5C,UAAI4D;AACJ,aAAI5D,IAAU,MACZ4D,IAAO,MACE5D,IAAU,IACnB4D,IAAO,IAEPA,IAAO5D,GAEF4D;AAAAA,IACT;AAEA,aAASI,EAAa5D,GAA4BJ,GAAiBM,GAAwB;AACzF,UAAI,OAAOF,KAAW;AACpB,eAAOA;AAET,YAAMwE,IAAQC,GAAczE,GAAQJ,GAASM,CAAc;AAC3D,aAAI,OAAOsE,IAAU,MACZA,IAEF/D,EAAQI;AAAAA,IACjB;AAEA,aAAS6D,IAA4B;AACnC,YAAM;AAAA,QACJ3F,WAAAA;AAAAA,QACAsB,OAAAA;AAAAA,QACAL,QAAAA;AAAAA,QACAE,gBAAAA;AAAAA,QACAlB,WAAAA;AAAAA,QACAE,QAAAA;AAAAA,QACAY,UAAAA;AAAAA,QACAC,MAAAA;AAAAA,QACAH,SAAAA;AAAAA,QACAD,aAAAA;AAAAA,QACAN,IAAAA;AAAAA,QACA,GAAG0D;AAAAA,MACJ,IAAG3B,GACE4B,IAAY5B,EAAM,YAAY,GAC9B6B,IAAiB7B,EAAM,iBAAiB,GACxC8B,IAAgB9B,EAAM,gBAAgB,GACtC;AAAA,QAAEU,eAAAA;AAAAA,MAAe,IAAGF,GACpB+C,IAAqBtB,EAAI5E,GAAWM,GAAW;AAAA,QACnD,CAAC,GAAGN,CAAS,aAAa,GAAGO,MAAcyB,EAAQC;AAAAA,QACnD,CAAC,GAAGjC,CAAS,WAAW,GAAGO,MAAcyB,EAAQC;AAAAA,QACjD,CAAC,GAAGjC,CAAS,QAAQ,GAAGsB,MAAS;AAAA,MACnC,CAAC,GACK6E,IAAmBvB,EAAI;AAAA,QAC3B,CAAC,GAAG5E,CAAS,QAAQ,GAAG;AAAA,MAC1B,CAAC,GACKoG,IAAWxB,EAAI,GAAG5E,CAAS,cAAc,GAEzC+E,IAAOC,EAAY7D,CAAO,GAC1B8D,IAAaD,EAAY3B,CAAa,GAKtCgD,IAAkC;AAAA,QACtCC,YAHcnB,EAAa5D,GAAQJ,GAASM,CAAc;AAAA;AAK5D,MAAIlB,MAAcyB,EAAQC,oBACxBoE,EAAWvE,QAAQ,GAAGiD,CAAI,MAE1BsB,EAAWE,SAAS,GAAGxB,CAAI;AAG7B,YAAM7C,IAAOzB,EAAOwE,CAAU;AAE9B,aAAAW,SAAAC,EAAA;AAAA,QAAA,IAEQjF;AAAAA,QAAE,OACCsF;AAAAA,QAAkB,OAClBtE;AAAAA,QAAK,MAAA;AAAA,QAAA,iBAEG;AAAA,QAAC,iBACD;AAAA,QAAG,iBACHmD;AAAAA,QAAI,mBACFP;AAAAA,QAAc,cACnBD;AAAAA,QAAS,kBACLE;AAAAA,MAAa,GACzBqB,EAAY;AAAA,QAAE,GAAGxB;AAAAA,QAAM,GAAGxB;AAAAA,OAAM,CAAC,IAAA8C,EAAA,OAAA;AAAA,QAAA,OAEzBO;AAAAA,QAAgB,OAASjF,IAAc;AAAA,UAAEsF,iBAAiBtF;AAAAA,YAAgB,CAAE;AAAA,QAAA,eAAA;AAAA,MAAA,GAAA,CAAA0E,EAAA,OAAA;AAAA,QAAA,OAC1EQ;AAAAA,QAAQ,OAASC;AAAAA,QAAU,eAAA;AAAA,MAExChF,GAAAA,IAAAA,CAAAA,CAAAA,GAAAA,IAAQuE,EAAA,OAAA;AAAA,QAAA,OAAe,GAAG5F,CAAS;AAAA,MAAekC,GAAAA,CAAAA,CAAI,KAAU,IAAI,CAAA;AAAA,IAG3E;AAEA,WAAO,MAAM;AACX,YAAM;AAAA,QAAEL,MAAAA;AAAAA,MAAM,IAAGc;AACjB,aAAId,MAAS,SACJoE,EAAkB,IAElB5B,EAAoB;AAAA;EAGjC;AACF,CAAC;"}