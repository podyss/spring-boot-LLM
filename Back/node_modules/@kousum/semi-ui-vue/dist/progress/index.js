import { defineComponent as M, useAttrs as Z, useSlots as X, reactive as Y, watch as z, onUnmounted as q, createVNode as c, mergeProps as G } from "vue";
import m from "classnames";
import * as r from "../PropTypes";
import { vuePropsMake as H } from "../PropTypes";
import { cssClasses as J, strings as i } from '@douyinfe/semi-foundation/lib/es/progress/constants';
import '@douyinfe/semi-foundation/lib/es/progress/progress.css';
import { Animation as Q } from "@douyinfe/semi-animation";
import { generateColor as ee } from '@douyinfe/semi-foundation/lib/es/progress/generates';
import W from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
const s = J.PREFIX, re = {
  "aria-label": r.string,
  "aria-labelledby": r.string,
  "aria-valuetext": r.string,
  className: r.string,
  direction: String,
  format: [Function, ...r.node],
  id: r.string,
  motion: r.oneOfType([r.bool, r.func, r.object]),
  orbitStroke: r.string,
  percent: r.number,
  // scale: PropTypes.number as PropType<ProgressProps['scale']>,
  showInfo: r.bool,
  size: String,
  stroke: [r.string, r.array],
  strokeGradient: r.bool,
  strokeLinecap: String,
  strokeWidth: r.number,
  style: r.object,
  type: String,
  width: r.number
}, te = {
  className: "",
  direction: i.DEFAULT_DIRECTION,
  format: () => (e) => `${e}%`,
  motion: !0,
  orbitStroke: "var(--semi-color-fill-0)",
  percent: 0,
  showInfo: !1,
  size: i.DEFAULT_SIZE,
  stroke: i.STROKE_DEFAULT,
  strokeGradient: !1,
  strokeLinecap: i.DEFAULT_LINECAP,
  strokeWidth: 4,
  style: {},
  type: i.DEFAULT_TYPE
}, ae = H(re, te), fe = /* @__PURE__ */ M({
  props: {
    ...ae
  },
  name: "Progress",
  setup(e, {}) {
    const F = Z();
    X();
    let T = !0, l;
    const b = Y({
      percentNumber: e.percent
      // Specially used for animation of numbers
    });
    z(() => e.percent, (t, a) => {
      if (isNaN(t) || isNaN(a))
        throw new Error("[Semi Progress]:percent can not be NaN");
    }), z(() => e.percent, (t, a) => {
      if (!e.motion) {
        b.percentNumber = e.percent;
        return;
      }
      l && l.destroy && l.destroy(), l = new Q({
        from: {
          value: a
        },
        to: {
          value: e.percent
        }
      }, {
        // easing: 'cubic-bezier(0, .68, .3, 1)'
        easing: "linear",
        duration: 300
      }), l.on("frame", (u) => {
        if (T === !1)
          return;
        const n = parseInt(u.value);
        b.percentNumber = n;
      }), l.on("rest", () => {
        T !== !1 && (b.percentNumber = e.percent);
      }), l.start();
    }), q(() => {
      l && l.destroy(), T = !1;
    });
    function V() {
      const {
        strokeLinecap: t,
        style: a,
        className: u,
        strokeWidth: n,
        format: k,
        size: g,
        stroke: E,
        strokeGradient: w,
        showInfo: v,
        percent: p,
        orbitStroke: L,
        id: x,
        ...I
      } = e, D = e["aria-label"], S = e["aria-labelledby"], P = e["aria-valuetext"], {
        percentNumber: $
      } = b, y = {
        wrapper: m(`${s}-circle`, u),
        svg: m(`${s}-circle-ring`),
        circle: m(`${s}-circle-ring-inner`)
      }, A = h(p), d = h($);
      let o;
      e.width ? o = e.width : g === i.DEFAULT_SIZE ? o = 72 : o = 24;
      const O = U(E, p, w), f = o / 2, N = o / 2, C = (o - n) / 2, _ = C * 2 * Math.PI, B = (1 - A / 100) * _, R = `${_} ${_}`, K = k(d);
      return c("div", G({
        id: x,
        class: y.wrapper,
        style: a,
        role: "progressbar",
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        "aria-valuenow": d,
        "aria-labelledby": S,
        "aria-label": D,
        "aria-valuetext": P
      }, W({
        ...I,
        ...F
      })), [c("svg", {
        key: g,
        class: y.svg,
        height: o,
        width: o,
        "aria-hidden": !0
      }, [c("circle", {
        "stroke-dashoffset": 0,
        "stroke-width": n,
        "stroke-dasharray": R,
        "stroke-linecap": t,
        fill: "transparent",
        stroke: L,
        r: C,
        cx: N,
        cy: f,
        "aria-hidden": !0
      }, null), c("circle", {
        class: y.circle,
        "stroke-dashoffset": B,
        "stroke-width": n,
        "stroke-dasharray": R,
        "stroke-linecap": t,
        fill: "transparent",
        stroke: O,
        r: C,
        cx: N,
        cy: f,
        "aria-hidden": !0
      }, null)]), v && g !== "small" ? c("span", {
        class: `${s}-circle-text`
      }, [K]) : null]);
    }
    function h(t) {
      let a;
      return t > 100 ? a = 100 : t < 0 ? a = 0 : a = t, a;
    }
    function U(t, a, u) {
      if (typeof t == "string")
        return t;
      const n = ee(t, a, u);
      return typeof n < "u" ? n : i.STROKE_DEFAULT;
    }
    function j() {
      const {
        className: t,
        style: a,
        stroke: u,
        strokeGradient: n,
        direction: k,
        format: g,
        showInfo: E,
        size: w,
        percent: v,
        orbitStroke: p,
        id: L,
        ...x
      } = e, I = e["aria-label"], D = e["aria-labelledby"], S = e["aria-valuetext"], {
        percentNumber: P
      } = b, $ = m(s, t, {
        [`${s}-horizontal`]: k === i.DEFAULT_DIRECTION,
        [`${s}-vertical`]: k !== i.DEFAULT_DIRECTION,
        [`${s}-large`]: w === "large"
      }), y = m({
        [`${s}-track`]: !0
      }), A = m(`${s}-track-inner`), d = h(v), o = h(P), f = {
        background: U(u, v, n)
      };
      k === i.DEFAULT_DIRECTION ? f.width = `${d}%` : f.height = `${d}%`;
      const N = g(o);
      return c("div", G({
        id: L,
        class: $,
        style: a,
        role: "progressbar",
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        "aria-valuenow": d,
        "aria-labelledby": D,
        "aria-label": I,
        "aria-valuetext": S
      }, W({
        ...x,
        ...F
      })), [c("div", {
        class: y,
        style: p ? {
          backgroundColor: p
        } : {},
        "aria-hidden": !0
      }, [c("div", {
        class: A,
        style: f,
        "aria-hidden": !0
      }, null)]), E ? c("div", {
        class: `${s}-line-text`
      }, [N]) : null]);
    }
    return () => {
      const {
        type: t
      } = e;
      return t === "line" ? j() : V();
    };
  }
});
export {
  fe as default,
  ae as vuePropsType
};
//# sourceMappingURL=index.js.map
