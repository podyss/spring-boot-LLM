import '@douyinfe/semi-foundation/lib/es/progress/progress.css';
import { Motion } from '../_base/base';
import { StrokeArr } from '@douyinfe/semi-foundation/lib/es/progress/generates';
import { CSSProperties, PropType, VNode } from 'vue';
import { CombineProps } from '../interface';
export interface ProgressProps {
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-valuetext'?: string | undefined;
    className?: string;
    direction?: 'horizontal' | 'vertical';
    format?: (percent: number) => VNode | string;
    id?: string;
    motion?: Motion;
    orbitStroke?: string;
    percent?: number;
    showInfo?: boolean;
    size?: 'default' | 'small' | 'large';
    stroke?: string | StrokeArr;
    strokeGradient?: boolean;
    strokeLinecap?: 'round' | 'square';
    strokeWidth?: number;
    style?: CSSProperties;
    type?: 'line' | 'circle';
    width?: number;
}
export interface ProgressState {
    percentNumber: number;
}
export declare const vuePropsType: CombineProps<ProgressProps>;
declare const Progress: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-valuetext': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    format: PropType<(percent: number) => VNode | string> | {
        type: PropType<(percent: number) => VNode | string>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    orbitStroke: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    percent: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    showInfo: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    stroke: PropType<string | StrokeArr> | {
        type: PropType<string | StrokeArr>;
        default?: any;
        required?: false;
    };
    strokeGradient: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    strokeLinecap: PropType<"square" | "round"> | {
        type: PropType<"square" | "round">;
        default?: any;
        required?: false;
    };
    strokeWidth: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"circle" | "line"> | {
        type: PropType<"circle" | "line">;
        default?: any;
        required?: false;
    };
    width: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-valuetext': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    format: PropType<(percent: number) => VNode | string> | {
        type: PropType<(percent: number) => VNode | string>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    orbitStroke: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    percent: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    showInfo: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    stroke: PropType<string | StrokeArr> | {
        type: PropType<string | StrokeArr>;
        default?: any;
        required?: false;
    };
    strokeGradient: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    strokeLinecap: PropType<"square" | "round"> | {
        type: PropType<"square" | "round">;
        default?: any;
        required?: false;
    };
    strokeWidth: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<"circle" | "line"> | {
        type: PropType<"circle" | "line">;
        default?: any;
        required?: false;
    };
    width: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Progress;
