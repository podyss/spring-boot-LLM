{"version":3,"file":"item.js","sources":["../../src/components/skeleton/item.tsx"],"sourcesContent":["import cls from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { cssClasses } from '@douyinfe/semi-foundation/skeleton/constants';\nimport { strings } from '@douyinfe/semi-foundation/avatar/constants';\n\nimport '@douyinfe/semi-foundation/skeleton/skeleton.scss';\nimport {\n  CSSProperties,\n  FunctionalComponent,\n  h,\n  DefineComponent,\n  defineComponent,\n  useSlots,\n  ComponentObjectPropsOptions,\n} from 'vue';\nimport { vuePropsMake } from '../PropTypes';\nimport { CombineProps } from '../interface';\n\nexport type BasicProps = {\n  prefixCls?: string;\n  className?: string;\n  style?: CSSProperties;\n  type?: string;\n};\n\nexport interface ParagraphProps extends BasicProps {\n  rows?: number;\n}\n\nexport interface AvatarProps extends BasicProps {\n  size?: (typeof strings.SIZE)[number];\n  shape?: string;\n}\n\nexport type GenericProps = BasicProps & AvatarProps;\n\nconst sizeSet = strings.SIZE;\nconst shapeSet = strings.SHAPE;\n\nconst generator =\n  <T extends BasicProps>(type: string) =>\n  (BasicComponent: typeof Generic) =>\n  (props) => {\n    return <BasicComponent type={type} {...props} />;\n  };\n\nconst propTypes:CombineProps<AvatarProps & BasicProps> = {\n  type: PropTypes.string,\n  prefixCls: PropTypes.string,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  size: String,\n  shape: String,\n};\n\nconst defaultProps = {\n  prefixCls: cssClasses.PREFIX,\n  size: 'medium',\n  shape: 'circle',\n};\n\nexport const vuePropsTypeGeneric = vuePropsMake(propTypes, defaultProps);\nconst Generic = defineComponent({\n  props: vuePropsTypeGeneric,\n  name: 'Generic',\n  setup(props, {}) {\n    const slots = useSlots();\n\n    return () => {\n      const { prefixCls, className, type, size, shape, ...others } = props;\n      const classString = cls(\n        className,\n        `${prefixCls}-${type}`,\n        {\n          [`${prefixCls}-${type}-${size}`]: type.toUpperCase() === 'AVATAR',\n        },\n        {\n          [`${prefixCls}-${type}-${shape}`]: type.toUpperCase() === 'AVATAR',\n        }\n      );\n      return h('div', { className: classString, ...others });\n    };\n  },\n});\n\nexport const Avatar = generator<AvatarProps>('avatar')(Generic);\nexport const Image = generator<BasicProps>('image')(Generic);\nexport const Title = generator<BasicProps>('title')(Generic);\nexport const Button = generator<BasicProps>('button')(Generic);\n\nconst propTypesParagraph: CombineProps<{rows?: number, prefixCls?: string, style?: any, className?: string}> = {\n  rows: PropTypes.number,\n  prefixCls: PropTypes.string,\n  style: PropTypes.object,\n  className: PropTypes.string,\n};\n\nconst defaultPropsParagraph = {\n  prefixCls: cssClasses.PREFIX,\n  rows: 4,\n};\nexport const vuePropsTypeParagraph = vuePropsMake(propTypesParagraph, defaultPropsParagraph);\n\nexport const Paragraph = defineComponent({\n  props: vuePropsTypeParagraph,\n  name: 'Paragraph',\n  setup(props, {}) {\n    const slots = useSlots();\n\n    return () => {\n      const { prefixCls, className, style, rows } = props;\n      const classString = cls(className, `${prefixCls}-paragraph`);\n      return (\n        <ul class={classString} style={style}>\n          {[...Array(rows)].map((e, i) => (\n            <li key={i} />\n          ))}\n        </ul>\n      );\n    };\n  },\n});\n"],"names":["strings","SIZE","SHAPE","generator","type","BasicComponent","props","_createVNode","_mergeProps","propTypes","PropTypes","string","prefixCls","style","object","className","size","String","shape","defaultProps","cssClasses","PREFIX","vuePropsTypeGeneric","vuePropsMake","Generic","defineComponent","name","setup","useSlots","others","classString","cls","toUpperCase","h","Avatar","Image","Title","Button","propTypesParagraph","rows","number","defaultPropsParagraph","vuePropsTypeParagraph","Paragraph","Array","map","e","i"],"mappings":";;;;;;;AAoCgBA,EAAQC;AACPD,EAAQE;AAEzB,MAAMC,IACmBC,CAAAA,MACtBC,CAAAA,MACAC,CAAAA,MACCC,EAAAF,GAAAG,EAAA;AAAA,EAAA,MAA6BJ;AAAI,GAAME,CAAK,GAAA,IAAA,GAG1CG,IAAmD;AAAA,EACvDL,MAAMM,EAAUC;AAAAA,EAChBC,WAAWF,EAAUC;AAAAA,EACrBE,OAAOH,EAAUI;AAAAA,EACjBC,WAAWL,EAAUC;AAAAA,EACrBK,MAAMC;AAAAA,EACNC,OAAOD;AACT,GAEME,IAAe;AAAA,EACnBP,WAAWQ,EAAWC;AAAAA,EACtBL,MAAM;AAAA,EACNE,OAAO;AACT,GAEaI,IAAsBC,EAAad,GAAWU,CAAY,GACjEK,IAAUC,gBAAAA,EAAgB;AAAA,EAC9BnB,OAAOgB;AAAAA,EACPI,MAAM;AAAA,EACNC,MAAMrB,GAAO,IAAI;AACDsB,WAAAA,EAAU,GAEjB,MAAM;AACX,YAAM;AAAA,QAAEhB,WAAAA;AAAAA,QAAWG,WAAAA;AAAAA,QAAWX,MAAAA;AAAAA,QAAMY,MAAAA;AAAAA,QAAME,OAAAA;AAAAA,QAAO,GAAGW;AAAAA,MAAQ,IAAGvB,GACzDwB,IAAcC,EAClBhB,GACA,GAAGH,CAAS,IAAIR,CAAI,IACpB;AAAA,QACE,CAAC,GAAGQ,CAAS,IAAIR,CAAI,IAAIY,CAAI,EAAE,GAAGZ,EAAK4B,YAAW,MAAO;AAAA,MAC3D,GACA;AAAA,QACE,CAAC,GAAGpB,CAAS,IAAIR,CAAI,IAAIc,CAAK,EAAE,GAAGd,EAAK4B,YAAW,MAAO;AAAA,MAC5D,CACF;AACA,aAAOC,EAAE,OAAO;AAAA,QAAElB,WAAWe;AAAAA,QAAa,GAAGD;AAAAA,MAAO,CAAC;AAAA;EAEzD;AACF,CAAC,GAEYK,IAAS/B,EAAuB,QAAQ,EAAEqB,CAAO,GACjDW,IAAQhC,EAAsB,OAAO,EAAEqB,CAAO,GAC9CY,IAAQjC,EAAsB,OAAO,EAAEqB,CAAO,GAC9Ca,IAASlC,EAAsB,QAAQ,EAAEqB,CAAO,GAEvDc,IAAyG;AAAA,EAC7GC,MAAM7B,EAAU8B;AAAAA,EAChB5B,WAAWF,EAAUC;AAAAA,EACrBE,OAAOH,EAAUI;AAAAA,EACjBC,WAAWL,EAAUC;AACvB,GAEM8B,IAAwB;AAAA,EAC5B7B,WAAWQ,EAAWC;AAAAA,EACtBkB,MAAM;AACR,GACaG,IAAwBnB,EAAae,GAAoBG,CAAqB,GAE9EE,IAAYlB,gBAAAA,EAAgB;AAAA,EACvCnB,OAAOoC;AAAAA,EACPhB,MAAM;AAAA,EACNC,MAAMrB,GAAO,IAAI;AACDsB,WAAAA,EAAU,GAEjB,MAAM;AACX,YAAM;AAAA,QAAEhB,WAAAA;AAAAA,QAAWG,WAAAA;AAAAA,QAAWF,OAAAA;AAAAA,QAAO0B,MAAAA;AAAAA,MAAM,IAAGjC,GACxCwB,IAAcC,EAAIhB,GAAW,GAAGH,CAAS,YAAY;AAC3D,aAAAL,EAAA,MAAA;AAAA,QAAA,OACauB;AAAAA,QAAW,OAASjB;AAAAA,MAAK,GAAA,CACjC,CAAC,GAAG+B,MAAML,CAAI,CAAC,EAAEM,IAAI,CAACC,GAAGC,MAACxC,EAAA,MAAA;AAAA,QAAA,KAChBwC;AAAAA,MAAC,GAAA,IAAA,CACX,CAAC,CAAA;AAAA;EAIV;AACF,CAAC;"}