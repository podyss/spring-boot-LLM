{"version":3,"file":"index.js","sources":["../../src/components/skeleton/index.tsx"],"sourcesContent":["import cls from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { cssClasses } from '@douyinfe/semi-foundation/skeleton/constants';\nimport '@douyinfe/semi-foundation/skeleton/skeleton.scss';\nimport { Avatar, Image, Title, Button, Paragraph } from './item';\nimport { ComponentObjectPropsOptions, CSSProperties, defineComponent, h, useSlots } from 'vue';\nimport type { CombineProps, VueJsxNode } from '../interface';\nimport { vuePropsMake } from '../PropTypes';\n\nexport type { ParagraphProps, AvatarProps, GenericProps } from './item';\n\nconst prefixCls = cssClasses.PREFIX;\n\nexport interface SkeletonProps {\n  active?: boolean;\n  className?: string;\n  loading?: boolean;\n  placeholder?: VueJsxNode;\n  style?: CSSProperties;\n}\n\nconst defaultProps = {\n  loading: true,\n};\nconst propTypes: CombineProps<SkeletonProps> = {\n  active: PropTypes.bool,\n  placeholder: PropTypes.node,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  loading: PropTypes.bool,\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst Skeleton = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Skeleton',\n  setup(props, {}) {\n    const slots = useSlots();\n\n    return () => {\n      const children = slots.default?.();\n      const { placeholder, active, className, loading, style, ...others } = props;\n      const skCls = cls(\n        prefixCls,\n        {\n          [`${prefixCls}-active`]: Boolean(active),\n        },\n        className\n      );\n      let content;\n      if (loading) {\n        content = (\n          <div class={skCls} style={style} {...others} x-semi-prop=\"placeholder\">\n            {placeholder}\n          </div>\n        );\n      } else {\n        content = children;\n      }\n      return content;\n    };\n  },\n});\n\nexport {\n  Avatar as SkeletonAvatar,\n  Image as SkeletonImage,\n  Title as SkeletonTitle,\n  Button as SkeletonButton,\n  Paragraph as SkeletonParagraph,\n};\n\nexport type SkeletonType = typeof Skeleton & {\n  Avatar: typeof Avatar;\n  Image: typeof Image;\n  Title: typeof Title;\n  Button: typeof Button;\n  Paragraph: typeof Paragraph;\n}\nconst BaseSkeleton = Skeleton as SkeletonType\nBaseSkeleton.Avatar = Avatar\nBaseSkeleton.Image = Image\nBaseSkeleton.Title = Title\nBaseSkeleton.Button = Button\nBaseSkeleton.Paragraph = Paragraph\nexport default BaseSkeleton;\n"],"names":["prefixCls","cssClasses","PREFIX","defaultProps","loading","propTypes","active","PropTypes","bool","placeholder","node","style","object","className","string","vuePropsType","vuePropsMake","Skeleton","defineComponent","props","name","setup","slots","useSlots","children","default","others","skCls","cls","Boolean","content","_createVNode","_mergeProps","BaseSkeleton","Avatar","Image","Title","Button","Paragraph"],"mappings":";;;;;;;;AAWA,MAAMA,IAAYC,EAAWC,QAUvBC,IAAe;AAAA,EACnBC,SAAS;AACX,GACMC,IAAyC;AAAA,EAC7CC,QAAQC,EAAUC;AAAAA,EAClBC,aAAaF,EAAUG;AAAAA,EACvBC,OAAOJ,EAAUK;AAAAA,EACjBC,WAAWN,EAAUO;AAAAA,EACrBV,SAASG,EAAUC;AACrB,GACaO,IAAeC,EAAaX,GAAWF,CAAY,GAC1Dc,IAAWC,gBAAAA,EAAgB;AAAA,EAC/BC,OAAO;AAAA,IAAE,GAAGJ;AAAAA,EAAc;AAAA,EAC1BK,MAAM;AAAA,EACNC,MAAMF,GAAO,IAAI;AACf,UAAMG,IAAQC;AAEd,WAAO,MAAM;;AACX,YAAMC,KAAWF,IAAAA,EAAMG,YAANH,gBAAAA,EAAAA,KAAAA,IACX;AAAA,QAAEb,aAAAA;AAAAA,QAAaH,QAAAA;AAAAA,QAAQO,WAAAA;AAAAA,QAAWT,SAAAA;AAAAA,QAASO,OAAAA;AAAAA,QAAO,GAAGe;AAAAA,MAAQ,IAAGP,GAChEQ,IAAQC,EACZ5B,GACA;AAAA,QACE,CAAC,GAAGA,CAAS,SAAS,GAAG6B,EAAQvB;AAAAA,MAClC,GACDO,CACF;AACA,UAAIiB;AACJ,aAAI1B,IACF0B,IAAOC,EAAA,OAAAC,EAAA;AAAA,QAAA,OACOL;AAAAA,QAAK,OAAShB;AAAAA,MAAK,GAAMe,GAAM;AAAA,QAAA,eAAA;AAAA,MAAA,CAAA,GAAA,CACxCjB,CAAW,CAEf,IAEDqB,IAAUN,GAELM;AAAAA;EAEX;AACF,CAAC,GAiBKG,IAAehB;AACrBgB,EAAaC,SAASA;AACtBD,EAAaE,QAAQA;AACrBF,EAAaG,QAAQA;AACrBH,EAAaI,SAASA;AACtBJ,EAAaK,YAAYA;"}