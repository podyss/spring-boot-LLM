import { defineComponent as g, useSlots as u, createVNode as l, mergeProps as C, h as A } from "vue";
import f from "classnames";
import * as s from "../PropTypes";
import { vuePropsMake as P } from "../PropTypes";
import { cssClasses as y } from '@douyinfe/semi-foundation/lib/es/skeleton/constants';
import { strings as h } from '@douyinfe/semi-foundation/lib/es/avatar/constants';
import '@douyinfe/semi-foundation/lib/es/skeleton/skeleton.css';
h.SIZE;
h.SHAPE;
const p = (t) => (r) => (o) => l(r, C({
  type: t
}, o), null), $ = {
  type: s.string,
  prefixCls: s.string,
  style: s.object,
  className: s.string,
  size: String,
  shape: String
}, T = {
  prefixCls: y.PREFIX,
  size: "medium",
  shape: "circle"
}, x = P($, T), a = /* @__PURE__ */ g({
  props: x,
  name: "Generic",
  setup(t, {}) {
    return u(), () => {
      const {
        prefixCls: r,
        className: o,
        type: e,
        size: n,
        shape: i,
        ...m
      } = t, c = f(o, `${r}-${e}`, {
        [`${r}-${e}-${n}`]: e.toUpperCase() === "AVATAR"
      }, {
        [`${r}-${e}-${i}`]: e.toUpperCase() === "AVATAR"
      });
      return A("div", {
        className: c,
        ...m
      });
    };
  }
}), z = p("avatar")(a), G = p("image")(a), V = p("title")(a), j = p("button")(a), S = {
  rows: s.number,
  prefixCls: s.string,
  style: s.object,
  className: s.string
}, d = {
  prefixCls: y.PREFIX,
  rows: 4
}, v = P(S, d), k = /* @__PURE__ */ g({
  props: v,
  name: "Paragraph",
  setup(t, {}) {
    return u(), () => {
      const {
        prefixCls: r,
        className: o,
        style: e,
        rows: n
      } = t, i = f(o, `${r}-paragraph`);
      return l("ul", {
        class: i,
        style: e
      }, [[...Array(n)].map((m, c) => l("li", {
        key: c
      }, null))]);
    };
  }
});
export {
  z as Avatar,
  j as Button,
  G as Image,
  k as Paragraph,
  V as Title,
  x as vuePropsTypeGeneric,
  v as vuePropsTypeParagraph
};
//# sourceMappingURL=item.js.map
