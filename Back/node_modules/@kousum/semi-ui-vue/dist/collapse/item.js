import { defineComponent as T, onMounted as D, useSlots as K, ref as O, createVNode as e, mergeProps as A, Fragment as E } from "vue";
import m from "classnames";
import * as n from "../PropTypes";
import { vuePropsMake as N } from "../PropTypes";
import { cssClasses as t } from '@douyinfe/semi-foundation/lib/es/collapse/constants';
import S from "../collapsible";
import { IconChevronDown as z, IconChevronUp as H } from "@kousum/semi-icons-vue";
import { getUuidShort as L } from '@douyinfe/semi-foundation/lib/es/utils/uuid';
import { useCollapseContext as U } from "./context/Consumer";
const j = {
  itemKey: {
    type: n.string,
    required: !0
  },
  extra: n.node,
  header: n.oneOfType([n.string, n.node]),
  className: n.string,
  reCalcKey: n.oneOfType([n.string, n.number]),
  showArrow: n.bool,
  disabled: n.bool,
  style: n.object,
  onMotionEnd: n.func
}, q = {
  showArrow: !0,
  disabled: !1
}, V = N(j, q), ee = /* @__PURE__ */ T({
  props: {
    ...V
  },
  name: "CollapsePanel",
  setup(h, {}) {
    let P = "";
    D(() => {
      P = L({});
    });
    const C = K(), y = O(), {
      context: d
    } = U();
    function b(r, a = !0) {
      const {
        showArrow: o,
        header: c,
        extra: v
      } = h;
      let {
        expandIcon: u,
        collapseIcon: p
      } = d.value;
      const {
        expandIconPosition: s
      } = d.value;
      typeof u > "u" && (u = e(z, null, null)), typeof p > "u" && (p = e(H, null, null));
      const l = e("span", {
        ref: y,
        "aria-hidden": "true",
        class: m([`${t.PREFIX}-header-icon`, {
          [`${t.PREFIX}-header-iconDisabled`]: !a
        }])
      }, [a && r ? p : u]), i = s === "left";
      return typeof c == "string" ? e(E, null, [o && (i ? l : null), e("span", null, [c]), e("span", {
        class: `${t.PREFIX}-header-right`
      }, [e("span", null, [v]), o && (i ? null : l)])]) : e(E, null, [o && (i ? l : null), c, o && (i ? null : l)]);
    }
    const g = (r, a) => {
      var o;
      (d.value.clickHeaderToExpand || (o = y.value) != null && o.contains(a.target)) && d.value.onClick(r, a);
    };
    return () => {
      var I;
      const r = (I = C.default) == null ? void 0 : I.call(C), {
        className: a,
        itemKey: o,
        reCalcKey: c,
        header: v,
        extra: u,
        showArrow: p,
        disabled: s,
        ...l
      } = h, {
        keepDOM: i,
        expandIconPosition: x,
        activeSet: R,
        motion: w,
        lazyRender: F
      } = d.value, f = R.has(o), X = m(a, {
        [`${t.PREFIX}-item`]: !0
      }), $ = m({
        [`${t.PREFIX}-header`]: !0,
        [`${t.PREFIX}-header-disabled`]: s,
        [`${t.PREFIX}-header-iconLeft`]: x === "left"
      }), k = m({
        [`${t.PREFIX}-content`]: !0
      });
      return e("div", A({
        class: X
      }, l), [e("div", {
        role: "button",
        tabindex: 0,
        class: $,
        "aria-disabled": s,
        "aria-expanded": f ? "true" : "false",
        "aria-owns": P,
        onClick: (M) => !s && g(o, M)
      }, [b(f, r !== void 0 && !s)]), r && e(S, {
        lazyRender: F,
        isOpen: f,
        keepDOM: i,
        motion: w,
        reCalcKey: c,
        onMotionEnd: h.onMotionEnd
      }, {
        default: () => [e("div", {
          class: k,
          "aria-hidden": !f,
          id: P
        }, [e("div", {
          class: `${t.PREFIX}-content-wrapper`
        }, [r])])]
      })]);
    };
  }
});
export {
  ee as default,
  V as vuePropsType
};
//# sourceMappingURL=item.js.map
