import { CollapseProps, CollapseState } from '@douyinfe/semi-foundation/lib/es/collapse/foundation';
import CollapsePanel from './item';
import '@douyinfe/semi-foundation/lib/es/collapse/collapse.css';
import { CSSProperties, PropType, VNode } from 'vue';
import { CombineProps } from '../interface';
export type { CollapsePanelProps } from './item';
export interface CollapseReactProps extends CollapseProps {
    expandIcon?: VNode;
    collapseIcon?: VNode;
    style?: CSSProperties;
    onChange?: (activeKey: CollapseProps['activeKey'], e: MouseEvent) => void;
    lazyRender?: boolean;
}
export type { CollapseState };
export declare const vuePropsType: CombineProps<CollapseReactProps>;
declare const Collapse: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    expandIcon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    collapseIcon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(activeKey: CollapseProps["activeKey"], e: MouseEvent) => void> | {
        type: PropType<(activeKey: CollapseProps["activeKey"], e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    lazyRender: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    activeKey: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    defaultActiveKey: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    accordion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    clickHeaderToExpand: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandIconPosition: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    expandIcon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    collapseIcon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(activeKey: CollapseProps["activeKey"], e: MouseEvent) => void> | {
        type: PropType<(activeKey: CollapseProps["activeKey"], e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    lazyRender: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    activeKey: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    defaultActiveKey: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    accordion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    clickHeaderToExpand: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandIconPosition: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export type CollapseType = typeof Collapse & {
    Panel: typeof CollapsePanel;
};
declare const BaseCollapse: CollapseType;
export default BaseCollapse;
export { CollapsePanel };
