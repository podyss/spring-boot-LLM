import { VNode } from "vue";
export interface CollapseContextType {
    activeSet: Set<string>;
    expandIcon: VNode;
    collapseIcon: VNode;
    clickHeaderToExpand: boolean;
    keepDOM: boolean;
    expandIconPosition: 'left' | 'right';
    onClick: (activeKey: string, e: MouseEvent) => void;
    motion: boolean;
    lazyRender: boolean;
}
declare const CollapseContext: {
    Provider: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
        value: import("vue").PropType<CollapseContextType>;
    }>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
        value: import("vue").PropType<CollapseContextType>;
    }>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    Consumer: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
        name: StringConstructor;
    }>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
        name: StringConstructor;
    }>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
};
export default CollapseContext;
