import { defineComponent as A, useSlots as O, reactive as j, watch as w, onBeforeUnmount as E, createVNode as p, mergeProps as D, isVNode as N } from "vue";
import R from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as z } from "../PropTypes";
import { cssClasses as B } from '@douyinfe/semi-foundation/lib/es/collapse/constants';
import F from '@douyinfe/semi-foundation/lib/es/collapse/foundation';
import H from "./item";
import { default as pe } from "./item";
import '@douyinfe/semi-foundation/lib/es/collapse/collapse.css';
import { noop as M } from '@douyinfe/semi-foundation/lib/es/utils/function';
import { isEqual as V } from "lodash";
import _ from "./collapse-context";
import { useBaseComponent as q } from "../_base/baseComponent";
function U(n) {
  return typeof n == "function" || Object.prototype.toString.call(n) === "[object Object]" && !N(n);
}
const X = {
  activeKey: e.oneOfType([e.string, e.array]),
  defaultActiveKey: e.oneOfType([e.string, e.array]),
  accordion: e.bool,
  clickHeaderToExpand: e.bool,
  onChange: e.func,
  expandIcon: e.node,
  collapseIcon: e.node,
  style: e.object,
  className: e.string,
  keepDOM: e.bool,
  motion: e.oneOfType([e.bool, e.func, e.object]),
  expandIconPosition: e.string,
  lazyRender: e.bool
}, G = {
  defaultActiveKey: "",
  clickHeaderToExpand: !0,
  onChange: M,
  expandIconPosition: "right",
  lazyRender: !1
}, J = z(X, G), L = /* @__PURE__ */ A({
  props: {
    ...J
  },
  name: "Collapse",
  setup(n, {}) {
    const r = O(), a = j({
      activeSet: /* @__PURE__ */ new Set()
    }), {
      adapter: d,
      getDataAttr: f
    } = q(n, a);
    function m() {
      return {
        ...d(),
        handleChange: (t, o) => n.onChange(t, o),
        addActiveKey: (t) => a.activeSet = t
      };
    }
    const u = m(), c = new F(u), y = c.initActiveKey();
    a.activeSet = new Set(y);
    function v(t, o) {
      if (t.activeKey) {
        const i = Array.isArray(t.activeKey) ? t.activeKey : [t.activeKey], s = new Set(i);
        return V(s, o.activeSet) ? o : {
          ...o,
          activeSet: s
        };
      }
      return o;
    }
    w([() => n.activeKey, () => a.activeSet], () => {
      const t = v({
        ...n
      }, {
        ...a
      });
      t && Object.keys(t).forEach((o) => {
        a[o] = t[o];
      });
    }, {
      deep: !0
    }), E(() => {
      c.destroy();
    });
    const C = (t, o) => {
      c.handleChange(t, o);
    };
    return () => {
      var l;
      const t = (l = r.default) == null ? void 0 : l.call(r), {
        defaultActiveKey: o,
        lazyRender: i,
        accordion: s,
        style: S,
        motion: g,
        className: P,
        keepDOM: h,
        expandIconPosition: x,
        expandIcon: K,
        collapseIcon: b,
        clickHeaderToExpand: I,
        ...W
      } = n, T = R(B.PREFIX, P), {
        activeSet: k
      } = a;
      return p("div", D({
        class: T,
        style: S
      }, f()), [p(_.Provider, {
        value: {
          activeSet: k,
          expandIcon: K,
          collapseIcon: b,
          clickHeaderToExpand: I,
          keepDOM: h,
          expandIconPosition: x,
          onClick: C,
          motion: g,
          lazyRender: i
        }
      }, U(t) ? t : {
        default: () => [t]
      })]);
    };
  }
}), Q = L;
Q.Panel = H;
export {
  pe as CollapsePanel,
  Q as default,
  J as vuePropsType
};
//# sourceMappingURL=index.js.map
