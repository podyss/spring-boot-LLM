{"version":3,"file":"index.js","sources":["../../src/components/iconButton/index.tsx"],"sourcesContent":["import { defineComponent, ref, h, StyleValue, isVNode, Fragment, PropType, ComponentObjectPropsOptions } from 'vue';\nimport classNames from 'classnames';\nimport * as PropTypes from '../PropTypes';\n\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/button/constants';\nimport { strings as iconStrings } from '@douyinfe/semi-foundation/icons/constants';\nimport Button, { Theme, ButtonProps, Size, Type } from '../button/Button';\nimport { vuePropsType as buttonVuePropsType } from '../button/Button';\nimport SpinIcon from '../spin/icon';\nimport { noop } from 'lodash';\nimport '@douyinfe/semi-foundation/button/iconButton.scss';\nimport { getFragmentChildren } from '../_utils';\nimport { vuePropsMake } from '../PropTypes';\nimport { useHasInProps } from '../_base/baseComponent';\nimport { CombineProps } from '../interface';\n\nconst iconSizes = iconStrings.SIZE;\n\nexport type HorizontalPaddingType = 'left' | 'right';\n\nexport interface IconButtonProps extends ButtonProps {\n  icon?: any;\n  iconPosition?: 'left' | 'right';\n  iconSize?: any;\n  iconStyle?: StyleValue;\n  loading?: boolean;\n  theme?: Theme;\n  style?: StyleValue;\n  className?: string;\n  class?: string;\n  disabled?: boolean;\n  noHorizontalPadding?: boolean | HorizontalPaddingType | HorizontalPaddingType[];\n  prefixCls?: string;\n  autoFocus?: boolean;\n  contentClassName?: string;\n}\nconst propsType: CombineProps<IconButtonProps> = {\n  ...buttonVuePropsType,\n  iconStyle: PropTypes.object,\n  style: PropTypes.object,\n  loading: PropTypes.bool,\n  prefixCls: PropTypes.string,\n  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.node, PropTypes.func]),\n  iconSize: PropTypes.string,\n  noHorizontalPadding: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.array]),\n  theme: PropTypes.string as PropType<IconButtonProps['theme']>,\n  iconPosition: PropTypes.string as PropType<IconButtonProps['iconPosition']>,\n  className: PropTypes.string,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  class: String,\n  role: String,\n  contentClassName: String,\n}\nconst vuePropsType = vuePropsMake<IconButtonProps>(\n  propsType,\n  {\n    iconPosition: strings.DEFAULT_ICON_POSITION,\n    prefixCls: cssClasses.PREFIX,\n    loading: false,\n    noHorizontalPadding: false, //  true same as ['left', 'right']\n    onMouseEnter: noop,\n    onMouseLeave: noop,\n  }\n);\n\n// TODO: add a buttonGroup component\n// TODO: icon configuration\nconst Index = defineComponent({\n  props: { ...vuePropsType },\n  name: 'IconButton',\n  setup(props, { slots }) {\n    const { getProps } = useHasInProps();\n\n    return () => {\n      const {\n        iconPosition,\n        iconSize,\n        iconStyle,\n        style: originStyle,\n        icon,\n        noHorizontalPadding,\n        theme,\n        className,\n        prefixCls,\n        loading,\n        ...otherProps\n      } = getProps(props);\n\n      const style: any = originStyle;\n      // TODO: review check\n      if (Array.isArray(noHorizontalPadding)) {\n        noHorizontalPadding.includes('left') && (style.paddingLeft = 0);\n        noHorizontalPadding.includes('right') && (style.paddingRight = 0);\n      } else if (noHorizontalPadding === true) {\n        style.paddingLeft = 0;\n        style.paddingRight = 0;\n      }\n\n      let finalChildren = null;\n\n      const btnTextCls = classNames({\n        [`${prefixCls}-content-left`]: iconPosition === 'right',\n        [`${prefixCls}-content-right`]: iconPosition === 'left',\n      });\n\n      return (\n        <Button\n          {...otherProps}\n          className={classNames(className, `${prefixCls}-with-icon`, {\n            [`${prefixCls}-with-icon-only`]: !slots.default || !slots.default(),\n            [`${prefixCls}-loading`]: loading,\n          })}\n          theme={theme}\n          style={style}\n        >\n          {{\n            default: () => {\n              let IconElem = (): any => null;\n\n              if (loading && !otherProps.disabled) {\n                IconElem = () => <SpinIcon />;\n              } else if (isVNode(icon)) {\n                IconElem = () => icon;\n              } else if (typeof icon.setup === 'function') {\n                IconElem = () => <icon />;\n              } else if (typeof icon === 'function') {\n                IconElem = () => icon();\n              }\n\n              const children = () =>\n                getFragmentChildren(slots) ? (\n                  <span class={IconElem() ? btnTextCls : ''}>{slots.default ? slots.default() : null}</span>\n                ) : null;\n              if (iconPosition === 'left') {\n                return (\n                  <>\n                    {IconElem()}\n                    {children ? children() : null}\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    {children ? children() : null}\n                    {IconElem()}\n                  </>\n                );\n              }\n            },\n          }}\n        </Button>\n      );\n    };\n  },\n});\n\nexport const VuePropsType = {\n  icon: [Object, String],\n  iconPosition: {\n    type: String,\n    default: strings.DEFAULT_ICON_POSITION,\n  },\n  iconSize: String,\n  iconStyle: Object,\n  loading: {\n    type: Boolean,\n    default: false,\n  },\n  theme: String,\n  style: {\n    type: Object,\n    default: {},\n  },\n  className: String,\n  disabled: Boolean,\n  noHorizontalPadding: {\n    type: [Boolean, String, Array],\n    default: false, //  true same as ['left', 'right']\n  },\n  prefixCls: {\n    type: String,\n    default: cssClasses.PREFIX,\n  },\n  onMouseEnter: Function,\n  onMouseLeave: Function,\n\n  id: String,\n  block: Boolean,\n  circle: Boolean,\n  htmlType: String,\n  size: String,\n  type: String,\n  // 否则会出现重复执行的情况\n  onClick: Function,\n  onMouseDown: Function,\n  autoFocus: Function,\n};\n\nexport default Index;\n"],"names":["iconStrings","SIZE","propsType","buttonVuePropsType","iconStyle","PropTypes","object","style","loading","bool","prefixCls","string","icon","oneOfType","node","func","iconSize","noHorizontalPadding","array","theme","iconPosition","className","onMouseEnter","onMouseLeave","class","String","role","contentClassName","vuePropsType","vuePropsMake","strings","DEFAULT_ICON_POSITION","cssClasses","PREFIX","noop","Index","defineComponent","props","name","setup","slots","getProps","useHasInProps","originStyle","otherProps","Array","isArray","includes","paddingLeft","paddingRight","btnTextCls","classNames","_createVNode","Button","_mergeProps","default","IconElem","disabled","SpinIcon","isVNode","children","getFragmentChildren","_Fragment","VuePropsType","Object","type","Boolean","Function","id","block","circle","htmlType","size","onClick","onMouseDown","autoFocus"],"mappings":"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"}