import { defineComponent as C, createVNode as t, mergeProps as F, isVNode as N, Fragment as f } from "vue";
import g from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as O } from "../PropTypes";
import { strings as m, cssClasses as y } from '@douyinfe/semi-foundation/lib/es/button/constants';
import { strings as E } from '@douyinfe/semi-foundation/lib/es/icons/constants';
import z, { vuePropsType as M } from "../button/Button";
import v from "../spin/icon";
import { noop as d } from "lodash";
import '@douyinfe/semi-foundation/lib/es/button/iconButton.css';
import { getFragmentChildren as x } from "../_utils";
import { useHasInProps as B } from "../_base/baseComponent";
E.SIZE;
const L = {
  ...M,
  iconStyle: e.object,
  style: e.object,
  loading: e.bool,
  prefixCls: e.string,
  icon: e.oneOfType([e.object, e.string, e.node, e.func]),
  iconSize: e.string,
  noHorizontalPadding: e.oneOfType([e.bool, e.string, e.array]),
  theme: e.string,
  iconPosition: e.string,
  className: e.string,
  onMouseEnter: e.func,
  onMouseLeave: e.func,
  class: String,
  role: String,
  contentClassName: String
}, $ = O(L, {
  iconPosition: m.DEFAULT_ICON_POSITION,
  prefixCls: y.PREFIX,
  loading: !1,
  noHorizontalPadding: !1,
  //  true same as ['left', 'right']
  onMouseEnter: d,
  onMouseLeave: d
}), G = /* @__PURE__ */ C({
  props: {
    ...$
  },
  name: "IconButton",
  setup(S, {
    slots: i
  }) {
    const {
      getProps: P
    } = B();
    return () => {
      const {
        iconPosition: c,
        iconSize: j,
        iconStyle: A,
        style: h,
        icon: o,
        noHorizontalPadding: s,
        theme: I,
        className: T,
        prefixCls: r,
        loading: p,
        ...u
      } = P(S), l = h;
      Array.isArray(s) ? (s.includes("left") && (l.paddingLeft = 0), s.includes("right") && (l.paddingRight = 0)) : s === !0 && (l.paddingLeft = 0, l.paddingRight = 0);
      const b = g({
        [`${r}-content-left`]: c === "right",
        [`${r}-content-right`]: c === "left"
      });
      return t(z, F(u, {
        className: g(T, `${r}-with-icon`, {
          [`${r}-with-icon-only`]: !i.default || !i.default(),
          [`${r}-loading`]: p
        }),
        theme: I,
        style: l
      }), {
        default: () => {
          let n = () => null;
          p && !u.disabled ? n = () => t(v, null, null) : N(o) ? n = () => o : typeof o.setup == "function" ? n = () => t(o, null, null) : typeof o == "function" && (n = () => o());
          const a = () => x(i) ? t("span", {
            class: n() ? b : ""
          }, [i.default ? i.default() : null]) : null;
          return c === "left" ? t(f, null, [n(), a ? a() : null]) : t(f, null, [a ? a() : null, n()]);
        }
      });
    };
  }
}), J = {
  icon: [Object, String],
  iconPosition: {
    type: String,
    default: m.DEFAULT_ICON_POSITION
  },
  iconSize: String,
  iconStyle: Object,
  loading: {
    type: Boolean,
    default: !1
  },
  theme: String,
  style: {
    type: Object,
    default: {}
  },
  className: String,
  disabled: Boolean,
  noHorizontalPadding: {
    type: [Boolean, String, Array],
    default: !1
    //  true same as ['left', 'right']
  },
  prefixCls: {
    type: String,
    default: y.PREFIX
  },
  onMouseEnter: Function,
  onMouseLeave: Function,
  id: String,
  block: Boolean,
  circle: Boolean,
  htmlType: String,
  size: String,
  type: String,
  // 否则会出现重复执行的情况
  onClick: Function,
  onMouseDown: Function,
  autoFocus: Function
};
export {
  J as VuePropsType,
  G as default
};
//# sourceMappingURL=index.js.map
