import { StyleValue, PropType } from 'vue';
import { Theme, ButtonProps, Size, Type } from '../button/Button';
import '@douyinfe/semi-foundation/lib/es/button/iconButton.css';
export type HorizontalPaddingType = 'left' | 'right';
export interface IconButtonProps extends ButtonProps {
    icon?: any;
    iconPosition?: 'left' | 'right';
    iconSize?: any;
    iconStyle?: StyleValue;
    loading?: boolean;
    theme?: Theme;
    style?: StyleValue;
    className?: string;
    class?: string;
    disabled?: boolean;
    noHorizontalPadding?: boolean | HorizontalPaddingType | HorizontalPaddingType[];
    prefixCls?: string;
    autoFocus?: boolean;
    contentClassName?: string;
}
declare const Index: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    icon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    iconPosition: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    iconSize: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    iconStyle: PropType<StyleValue> | {
        type: PropType<StyleValue>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    theme: PropType<Theme> | {
        type: PropType<Theme>;
        default?: any;
        required?: false;
    };
    style: PropType<StyleValue> | {
        type: PropType<StyleValue>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    noHorizontalPadding: PropType<boolean | HorizontalPaddingType | HorizontalPaddingType[]> | {
        type: PropType<boolean | HorizontalPaddingType | HorizontalPaddingType[]>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    block: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    circle: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    htmlType: PropType<"button" | "reset" | "submit"> | {
        type: PropType<"button" | "reset" | "submit">;
        default?: any;
        required?: false;
    };
    size: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    onClick: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseDown: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    icon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    iconPosition: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    iconSize: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    iconStyle: PropType<StyleValue> | {
        type: PropType<StyleValue>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    theme: PropType<Theme> | {
        type: PropType<Theme>;
        default?: any;
        required?: false;
    };
    style: PropType<StyleValue> | {
        type: PropType<StyleValue>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    noHorizontalPadding: PropType<boolean | HorizontalPaddingType | HorizontalPaddingType[]> | {
        type: PropType<boolean | HorizontalPaddingType | HorizontalPaddingType[]>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    block: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    circle: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    htmlType: PropType<"button" | "reset" | "submit"> | {
        type: PropType<"button" | "reset" | "submit">;
        default?: any;
        required?: false;
    };
    size: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    onClick: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseDown: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export declare const VuePropsType: {
    icon: (ObjectConstructor | StringConstructor)[];
    iconPosition: {
        type: StringConstructor;
        default: "left";
    };
    iconSize: StringConstructor;
    iconStyle: ObjectConstructor;
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: StringConstructor;
    style: {
        type: ObjectConstructor;
        default: {};
    };
    className: StringConstructor;
    disabled: BooleanConstructor;
    noHorizontalPadding: {
        type: (ArrayConstructor | StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    prefixCls: {
        type: StringConstructor;
        default: string;
    };
    onMouseEnter: FunctionConstructor;
    onMouseLeave: FunctionConstructor;
    id: StringConstructor;
    block: BooleanConstructor;
    circle: BooleanConstructor;
    htmlType: StringConstructor;
    size: StringConstructor;
    type: StringConstructor;
    onClick: FunctionConstructor;
    onMouseDown: FunctionConstructor;
    autoFocus: FunctionConstructor;
};
export default Index;
