{"version":3,"file":"index.js","sources":["../../src/components/cascader/index.tsx"],"sourcesContent":["import {\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  Fragment,\n  h,\n  nextTick,\n  onMounted,\n  onUnmounted,\n  PropType,\n  reactive,\n  ref,\n  shallowRef,\n  useSlots,\n  VNode,\n  watch,\n} from 'vue';\nimport * as PropTypes from '../PropTypes';\nimport { vuePropsMake } from '../PropTypes';\nimport cls from 'classnames';\nimport type {\n  BasicCascaderInnerData,\n  BasicCascaderProps,\n  BasicScrollPanelProps,\n  BasicTriggerRenderProps,\n  CascaderAdapter,\n  CascaderType,\n} from '@douyinfe/semi-foundation/cascader/foundation';\nimport CascaderFoundation, { ShowNextType } from '@douyinfe/semi-foundation/cascader/foundation';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/cascader/constants';\nimport { numbers as popoverNumbers } from '@douyinfe/semi-foundation/popover/constants';\nimport { flatten, isEmpty, isEqual, isFunction, isNumber, isSet, isString, noop, isObject } from 'lodash';\nimport '@douyinfe/semi-foundation/cascader/cascader.scss';\nimport { IconChevronDown, IconClear } from '@kousum/semi-icons-vue';\nimport {\n  calcMergeType,\n  convertDataToEntities,\n  getKeyByValuePath,\n  getKeyByPos,\n} from '@douyinfe/semi-foundation/cascader/util';\nimport { calcCheckedKeys, calcDisabledKeys, normalizeKeyList } from '@douyinfe/semi-foundation/tree/treeUtil';\nimport { useBaseComponent, ValidateStatus, useHasInProps } from '../_base/baseComponent';\nimport Input from '../input';\nimport Popover, { PopoverProps } from '../popover';\nimport Item, { CascaderData, Data, Entities, Entity, FilterRenderProps } from './item';\nimport Trigger from '../trigger';\nimport Tag from '../tag';\nimport TagInput from '../tagInput';\nimport { isSemiIcon } from '../_utils/index';\nimport { Position } from '../tooltip/index';\nimport { AriaAttributes } from '../AriaAttributes';\nimport { CombineProps, VueJsxNode } from '../interface';\n\nexport type { CascaderType, ShowNextType } from '@douyinfe/semi-foundation/cascader/foundation';\nexport type { CascaderData, Entity, Data, CascaderItemProps, FilterRenderProps } from './item';\n\nexport interface ScrollPanelProps extends BasicScrollPanelProps {\n  activeNode: CascaderData;\n}\n\nexport interface TriggerRenderProps extends BasicTriggerRenderProps {\n  componentProps: CascaderProps;\n  onClear: (e: MouseEvent) => void;\n}\n\n/* The basic type of the value of CascaderDemo */\nexport type SimpleValueType = string | number | CascaderData;\n\n/* The value of CascaderDemo */\nexport type Value = SimpleValueType | Array<SimpleValueType> | Array<Array<SimpleValueType>>;\n\nexport interface CascaderProps extends BasicCascaderProps {\n  'aria-describedby'?: AriaAttributes['aria-describedby'];\n  'aria-errormessage'?: AriaAttributes['aria-errormessage'];\n  'aria-invalid'?: AriaAttributes['aria-invalid'];\n  'aria-labelledby'?: AriaAttributes['aria-labelledby'];\n  'aria-required'?: AriaAttributes['aria-required'];\n  'aria-label'?: AriaAttributes['aria-label'];\n  arrowIcon?: VNode | string;\n  clearIcon?: VNode | string;\n  expandIcon?: VNode | string;\n  defaultValue?: Value;\n  dropdownStyle?: CSSProperties;\n  emptyContent?: VNode | string;\n  motion?: boolean;\n  filterTreeNode?: ((inputValue: string, treeNodeString: string, data?: CascaderData) => boolean) | boolean;\n  filterSorter?: (first: CascaderData, second: CascaderData, inputValue: string) => number;\n  filterRender?: (props: FilterRenderProps) => VueJsxNode;\n  treeData?: Array<CascaderData>;\n  restTagsPopoverProps?: PopoverProps;\n  children?: VNode | string;\n  value?: Value;\n  prefix?: VNode | string;\n  suffix?: VNode | string;\n  id?: string;\n  insetLabel?: VNode | string;\n  insetLabelId?: string;\n  style?: CSSProperties;\n  bottomSlot?: VNode | string;\n  topSlot?: VNode | string;\n  triggerRender?: (props: TriggerRenderProps) => VueJsxNode;\n  onListScroll?: (e: any, panel: ScrollPanelProps) => void;\n  loadData?: (selectOptions: CascaderData[]) => Promise<void>;\n  onLoad?: (newLoadedKeys: Set<string>, data: CascaderData) => void;\n  onChange?: (value: Value) => void;\n  onExceed?: (checkedItem: Entity[]) => void;\n  displayRender?: (selected: Array<string> | Entity, idx?: number) => VNode | string;\n  onBlur?: (e: MouseEvent) => void;\n  onFocus?: (e: MouseEvent) => void;\n  validateStatus?: ValidateStatus;\n  position?: Position;\n  searchPosition?: string;\n\n  loadedKeys?: any;\n  autoClearSearchValue?: boolean;\n}\n\nexport interface CascaderState extends BasicCascaderInnerData {\n  keyEntities: Entities;\n  prevProps: CascaderProps;\n  treeData?: Array<CascaderData>;\n}\n\nconst prefixcls = cssClasses.PREFIX;\nconst resetkey = 0;\n\nconst propTypes: CombineProps<CascaderProps> = {\n  'aria-labelledby': PropTypes.string,\n  'aria-invalid': [PropTypes.bool, PropTypes.string] as PropType<CascaderProps['aria-invalid']>,\n  'aria-errormessage': PropTypes.string,\n  'aria-describedby': PropTypes.string,\n  'aria-required': PropTypes.bool,\n  'aria-label': PropTypes.string,\n  arrowIcon: PropTypes.node as PropType<CascaderProps['arrowIcon']>,\n  clearIcon: PropTypes.node as PropType<CascaderProps['clearIcon']>,\n  expandIcon: PropTypes.node as PropType<CascaderProps['expandIcon']>,\n  borderless: PropTypes.bool,\n  changeOnSelect: PropTypes.bool,\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  disabled: PropTypes.bool,\n  dropdownClassName: PropTypes.string,\n  dropdownStyle: PropTypes.object,\n  emptyContent: PropTypes.node as PropType<CascaderProps['emptyContent']>,\n  motion: PropTypes.bool,\n  /* show search input, if passed in a function, used as custom filter */\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  filterLeafOnly: PropTypes.bool,\n  placeholder: PropTypes.string,\n  searchPlaceholder: PropTypes.string,\n  size: String as PropType<CascaderProps['size']>,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  treeData: [String, Number, Object, Array] as PropType<CascaderProps['treeData']>,\n  treeNodeFilterProp: PropTypes.string,\n  suffix: PropTypes.node as PropType<CascaderProps['suffix']>,\n  prefix: PropTypes.node as PropType<CascaderProps['prefix']>,\n  insetLabel: PropTypes.node as PropType<CascaderProps['insetLabel']>,\n  insetLabelId: PropTypes.string,\n  id: PropTypes.string,\n  displayProp: PropTypes.string,\n  displayRender: PropTypes.func as PropType<CascaderProps['displayRender']>,\n  onChange: PropTypes.func as PropType<CascaderProps['onChange']>,\n  onSearch: PropTypes.func as PropType<CascaderProps['onSearch']>,\n  onSelect: PropTypes.func as PropType<CascaderProps['onSelect']>,\n  onBlur: PropTypes.func as PropType<CascaderProps['onBlur']>,\n  onFocus: PropTypes.func as PropType<CascaderProps['onFocus']>,\n  children: PropTypes.node as PropType<CascaderProps['children']>,\n  getPopupContainer: PropTypes.func as PropType<CascaderProps['getPopupContainer']>,\n  zIndex: PropTypes.number,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array]),\n  validateStatus: PropTypes.string as PropType<CascaderProps['validateStatus']>,\n  showNext: PropTypes.string as PropType<CascaderProps['showNext']>,\n  stopPropagation: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  showClear: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  autoAdjustOverflow: PropTypes.bool,\n  onDropdownVisibleChange: PropTypes.func as PropType<CascaderProps['onDropdownVisibleChange']>,\n  triggerRender: PropTypes.func as PropType<CascaderProps['triggerRender']>,\n  onListScroll: PropTypes.func as PropType<CascaderProps['onListScroll']>,\n  onChangeWithObject: PropTypes.bool,\n  bottomSlot: PropTypes.node as PropType<CascaderProps['bottomSlot']>,\n  topSlot: PropTypes.node as PropType<CascaderProps['topSlot']>,\n  multiple: PropTypes.bool,\n  autoMergeValue: PropTypes.bool,\n  maxTagCount: PropTypes.number,\n  showRestTagsPopover: PropTypes.bool,\n  restTagsPopoverProps: PropTypes.object,\n  max: PropTypes.number,\n  separator: PropTypes.string,\n  onExceed: PropTypes.func as PropType<CascaderProps['onExceed']>,\n  onClear: PropTypes.func as PropType<CascaderProps['onClear']>,\n  loadData: PropTypes.func as PropType<CascaderProps['loadData']>,\n  onLoad: PropTypes.func as PropType<CascaderProps['onLoad']>,\n  loadedKeys: PropTypes.array as PropType<any>,\n  disableStrictly: PropTypes.bool,\n  leafOnly: PropTypes.bool,\n  enableLeafClick: PropTypes.bool,\n  preventScroll: PropTypes.bool,\n  position: PropTypes.string as PropType<CascaderProps['position']>,\n  searchPosition: PropTypes.string as PropType<CascaderProps['searchPosition']>,\n\n  autoClearSearchValue: {\n    type: Boolean,\n    default: true,\n  },\n\n  mouseEnterDelay: Number,\n  mouseLeaveDelay: Number,\n  virtualizeInSearch: Object,\n  filterSorter: PropTypes.func as PropType<CascaderProps['filterSorter']>,\n  filterRender: PropTypes.func as PropType<CascaderProps['filterRender']>,\n};\nconst defaultProps = {\n  borderless: false,\n  leafOnly: false,\n  arrowIcon: <IconChevronDown />,\n  stopPropagation: true,\n  motion: true,\n  defaultOpen: false,\n  zIndex: popoverNumbers.DEFAULT_Z_INDEX,\n  showClear: false,\n  autoClearSearchValue: true,\n  changeOnSelect: false,\n  disableStrictly: false,\n  autoMergeValue: true,\n  multiple: false,\n  filterTreeNode: false,\n  filterLeafOnly: true,\n  showRestTagsPopover: false,\n  restTagsPopoverProps: {},\n  separator: ' / ',\n  size: 'default' as const,\n  treeNodeFilterProp: 'label' as const,\n  displayProp: 'label' as const,\n  treeData: [] as Array<CascaderData>,\n  showNext: strings.SHOW_NEXT_BY_CLICK,\n  onExceed: noop,\n  onClear: noop,\n  onDropdownVisibleChange: noop,\n  onListScroll: noop,\n  enableLeafClick: false,\n  'aria-label': 'Cascader',\n  searchPosition: strings.SEARCH_POSITION_TRIGGER,\n};\n\nexport const vuePropsType = vuePropsMake<CascaderProps>(propTypes, defaultProps);\nconst Index = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Cascader',\n  setup(props, { expose }) {\n    const slots = useSlots();\n\n    const { getProps } = useHasInProps();\n\n    const state = reactive<CascaderState>({\n      disabledKeys: new Set(),\n      isOpen: props.defaultOpen,\n      /* By changing rePosKey, the dropdown position can be refreshed */\n      rePosKey: resetkey,\n      /* A data structure for storing cascader data items */\n      keyEntities: {},\n      /* Selected and show tick icon */\n      selectedKeys: new Set([]),\n      /* The key of the activated node */\n      activeKeys: new Set([]),\n      /* The key of the filtered node */\n      filteredKeys: new Set([]),\n      /* Value of input box */\n      inputValue: '',\n      /* Is searching */\n      isSearching: false,\n      /* The placeholder of input box */\n      inputPlaceHolder: props.searchPlaceholder || props.placeholder,\n      /* Cache props */\n      prevProps: {},\n      /* Is hovering */\n      isHovering: false,\n      /* Key of checked node, when multiple */\n      checkedKeys: new Set([]),\n      /* Key of half checked node, when multiple */\n      halfCheckedKeys: new Set([]),\n      /* Auto merged checkedKeys or leaf checkedKeys, when multiple */\n      resolvedCheckedKeys: new Set([]),\n      /* Keys of loaded item */\n      loadedKeys: new Set(),\n      /* Keys of loading item */\n      loadingKeys: new Set(),\n      /* Mark whether this rendering has triggered asynchronous loading of data */\n      loading: false,\n      isFocus: undefined,\n      isInput: undefined,\n    });\n    const options: any = {};\n    const isEmpty_: boolean = false;\n    const mergeType: string = calcMergeType(props.autoMergeValue, props.leafOnly);\n    const inputRef = ref(null);\n    const triggerRef = ref(null);\n    const optionsRef = ref(null);\n    let clickOutsideHandler: any = null;\n    const loadingKeysRef = shallowRef<Set<string>>();\n    const loadedKeysRef = shallowRef<Set<string>>();\n\n    // TODO context\n    const { adapter: adapterInject, context, getDataAttr } = useBaseComponent<CascaderProps>(props, state);\n\n    const foundation = new CascaderFoundation(adapter());\n    function adapter(): CascaderAdapter {\n      const filterAdapter: Pick<\n        CascaderAdapter,\n        'updateInputValue' | 'updateInputPlaceHolder' | 'focusInput' | 'blurInput'\n      > = {\n        updateInputValue: (value) => {\n          state.inputValue = value;\n        },\n        updateInputPlaceHolder: (value) => {\n          state.inputPlaceHolder = value;\n        },\n        focusInput: () => {\n          const { preventScroll } = props;\n          if (inputRef.value) {\n            (inputRef.value as any).focus({ preventScroll });\n          }\n        },\n        blurInput: () => {\n          if (inputRef.value) {\n            (inputRef.value as any).blur();\n          }\n        },\n      };\n      const cascaderAdapter: Pick<\n        CascaderAdapter,\n        'registerClickOutsideHandler' | 'unregisterClickOutsideHandler' | 'rePositionDropdown'\n      > = {\n        registerClickOutsideHandler: (cb) => {\n          const clickOutsideHandler_ = (e: Event) => {\n            const optionInstance = optionsRef.value;\n            const triggerDom = triggerRef.value;\n            // 当组件内部使用了expose时，使用ref得到的内容只有expose的那部分\n            const optionsDom = optionInstance?.getRef?.().vnode.el;\n            const target = e.target as Element;\n            const path = (e.composedPath && e.composedPath()) || [target];\n            if (\n              optionsDom &&\n              (!optionsDom.contains(target) || !optionsDom.contains(target.parentNode)) &&\n              triggerDom &&\n              !triggerDom.contains(target) &&\n              !(path.includes(triggerDom) || path.includes(optionsDom))\n            ) {\n              cb(e);\n            }\n          };\n          clickOutsideHandler = clickOutsideHandler_;\n          document.addEventListener('mousedown', clickOutsideHandler, false);\n        },\n        unregisterClickOutsideHandler: () => {\n          document.removeEventListener('mousedown', clickOutsideHandler, false);\n        },\n        rePositionDropdown: () => {\n          let { rePosKey } = state;\n          rePosKey = rePosKey + 1;\n          state.rePosKey = rePosKey;\n        },\n      };\n      return {\n        ...adapterInject<CascaderProps, CascaderState>(),\n        ...filterAdapter,\n        ...cascaderAdapter,\n        updateStates: (states) => {\n          for (let key in states) {\n            state[key] = states[key];\n          }\n        },\n        openMenu: () => {\n          state.isOpen = true;\n        },\n        closeMenu: (cb) => {\n          state.isOpen = false;\n          cb && cb();\n        },\n        updateSelection: (selectedKeys) => {\n          state.selectedKeys = selectedKeys;\n        },\n        notifyChange: (value) => {\n          props.onChange && props.onChange(value);\n        },\n        notifySelect: (selected) => {\n          props.onSelect && props.onSelect(selected);\n        },\n        notifyOnSearch: (input) => {\n          props.onSearch && props.onSearch(input);\n        },\n        notifyFocus: (...v) => {\n          props.onFocus && props.onFocus(...v);\n        },\n        notifyBlur: (...v) => {\n          props.onBlur && props.onBlur(...v);\n        },\n        notifyDropdownVisibleChange: (visible) => {\n          props.onDropdownVisibleChange(visible);\n        },\n        toggleHovering: (bool) => {\n          state.isHovering = bool;\n        },\n        notifyLoadData: (selectedOpt, callback) => {\n          const { loadData } = props;\n          if (loadData) {\n            new Promise<void>((resolve) => {\n              loadData(selectedOpt).then(() => {\n                setTimeout(() => {\n                  callback();\n                  state.loading = true;\n                  resolve();\n                })\n              });\n            });\n          }\n        },\n        notifyOnLoad: (newLoadedKeys, data) => {\n          const { onLoad } = props;\n          onLoad && onLoad(newLoadedKeys, data);\n        },\n        notifyListScroll: (e, { panelIndex, activeNode }) => {\n          props.onListScroll(e, { panelIndex, activeNode });\n        },\n        notifyOnExceed: (data) => props.onExceed(data),\n        notifyClear: () => props.onClear(),\n        toggleInputShow: (showInput: boolean, cb: (...args: any) => void) => {\n          state.showInput = showInput;\n          nextTick(() => {\n            cb();\n          });\n        },\n        updateFocusState: (isFocus: boolean) => {\n          state.isFocus = isFocus;\n        },\n        updateLoadingKeyRefValue: (keys: Set<string>) => {\n          loadingKeysRef.value = keys;\n        },\n        getLoadingKeyRefValue: () => {\n          return loadingKeysRef.value;\n        },\n        updateLoadedKeyRefValue: (keys: Set<string>) => {\n          loadedKeysRef.value = keys;\n        },\n        getLoadedKeyRefValue: () => {\n          return loadedKeysRef.value;\n        },\n      };\n    }\n\n    // watch props OK\n    function getDerivedStateFromProps(props: CascaderProps) {\n      const { multiple, value, defaultValue, onChangeWithObject, leafOnly, autoMergeValue } = props;\n      const { prevProps } = state;\n      let keyEntities = state.keyEntities || {};\n      const newState: Partial<CascaderState> = {};\n      const needUpdate = (name: string) => {\n        const firstInProps = isEmpty(prevProps) && name in props;\n        const nameHasChange = prevProps && !isEqual(prevProps[name], props[name]);\n        return firstInProps || nameHasChange;\n      };\n      const needUpdateData = () => {\n        const firstInProps = !prevProps && 'treeData' in props;\n        const treeDataHasChange = prevProps && prevProps.treeData !== props.treeData;\n        return firstInProps || treeDataHasChange;\n      };\n      const getRealKeys = (realValue: Value, keyEntities: Entities) => {\n        // normalizedValue is used to save the value in two-dimensional array format\n        let normalizedValue: SimpleValueType[][] = [];\n        if (Array.isArray(realValue)) {\n          normalizedValue = Array.isArray(realValue[0])\n            ? (realValue as SimpleValueType[][])\n            : ([realValue] as SimpleValueType[][]);\n        } else {\n          if (realValue !== undefined) {\n            normalizedValue = [[realValue]];\n          }\n        }\n        // formatValuePath is used to save value of valuePath\n        const formatValuePath: (string | number)[][] = [];\n        normalizedValue.forEach((valueItem: SimpleValueType[]) => {\n          const formatItem: (string | number)[] =\n            onChangeWithObject && isObject(valueItem[0])\n              ? (valueItem as CascaderData[]).map((i) => i?.value)\n              : (valueItem as (string | number)[]);\n          formatItem.length > 0 && formatValuePath.push(formatItem);\n        });\n        // formatKeys is used to save key of value\n        const formatKeys = formatValuePath.reduce((acc, cur) => {\n          const key = getKeyByValuePath(cur);\n          keyEntities[key] && acc.push(key);\n          return acc;\n        }, []) as string[];\n        return formatKeys;\n      };\n      if (multiple) {\n        const needUpdateTreeData = needUpdate('treeData') || needUpdateData();\n        const needUpdateValue = needUpdate('value') || (isEmpty(prevProps) && defaultValue);\n        // when value and treedata need updated\n        if (needUpdateTreeData || needUpdateValue) {\n          // update state.keyEntities\n          if (needUpdateTreeData) {\n            newState.treeData = props.treeData;\n            keyEntities = convertDataToEntities(props.treeData);\n            newState.keyEntities = keyEntities;\n          }\n          let realKeys: Array<string> | Set<string> = state.checkedKeys;\n          // when data was updated\n          if (needUpdateValue) {\n            const realValue = needUpdate('value') ? value : defaultValue;\n            realKeys = getRealKeys(realValue, keyEntities);\n          } else {\n            // needUpdateValue is false\n            // if treeData is updated & Cascader is controlled, realKeys should be recalculated\n            if (needUpdateTreeData && 'value' in getProps(props)) {\n              const realValue = value;\n              realKeys = getRealKeys(realValue, keyEntities);\n            }\n          }\n          if (isSet(realKeys)) {\n            realKeys = [...realKeys];\n          }\n          const calRes = calcCheckedKeys(realKeys, keyEntities);\n          const checkedKeys = new Set(calRes.checkedKeys);\n          const halfCheckedKeys = new Set(calRes.halfCheckedKeys);\n          // disableStrictly\n          if (props.disableStrictly) {\n            newState.disabledKeys = calcDisabledKeys(keyEntities);\n          }\n          const isLeafOnlyMerge = calcMergeType(autoMergeValue, leafOnly) === strings.LEAF_ONLY_MERGE_TYPE;\n          newState.prevProps = props;\n          newState.checkedKeys = checkedKeys;\n          newState.halfCheckedKeys = halfCheckedKeys;\n          newState.resolvedCheckedKeys = new Set(normalizeKeyList(checkedKeys, keyEntities, isLeafOnlyMerge));\n        }\n      }\n      return newState;\n    }\n    watch(\n      [\n        () => props.multiple,\n        () => props.value,\n        () => props.defaultValue,\n        () => props.onChangeWithObject,\n        () => props.leafOnly,\n        () => props.autoMergeValue,\n        () => props.treeData,\n        () => props.disableStrictly,\n      ],\n      (val) => {\n        const newState = getDerivedStateFromProps({ ...getProps(props) });\n        // console.log(props.value);\n        newState &&\n          Object.keys(newState).forEach((key) => {\n            state[key] = newState[key];\n          });\n      },\n      { immediate: true }\n    );\n\n    onMounted(() => {\n      foundation.init();\n    });\n\n    onUnmounted(() => {\n      foundation.destroy();\n    });\n\n    watch(\n      [() => props.treeData, () => props.value, () => props.multiple],\n      (value, [prevPropsTreeData, prevPropsValue]) => {\n        if (props.multiple) {\n          return;\n        }\n        let isOptionsChanged = false;\n        if (!isEqual(prevPropsTreeData, props.treeData)) {\n          isOptionsChanged = true;\n          foundation.collectOptions();\n        }\n        if (prevPropsValue !== props.value && !isOptionsChanged) {\n          foundation.handleValueChange(props.value);\n        }\n      }\n    );\n\n    // ref method\n    const search = (value: string) => {\n      handleInputChange(value);\n    };\n\n    const handleInputChange = (value: string) => {\n      foundation.handleInputChange(value);\n    };\n\n    const handleTagRemoveInTrigger = (pos: string) => {\n      foundation.handleTagRemoveInTrigger(pos);\n    };\n\n    const handleTagClose = (tagChildren: VueJsxNode, e: MouseEvent, tagKey: string | number) => {\n      // When value has not changed, prevent clicking tag closeBtn to close tag\n      e.preventDefault();\n      foundation.handleTagRemoveByKey('' + tagKey);\n    };\n\n    const renderTagItem = (nodeKey: string, idx: number) => {\n      const { keyEntities, disabledKeys } = state;\n      const { size, disabled, displayProp, displayRender, disableStrictly } = props;\n      if (keyEntities[nodeKey]) {\n        const isDisabled =\n          disabled || keyEntities[nodeKey].data.disabled || (disableStrictly && disabledKeys.has(nodeKey));\n        const tagCls = cls(`${prefixcls}-selection-tag`, {\n          [`${prefixcls}-selection-tag-disabled`]: isDisabled,\n        });\n        // custom render tags\n        if (isFunction(displayRender)) {\n          return displayRender(keyEntities[nodeKey], idx);\n          // default render tags\n        } else {\n          return (\n            <Tag\n              size={size === 'default' ? 'large' : size}\n              key={`tag-${nodeKey}-${idx}`}\n              color=\"white\"\n              tagKey={nodeKey}\n              className={tagCls}\n              closable\n              onClose={handleTagClose}\n            >\n              {keyEntities[nodeKey].data[displayProp]}\n            </Tag>\n          );\n        }\n      }\n      return null;\n    };\n\n    const onRemoveInTagInput = (v: string) => {\n      foundation.handleTagRemoveByKey(v);\n    };\n\n    function renderTagInput() {\n      const { size, disabled, placeholder, maxTagCount, showRestTagsPopover, restTagsPopoverProps } = props;\n      const { inputValue, checkedKeys, keyEntities, resolvedCheckedKeys } = state;\n      const tagInputcls = cls(`${prefixcls}-tagInput-wrapper`);\n      const realKeys = mergeType === strings.NONE_MERGE_TYPE ? checkedKeys : resolvedCheckedKeys;\n      return (\n        <TagInput\n          className={tagInputcls}\n          ref={inputRef as any}\n          disabled={disabled}\n          size={size}\n          value={[...realKeys]}\n          showRestTagsPopover={showRestTagsPopover}\n          restTagsPopoverProps={restTagsPopoverProps}\n          maxTagCount={maxTagCount}\n          renderTagItem={renderTagItem}\n          inputValue={inputValue}\n          onInputChange={handleInputChange}\n          // TODO Modify logic, not modify type\n          onRemove={onRemoveInTagInput}\n          placeholder={placeholder}\n          expandRestTagsOnClick={false}\n        />\n      );\n    }\n\n    function renderInput() {\n      const { size, disabled } = props;\n      const inputcls = cls(`${prefixcls}-input`);\n      const { inputValue, inputPlaceHolder, showInput } = state;\n      const inputProps = {\n        disabled,\n        value: inputValue,\n        className: inputcls,\n        onChange: handleInputChange,\n      };\n      const wrappercls = cls({\n        [`${prefixcls}-search-wrapper`]: true,\n        [`${prefixcls}-search-wrapper-${size}`]: size !== 'default',\n      });\n\n      const displayText = renderDisplayText();\n      const spanCls = cls({\n        [`${prefixcls}-selection-placeholder`]: !displayText,\n        [`${prefixcls}-selection-text-hide`]: showInput && inputValue,\n        [`${prefixcls}-selection-text-inactive`]: showInput && !inputValue,\n      });\n\n      return (\n        <div class={wrappercls}>\n          <span class={spanCls}>{displayText ? displayText : inputPlaceHolder}</span>\n          {showInput && <Input forwardRef={inputRef} size={size} {...inputProps} />}\n        </div>\n      );\n    }\n\n    const handleItemClick = (e: MouseEvent | KeyboardEvent, item: Entity | Data) => {\n      foundation.handleItemClick(e, item);\n    };\n\n    const handleItemHover = (e: MouseEvent, item: Entity) => {\n      foundation.handleItemHover(e, item);\n    };\n\n    const onItemCheckboxClick = (item: Entity | Data) => {\n      foundation.onItemCheckboxClick(item);\n    };\n\n    const handleListScroll = (e: any, ind: number) => {\n      foundation.handleListScroll(e, ind);\n    };\n\n    function close(e?: any) {\n      foundation.close(e);\n    }\n\n    function open() {\n      foundation.open();\n    }\n    function focus() {\n      foundation.focus();\n    }\n\n    function blur() {\n      foundation.blur();\n    }\n\n    expose({\n      focus,\n      blur,\n      close,\n      open,\n    });\n\n    const renderContent = () => {\n      const {\n        inputValue,\n        isSearching,\n        activeKeys,\n        selectedKeys,\n        checkedKeys,\n        halfCheckedKeys,\n        loadedKeys,\n        loadingKeys,\n      } = state;\n      const {\n        filterTreeNode,\n        dropdownClassName,\n        dropdownStyle,\n        loadData,\n        emptyContent,\n        separator,\n        topSlot,\n        bottomSlot,\n        showNext,\n        multiple,\n        filterRender,\n        virtualizeInSearch,\n        expandIcon\n      } = getProps(props);\n      const searchable = Boolean(filterTreeNode) && isSearching;\n      const popoverCls = cls(dropdownClassName, `${prefixcls}-popover`);\n      const renderData = foundation.getRenderData();\n      // console.log(activeKeys, selectedKeys);\n      const content = (\n        <div class={popoverCls} role=\"listbox\" style={dropdownStyle} onKeydown={foundation.handleKeyDown}>\n          {topSlot}\n          <Item\n            activeKeys={activeKeys}\n            selectedKeys={selectedKeys}\n            separator={separator}\n            loadedKeys={loadedKeys}\n            loadingKeys={loadingKeys}\n            onItemClick={handleItemClick}\n            onItemHover={handleItemHover}\n            showNext={showNext}\n            onItemCheckboxClick={onItemCheckboxClick}\n            onListScroll={handleListScroll}\n            searchable={searchable}\n            keyword={inputValue}\n            emptyContent={emptyContent}\n            loadData={loadData}\n            data={renderData}\n            multiple={multiple}\n            checkedKeys={checkedKeys}\n            halfCheckedKeys={halfCheckedKeys}\n            filterRender={filterRender}\n            virtualize={virtualizeInSearch}\n            expandIcon={expandIcon}\n          />\n          {bottomSlot}\n        </div>\n      );\n      return content;\n    };\n\n    const renderPlusN = (hiddenTag: (VNode | string)[]) => {\n      const { disabled, showRestTagsPopover, restTagsPopoverProps } = props;\n      const plusNCls = cls(`${prefixcls}-selection-n`, {\n        [`${prefixcls}-selection-n-disabled`]: disabled,\n      });\n      const renderPlusNChildren = <span class={plusNCls}>+{hiddenTag.length}</span>;\n      return showRestTagsPopover ? (\n        <Popover\n          content={hiddenTag}\n          showArrow\n          trigger=\"hover\"\n          position=\"top\"\n          autoAdjustOverflow\n          {...restTagsPopoverProps}\n        >\n          {renderPlusNChildren}\n        </Popover>\n      ) : (\n        renderPlusNChildren\n      );\n    };\n\n    const renderMultipleTags = () => {\n      const { autoMergeValue, maxTagCount } = props;\n      const { checkedKeys, resolvedCheckedKeys } = state;\n      const realKeys = mergeType === strings.NONE_MERGE_TYPE ? checkedKeys : resolvedCheckedKeys;\n      const displayTag: Array<VNode | string> = [];\n      const hiddenTag: Array<VNode | string> = [];\n      [...realKeys].forEach((checkedKey, idx) => {\n        const notExceedMaxTagCount = !isNumber(maxTagCount) || maxTagCount >= idx + 1;\n        const item = renderTagItem(checkedKey, idx);\n        if (notExceedMaxTagCount) {\n          displayTag.push(item);\n        } else {\n          hiddenTag.push(item);\n        }\n      });\n      return (\n        <Fragment>\n          {displayTag}\n          {!isEmpty(hiddenTag) && renderPlusN(hiddenTag)}\n        </Fragment>\n      );\n    };\n\n    const renderDisplayText = (): JSX.Element[] | VNode | string | VNode[] => {\n      const { displayProp, separator, displayRender } = props;\n      const { selectedKeys } = state;\n      let displayText: JSX.Element[] | string | VNode = '';\n      if (selectedKeys.size) {\n        const displayPath = foundation.getItemPropPath([...selectedKeys][0], displayProp);\n        if (displayRender && typeof displayRender === 'function') {\n          displayText = displayRender(displayPath);\n        } else {\n          displayText = displayPath.map((path: VNode | string, index: number) => (\n            <Fragment key={`${path}-${index}`}>\n              {index < displayPath.length - 1 ? (\n                <Fragment>\n                  {path}\n                  {separator}\n                </Fragment>\n              ) : (\n                path\n              )}\n            </Fragment>\n          ));\n        }\n      }\n      return displayText;\n    };\n\n    const renderSelectContent = () => {\n      const { placeholder, filterTreeNode, multiple, searchPosition } = props;\n      const { checkedKeys } = state;\n      const searchable = Boolean(filterTreeNode) && searchPosition === strings.SEARCH_POSITION_TRIGGER;\n      if (!searchable) {\n        if (multiple) {\n          if (checkedKeys.size === 0) {\n            return <span class={`${prefixcls}-selection-placeholder`}>{placeholder}</span>;\n          }\n          return renderMultipleTags();\n        } else {\n          const displayText = renderDisplayText();\n          const spanCls = cls({\n            [`${prefixcls}-selection-placeholder`]: !displayText,\n          });\n          return <span class={spanCls}>{displayText ? displayText : placeholder}</span>;\n        }\n      }\n      const input = multiple ? renderTagInput() : renderInput();\n      return input;\n    };\n\n    const renderSuffix = () => {\n      const { suffix }: any = props;\n      const suffixWrapperCls = cls({\n        [`${prefixcls}-suffix`]: true,\n        [`${prefixcls}-suffix-text`]: suffix && isString(suffix),\n        [`${prefixcls}-suffix-icon`]: isSemiIcon(suffix),\n      });\n      return (\n        <div class={suffixWrapperCls} x-semi-prop=\"suffix\">\n          {suffix}\n        </div>\n      );\n    };\n\n    const renderPrefix = () => {\n      const { prefix, insetLabel, insetLabelId } = props;\n      const labelNode: any = prefix || insetLabel;\n\n      const prefixWrapperCls = cls({\n        [`${prefixcls}-prefix`]: true,\n        // to be doublechecked\n        [`${prefixcls}-inset-label`]: insetLabel,\n        [`${prefixcls}-prefix-text`]: labelNode && isString(labelNode),\n        [`${prefixcls}-prefix-icon`]: isSemiIcon(labelNode),\n      });\n\n      return (\n        <div class={prefixWrapperCls} id={insetLabelId} x-semi-prop=\"prefix,insetLabel\">\n          {labelNode}\n        </div>\n      );\n    };\n\n    const renderCustomTrigger = () => {\n      const { disabled, triggerRender, multiple } = props;\n      const { selectedKeys, inputValue, inputPlaceHolder, resolvedCheckedKeys, checkedKeys, keyEntities } = state;\n      let realValue;\n      if (multiple) {\n        if (mergeType === strings.NONE_MERGE_TYPE) {\n          realValue = new Set();\n          checkedKeys.forEach((key) => {\n            realValue.add(keyEntities[key]?.pos);\n          });\n        } else {\n          realValue = new Set();\n          resolvedCheckedKeys.forEach((key) => {\n            realValue.add(keyEntities[key]?.pos);\n          });\n        }\n      } else {\n        realValue = keyEntities[[...selectedKeys][0]]?.pos;\n      }\n      return (\n        <Trigger\n          value={realValue}\n          inputValue={inputValue}\n          onChange={handleInputChange}\n          onClear={handleClear}\n          placeholder={inputPlaceHolder}\n          disabled={disabled}\n          triggerRender={triggerRender}\n          componentName={'Cascader'}\n          componentProps={{ ...getProps(props) }}\n          onSearch={handleInputChange}\n          onRemove={handleTagRemoveInTrigger}\n        />\n      );\n    };\n\n    const handleMouseOver = () => {\n      foundation.toggleHoverState(true);\n    };\n\n    const handleMouseLeave = () => {\n      foundation.toggleHoverState(false);\n    };\n\n    const handleClear = (e: MouseEvent) => {\n      e && e.stopPropagation();\n      foundation.handleClear();\n    };\n\n    /**\n     * A11y: simulate clear button click\n     */\n    const handleClearEnterPress = (e: KeyboardEvent) => {\n      e && e.stopPropagation();\n      foundation.handleClearEnterPress(e);\n    };\n\n    const showClearBtn = () => {\n      const { showClear, disabled, multiple } = props;\n      const { selectedKeys, isOpen, isHovering, checkedKeys, inputValue } = state;\n      const hasValue = selectedKeys.size;\n      const multipleWithHaveValue = multiple && checkedKeys.size;\n      return showClear && (inputValue || hasValue || multipleWithHaveValue) && !disabled && (isOpen || isHovering);\n    };\n\n    const renderClearBtn = () => {\n      const clearCls = cls(`${prefixcls}-clearbtn`);\n      const allowClear = showClearBtn();\n      if (allowClear) {\n        return (\n          <div class={clearCls} onClick={handleClear} onKeypress={handleClearEnterPress} role=\"button\" tabindex={0}>\n            <IconClear />\n          </div>\n        );\n      }\n      return null;\n    };\n\n    const renderArrow = () => {\n      const { arrowIcon } = props;\n      const showClearBtn_ = showClearBtn();\n      if (showClearBtn_) {\n        return null;\n      }\n      return arrowIcon ? (\n        <div class={cls(`${prefixcls}-arrow`)} x-semi-prop=\"arrowIcon\">\n          {arrowIcon}\n        </div>\n      ) : null;\n    };\n\n    const renderSelection = () => {\n      const {\n        disabled,\n        multiple,\n        filterTreeNode,\n        style,\n        size,\n        className,\n        validateStatus,\n        prefix,\n        suffix,\n        insetLabel,\n        triggerRender,\n        showClear,\n        id,\n        borderless,\n      } = props;\n      const { isOpen, isFocus, isInput, checkedKeys } = state;\n      const filterable = Boolean(filterTreeNode);\n      const useCustomTrigger = typeof triggerRender === 'function';\n      const classNames = useCustomTrigger\n        ? cls(className)\n        : cls(prefixcls, className, {\n            [`${prefixcls}-borderless`]: borderless,\n            [`${prefixcls}-focus`]: isFocus || (isOpen && !isInput),\n            [`${prefixcls}-disabled`]: disabled,\n            [`${prefixcls}-single`]: true,\n            [`${prefixcls}-filterable`]: filterable,\n            [`${prefixcls}-error`]: validateStatus === 'error',\n            [`${prefixcls}-warning`]: validateStatus === 'warning',\n            [`${prefixcls}-small`]: size === 'small',\n            [`${prefixcls}-large`]: size === 'large',\n            [`${prefixcls}-with-prefix`]: prefix || insetLabel,\n            [`${prefixcls}-with-suffix`]: suffix,\n          });\n      const mouseEvent = showClear\n        ? {\n            onMouseEnter: () => handleMouseOver(),\n            onMouseLeave: () => handleMouseLeave(),\n          }\n        : {};\n      const sectionCls = cls(`${prefixcls}-selection`, {\n        [`${prefixcls}-selection-multiple`]: multiple && !isEmpty(checkedKeys),\n      });\n      const inner = useCustomTrigger\n        ? renderCustomTrigger()\n        : [\n          <Fragment key={'prefix'}>{prefix || insetLabel ? renderPrefix() : null}</Fragment>,\n          <Fragment key={'selection'}>\n            <div class={sectionCls}>{renderSelectContent()}</div>\n          </Fragment>,\n          <Fragment key={'suffix'}>{suffix ? renderSuffix() : null}</Fragment>,\n          <Fragment key={'clearbtn'}>{renderClearBtn()}</Fragment>,\n          <Fragment key={'arrow'}>{renderArrow()}</Fragment>,\n        ];\n      /**\n       * Reasons for disabling the a11y eslint rule:\n       * The following attributes(aria-controls,aria-expanded) will be automatically added by Tooltip, no need to declare here\n       */\n      return (\n        <div\n          class={classNames}\n          style={style}\n          ref={triggerRef}\n          onClick={(e) => foundation.handleClick(e)}\n          onKeypress={(e) => foundation.handleSelectionEnterPress(e)}\n          aria-invalid={props['aria-invalid']}\n          aria-errormessage={props['aria-errormessage']}\n          aria-label={props['aria-label']}\n          aria-labelledby={props['aria-labelledby']}\n          aria-describedby={props['aria-describedby']}\n          aria-required={props['aria-required']}\n          id={id}\n          {...mouseEvent}\n          // eslint-disable-next-line jsx-a11y/role-has-required-aria-props\n          role=\"combobox\"\n          tabindex={0}\n          {...getDataAttr()}\n        >\n          {inner}\n        </div>\n      );\n    };\n\n    return () => {\n      const {\n        zIndex,\n        getPopupContainer,\n        autoAdjustOverflow,\n        stopPropagation,\n        mouseLeaveDelay,\n        mouseEnterDelay,\n        position,\n        motion,\n      } = props;\n      const { isOpen, rePosKey } = state;\n      const { direction } = context.value;\n      const content = renderContent();\n      const selection = renderSelection();\n      const pos = direction === 'rtl' ? 'bottomRight' : 'bottomLeft';\n      return (\n        <Popover\n          getPopupContainer={getPopupContainer}\n          zIndex={zIndex}\n          motion={motion}\n          ref={optionsRef}\n          content={content}\n          visible={isOpen}\n          trigger=\"custom\"\n          rePosKey={rePosKey}\n          position={pos}\n          autoAdjustOverflow={autoAdjustOverflow}\n          stopPropagation={stopPropagation}\n          mouseLeaveDelay={mouseLeaveDelay}\n          mouseEnterDelay={mouseEnterDelay}\n          afterClose={() => foundation.updateSearching(false)}\n        >\n          {selection}\n        </Popover>\n      );\n    };\n  },\n});\n\nexport default Index;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefixcls","cssClasses","PREFIX","resetkey","propTypes","PropTypes","string","bool","arrowIcon","node","clearIcon","expandIcon","borderless","changeOnSelect","defaultValue","oneOfType","array","disabled","dropdownClassName","dropdownStyle","object","emptyContent","motion","filterTreeNode","func","filterLeafOnly","placeholder","searchPlaceholder","size","String","style","className","treeData","Number","Array","treeNodeFilterProp","suffix","prefix","insetLabel","insetLabelId","id","displayProp","displayRender","onChange","onSearch","onSelect","onBlur","onFocus","children","getPopupContainer","zIndex","number","value","validateStatus","showNext","stopPropagation","showClear","defaultOpen","autoAdjustOverflow","onDropdownVisibleChange","triggerRender","onListScroll","onChangeWithObject","bottomSlot","topSlot","multiple","autoMergeValue","maxTagCount","showRestTagsPopover","restTagsPopoverProps","max","separator","onExceed","onClear","loadData","onLoad","loadedKeys","disableStrictly","leafOnly","enableLeafClick","preventScroll","position","searchPosition","autoClearSearchValue","type","Boolean","default","mouseEnterDelay","mouseLeaveDelay","virtualizeInSearch","filterSorter","filterRender","defaultProps","_createVNode","IconChevronDown","popoverNumbers","DEFAULT_Z_INDEX","strings","SHOW_NEXT_BY_CLICK","noop","SEARCH_POSITION_TRIGGER","vuePropsType","vuePropsMake","Index","defineComponent","props","name","setup","expose","useSlots","getProps","useHasInProps","state","reactive","disabledKeys","Set","isOpen","rePosKey","keyEntities","selectedKeys","activeKeys","filteredKeys","inputValue","isSearching","inputPlaceHolder","prevProps","isHovering","checkedKeys","halfCheckedKeys","resolvedCheckedKeys","loadingKeys","loading","isFocus","undefined","isInput","mergeType","calcMergeType","inputRef","ref","triggerRef","optionsRef","clickOutsideHandler","loadingKeysRef","shallowRef","loadedKeysRef","adapter","adapterInject","context","getDataAttr","useBaseComponent","foundation","CascaderFoundation","filterAdapter","updateInputValue","updateInputPlaceHolder","focusInput","focus","blurInput","blur","cascaderAdapter","registerClickOutsideHandler","cb","e","optionInstance","triggerDom","optionsDom","getRef","vnode","el","target","path","composedPath","contains","parentNode","includes","document","addEventListener","unregisterClickOutsideHandler","removeEventListener","rePositionDropdown","updateStates","states","key","openMenu","closeMenu","updateSelection","notifyChange","notifySelect","selected","notifyOnSearch","input","notifyFocus","v","notifyBlur","notifyDropdownVisibleChange","visible","toggleHovering","notifyLoadData","selectedOpt","callback","Promise","resolve","then","setTimeout","notifyOnLoad","newLoadedKeys","data","notifyListScroll","panelIndex","activeNode","notifyOnExceed","notifyClear","toggleInputShow","showInput","nextTick","updateFocusState","updateLoadingKeyRefValue","keys","getLoadingKeyRefValue","updateLoadedKeyRefValue","getLoadedKeyRefValue","getDerivedStateFromProps","newState","needUpdate","firstInProps","isEmpty","nameHasChange","isEqual","needUpdateData","treeDataHasChange","getRealKeys","realValue","normalizedValue","isArray","formatValuePath","forEach","valueItem","formatItem","isObject","map","i","length","push","reduce","acc","cur","getKeyByValuePath","needUpdateTreeData","needUpdateValue","convertDataToEntities","realKeys","isSet","calRes","calcCheckedKeys","calcDisabledKeys","isLeafOnlyMerge","LEAF_ONLY_MERGE_TYPE","normalizeKeyList","watch","val","immediate","onMounted","init","onUnmounted","destroy","prevPropsTreeData","prevPropsValue","isOptionsChanged","collectOptions","handleValueChange","handleInputChange","handleTagRemoveInTrigger","pos","handleTagClose","tagChildren","tagKey","preventDefault","handleTagRemoveByKey","renderTagItem","nodeKey","idx","isDisabled","has","tagCls","cls","isFunction","Tag","onRemoveInTagInput","renderTagInput","tagInputcls","NONE_MERGE_TYPE","TagInput","renderInput","inputcls","inputProps","wrappercls","displayText","renderDisplayText","spanCls","Input","_mergeProps","handleItemClick","item","handleItemHover","onItemCheckboxClick","handleListScroll","ind","close","open","renderContent","searchable","popoverCls","renderData","getRenderData","handleKeyDown","Item","renderPlusN","hiddenTag","plusNCls","renderPlusNChildren","_createTextVNode","Popover","renderMultipleTags","displayTag","checkedKey","notExceedMaxTagCount","isNumber","_Fragment","displayPath","getItemPropPath","index","renderSelectContent","renderSuffix","suffixWrapperCls","isString","isSemiIcon","renderPrefix","labelNode","prefixWrapperCls","renderCustomTrigger","add","Trigger","handleClear","handleMouseOver","toggleHoverState","handleMouseLeave","handleClearEnterPress","showClearBtn","hasValue","multipleWithHaveValue","renderClearBtn","clearCls","IconClear","renderArrow","renderSelection","filterable","useCustomTrigger","classNames","mouseEvent","onMouseEnter","onMouseLeave","sectionCls","inner","handleClick","handleSelectionEnterPress","direction","content","selection","afterClose","updateSearching"],"mappings":"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"}