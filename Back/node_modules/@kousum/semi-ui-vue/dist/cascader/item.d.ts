import { VNode, PropType } from 'vue';
import { BasicCascaderData, BasicEntity, ShowNextType, BasicData, Virtualize } from '@douyinfe/semi-foundation/lib/es/cascader/foundation';
import { BaseProps } from '../_base/baseComponent';
import { CombineProps, VueJsxNode } from '../interface';
export interface CascaderData extends BasicCascaderData {
    label: VNode | string;
}
export interface Entity extends BasicEntity {
    children?: Array<Entity>;
    data: CascaderData;
    parent?: Entity;
}
export interface Entities {
    [idx: string]: Entity;
}
export interface Data extends BasicData {
    data: CascaderData;
    searchText: VNode[] | string[];
}
export interface FilterRenderProps {
    className: string;
    inputValue: string;
    disabled: boolean;
    data: CascaderData[];
    checkStatus: {
        checked: boolean;
        halfChecked: boolean;
    };
    selected: boolean;
    onClick: (e: MouseEvent) => void;
    onCheck: (e: MouseEvent) => void;
}
export interface CascaderItemProps extends BaseProps {
    activeKeys: Set<string>;
    selectedKeys: Set<string>;
    loadedKeys: Set<string>;
    loadingKeys: Set<string>;
    onItemClick: (e: MouseEvent | KeyboardEvent, item: Entity | Data) => void;
    onItemHover: (e: MouseEvent, item: Entity) => void;
    showNext: ShowNextType;
    onItemCheckboxClick: (item: Entity | Data) => void;
    onListScroll: (e: any, ind: number) => void;
    searchable: boolean;
    keyword: string;
    empty?: boolean;
    emptyContent?: VNode | string;
    loadData?: (selectOptions: CascaderData[]) => Promise<void>;
    data: Array<Data | Entity>;
    separator: string;
    multiple: boolean;
    checkedKeys: Set<string>;
    halfCheckedKeys: Set<string>;
    filterRender?: (props: FilterRenderProps) => VueJsxNode;
    virtualize?: Virtualize;
    expandIcon?: VNode | string;
}
export declare const vuePropsType: CombineProps<CascaderItemProps>;
declare const Item: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    activeKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    selectedKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    loadedKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    loadingKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    onItemClick: {
        type: PropType<(e: MouseEvent | KeyboardEvent, item: Entity | Data) => void>;
        default?: any;
        required: true;
    };
    onItemHover: {
        type: PropType<(e: MouseEvent, item: Entity) => void>;
        default?: any;
        required: true;
    };
    showNext: {
        type: PropType<ShowNextType>;
        default?: any;
        required: true;
    };
    onItemCheckboxClick: {
        type: PropType<(item: Entity | Data) => void>;
        default?: any;
        required: true;
    };
    onListScroll: {
        type: PropType<(e: any, ind: number) => void>;
        default?: any;
        required: true;
    };
    searchable: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    keyword: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    empty: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    loadData: PropType<(selectOptions: CascaderData[]) => Promise<void>> | {
        type: PropType<(selectOptions: CascaderData[]) => Promise<void>>;
        default?: any;
        required?: false;
    };
    data: {
        type: PropType<(Entity | Data)[]>;
        default?: any;
        required: true;
    };
    separator: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    multiple: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    checkedKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    halfCheckedKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    filterRender: PropType<(props: FilterRenderProps) => VueJsxNode> | {
        type: PropType<(props: FilterRenderProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    virtualize: PropType<Virtualize> | {
        type: PropType<Virtualize>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    activeKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    selectedKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    loadedKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    loadingKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    onItemClick: {
        type: PropType<(e: MouseEvent | KeyboardEvent, item: Entity | Data) => void>;
        default?: any;
        required: true;
    };
    onItemHover: {
        type: PropType<(e: MouseEvent, item: Entity) => void>;
        default?: any;
        required: true;
    };
    showNext: {
        type: PropType<ShowNextType>;
        default?: any;
        required: true;
    };
    onItemCheckboxClick: {
        type: PropType<(item: Entity | Data) => void>;
        default?: any;
        required: true;
    };
    onListScroll: {
        type: PropType<(e: any, ind: number) => void>;
        default?: any;
        required: true;
    };
    searchable: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    keyword: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    empty: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    loadData: PropType<(selectOptions: CascaderData[]) => Promise<void>> | {
        type: PropType<(selectOptions: CascaderData[]) => Promise<void>>;
        default?: any;
        required?: false;
    };
    data: {
        type: PropType<(Entity | Data)[]>;
        default?: any;
        required: true;
    };
    separator: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    multiple: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    checkedKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    halfCheckedKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    filterRender: PropType<(props: FilterRenderProps) => VueJsxNode> | {
        type: PropType<(props: FilterRenderProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    virtualize: PropType<Virtualize> | {
        type: PropType<Virtualize>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Item;
