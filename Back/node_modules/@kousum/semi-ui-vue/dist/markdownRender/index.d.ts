import { PropType, CSSProperties } from 'vue';
import { CombineProps } from '../interface';
import { type MarkdownRenderBaseProps, type MarkdownRenderBaseState } from '@douyinfe/semi-foundation/lib/es/markdownRender/foundation';
import '@douyinfe/semi-foundation/lib/es/markdownRender/markdownRender.css';
export type { MDXProps } from 'mdx/types';
export interface MarkdownRenderProps extends Omit<MarkdownRenderBaseProps, 'format'> {
    style?: CSSProperties;
    className?: string;
    format?: string;
}
export interface MarkdownRenderState extends MarkdownRenderBaseState {
}
export declare const vuePropsType: CombineProps<MarkdownRenderProps>;
declare const markdownRender: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    components: {
        type: PropType<import("mdx/types").MDXComponents>;
        default?: any;
        required: true;
    };
    raw: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    remarkPlugins: PropType<import("unified").PluggableList> | {
        type: PropType<import("unified").PluggableList>;
        default?: any;
        required?: false;
    };
    rehypePlugins: PropType<import("unified").PluggableList> | {
        type: PropType<import("unified").PluggableList>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    components: {
        type: PropType<import("mdx/types").MDXComponents>;
        default?: any;
        required: true;
    };
    raw: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    remarkPlugins: PropType<import("unified").PluggableList> | {
        type: PropType<import("unified").PluggableList>;
        default?: any;
        required?: false;
    };
    rehypePlugins: PropType<import("unified").PluggableList> | {
        type: PropType<import("unified").PluggableList>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default markdownRender;
