import { defineComponent as y, useSlots as g, reactive as C, watch as w, createVNode as i, mergeProps as P, Fragment as a, h } from "vue";
import * as e from "../PropTypes";
import { vuePropsMake as k } from "../PropTypes";
import * as M from "./components";
import j from '@douyinfe/semi-foundation/lib/es/markdownRender/foundation';
import '@douyinfe/semi-foundation/lib/es/markdownRender/markdownRender.css';
import v from "classnames";
import { cssClasses as x } from '@douyinfe/semi-foundation/lib/es/markdownRender/constants';
import { useBaseComponent as R } from "../_base/baseComponent";
import { omit as F } from "lodash";
const S = {
  className: e.string,
  style: e.object,
  format: {
    type: e.node,
    required: !1
  },
  components: {
    type: e.any,
    required: !0
  },
  raw: {
    type: e.string,
    required: !0
  },
  remarkPlugins: e.array,
  rehypePlugins: e.array
}, X = {
  format: "mdx"
}, q = k(S, X), _ = /* @__PURE__ */ y({
  props: {
    ...q
  },
  name: "markdownRender",
  setup(t, {
    attrs: c
  }) {
    g();
    const s = C({
      MDXContentComponent: void 0
    }), {
      adapter: d,
      setStateAsync: D
    } = R(t, s);
    function m(n, o, l) {
      const r = typeof n == "symbol" ? a : n;
      return arguments.length > 2 && (o.key = l), h(r, typeof r == "string" || r === a ? F(o, "children") : o, typeof r == "string" || r === a ? o.children : () => o.children);
    }
    function u() {
      return {
        ...d(),
        getRuntime: () => ({
          Fragment: a,
          jsx: m,
          jsxs: m
        })
      };
    }
    const p = u(), f = new j(p);
    return w(() => t.raw, (n) => {
      n && (s.MDXContentComponent = f.evaluateSync(t.raw));
    }, {
      immediate: !0
    }), () => {
      const n = s.MDXContentComponent;
      return i("div", P({
        class: v(x.PREFIX, t.className),
        style: t.style
      }, c), [i(n, {
        components: {
          ...M,
          ...t.components
        }
      }, null)]);
    };
  }
});
export {
  _ as default,
  q as vuePropsType
};
//# sourceMappingURL=index.js.map
