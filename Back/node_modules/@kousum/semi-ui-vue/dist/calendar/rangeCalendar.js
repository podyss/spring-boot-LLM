import { defineComponent as j, useSlots as x, ref as R, reactive as A, onMounted as G, watch as M, onBeforeUnmount as O, createVNode as e, mergeProps as V, Fragment as B } from "vue";
import $ from "classnames";
import * as t from "../PropTypes";
import { vuePropsMake as _ } from "../PropTypes";
import q from '@douyinfe/semi-foundation/lib/es/calendar/foundation';
import L from "../locale/localeConsumer";
import { cssClasses as i } from '@douyinfe/semi-foundation/lib/es/calendar/constants';
import U from "./dayCol";
import z from "./timeCol";
import { isEqual as D } from "lodash";
import { calcRowHeight as J } from '@douyinfe/semi-foundation/lib/es/calendar/eventUtil';
import '@douyinfe/semi-foundation/lib/es/calendar/calendar.css';
import { useBaseComponent as Q } from "../_base/baseComponent";
const C = (s) => `${s < 1 ? s * 100 : 100}%`, m = `${i.PREFIX}-week`, k = `${i.PREFIX}-all-day`, Y = {
  // displayValue: PropTypes.instanceOf(Date),
  range: t.array,
  header: t.node,
  events: t.array,
  mode: t.string,
  showCurrTime: t.bool,
  markWeekend: t.bool,
  scrollTop: t.number,
  renderTimeDisplay: t.func,
  renderDateDisplay: t.func,
  dateGridRender: t.func,
  allDayEventsRender: t.func,
  width: t.oneOfType([t.number, t.string]),
  height: t.oneOfType([t.number, t.string]),
  style: t.object,
  className: t.string,
  displayValue: t.object,
  weekStartsOn: t.number,
  onClick: t.func,
  onClose: t.func,
  minEventHeight: t.number
}, Z = {
  events: [],
  mode: "range"
}, ee = _(Y, Z), ue = /* @__PURE__ */ j({
  props: {
    ...ee
  },
  name: "RangeCalendar",
  setup(s, {}) {
    x();
    let E = R(), w = R(), h;
    const p = A({
      scrollHeight: 0,
      parsedEvents: {
        day: /* @__PURE__ */ new Map(),
        allDay: /* @__PURE__ */ new Map()
      },
      cachedKeys: []
    }), {
      adapter: P,
      getDataAttr: T
    } = Q(s, p);
    function F() {
      return {
        ...P(),
        setRangeData: (n) => {
          h = n;
        },
        getRangeData: () => h,
        updateScrollHeight: (n) => {
          p.scrollHeight = n;
        },
        setParsedEvents: (n) => {
          p.parsedEvents = n;
        },
        cacheEventKeys: (n) => {
          p.cachedKeys = n;
        }
      };
    }
    const I = F(), g = new q(I);
    G(() => {
      g.init();
      const {
        scrollHeight: n
      } = w.value;
      E.value.scrollTop = s.scrollTop, g.notifyScrollHeight(n), g.parseRangeEvents();
    }), M([() => p.cachedKeys, () => s.events, () => s.range], (n, [o, l, a], y) => {
      const d = o, c = s.events.map((r) => r.key);
      (!D(d, c) || !D(a, s.range)) && g.parseRangeEvents();
    }), O(() => {
      g.destroy();
    });
    const H = (n, o) => {
      const {
        onClick: l
      } = s, a = g.formatCbValue(o);
      l && l(n, a);
    }, X = () => {
      const {
        parsedEvents: n
      } = p, o = n.day, {
        week: l
      } = h, {
        markWeekend: a,
        dateGridRender: y,
        minEventHeight: d
      } = s;
      return l.map((r) => {
        const u = r.date.toString(), v = o.has(u) ? o.get(u) : [], f = g.getParseDailyEvents(v, r.date);
        return e(U, {
          key: `${u}-weekday`,
          displayValue: r.date,
          scrollHeight: p.scrollHeight,
          handleClick: H,
          events: f.day,
          showCurrTime: s.showCurrTime,
          isWeekend: a && r.isWeekend,
          dateGridRender: y,
          minEventHeight: d
        }, null);
      });
    }, b = (n) => {
      const {
        markWeekend: o,
        range: l,
        renderDateDisplay: a
      } = s, {
        month: y,
        week: d
      } = g.getRangeData(l[0], n);
      return e("div", {
        class: `${m}-header`
      }, [e("ul", {
        class: `${i.PREFIX}-tag ${m}-tag ${m}-sticky-left`
      }, [e("span", null, [y])]), e("div", {
        role: "gridcell",
        class: `${m}-grid`
      }, [e("ul", {
        class: `${m}-grid-row`
      }, [d.map((c) => {
        const {
          date: r,
          dayString: u,
          weekday: v,
          isToday: f
        } = c, K = $({
          [`${i.PREFIX}-today`]: f,
          [`${i.PREFIX}-weekend`]: o && c.isWeekend
        }), N = a ? a(r) : e(B, null, [e("span", {
          class: `${i.PREFIX}-today-date`
        }, [u]), e("span", null, [v])]);
        return e("li", {
          key: `${r.toString()}-weekheader`,
          class: K
        }, [N]);
      })])])]);
    }, S = (n) => s.allDayEventsRender ? s.allDayEventsRender(s.events) : n.map((l, a) => {
      const {
        leftPos: y,
        width: d,
        topInd: c,
        children: r
      } = l, u = `${c}em`, v = {
        left: C(y),
        width: C(d),
        top: u
      };
      return e("li", {
        class: `${i.PREFIX}-event-item ${i.PREFIX}-event-allday`,
        key: `allDay-${a}`,
        style: v
      }, [r]);
    }), W = (n) => {
      const {
        allDayEventsRender: o
      } = s, {
        allDay: l
      } = p.parsedEvents, a = g.parseRangeAllDayEvents(l), y = o ? null : {
        height: `${J(a)}em`
      }, {
        markWeekend: d
      } = s, {
        week: c
      } = h;
      return e("div", {
        class: `${k}`,
        style: y
      }, [e("ul", {
        class: `${i.PREFIX}-tag ${k}-tag ${m}-sticky-left`
      }, [e("span", null, [n.allDay])]), e("div", {
        role: "gridcell",
        class: `${i.PREFIX}-content ${k}-content`
      }, [e("ul", {
        class: `${k}-skeleton`
      }, [Object.keys(c).map((r, u) => {
        const v = $({
          [`${i.PREFIX}-weekend`]: d && c[r].isWeekend
        });
        return e("li", {
          key: `${r}-weekgrid`,
          class: v
        }, null);
      })]), e("ul", {
        class: `${i.PREFIX}-event-items`
      }, [S(a)])])]);
    };
    return () => {
      const {
        renderTimeDisplay: n,
        className: o,
        height: l,
        width: a,
        style: y,
        header: d
      } = s, c = $(m, o), r = {
        height: typeof l == "string" ? l : l + "px",
        width: typeof a == "string" ? a : a + "px",
        ...y
      };
      return e(L, {
        componentName: "Calendar"
      }, {
        default: (u, v, f) => e("div", V({
          class: c,
          style: r,
          ref: E
        }, T()), [e("div", {
          class: `${m}-sticky-top`
        }, [d, b(f), W(u)]), e("div", {
          class: `${m}-scroll-wrapper`
        }, [e("div", {
          class: `${m}-scroll`,
          ref: w
        }, [e(z, {
          className: `${m}-sticky-left`,
          renderTimeDisplay: n
        }, null), X()])])])
      });
    };
  }
});
export {
  ue as default,
  ee as vuePropsType
};
//# sourceMappingURL=rangeCalendar.js.map
