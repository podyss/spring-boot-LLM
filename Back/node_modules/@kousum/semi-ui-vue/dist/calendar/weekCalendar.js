import { defineComponent as N, useSlots as j, ref as D, reactive as x, onMounted as A, watch as G, onBeforeUnmount as M, createVNode as e, mergeProps as O, Fragment as B } from "vue";
import $ from "classnames";
import * as t from "../PropTypes";
import { vuePropsMake as _ } from "../PropTypes";
import q from '@douyinfe/semi-foundation/lib/es/calendar/foundation';
import L from "../locale/localeConsumer";
import { cssClasses as i } from '@douyinfe/semi-foundation/lib/es/calendar/constants';
import U from "./dayCol";
import z from "./timeCol";
import { isEqual as C } from "lodash";
import { calcRowHeight as J } from '@douyinfe/semi-foundation/lib/es/calendar/eventUtil';
import '@douyinfe/semi-foundation/lib/es/calendar/calendar.css';
import { useBaseComponent as Q } from "../_base/baseComponent";
const P = (s) => `${s < 1 ? s * 100 : 100}%`, y = `${i.PREFIX}-week`, h = `${i.PREFIX}-all-day`, Y = {
  displayValue: t.object,
  header: t.node,
  events: t.array,
  mode: t.string,
  showCurrTime: t.bool,
  markWeekend: t.bool,
  scrollTop: t.number,
  renderTimeDisplay: t.func,
  renderDateDisplay: t.func,
  dateGridRender: t.func,
  allDayEventsRender: t.func,
  width: t.oneOfType([t.number, t.string]),
  height: t.oneOfType([t.number, t.string]),
  style: t.object,
  className: t.string,
  range: t.array,
  weekStartsOn: t.number,
  onClick: t.func,
  minEventHeight: t.number,
  onClose: t.func
}, Z = {
  displayValue: /* @__PURE__ */ new Date(),
  events: [],
  mode: "week"
}, ee = _(Y, Z), ue = /* @__PURE__ */ N({
  props: {
    ...ee
  },
  name: "WeekCalendar",
  setup(s, {}) {
    j();
    const E = D(), w = D();
    let g;
    const k = x({
      scrollHeight: 0,
      parsedEvents: {
        day: /* @__PURE__ */ new Map(),
        allDay: /* @__PURE__ */ new Map()
      },
      cachedKeys: []
    }), {
      adapter: R,
      getDataAttr: T
    } = Q(s, k);
    function W() {
      return {
        ...R(),
        setWeeklyData: (n) => {
          g = n;
        },
        getWeeklyData: () => g,
        updateScrollHeight: (n) => {
          k.scrollHeight = n;
        },
        setParsedEvents: (n) => {
          k.parsedEvents = n;
        },
        cacheEventKeys: (n) => {
          k.cachedKeys = n;
        }
      };
    }
    const F = W(), u = new q(F);
    A(() => {
      u.init();
      const {
        scrollHeight: n
      } = w.value;
      E.value.scrollTop = s.scrollTop, u.notifyScrollHeight(n), u.parseWeeklyEvents();
    }), G([() => k.cachedKeys, () => s.events, () => s.displayValue], (n, [o, r, a], m) => {
      const d = o, c = s.events.map((l) => l.key);
      (!C(d, c) || !C(a, s.displayValue)) && u.parseWeeklyEvents();
    }), M(() => {
      u.destroy();
    });
    const I = (n, o) => {
      const {
        onClick: r
      } = s, a = u.formatCbValue(o);
      r && r(n, a);
    }, H = () => {
      const {
        parsedEvents: n
      } = k, o = n.day, {
        week: r
      } = g, {
        markWeekend: a,
        dateGridRender: m,
        minEventHeight: d
      } = s;
      return r.map((l) => {
        const p = l.date.toString(), v = o.has(p) ? o.get(p) : [], f = u.getParseDailyEvents(v, l.date);
        return e(U, {
          key: `${p}-weekday`,
          displayValue: l.date,
          scrollHeight: k.scrollHeight,
          handleClick: I,
          events: f.day,
          showCurrTime: s.showCurrTime,
          isWeekend: a && l.isWeekend,
          dateGridRender: m,
          minEventHeight: d
        }, null);
      });
    }, X = (n) => {
      const {
        markWeekend: o,
        displayValue: r,
        renderDateDisplay: a
      } = s, {
        month: m,
        week: d
      } = u.getWeeklyData(r, n);
      return e("div", {
        class: `${y}-header`
      }, [e("ul", {
        class: `${i.PREFIX}-tag ${y}-tag ${y}-sticky-left`
      }, [e("span", null, [m])]), e("div", {
        role: "gridcell",
        class: `${y}-grid`
      }, [e("ul", {
        class: `${y}-grid-row`
      }, [d.map((c) => {
        const {
          date: l,
          dayString: p,
          weekday: v,
          isToday: f
        } = c, V = $({
          [`${i.PREFIX}-today`]: f,
          [`${i.PREFIX}-weekend`]: o && c.isWeekend
        }), K = a ? a(l) : e(B, null, [e("span", {
          class: `${i.PREFIX}-today-date`
        }, [p]), e("span", null, [v])]);
        return e("li", {
          key: `${l.toString()}-weekheader`,
          class: V
        }, [K]);
      })])])]);
    }, b = (n) => s.allDayEventsRender ? s.allDayEventsRender(s.events) : n.map((r, a) => {
      const {
        leftPos: m,
        width: d,
        topInd: c,
        children: l,
        key: p
      } = r, v = `${c}em`, f = {
        left: P(m),
        width: P(d),
        top: v
      };
      return e("li", {
        class: `${i.PREFIX}-event-item ${i.PREFIX}-event-allday`,
        key: `allDay-${a}`,
        style: f
      }, [l]);
    }), S = (n) => {
      const {
        allDayEventsRender: o
      } = s, {
        allDay: r
      } = k.parsedEvents, a = u.parseWeeklyAllDayEvents(r), m = o ? null : {
        height: `${J(a)}em`
      }, {
        markWeekend: d
      } = s, {
        week: c
      } = g;
      return e("div", {
        class: `${h}`,
        style: m
      }, [e("ul", {
        class: `${i.PREFIX}-tag ${h}-tag ${y}-sticky-left`
      }, [e("span", null, [n.allDay])]), e("div", {
        role: "gridcell",
        class: `${i.PREFIX}-content ${h}-content`
      }, [e("ul", {
        class: `${h}-skeleton`
      }, [Object.keys(c).map((l, p) => {
        const v = $({
          [`${i.PREFIX}-weekend`]: d && c[l].isWeekend
        });
        return e("li", {
          key: `${l}-weekgrid`,
          class: v
        }, null);
      })]), e("ul", {
        class: `${i.PREFIX}-event-items`
      }, [b(a)])])]);
    };
    return () => {
      const {
        renderTimeDisplay: n,
        className: o,
        height: r,
        width: a,
        style: m,
        header: d
      } = s, c = $(y, o), l = {
        height: typeof r == "string" ? r : r + "px",
        width: typeof a == "string" ? a : a + "px",
        ...m
      };
      return e(L, {
        componentName: "Calendar"
      }, {
        default: (p, v, f) => e("div", O({
          class: c,
          style: l,
          ref: E
        }, T()), [e("div", {
          class: `${y}-sticky-top`
        }, [d, X(f), S(p)]), e("div", {
          class: `${y}-scroll-wrapper`
        }, [e("div", {
          class: `${y}-scroll`,
          ref: w
        }, [e(z, {
          className: `${y}-sticky-left`,
          renderTimeDisplay: n
        }, null), H()])])])
      });
    };
  }
});
export {
  ue as default,
  ee as vuePropsType
};
//# sourceMappingURL=weekCalendar.js.map
