import { defineComponent as W, useSlots as N, ref as g, reactive as S, onMounted as x, watch as j, onBeforeUnmount as A, createVNode as n, mergeProps as G } from "vue";
import { isEqual as k } from "lodash";
import D from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as O } from "../PropTypes";
import B from '@douyinfe/semi-foundation/lib/es/calendar/foundation';
import { cssClasses as c } from '@douyinfe/semi-foundation/lib/es/calendar/constants';
import M from "./dayCol";
import _ from "./timeCol";
import q from "../locale/localeConsumer";
import '@douyinfe/semi-foundation/lib/es/calendar/calendar.css';
import { useBaseComponent as L } from "../_base/baseComponent";
const d = `${c.PREFIX}-day`, U = {
  displayValue: e.object,
  events: e.array,
  header: e.node,
  showCurrTime: e.bool,
  onClick: e.func,
  // mode: PropTypes.string as PropType<DayCalendarProps['mode']>,
  renderTimeDisplay: e.func,
  markWeekend: e.bool,
  minEventHeight: e.number,
  scrollTop: e.number,
  width: e.oneOfType([e.number, e.string]),
  height: e.oneOfType([e.number, e.string]),
  style: e.object,
  className: e.string,
  dateGridRender: e.func,
  allDayEventsRender: e.func,
  range: e.array,
  weekStartsOn: e.number,
  onClose: e.func,
  renderDateDisplay: e.func
}, z = {
  events: [],
  displayValue: /* @__PURE__ */ new Date()
  // mode: 'day',
}, J = O(U, z), ie = /* @__PURE__ */ W({
  props: {
    ...J
  },
  name: "DayCalendar",
  setup(a, {}) {
    N();
    let v = g(), h = g(), f = !1;
    const i = S({
      scrollHeight: 0,
      parsedEvents: {
        day: [],
        allDay: []
      },
      cachedKeys: []
    }), {
      adapter: E,
      getDataAttr: $
    } = L(a, i);
    function T() {
      return {
        ...E(),
        updateScrollHeight: (t) => {
          i.scrollHeight = t;
        },
        setParsedEvents: (t) => {
          i.parsedEvents = t;
        },
        cacheEventKeys: (t) => {
          i.cachedKeys = t;
        }
      };
    }
    const w = T(), o = new B(w);
    x(() => {
      o.init();
      const {
        scrollHeight: t
      } = h.value;
      v.value.scrollTop = a.scrollTop, o.notifyScrollHeight(t), o.parseDailyEvents();
    }), j([() => i.cachedKeys, () => a.events, () => a.displayValue], (t, [s, l, r], p) => {
      const y = s, m = a.events.map((u) => u.key);
      (!k(y, m) || !k(r, a.displayValue)) && o.parseDailyEvents();
    }), A(() => {
      o.destroy();
    });
    const P = (t) => o.checkWeekend(t), R = (t) => a.allDayEventsRender ? a.allDayEventsRender(a.events) : t.map((l, r) => {
      const {
        children: p,
        key: y
      } = l;
      return (
        // eslint-disable-next-line max-len
        n("li", {
          class: `${c.PREFIX}-event-item ${c.PREFIX}-event-allday`,
          key: y || `allDay-${r}`
        }, [p])
      );
    }), b = (t, s) => {
      const {
        onClick: l
      } = a, r = o.formatCbValue(s);
      l && l(t, r);
    }, H = (t) => {
      const s = `${c.PREFIX}-all-day`, l = D(`${s}-content`, {
        [`${c.PREFIX}-weekend`]: f
      });
      return n(q, {
        componentName: "Calendar"
      }, {
        default: (r) => n("div", {
          class: `${s}`
        }, [n("ul", {
          class: `${c.PREFIX}-tag ${s}-tag ${d}-sticky-left`
        }, [n("span", null, [r.allDay])]), n("div", {
          role: "gridcell",
          class: l
        }, [n("ul", {
          class: `${c.PREFIX}-event-items`
        }, [R(t)])])])
      });
    };
    return () => {
      const {
        dateGridRender: t,
        displayValue: s,
        showCurrTime: l,
        renderTimeDisplay: r,
        markWeekend: p,
        className: y,
        height: m,
        width: u,
        style: F,
        header: I,
        minEventHeight: Q
      } = a, V = D(d, y), X = {
        height: typeof m == "string" ? m : m + "px",
        width: typeof u == "string" ? u : u + "px",
        ...F
      }, {
        parsedEvents: C,
        scrollHeight: K
      } = i;
      return f = p && P(s), n("div", G({
        class: V,
        style: X,
        ref: v
      }, $()), [n("div", {
        class: `${d}-sticky-top`
      }, [I, H(C.allDay)]), n("div", {
        class: `${d}-scroll-wrapper`
      }, [n("div", {
        class: `${d}-scroll`,
        ref: h
      }, [n(_, {
        className: `${d}-sticky-left`,
        renderTimeDisplay: r
      }, null), n(M, {
        events: C.day,
        displayValue: s,
        scrollHeight: K,
        handleClick: b,
        showCurrTime: l,
        isWeekend: f,
        dateGridRender: t
      }, null)])])]);
    };
  }
});
export {
  ie as default,
  J as vuePropsType
};
//# sourceMappingURL=dayCalendar.js.map
