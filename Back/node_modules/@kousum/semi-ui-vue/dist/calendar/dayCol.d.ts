import { DayColProps } from './interface';
import '@douyinfe/semi-foundation/lib/es/calendar/calendar.css';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../interface';
export interface DayColState {
    currPos: number;
    showCurrTime: boolean;
}
export declare const vuePropsType: CombineProps<DayColProps>;
declare const DayCol: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    scrollHeight: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    currPos: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    isWeekend: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    handleClick: {
        type: PropType<(e: MouseEvent, val: [Date, number, number, number]) => void>;
        default?: any;
        required: true;
    };
    mode: PropType<"month" | "day" | "range" | "week"> | {
        type: PropType<"month" | "day" | "range" | "week">;
        default?: any;
        required?: false;
    };
    showCurrTime: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    displayValue: PropType<Date> | {
        type: PropType<Date>;
        default?: any;
        required?: false;
    };
    events: PropType<import("@douyinfe/semi-foundation/lib/es/calendar/foundation").EventObject[]> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/calendar/foundation").EventObject[]>;
        default?: any;
        required?: false;
    };
    minEventHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    dateGridRender: PropType<(dateString?: string, date?: Date) => import("../interface").VueJsxNode> | {
        type: PropType<(dateString?: string, date?: Date) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    scrollHeight: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    currPos: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    isWeekend: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    handleClick: {
        type: PropType<(e: MouseEvent, val: [Date, number, number, number]) => void>;
        default?: any;
        required: true;
    };
    mode: PropType<"month" | "day" | "range" | "week"> | {
        type: PropType<"month" | "day" | "range" | "week">;
        default?: any;
        required?: false;
    };
    showCurrTime: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    displayValue: PropType<Date> | {
        type: PropType<Date>;
        default?: any;
        required?: false;
    };
    events: PropType<import("@douyinfe/semi-foundation/lib/es/calendar/foundation").EventObject[]> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/calendar/foundation").EventObject[]>;
        default?: any;
        required?: false;
    };
    minEventHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    dateGridRender: PropType<(dateString?: string, date?: Date) => import("../interface").VueJsxNode> | {
        type: PropType<(dateString?: string, date?: Date) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default DayCol;
