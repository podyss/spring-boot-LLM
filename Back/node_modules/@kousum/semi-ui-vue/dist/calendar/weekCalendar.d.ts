import { EventObject, ParsedEvents } from '@douyinfe/semi-foundation/lib/es/calendar/foundation';
import '@douyinfe/semi-foundation/lib/es/calendar/calendar.css';
import { PropType } from 'vue';
import { CombineProps } from '../interface';
export interface WeekCalendarState {
    scrollHeight: number;
    parsedEvents: ParsedEvents;
    cachedKeys: Array<string>;
}
export declare const vuePropsType: CombineProps<import("./interface").CalendarProps>;
declare const WeekCalendar: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    displayValue: PropType<Date> | {
        type: PropType<Date>;
        default?: any;
        required?: false;
    };
    range: PropType<Date[]> | {
        type: PropType<Date[]>;
        default?: any;
        required?: false;
    };
    header: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    events: PropType<EventObject[]> | {
        type: PropType<EventObject[]>;
        default?: any;
        required?: false;
    };
    mode: PropType<"month" | "day" | "range" | "week"> | {
        type: PropType<"month" | "day" | "range" | "week">;
        default?: any;
        required?: false;
    };
    showCurrTime: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    weekStartsOn: PropType<import("@douyinfe/semi-foundation/lib/es/calendar/eventUtil").weekStartsOnEnum> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/calendar/eventUtil").weekStartsOnEnum>;
        default?: any;
        required?: false;
    };
    scrollTop: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent, value: Date) => void> | {
        type: PropType<(e: MouseEvent, value: Date) => void>;
        default?: any;
        required?: false;
    };
    onClose: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    renderTimeDisplay: PropType<(time: number) => import("../interface").VueJsxNode> | {
        type: PropType<(time: number) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    markWeekend: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    minEventHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    renderDateDisplay: PropType<(date: Date) => import("../interface").VueJsxNode> | {
        type: PropType<(date: Date) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    dateGridRender: PropType<(dateString?: string, date?: Date) => import("../interface").VueJsxNode> | {
        type: PropType<(dateString?: string, date?: Date) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    allDayEventsRender: PropType<(events: EventObject[]) => import("../interface").VueJsxNode> | {
        type: PropType<(events: EventObject[]) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    displayValue: PropType<Date> | {
        type: PropType<Date>;
        default?: any;
        required?: false;
    };
    range: PropType<Date[]> | {
        type: PropType<Date[]>;
        default?: any;
        required?: false;
    };
    header: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    events: PropType<EventObject[]> | {
        type: PropType<EventObject[]>;
        default?: any;
        required?: false;
    };
    mode: PropType<"month" | "day" | "range" | "week"> | {
        type: PropType<"month" | "day" | "range" | "week">;
        default?: any;
        required?: false;
    };
    showCurrTime: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    weekStartsOn: PropType<import("@douyinfe/semi-foundation/lib/es/calendar/eventUtil").weekStartsOnEnum> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/calendar/eventUtil").weekStartsOnEnum>;
        default?: any;
        required?: false;
    };
    scrollTop: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent, value: Date) => void> | {
        type: PropType<(e: MouseEvent, value: Date) => void>;
        default?: any;
        required?: false;
    };
    onClose: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    renderTimeDisplay: PropType<(time: number) => import("../interface").VueJsxNode> | {
        type: PropType<(time: number) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    markWeekend: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    minEventHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    renderDateDisplay: PropType<(date: Date) => import("../interface").VueJsxNode> | {
        type: PropType<(date: Date) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    dateGridRender: PropType<(dateString?: string, date?: Date) => import("../interface").VueJsxNode> | {
        type: PropType<(dateString?: string, date?: Date) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    allDayEventsRender: PropType<(events: EventObject[]) => import("../interface").VueJsxNode> | {
        type: PropType<(events: EventObject[]) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default WeekCalendar;
