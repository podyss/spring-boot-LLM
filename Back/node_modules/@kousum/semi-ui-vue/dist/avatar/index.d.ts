import { CSSProperties, PropType, VNode } from 'vue';
import '@douyinfe/semi-foundation/lib/es/avatar/avatar.css';
import type { AvatarProps } from './interface';
import { CombineProps } from '../interface';
export * from './interface';
export interface AvatarState {
    isImgExist: boolean;
    hoverContent: VNode | string;
    focusVisible: boolean;
    scale: number;
}
export declare const vuePropsType: CombineProps<AvatarProps>;
declare const Index: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    color: PropType<import("./interface").AvatarColor> | {
        type: PropType<import("./interface").AvatarColor>;
        default?: any;
        required?: false;
    };
    shape: PropType<import("./interface").AvatarShape> | {
        type: PropType<import("./interface").AvatarShape>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./interface").AvatarSize> | {
        type: PropType<import("./interface").AvatarSize>;
        default?: any;
        required?: false;
    };
    hoverMask: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    src: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    srcSet: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    alt: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    gap: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onError: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    imgAttr: PropType<import("vue").ImgHTMLAttributes> | {
        type: PropType<import("vue").ImgHTMLAttributes>;
        default?: any;
        required?: false;
    };
    bottomSlot: PropType<{
        render?: () => import("../interface").VueJsxNode;
        shape?: "circle" | "square";
        text: import("../interface").VueJsxNode;
        bgColor: string;
        textColor: string;
        className: string;
        style?: CSSProperties;
    }> | {
        type: PropType<{
            render?: () => import("../interface").VueJsxNode;
            shape?: "circle" | "square";
            text: import("../interface").VueJsxNode;
            bgColor: string;
            textColor: string;
            className: string;
            style?: CSSProperties;
        }>;
        default?: any;
        required?: false;
    };
    topSlot: PropType<{
        render?: () => import("../interface").VueJsxNode;
        gradientStart?: string;
        gradientEnd?: string;
        text: import("../interface").VueJsxNode;
        textColor: string;
        className: string;
        style?: CSSProperties;
    }> | {
        type: PropType<{
            render?: () => import("../interface").VueJsxNode;
            gradientStart?: string;
            gradientEnd?: string;
            text: import("../interface").VueJsxNode;
            textColor: string;
            className: string;
            style?: CSSProperties;
        }>;
        default?: any;
        required?: false;
    };
    border: PropType<boolean | {
        color?: string;
        motion?: boolean;
    }> | {
        type: PropType<boolean | {
            color?: string;
            motion?: boolean;
        }>;
        default?: any;
        required?: false;
    };
    contentMotion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    color: PropType<import("./interface").AvatarColor> | {
        type: PropType<import("./interface").AvatarColor>;
        default?: any;
        required?: false;
    };
    shape: PropType<import("./interface").AvatarShape> | {
        type: PropType<import("./interface").AvatarShape>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./interface").AvatarSize> | {
        type: PropType<import("./interface").AvatarSize>;
        default?: any;
        required?: false;
    };
    hoverMask: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    src: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    srcSet: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    alt: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    gap: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onError: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    imgAttr: PropType<import("vue").ImgHTMLAttributes> | {
        type: PropType<import("vue").ImgHTMLAttributes>;
        default?: any;
        required?: false;
    };
    bottomSlot: PropType<{
        render?: () => import("../interface").VueJsxNode;
        shape?: "circle" | "square";
        text: import("../interface").VueJsxNode;
        bgColor: string;
        textColor: string;
        className: string;
        style?: CSSProperties;
    }> | {
        type: PropType<{
            render?: () => import("../interface").VueJsxNode;
            shape?: "circle" | "square";
            text: import("../interface").VueJsxNode;
            bgColor: string;
            textColor: string;
            className: string;
            style?: CSSProperties;
        }>;
        default?: any;
        required?: false;
    };
    topSlot: PropType<{
        render?: () => import("../interface").VueJsxNode;
        gradientStart?: string;
        gradientEnd?: string;
        text: import("../interface").VueJsxNode;
        textColor: string;
        className: string;
        style?: CSSProperties;
    }> | {
        type: PropType<{
            render?: () => import("../interface").VueJsxNode;
            gradientStart?: string;
            gradientEnd?: string;
            text: import("../interface").VueJsxNode;
            textColor: string;
            className: string;
            style?: CSSProperties;
        }>;
        default?: any;
        required?: false;
    };
    border: PropType<boolean | {
        color?: string;
        motion?: boolean;
    }> | {
        type: PropType<boolean | {
            color?: string;
            motion?: boolean;
        }>;
        default?: any;
        required?: false;
    };
    contentMotion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Index;
