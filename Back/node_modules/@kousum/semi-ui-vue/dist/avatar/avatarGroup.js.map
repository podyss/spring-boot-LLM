{"version":3,"file":"avatarGroup.js","sources":["../../src/components/avatar/avatarGroup.tsx"],"sourcesContent":["import { defineComponent, ref, h, Fragment, VNode, cloneVNode, PropType } from 'vue';\nimport cls from 'classnames';\nimport { get as lodashGet, isFunction, isNumber } from 'lodash';\nimport Avatar, { AvatarGroupOverlapFrom, AvatarGroupShape, AvatarGroupSize } from './index';\nimport { AvatarGroupProps } from './interface';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/avatar/constants';\nimport { ComponentObjectPropsOptions } from 'vue/dist/vue';\nimport { CombineProps } from '../interface';\nimport { getFragmentChildren } from '../_utils';\n\nconst sizeSet = strings.SIZE;\nconst shapeSet = strings.SHAPE;\nconst overlapFromSet = strings.OVERLAP_FROM;\nconst prefixCls = cssClasses.PREFIX;\n\nexport const vuePropsType: CombineProps<AvatarGroupProps> = {\n  style: [Object, String] as PropType<AvatarGroupProps['style']>,\n  className: String,\n  shape: { type: String as PropType<AvatarGroupProps['shape']>, default: 'circle' },\n  size: { type: String as PropType<AvatarGroupProps['size']>, default: 'medium' },\n  overlapFrom: { type: String as PropType<AvatarGroupProps['overlapFrom']>, default: 'start' },\n  maxCount: Number,\n  renderMore: Function as PropType<AvatarGroupProps['renderMore']>,\n};\nconst AvatarGroup = defineComponent({\n  props: { ...vuePropsType },\n  name: 'AvatarGroup',\n  setup(props, { slots }) {\n    function getMergeAvatars(avatars: VNode[]) {\n      const { maxCount } = props;\n      let renderAvatars = avatars;\n      const restNumber = avatars.length - maxCount;\n\n      const normalAvatars = avatars.slice(0, maxCount);\n      const restAvatars = avatars.slice(maxCount);\n\n      if (restNumber > 0) {\n        const more = renderMoreAvatar(restNumber, restAvatars);\n        normalAvatars.push(more);\n        renderAvatars = normalAvatars;\n      }\n      return renderAvatars;\n    }\n\n    function renderMoreAvatar(restNumber: number, restAvatars: VNode[]) {\n      const { renderMore } = props;\n      const moreCls = cls(`${prefixCls}-item-more`);\n      let moreAvatar = <Avatar className={moreCls} key=\"_+n\">{`+${restNumber}`}</Avatar>;\n      if (isFunction(renderMore)) {\n        moreAvatar = <Fragment key=\"_+n\">{renderMore(restNumber, restAvatars)}</Fragment>;\n      }\n      return moreAvatar;\n    }\n\n    return () => {\n      const children = getFragmentChildren(slots);\n      function getAllAvatars() {\n        return Array.isArray(children) ? children : [children];\n      }\n      // eslint-disable-next-line no-unused-vars\n      const { maxCount, overlapFrom, size, shape, renderMore, ...rest } = props;\n      let inner;\n      const groupCls = cls({\n        [`${prefixCls}-group`]: true,\n      });\n      if (children) {\n        const avatars = getAllAvatars();\n        inner = (isNumber(maxCount) ? getMergeAvatars(avatars) : avatars).map((itm, index) => {\n          const className = cls(lodashGet((itm as any).props, 'className'), {\n            [`${prefixCls}-item-start-${index}`]: overlapFrom === 'start',\n            [`${prefixCls}-item-end-${index}`]: overlapFrom === 'end',\n          });\n          return cloneVNode(itm as any, { ...rest, class: className, size, shape, key: index });\n        });\n      }\n\n      return <div class={groupCls}>{inner}</div>;\n    };\n  },\n});\n\nexport default AvatarGroup;\n"],"names":["strings","SIZE","SHAPE","OVERLAP_FROM","prefixCls","cssClasses","PREFIX","vuePropsType","style","Object","String","className","shape","type","default","size","overlapFrom","maxCount","Number","renderMore","Function","AvatarGroup","defineComponent","props","name","setup","slots","getMergeAvatars","avatars","renderAvatars","restNumber","length","normalAvatars","slice","restAvatars","more","renderMoreAvatar","push","moreCls","cls","moreAvatar","_createVNode","Avatar","isFunction","_Fragment","children","getFragmentChildren","getAllAvatars","Array","isArray","rest","inner","groupCls","isNumber","map","itm","index","lodashGet","cloneVNode","class","key"],"mappings":"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"}