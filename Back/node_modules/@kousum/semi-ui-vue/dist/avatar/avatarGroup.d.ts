import { VNode, PropType } from 'vue';
import { AvatarGroupOverlapFrom, AvatarGroupShape, AvatarGroupSize } from './index';
import { AvatarGroupProps } from './interface';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<AvatarGroupProps>;
declare const AvatarGroup: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    shape: PropType<AvatarGroupShape> | {
        type: PropType<AvatarGroupShape>;
        default?: any;
        required?: false;
    };
    size: PropType<AvatarGroupSize> | {
        type: PropType<AvatarGroupSize>;
        default?: any;
        required?: false;
    };
    overlapFrom: PropType<AvatarGroupOverlapFrom> | {
        type: PropType<AvatarGroupOverlapFrom>;
        default?: any;
        required?: false;
    };
    maxCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    renderMore: PropType<(restNumber?: number, restAvatars?: VNode[]) => VNode> | {
        type: PropType<(restNumber?: number, restAvatars?: VNode[]) => VNode>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    shape: PropType<AvatarGroupShape> | {
        type: PropType<AvatarGroupShape>;
        default?: any;
        required?: false;
    };
    size: PropType<AvatarGroupSize> | {
        type: PropType<AvatarGroupSize>;
        default?: any;
        required?: false;
    };
    overlapFrom: PropType<AvatarGroupOverlapFrom> | {
        type: PropType<AvatarGroupOverlapFrom>;
        default?: any;
        required?: false;
    };
    maxCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    renderMore: PropType<(restNumber?: number, restAvatars?: VNode[]) => VNode> | {
        type: PropType<(restNumber?: number, restAvatars?: VNode[]) => VNode>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default AvatarGroup;
