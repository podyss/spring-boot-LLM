import '@douyinfe/semi-foundation/lib/es/timeline/timeline.css';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface TimelineItemProps {
    color?: string;
    time?: VueJsxNode;
    type?: 'default' | 'ongoing' | 'success' | 'warning' | 'error';
    dot?: VueJsxNode;
    extra?: VueJsxNode;
    position?: 'left' | 'right';
    className?: string;
    style?: CSSProperties;
    onClick?: (e: MouseEvent) => void;
}
export declare const vuePropsType: CombineProps<TimelineItemProps>;
declare const TimelineItem: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    color: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    time: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    type: PropType<"default" | "error" | "warning" | "success" | "ongoing"> | {
        type: PropType<"default" | "error" | "warning" | "success" | "ongoing">;
        default?: any;
        required?: false;
    };
    dot: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    extra: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    position: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    color: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    time: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    type: PropType<"default" | "error" | "warning" | "success" | "ongoing"> | {
        type: PropType<"default" | "error" | "warning" | "success" | "ongoing">;
        default?: any;
        required?: false;
    };
    dot: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    extra: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    position: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TimelineItem;
