import { SliderProps as BasicSliceProps, SliderState, tipFormatterBasicType } from '@douyinfe/semi-foundation/lib/es/slider/foundation';
import '@douyinfe/semi-foundation/lib/es/slider/slider.css';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../interface';
export interface SliderProps extends BasicSliceProps {
    style?: CSSProperties;
    railStyle?: CSSProperties;
}
export type { SliderState };
export declare const vuePropsType: CombineProps<SliderProps>;
declare const Slider: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    railStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<number | number[]> | {
        type: PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showMarkLabel: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    included: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    marks: PropType<import("@douyinfe/semi-foundation/lib/es/slider/foundation").Marks> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/slider/foundation").Marks>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    min: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    range: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    step: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    tipFormatter: PropType<(value: tipFormatterBasicType | tipFormatterBasicType[]) => any> | {
        type: PropType<(value: tipFormatterBasicType | tipFormatterBasicType[]) => any>;
        default?: any;
        required?: false;
    };
    value: PropType<number | number[]> | {
        type: PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    vertical: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAfterChange: PropType<(value: BasicSliceProps["value"]) => void> | {
        type: PropType<(value: BasicSliceProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: BasicSliceProps["value"]) => void> | {
        type: PropType<(value: BasicSliceProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    onMouseUp: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    tooltipOnMark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    tooltipVisible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showBoundary: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    verticalReverse: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-valuetext': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    getAriaValueText: PropType<(value: number, index?: number) => string> | {
        type: PropType<(value: number, index?: number) => string>;
        default?: any;
        required?: false;
    };
    handleDot: PropType<{
        size?: string;
        color?: string;
    } | {
        size?: string;
        color?: string;
    }[]> | {
        type: PropType<{
            size?: string;
            color?: string;
        } | {
            size?: string;
            color?: string;
        }[]>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    railStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<number | number[]> | {
        type: PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showMarkLabel: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    included: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    marks: PropType<import("@douyinfe/semi-foundation/lib/es/slider/foundation").Marks> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/slider/foundation").Marks>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    min: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    range: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    step: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    tipFormatter: PropType<(value: tipFormatterBasicType | tipFormatterBasicType[]) => any> | {
        type: PropType<(value: tipFormatterBasicType | tipFormatterBasicType[]) => any>;
        default?: any;
        required?: false;
    };
    value: PropType<number | number[]> | {
        type: PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    vertical: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAfterChange: PropType<(value: BasicSliceProps["value"]) => void> | {
        type: PropType<(value: BasicSliceProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: BasicSliceProps["value"]) => void> | {
        type: PropType<(value: BasicSliceProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    onMouseUp: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    tooltipOnMark: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    tooltipVisible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showBoundary: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    verticalReverse: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-valuetext': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    getAriaValueText: PropType<(value: number, index?: number) => string> | {
        type: PropType<(value: number, index?: number) => string>;
        default?: any;
        required?: false;
    };
    handleDot: PropType<{
        size?: string;
        color?: string;
    } | {
        size?: string;
        color?: string;
    }[]> | {
        type: PropType<{
            size?: string;
            color?: string;
        } | {
            size?: string;
            color?: string;
        }[]>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Slider;
