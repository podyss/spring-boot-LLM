import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
import { SideSheetProps } from '@douyinfe/semi-foundation/lib/es/sideSheet/sideSheetFoundation';
export interface SideSheetContentProps {
    onClose?: (e: MouseEvent) => void;
    closeIcon?: VueJsxNode;
    mask?: boolean;
    maskStyle?: CSSProperties;
    maskClosable?: boolean;
    maskClassName?: string;
    title?: VueJsxNode;
    closable?: boolean;
    headerStyle?: CSSProperties;
    width: string | number;
    height: string | number;
    style: CSSProperties;
    size: SideSheetProps['size'];
    bodyStyle?: CSSProperties;
    className: string;
    dialogClassName?: string;
    footer?: VueJsxNode;
    'aria-label'?: string;
    maskExtraProps?: {
        [key: string]: any;
    };
    wrapperExtraProps?: {
        [key: string]: any;
    };
    motion?: boolean;
    visible?: boolean;
}
export declare const vuePropsType: CombineProps<SideSheetContentProps>;
declare const SideSheetContent: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    onClose: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    mask: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    headerStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    width: {
        type: PropType<string | number>;
        default?: any;
        required: true;
    };
    height: {
        type: PropType<string | number>;
        default?: any;
        required: true;
    };
    style: {
        type: PropType<CSSProperties>;
        default?: any;
        required: true;
    };
    size: {
        type: PropType<"small" | "large" | "medium">;
        default?: any;
        required: true;
    };
    bodyStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    dialogClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    footer: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    maskExtraProps: PropType<{
        [key: string]: any;
    }> | {
        type: PropType<{
            [key: string]: any;
        }>;
        default?: any;
        required?: false;
    };
    wrapperExtraProps: PropType<{
        [key: string]: any;
    }> | {
        type: PropType<{
            [key: string]: any;
        }>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    onClose: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    mask: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    headerStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    width: {
        type: PropType<string | number>;
        default?: any;
        required: true;
    };
    height: {
        type: PropType<string | number>;
        default?: any;
        required: true;
    };
    style: {
        type: PropType<CSSProperties>;
        default?: any;
        required: true;
    };
    size: {
        type: PropType<"small" | "large" | "medium">;
        default?: any;
        required: true;
    };
    bodyStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    dialogClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    footer: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    maskExtraProps: PropType<{
        [key: string]: any;
    }> | {
        type: PropType<{
            [key: string]: any;
        }>;
        default?: any;
        required?: false;
    };
    wrapperExtraProps: PropType<{
        [key: string]: any;
    }> | {
        type: PropType<{
            [key: string]: any;
        }>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default SideSheetContent;
