import { SideSheetProps, SideSheetState } from '@douyinfe/semi-foundation/lib/es/sideSheet/sideSheetFoundation';
import '@douyinfe/semi-foundation/lib/es/sideSheet/sideSheet.css';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
import type { SideSheetContentProps } from './SideSheetContent';
export type { SideSheetContentProps };
export interface SideSheetReactProps extends SideSheetProps {
    bodyStyle?: CSSProperties;
    headerStyle?: CSSProperties;
    maskStyle?: CSSProperties;
    style?: CSSProperties;
    title?: VueJsxNode;
    footer?: VueJsxNode;
    onCancel?: (e: MouseEvent | KeyboardEvent) => void;
}
export type { SideSheetState };
export declare const vuePropsType: CombineProps<Omit<SideSheetProps, "children">>;
declare const SideSheet: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    title: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "large" | "medium"> | {
        type: PropType<"small" | "large" | "medium">;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    footer: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    mask: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onCancel: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placement: PropType<"bottom" | "left" | "right" | "top"> | {
        type: PropType<"bottom" | "left" | "right" | "top">;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    bodyStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    headerStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    disableScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    afterVisibleChange: PropType<(isVisible: boolean) => void> | {
        type: PropType<(isVisible: boolean) => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    title: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "large" | "medium"> | {
        type: PropType<"small" | "large" | "medium">;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    footer: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    mask: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onCancel: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placement: PropType<"bottom" | "left" | "right" | "top"> | {
        type: PropType<"bottom" | "left" | "right" | "top">;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    bodyStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    headerStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    disableScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    afterVisibleChange: PropType<(isVisible: boolean) => void> | {
        type: PropType<(isVisible: boolean) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default SideSheet;
