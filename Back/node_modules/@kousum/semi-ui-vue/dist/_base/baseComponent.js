import { useAttrs as b, shallowRef as g, getCurrentInstance as d, toRaw as P } from "vue";
import C from '@douyinfe/semi-foundation/lib/es/utils/log';
import w from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
import { useConfigContext as x } from "../configProvider/context/Consumer";
const {
  hasOwnProperty: j
} = Object.prototype;
function I(n) {
  let o = {};
  for (let i in n)
    n[i] !== void 0 && (o[i] = n[i]);
  return o;
}
const B = (n, o) => {
  const i = b(), r = g({}), a = g(null), {
    getProps: c
  } = S(), u = (t) => !!(t && n && typeof n == "object" && j.call(p().getProps(), t)), {
    context: f
  } = x(), l = d();
  function p() {
    return {
      getContext: (t) => {
        const e = l.provides;
        let s = {
          ...f.value
        };
        if (Object.keys(e).forEach((O) => {
          s = {
            ...s,
            ...e[O].value
          };
        }), s && t)
          return s[t];
      },
      getContexts: () => {
        const t = l.provides;
        let e = {
          ...f.value
        };
        return Object.keys(t).forEach((s) => {
          e = {
            ...e,
            ...t[s].value
          };
        }), e;
      },
      // eslint-disable-line
      getProp: (t) => n[t],
      // eslint-disable-line
      // return all props
      // @ts-ignore
      getProps: () => c(n),
      // eslint-disable-line
      getState: (t) => o[t] instanceof Object ? P(o[t]) : o[t],
      // eslint-disable-line
      // TODO toRaw会失去响应
      getStates: () => {
        const t = {};
        return Object.keys(o).map((e) => {
          o[e] instanceof Object && (t[e] = P(o[e]));
        }), {
          ...o,
          ...t
        };
      },
      // eslint-disable-line
      setState: (t, e) => {
        for (let s in t)
          t.hasOwnProperty(s) && (o[s] = t[s]);
      },
      // eslint-disable-line
      getCache: (t) => t && r.value[t],
      // eslint-disable-line
      getCaches: () => r.value,
      // eslint-disable-line
      setCache: (t, e) => t && (r.value[t] = e),
      // eslint-disable-line
      stopPropagation: (t) => {
        try {
          t.stopPropagation(), t && t.stopImmediatePropagation && t.stopImmediatePropagation();
        } catch {
        }
      },
      persistEvent: (t) => {
      }
    };
  }
  function m(t, ...e) {
    return C(t, ...e);
  }
  function h() {
    return w({
      ...n,
      ...i
    });
  }
  function v(t) {
    return new Promise((e) => {
      Object.keys(t).forEach((s) => {
        o[s] = t[s];
      }), e();
    });
  }
  return {
    cache: r,
    foundation: a,
    state: o,
    isControlled: u,
    context: f,
    adapter: p,
    log: m,
    getDataAttr: h,
    setStateAsync: v
  };
};
function S() {
  const n = d();
  function o(r) {
    if (n)
      return n.vnode.props && r in n.vnode.props;
  }
  function i(r) {
    if (!n.vnode.props)
      return I(r);
    const a = {};
    for (const c in r) {
      r.hasOwnProperty(c) && c in n.vnode.props && (a[c] = r[c]), r.hasOwnProperty(c) && r[c] !== void 0 && r[c] !== !1 && (a[c] = r[c]);
      const u = n.propsOptions[0];
      a[c] === void 0 && u[c].default !== void 0 && (a[c] = u[c].default);
    }
    return a;
  }
  return {
    hasInProps: o,
    getProps: i
  };
}
export {
  I as getProps,
  B as useBaseComponent,
  S as useHasInProps
};
//# sourceMappingURL=baseComponent.js.map
