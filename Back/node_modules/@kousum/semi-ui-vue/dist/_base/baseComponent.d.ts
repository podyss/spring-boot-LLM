import { CSSProperties, Ref, ShallowRef } from 'vue';
import { DefaultAdapter } from '@douyinfe/semi-foundation/lib/es/base/foundation';
import { VALIDATE_STATUS } from '@douyinfe/semi-foundation/lib/es/base/constants';
import { ArrayElement } from './base';
import type { ContextValue } from '../configProvider/context';
export type ValidateStatus = ArrayElement<typeof VALIDATE_STATUS>;
export type BaseProps = {
    style?: CSSProperties;
    className?: string;
};
export declare function getProps(props: Record<string, any>): any;
export declare const useBaseComponent: <U extends BaseProps = {}, S = Record<string, any>>(props: U, state: S) => {
    isControlled: (key: any) => boolean;
    cache: any;
    adapter: <P extends BaseProps, S = {}>() => DefaultAdapter<P, S>;
    log: (text: string, ...rest: any) => any;
    context: Ref<ContextValue>;
    foundation: ShallowRef<any>;
    state: any;
    getDataAttr: () => Record<string, any>;
    setStateAsync: (state: Partial<S>) => Promise<void>;
};
export declare function useHasInProps(): {
    hasInProps: (key: string) => boolean | undefined;
    getProps: <P>(props: P) => P;
};
