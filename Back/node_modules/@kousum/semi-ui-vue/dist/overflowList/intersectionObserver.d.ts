import { PropType, VNode } from 'vue';
import { CombineProps } from '../interface';
export interface ReactIntersectionObserverProps {
    onIntersect?: IntersectionObserverCallback;
    option?: IntersectionObserverInit;
    root?: IntersectionObserverInit['root'];
    threshold?: IntersectionObserverInit['threshold'];
    rootMargin?: IntersectionObserverInit['rootMargin'];
    items?: Record<string, Element>;
    children?: () => (VNode[] | VNode);
}
export declare const vuePropsType: CombineProps<ReactIntersectionObserverProps>;
declare const ReactIntersectionObserver: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    onIntersect: PropType<IntersectionObserverCallback> | {
        type: PropType<IntersectionObserverCallback>;
        default?: any;
        required?: false;
    };
    option: PropType<IntersectionObserverInit> | {
        type: PropType<IntersectionObserverInit>;
        default?: any;
        required?: false;
    };
    root: PropType<Element | Document> | {
        type: PropType<Element | Document>;
        default?: any;
        required?: false;
    };
    threshold: PropType<number | number[]> | {
        type: PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    rootMargin: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    items: PropType<Record<string, Element>> | {
        type: PropType<Record<string, Element>>;
        default?: any;
        required?: false;
    };
    children: PropType<() => (VNode[] | VNode)> | {
        type: PropType<() => (VNode[] | VNode)>;
        default?: any;
        required?: false;
    };
}>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    onIntersect: PropType<IntersectionObserverCallback> | {
        type: PropType<IntersectionObserverCallback>;
        default?: any;
        required?: false;
    };
    option: PropType<IntersectionObserverInit> | {
        type: PropType<IntersectionObserverInit>;
        default?: any;
        required?: false;
    };
    root: PropType<Element | Document> | {
        type: PropType<Element | Document>;
        default?: any;
        required?: false;
    };
    threshold: PropType<number | number[]> | {
        type: PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    rootMargin: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    items: PropType<Record<string, Element>> | {
        type: PropType<Record<string, Element>>;
        default?: any;
        required?: false;
    };
    children: PropType<() => (VNode[] | VNode)> | {
        type: PropType<() => (VNode[] | VNode)>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ReactIntersectionObserver;
