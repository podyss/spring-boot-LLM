import '@douyinfe/semi-foundation/lib/es/overflowList/overflowList.css';
import { CombineProps, VueJsxNode } from '../interface';
import { CSSProperties, PropType } from 'vue';
declare const OverflowDirection: {
    NONE: number;
    GROW: number;
    SHRINK: number;
};
export type { ReactIntersectionObserverProps } from './intersectionObserver';
export type OverflowItem = Record<string, any>;
type Key = string | number;
export interface OverflowListProps {
    className?: string;
    collapseFrom?: 'start' | 'end';
    items?: Array<OverflowItem>;
    minVisibleItems?: number;
    onIntersect?: (res: {
        [key: string]: IntersectionObserverEntry;
    }) => void;
    onOverflow?: (overflowItems: Array<OverflowItem>) => void;
    overflowRenderer?: (overflowItems: Array<OverflowItem>) => VueJsxNode | VueJsxNode[];
    renderMode?: 'collapse' | 'scroll';
    style?: CSSProperties;
    threshold?: number | number[];
    visibleItemRenderer?: (item: OverflowItem, index: number) => VueJsxNode;
    wrapperClassName?: string;
    wrapperStyle?: CSSProperties;
    itemKey?: Key | ((item: OverflowItem) => Key);
    onVisibleStateChange?: (visibleState: Map<string, boolean>) => void;
    overflowRenderDirection?: 'both' | 'start' | 'end';
    collapseMask?: any;
}
export interface OverflowListState {
    direction?: typeof OverflowDirection.GROW;
    lastOverflowCount?: number;
    overflow?: Array<OverflowItem>;
    visible?: Array<OverflowItem>;
    visibleState?: Map<string, boolean>;
    prevProps?: OverflowListProps;
    itemSizeMap?: Map<Key, number>;
    containerWidth?: number;
    maxCount?: number;
    overflowStatus?: 'calculating' | 'overflowed' | 'normal';
    pivot?: number;
    overflowWidth?: number;
}
export declare const vuePropsType: CombineProps<OverflowListProps>;
declare const OverflowList: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    collapseFrom: PropType<"end" | "start"> | {
        type: PropType<"end" | "start">;
        default?: any;
        required?: false;
    };
    items: PropType<OverflowItem[]> | {
        type: PropType<OverflowItem[]>;
        default?: any;
        required?: false;
    };
    minVisibleItems: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onIntersect: PropType<(res: {
        [key: string]: IntersectionObserverEntry;
    }) => void> | {
        type: PropType<(res: {
            [key: string]: IntersectionObserverEntry;
        }) => void>;
        default?: any;
        required?: false;
    };
    onOverflow: PropType<(overflowItems: Array<OverflowItem>) => void> | {
        type: PropType<(overflowItems: Array<OverflowItem>) => void>;
        default?: any;
        required?: false;
    };
    overflowRenderer: PropType<(overflowItems: Array<OverflowItem>) => VueJsxNode | VueJsxNode[]> | {
        type: PropType<(overflowItems: Array<OverflowItem>) => VueJsxNode | VueJsxNode[]>;
        default?: any;
        required?: false;
    };
    renderMode: PropType<"collapse" | "scroll"> | {
        type: PropType<"collapse" | "scroll">;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    threshold: PropType<number | number[]> | {
        type: PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    visibleItemRenderer: PropType<(item: OverflowItem, index: number) => VueJsxNode> | {
        type: PropType<(item: OverflowItem, index: number) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    wrapperClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    wrapperStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    itemKey: PropType<Key | ((item: OverflowItem) => Key)> | {
        type: PropType<Key | ((item: OverflowItem) => Key)>;
        default?: any;
        required?: false;
    };
    onVisibleStateChange: PropType<(visibleState: Map<string, boolean>) => void> | {
        type: PropType<(visibleState: Map<string, boolean>) => void>;
        default?: any;
        required?: false;
    };
    overflowRenderDirection: PropType<"both" | "end" | "start"> | {
        type: PropType<"both" | "end" | "start">;
        default?: any;
        required?: false;
    };
    collapseMask: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    collapseFrom: PropType<"end" | "start"> | {
        type: PropType<"end" | "start">;
        default?: any;
        required?: false;
    };
    items: PropType<OverflowItem[]> | {
        type: PropType<OverflowItem[]>;
        default?: any;
        required?: false;
    };
    minVisibleItems: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onIntersect: PropType<(res: {
        [key: string]: IntersectionObserverEntry;
    }) => void> | {
        type: PropType<(res: {
            [key: string]: IntersectionObserverEntry;
        }) => void>;
        default?: any;
        required?: false;
    };
    onOverflow: PropType<(overflowItems: Array<OverflowItem>) => void> | {
        type: PropType<(overflowItems: Array<OverflowItem>) => void>;
        default?: any;
        required?: false;
    };
    overflowRenderer: PropType<(overflowItems: Array<OverflowItem>) => VueJsxNode | VueJsxNode[]> | {
        type: PropType<(overflowItems: Array<OverflowItem>) => VueJsxNode | VueJsxNode[]>;
        default?: any;
        required?: false;
    };
    renderMode: PropType<"collapse" | "scroll"> | {
        type: PropType<"collapse" | "scroll">;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    threshold: PropType<number | number[]> | {
        type: PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    visibleItemRenderer: PropType<(item: OverflowItem, index: number) => VueJsxNode> | {
        type: PropType<(item: OverflowItem, index: number) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    wrapperClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    wrapperStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    itemKey: PropType<Key | ((item: OverflowItem) => Key)> | {
        type: PropType<Key | ((item: OverflowItem) => Key)>;
        default?: any;
        required?: false;
    };
    onVisibleStateChange: PropType<(visibleState: Map<string, boolean>) => void> | {
        type: PropType<(visibleState: Map<string, boolean>) => void>;
        default?: any;
        required?: false;
    };
    overflowRenderDirection: PropType<"both" | "end" | "start"> | {
        type: PropType<"both" | "end" | "start">;
        default?: any;
        required?: false;
    };
    collapseMask: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default OverflowList;
