import { NoticePosition } from '@douyinfe/semi-foundation/lib/es/notification/notificationFoundation';
import { Motion } from '../_base/base';
import { PropType, VNode } from 'vue';
import { CombineProps } from '../interface';
export type ArgsType<T> = T extends (...args: infer A) => any ? A : never;
export interface NoticeTransitionProps {
    position?: NoticePosition;
    children?: VNode | ((TransitionProps: any) => any) | VNode[] | ((transitionStyle: any) => VNode);
    motion?: Motion<NoticeTransitionProps>;
}
export declare const vuePropsType: CombineProps<NoticeTransitionProps>;
declare const NoticeTransition: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    position: PropType<NoticePosition> | {
        type: PropType<NoticePosition>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | ((TransitionProps: any) => any) | ((transitionStyle: any) => VNode)> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[] | ((TransitionProps: any) => any) | ((transitionStyle: any) => VNode)>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion<NoticeTransitionProps>> | {
        type: PropType<Motion<NoticeTransitionProps>>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    position: PropType<NoticePosition> | {
        type: PropType<NoticePosition>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | ((TransitionProps: any) => any) | ((transitionStyle: any) => VNode)> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[] | ((TransitionProps: any) => any) | ((transitionStyle: any) => VNode)>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion<NoticeTransitionProps>> | {
        type: PropType<Motion<NoticeTransitionProps>>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default NoticeTransition;
