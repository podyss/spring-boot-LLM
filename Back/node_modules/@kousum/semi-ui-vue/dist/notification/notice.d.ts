import { NoticeProps } from '@douyinfe/semi-foundation/lib/es/notification/notificationFoundation';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface NoticeReactProps extends NoticeProps {
    style?: CSSProperties;
    title?: VueJsxNode;
    content?: VueJsxNode;
    icon?: VueJsxNode;
    onClick?: (e: MouseEvent) => void;
}
export declare const vuePropsType: CombineProps<NoticeReactProps>;
declare const Notice: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    content: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    position: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticePosition> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticePosition>;
        default?: any;
        required?: false;
    };
    type: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticeType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticeType>;
        default?: any;
        required?: false;
    };
    onClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onCloseClick: PropType<(id: string) => void> | {
        type: PropType<(id: string) => void>;
        default?: any;
        required?: false;
    };
    showClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    close: PropType<(id: string) => void> | {
        type: PropType<(id: string) => void>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    theme: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticeTheme> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticeTheme>;
        default?: any;
        required?: false;
    };
    onHookClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    direction: PropType<"ltr" | "rtl"> | {
        type: PropType<"ltr" | "rtl">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    content: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    position: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticePosition> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticePosition>;
        default?: any;
        required?: false;
    };
    type: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticeType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticeType>;
        default?: any;
        required?: false;
    };
    onClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onCloseClick: PropType<(id: string) => void> | {
        type: PropType<(id: string) => void>;
        default?: any;
        required?: false;
    };
    showClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    close: PropType<(id: string) => void> | {
        type: PropType<(id: string) => void>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    theme: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticeTheme> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/notification/notificationFoundation").NoticeTheme>;
        default?: any;
        required?: false;
    };
    onHookClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    direction: PropType<"ltr" | "rtl"> | {
        type: PropType<"ltr" | "rtl">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Notice;
