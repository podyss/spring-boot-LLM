var j = Object.defineProperty;
var q = (a, t, i) => t in a ? j(a, t, { enumerable: !0, configurable: !0, writable: !0, value: i }) : a[t] = i;
var L = (a, t, i) => q(a, typeof t != "symbol" ? t + "" : t, i);
import { defineComponent as B, useSlots as M, reactive as O, createVNode as u, Fragment as U, mergeProps as R, createApp as V } from "vue";
import W from "classnames";
import * as v from "../PropTypes";
import { vuePropsMake as _ } from "../PropTypes";
import D from '@douyinfe/semi-foundation/lib/es/notification/notificationListFoundation';
import { cssClasses as w } from '@douyinfe/semi-foundation/lib/es/notification/constants';
import P from "./notice";
import '@douyinfe/semi-foundation/lib/es/notification/notification.css';
import G from "./NoticeTransition";
import x from '@douyinfe/semi-foundation/lib/es/utils/uuid';
import H from "./useNotification";
import { useConfigContext as J } from "../configProvider/context/Consumer";
import { useBaseComponent as K } from "../_base/baseComponent";
const f = {
  duration: 3,
  position: "topRight",
  motion: !0,
  content: "",
  title: "",
  zIndex: 1010
}, Q = {
  style: v.object,
  className: v.string,
  direction: String
  // ref: [Function, Object]
}, X = {}, Y = _(Q, X), Z = /* @__PURE__ */ B({
  props: {
    ...Y
  },
  name: "NotificationList",
  setup(a, {
    expose: t
  }) {
    M();
    let i = [];
    const n = O({
      notices: [],
      removedItems: [],
      updatedItems: []
    }), {
      adapter: c
    } = K(a, n);
    function l() {
      return {
        ...c(),
        updateNotices: (e, o = [], r = []) => {
          i = [...e], [...o], n.notices = e, n.removedItems = o, n.updatedItems = r;
        },
        getNotices: () => i
      };
    }
    const C = l(), m = new D(C), {
      context: S
    } = J(), z = (e) => m.addNotice(e), A = (e) => m.has(e), y = (e) => {
      m.removeNotice(String(e));
    }, T = (e, o) => m.update("" + e, o), k = () => m.destroyAll(), E = (e, o, r = [], d = []) => {
      const g = W(w.LIST);
      if (e.length) {
        const p = $(e[0]);
        return u("div", {
          placement: o,
          key: o,
          class: g,
          style: p
        }, [e.map((s, h) => s.motion ? u(G, {
          key: s.id || h,
          position: o,
          motion: s.motion,
          children: r.find((N) => N.id === s.id) ? null : (N) => u(P, R(s, {
            ref: (I) => {
              I && d.some((F) => F.id === I.$props.id) && I.getFoundation().restartCloseTimer();
            },
            style: {
              ...N,
              ...s.style
            },
            key: s.id,
            close: y
          }), null)
        }, null) : u(P, R(s, {
          style: {
            ...s.style
          },
          key: s.id,
          close: y
        }), null))]);
      }
      return null;
    };
    function $(e) {
      const o = {};
      return ["top", "left", "bottom", "right"].forEach((r) => {
        if (r in e) {
          const d = e[r];
          o[r] = typeof d == "number" ? `${d}px` : d;
        }
      }), o;
    }
    return t({
      add: z,
      has: A,
      remove: y,
      destroyAll: k,
      update: T
    }), () => {
      let {
        notices: e
      } = n;
      const {
        removedItems: o,
        updatedItems: r
      } = n;
      e = Array.from(/* @__PURE__ */ new Set([...e, ...o]));
      const d = {
        top: [],
        topLeft: [],
        topRight: [],
        bottom: [],
        bottomLeft: [],
        bottomRight: []
      };
      e.forEach((p) => {
        const h = (p.direction || S.value.direction) === "rtl" ? "topLeft" : "topRight", N = p.position || h;
        d[N].push(p);
      });
      const g = Object.entries(d).map((p) => {
        const s = p[0], h = p[1];
        return E(h, s, o, r);
      });
      return u(U, null, [g]);
    };
  }
});
class b {
  static addNotice(t) {
    t = {
      ...f,
      ...t
    };
    const i = t.id ?? x("notification");
    if (this.NotificationListRef)
      this.NotificationListRef.has(`${i}`) ? this.NotificationListRef.update(i, t) : this.NotificationListRef.add({
        ...t,
        id: i
      });
    else {
      const {
        getPopupContainer: n
      } = t, c = document.createElement("div");
      this.wrapperId || (this.wrapperId = x("notification-wrapper").slice(0, 32)), c.className = w.WRAPPER, c.id = this.wrapperId, c.style.zIndex = String(typeof t.zIndex == "number" ? t.zIndex : f.zIndex), n ? n().appendChild(c) : document.body.appendChild(c), this.app = V(() => u(Z, {
        ref: (l) => {
          this.NotificationListRef || l.add({
            ...t,
            id: i
          }), this.NotificationListRef = l;
        }
      })), this.app.mount(c);
    }
    return i;
  }
  static removeNotice(t) {
    return this.NotificationListRef && this.NotificationListRef.remove(t), t;
  }
  static info(t) {
    return this.addNotice({
      ...t,
      type: "info"
    });
  }
  static success(t) {
    return this.addNotice({
      ...t,
      type: "success"
    });
  }
  static error(t) {
    return this.addNotice({
      ...t,
      type: "error"
    });
  }
  static warning(t) {
    return this.addNotice({
      ...t,
      type: "warning"
    });
  }
  static open(t) {
    return this.addNotice({
      ...t,
      type: "default"
    });
  }
  static close(t) {
    return this.removeNotice(t);
  }
  static destroyAll() {
    if (this.NotificationListRef) {
      this.NotificationListRef.destroyAll();
      const t = document.querySelector(`#${this.wrapperId}`);
      this.app.unmount(), t && t.parentNode.removeChild(t), this.NotificationListRef = null, this.wrapperId = null;
    }
  }
  static config(t) {
    ["top", "left", "bottom", "right"].map((i) => {
      i in t && (f[i] = t[i]);
    }), typeof t.zIndex == "number" && (f.zIndex = t.zIndex), typeof t.duration == "number" && (f.duration = t.duration), typeof t.position == "string" && (f.position = t.position);
  }
}
L(b, "useNotification", H), L(b, "NotificationListRef", null);
export {
  b as NotificationListClass,
  Z as default,
  Y as vuePropsType
};
//# sourceMappingURL=index.js.map
