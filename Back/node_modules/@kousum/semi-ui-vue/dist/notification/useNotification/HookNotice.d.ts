import { NoticeInstance } from '@douyinfe/semi-foundation/lib/es/notification/notificationFoundation';
import { PropType } from 'vue';
export interface HookNoticeProps extends NoticeInstance {
    afterClose: (id: string) => void;
}
export declare const vuePropsType: {
    id: StringConstructor;
    afterClose: {
        type: PropType<HookNoticeProps["afterClose"]>;
        required: boolean;
    };
    motion: PropType<HookNoticeProps["motion"]>;
};
declare const HookNotice: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    id: StringConstructor;
    afterClose: {
        type: PropType<HookNoticeProps["afterClose"]>;
        required: boolean;
    };
    motion: PropType<HookNoticeProps["motion"]>;
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    id: StringConstructor;
    afterClose: {
        type: PropType<HookNoticeProps["afterClose"]>;
        required: boolean;
    };
    motion: PropType<HookNoticeProps["motion"]>;
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default HookNotice;
