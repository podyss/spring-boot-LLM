import { defineComponent as s, useSlots as f, createVNode as u, mergeProps as d } from "vue";
import { Transition as m } from "@kousum/semi-animation-vue";
const y = {
  position: String,
  children: {
    type: [Object, Function]
    // required: true
  },
  motion: [Object, String, Boolean]
}, g = /* @__PURE__ */ s({
  props: {
    ...y
  },
  name: "NoticeTransition",
  setup(e, {}) {
    f();
    let r;
    return () => {
      let {
        motion: n = {}
      } = e;
      const {
        position: i = "topRight"
      } = e, a = function({
        translate: t,
        opacity: c
      }) {
        let o = `translateX(${t}%)`;
        return i && typeof i == "string" && (/left/i.test(i) ? o = `translateX(${-t}%)` : /right/i.test(i) ? o = `translateX(${t}%)` : /top/i.test(i) ? o = `translateY(${-t}%)` : o = `translateY(${t}%)`), {
          transform: o,
          opacity: c
        };
      };
      return typeof n == "function" ? n = n(e) : (!n || typeof n != "object") && (n = {}), r || (r = e.children), u(m, d({
        from: {
          translate: 100,
          opacity: 0
        },
        enter: {
          translate: {
            val: 0,
            tension: 560,
            friction: 32
          },
          opacity: {
            val: 1,
            duration: 200
          }
        },
        leave: {
          translate: {
            val: 100,
            easing: "easeOutCubic",
            duration: 300
          },
          opacity: {
            val: 0,
            duration: 200
          }
        },
        children: typeof e.children == "function" ? (l) => {
          let t;
          return e.children === null ? t = r : t = e.children, t == null ? void 0 : t(a(l));
        } : e.children
      }, n), null);
    };
  }
});
export {
  g as default,
  y as vuePropsType
};
//# sourceMappingURL=NoticeTransition.js.map
