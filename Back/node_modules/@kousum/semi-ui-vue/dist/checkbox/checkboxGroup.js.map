{"version":3,"file":"checkboxGroup.js","sources":["../../src/components/checkbox/checkboxGroup.tsx"],"sourcesContent":["import {\n  defineComponent,\n  ref,\n  h,\n  Fragment,\n  useSlots,\n  VNode,\n  CSSProperties,\n  reactive,\n  onMounted,\n  watch,\n  onUnmounted,\n  cloneVNode,\n  PropType,\n} from 'vue';\n\nimport * as PropTypes from '../PropTypes';\n\nimport classnames from 'classnames';\nimport { checkboxGroupClasses as css, strings } from '@douyinfe/semi-foundation/checkbox/constants';\nimport CheckboxGroupFoundation, {\n  CheckboxGroupAdapter,\n} from '@douyinfe/semi-foundation/checkbox/checkboxGroupFoundation';\nimport { useBaseComponent } from '../_base/baseComponent';\nimport { Context } from './context';\nimport { isEqual } from 'lodash';\nimport Checkbox from './checkbox';\nimport type { CheckboxEvent } from './checkbox';\nimport { AriaAttributes } from '../AriaAttributes';\nimport { vuePropsMake } from '../PropTypes';\nimport { ComponentObjectPropsOptions } from 'vue';\nimport { CombineProps } from '../interface';\n\nexport type CheckboxDirection = 'horizontal' | 'vertical';\nexport type CheckboxType = 'default' | 'card' | 'pureCard';\n\nexport type CheckboxGroupProps = {\n  'aria-describedby'?: AriaAttributes['aria-describedby'];\n  'aria-errormessage'?: AriaAttributes['aria-errormessage'];\n  'aria-invalid'?: AriaAttributes['aria-invalid'];\n  'aria-labelledby'?: AriaAttributes['aria-labelledby'];\n  'aria-required'?: AriaAttributes['aria-required'];\n  defaultValue?: any[];\n  disabled?: boolean;\n  name?: string;\n  options?: any[];\n  value?: any[];\n  onChange?: (value: any[]) => void;\n  prefixCls?: string;\n  direction?: CheckboxDirection;\n  style?: CSSProperties;\n  className?: string;\n  type?: CheckboxType;\n  id?: string;\n  'aria-label'?: AriaAttributes['aria-label'];\n};\n\nexport type CheckboxGroupState = {\n  value?: any[];\n};\n\nconst propTypes: CombineProps<CheckboxGroupProps> = {\n  'aria-describedby': PropTypes.string,\n  'aria-errormessage': PropTypes.string,\n  'aria-invalid': [PropTypes.bool, PropTypes.string] as PropType<CheckboxGroupProps['aria-invalid']>,\n  'aria-labelledby': PropTypes.string,\n  'aria-required': PropTypes.bool,\n  defaultValue: PropTypes.array,\n  disabled: PropTypes.bool,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  value: PropTypes.array,\n  onChange: PropTypes.func as PropType<CheckboxGroupProps['onChange']>,\n  prefixCls: PropTypes.string,\n  direction: String as PropType<CheckboxGroupProps['direction']>,\n  className: PropTypes.string,\n  type: String as PropType<CheckboxGroupProps['type']>,\n  style: PropTypes.object,\n\n  id: String,\n  'aria-label': String,\n};\n\nconst defaultProps: Partial<CheckboxGroupProps> = {\n  disabled: false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange: () => {},\n  type: strings.TYPE_DEFAULT,\n  defaultValue: [] as any,\n  direction: strings.DEFAULT_DIRECTION,\n};\nexport const vuePropsType = vuePropsMake<CheckboxGroupProps>(propTypes, defaultProps);\n\nconst CheckboxGroup = defineComponent({\n  props: { ...vuePropsType },\n  name: 'CheckboxGroup',\n  setup(props, {}) {\n    const slots = useSlots();\n\n    const state = reactive({\n      value: props.value || props.defaultValue,\n    });\n\n    const { adapter: adapterInject, getDataAttr } = useBaseComponent<CheckboxGroupProps>(props, state);\n    function adapter(): CheckboxGroupAdapter {\n      return {\n        ...adapterInject<CheckboxGroupProps, CheckboxGroupState>(),\n        updateGroupValue: (value) => {\n          state.value = value;\n        },\n        notifyChange: (evt) => {\n          props.onChange && props.onChange(evt);\n        },\n      };\n    }\n    const foundation = new CheckboxGroupFoundation(adapter());\n    onMounted(() => {\n      foundation.init();\n    });\n\n    watch(\n      () => props.value,\n      (value, oldValue) => {\n        if (!isEqual(value, oldValue)) {\n          foundation.handlePropValueChange(props.value);\n        }\n      },\n      { deep: true }\n    );\n\n    onUnmounted(() => {\n      foundation.destroy();\n    });\n\n    function onChange(evt: CheckboxEvent) {\n      foundation.handleChange(evt);\n    }\n\n    return () => {\n      const children = slots.default?.();\n      const { options, prefixCls, direction, className, id, style, type, disabled } = props;\n\n      const isPureCardType = type === strings.TYPE_PURECARD;\n      const isCardType = type === strings.TYPE_CARD || isPureCardType;\n\n      const prefix = prefixCls || css.PREFIX;\n      const prefixClsDisplay = classnames(\n        {\n          [prefix as string]: true,\n          [`${prefix}-wrapper`]: true,\n          [`${prefix}-${direction}`]: direction,\n          [`${prefix}-${direction}-cardType`]: direction && isCardType,\n          [`${prefix}-${direction}-pureCardType`]: direction && isPureCardType,\n        },\n        className\n      );\n\n      const realValue = state.value.slice();\n\n      let inner;\n\n      if (options) {\n        inner = (options || []).map((option, index) => {\n          if (typeof option === 'string') {\n            return (\n              <Checkbox role=\"listitem\" key={index} disabled={props.disabled} value={option} prefixCls={prefixCls}>\n                {option}\n              </Checkbox>\n            );\n          } else {\n            return (\n              <Checkbox\n                role=\"listitem\"\n                key={index}\n                disabled={option.disabled || props.disabled}\n                value={option.value}\n                prefixCls={prefixCls}\n                extra={option.extra}\n                className={option.className}\n                style={option.style}\n                onChange={option.onChange}\n              >\n                {option.label}\n              </Checkbox>\n            );\n          }\n        });\n      } else if (children) {\n        inner = slots.default\n          ? slots.default().map((itm, index) => cloneVNode(itm, { key: index, role: 'listitem' }))\n          : null;\n      }\n\n      return (\n        <div\n          id={id}\n          role=\"list\"\n          aria-label={props['aria-label']}\n          class={prefixClsDisplay}\n          style={style}\n          aria-labelledby={props['aria-labelledby']}\n          aria-describedby={props['aria-describedby']}\n          {...getDataAttr()}\n          // aria-errormessage={props['aria-errormessage']}\n          // aria-invalid={props['aria-invalid']}\n          // aria-required={props['aria-required']}\n        >\n          <Context.Provider\n            value={{\n              checkboxGroup: {\n                onChange: onChange,\n                value: realValue,\n                disabled: props.disabled,\n                name: foundation.getFormatName(),\n                isCardType,\n                isPureCardType,\n              },\n            }}\n          >\n            {inner}\n          </Context.Provider>\n        </div>\n      );\n    };\n  },\n});\n\nexport default CheckboxGroup;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","propTypes","PropTypes","string","bool","defaultValue","array","disabled","name","options","value","onChange","func","prefixCls","direction","String","className","type","style","object","id","defaultProps","strings","TYPE_DEFAULT","DEFAULT_DIRECTION","vuePropsType","vuePropsMake","CheckboxGroup","defineComponent","props","setup","slots","useSlots","state","reactive","adapter","adapterInject","getDataAttr","useBaseComponent","updateGroupValue","notifyChange","evt","foundation","CheckboxGroupFoundation","onMounted","init","watch","oldValue","isEqual","handlePropValueChange","deep","onUnmounted","destroy","handleChange","children","default","isPureCardType","TYPE_PURECARD","isCardType","TYPE_CARD","prefix","css","PREFIX","prefixClsDisplay","classnames","realValue","slice","inner","map","option","index","_createVNode","Checkbox","extra","label","itm","cloneVNode","key","role","_mergeProps","Context","Provider","checkboxGroup","getFormatName"],"mappings":"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"}