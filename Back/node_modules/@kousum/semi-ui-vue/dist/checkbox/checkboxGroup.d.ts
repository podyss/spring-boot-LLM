import { CSSProperties, PropType } from 'vue';
import { AriaAttributes } from '../AriaAttributes';
import { CombineProps } from '../interface';
export type CheckboxDirection = 'horizontal' | 'vertical';
export type CheckboxType = 'default' | 'card' | 'pureCard';
export type CheckboxGroupProps = {
    'aria-describedby'?: AriaAttributes['aria-describedby'];
    'aria-errormessage'?: AriaAttributes['aria-errormessage'];
    'aria-invalid'?: AriaAttributes['aria-invalid'];
    'aria-labelledby'?: AriaAttributes['aria-labelledby'];
    'aria-required'?: AriaAttributes['aria-required'];
    defaultValue?: any[];
    disabled?: boolean;
    name?: string;
    options?: any[];
    value?: any[];
    onChange?: (value: any[]) => void;
    prefixCls?: string;
    direction?: CheckboxDirection;
    style?: CSSProperties;
    className?: string;
    type?: CheckboxType;
    id?: string;
    'aria-label'?: AriaAttributes['aria-label'];
};
export type CheckboxGroupState = {
    value?: any[];
};
export declare const vuePropsType: CombineProps<CheckboxGroupProps>;
declare const CheckboxGroup: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    options: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    value: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: any[]) => void> | {
        type: PropType<(value: any[]) => void>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<CheckboxDirection> | {
        type: PropType<CheckboxDirection>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    type: PropType<CheckboxType> | {
        type: PropType<CheckboxType>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    options: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    value: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: any[]) => void> | {
        type: PropType<(value: any[]) => void>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    direction: PropType<CheckboxDirection> | {
        type: PropType<CheckboxDirection>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    type: PropType<CheckboxType> | {
        type: PropType<CheckboxType>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default CheckboxGroup;
