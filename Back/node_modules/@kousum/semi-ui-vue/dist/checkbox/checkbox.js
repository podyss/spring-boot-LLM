import { defineComponent as J, useSlots as Q, reactive as W, ref as Z, watch as ee, createVNode as c, mergeProps as ae } from "vue";
import T from "classnames";
import { strings as I, checkboxClasses as oe } from '@douyinfe/semi-foundation/lib/es/checkbox/constants';
import ne from '@douyinfe/semi-foundation/lib/es/checkbox/checkboxFoundation';
import te from "./checkboxInner";
import { useHasInProps as de, useBaseComponent as se } from "../_base/baseComponent";
import '@douyinfe/semi-foundation/lib/es/checkbox/checkbox.css';
import { isUndefined as re, isBoolean as ce, noop as u } from "lodash";
import { getUuidShort as P } from '@douyinfe/semi-foundation/lib/es/utils/uuid';
import { useCheckboxContext as ie } from "./context/Consumer";
import { vuePropsMake as le } from "../PropTypes";
import { propTypesCheckbox as ue } from "./propType";
const pe = {
  defaultChecked: !1,
  indeterminate: !1,
  onChange: u,
  onMouseEnter: u,
  onMouseLeave: u,
  type: "default"
}, he = le(ue, pe), Ge = /* @__PURE__ */ J({
  props: {
    ...he
  },
  name: "Checkbox",
  setup(o, {}) {
    const {
      getProps: g
    } = de(), p = Q(), s = W({
      checked: o.checked || o.defaultChecked || !1,
      addonId: o.addonId,
      extraId: o.extraId,
      focusVisible: !1
    }), l = Z(null), {
      adapter: E,
      getDataAttr: G
    } = se(o, s), {
      context: t
    } = ie();
    function $() {
      return {
        ...E(),
        setNativeControlChecked: (a) => {
          s.checked = a;
        },
        notifyChange: (a) => {
          const {
            onChange: d
          } = o;
          d && d(a);
        },
        generateEvent: (a, d) => ({
          target: {
            ...o,
            checked: a
          },
          stopPropagation: () => {
            d.stopPropagation();
          },
          preventDefault: () => {
            d.preventDefault();
          },
          nativeEvent: {
            stopImmediatePropagation: () => {
              d.nativeEvent && typeof d.nativeEvent.stopImmediatePropagation == "function" && d.nativeEvent.stopImmediatePropagation();
            }
          }
        }),
        getIsInGroup: () => h(),
        getGroupValue: () => t && t.value.checkboxGroup.value || [],
        notifyGroupChange: (a) => {
          t.value.checkboxGroup.onChange(a);
        },
        getGroupDisabled: () => t && t.value.checkboxGroup.disabled,
        setAddonId: () => {
          s.addonId = P({
            prefix: "addon"
          });
        },
        setExtraId: () => {
          s.extraId = P({
            prefix: "extra"
          });
        },
        setFocusVisible: (a) => {
          s.focusVisible = a;
        },
        focusCheckboxEntity: () => {
          V();
        }
      };
    }
    const r = new ne($());
    ee(() => o.checked, () => {
      re(o.checked) ? r.setChecked(!1) : ce(o.checked) && r.setChecked(o.checked);
    });
    function h() {
      return !!(t && t.value.checkboxGroup && "value" in g(o));
    }
    function V() {
      l.value && l.value.focus();
    }
    const _ = (a) => r.handleChange(a), B = (a) => r.handleEnterPress(a), M = (a) => {
      r.handleFocusVisible(a);
    }, D = (a) => {
      r.handleBlur();
    };
    return () => {
      const a = p.default ? p.default() : null, {
        disabled: d,
        style: f,
        prefixCls: F,
        className: C,
        indeterminate: A,
        onMouseEnter: R,
        onMouseLeave: w,
        extra: i,
        value: N,
        role: S,
        tabIndex: U,
        id: L,
        type: b
      } = o, {
        checked: Y,
        addonId: k,
        extraId: x,
        focusVisible: m
      } = s, e = {
        checked: Y,
        disabled: d
      }, v = h();
      if (v) {
        if (t.value.checkboxGroup.value) {
          const z = (t.value.checkboxGroup.value || []).includes(N);
          e.checked = z;
        }
        t.value.checkboxGroup.disabled && (e.disabled = t.value.checkboxGroup.disabled || o.disabled);
        const {
          isCardType: X,
          isPureCardType: q
        } = t.value.checkboxGroup;
        e.isCardType = X, e.isPureCardType = q;
      } else
        e.isPureCardType = b === I.TYPE_PURECARD, e.isCardType = b === I.TYPE_CARD || e.isPureCardType;
      const n = F || oe.PREFIX, y = e.isCardType || e.isPureCardType, j = T(n, {
        [`${n}-disabled`]: e.disabled,
        [`${n}-indeterminate`]: A,
        [`${n}-checked`]: e.checked,
        [`${n}-unChecked`]: !e.checked,
        [`${n}-cardType`]: e.isCardType,
        [`${n}-cardType_disabled`]: e.disabled && e.isCardType,
        [`${n}-cardType_enable`]: !(e.disabled && e.isCardType),
        [`${n}-cardType_checked`]: e.isCardType && e.checked && !e.disabled,
        [`${n}-cardType_checked_disabled`]: e.isCardType && e.checked && e.disabled,
        [C]: !!C,
        [`${n}-focus`]: m && y
      }), H = T(`${n}-extra`, {
        [`${n}-cardType_extra_noChildren`]: e.isCardType && !a
      });
      v && t.value.checkboxGroup.name;
      const K = o["x-semi-children-alias"] || "children", O = () => !a && !i ? null : c("div", {
        class: `${n}-content`
      }, [a ? c("span", {
        id: k,
        class: `${n}-addon`,
        "x-semi-prop": K
      }, [a]) : null, i ? c("div", {
        id: x,
        class: H,
        "x-semi-prop": "extra"
      }, [i]) : null]);
      return (
        // label is better than span, however span is here which is to solve gitlab issue #364
        // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
        c("span", ae({
          role: S,
          tabindex: U,
          style: f,
          class: j,
          id: L,
          onMouseenter: R,
          onMouseleave: w,
          onClick: _,
          onKeypress: B,
          "aria-labelledby": o["aria-labelledby"]
        }, G()), [c(te, {
          ...o,
          ...e,
          addonId: a && k,
          extraId: i && x,
          isPureCardType: e.isPureCardType,
          ref: l,
          focusInner: m && !y,
          onInputFocus: M,
          onInputBlur: D
        }, null), O()])
      );
    };
  }
});
export {
  Ge as default,
  he as vuePropsType
};
//# sourceMappingURL=checkbox.js.map
