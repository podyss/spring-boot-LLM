import { defineComponent as B, useSlots as F, ref as b, createVNode as a, mergeProps as q } from "vue";
import m from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as E, symbol as f } from "../PropTypes";
import { noop as R } from "lodash";
import { checkboxClasses as l } from '@douyinfe/semi-foundation/lib/es/checkbox/constants';
import { IconCheckboxTick as N, IconCheckboxIndeterminate as w } from "@kousum/semi-icons-vue";
import { propTypesCheckbox as A } from "./propType";
const K = {
  ...A,
  "aria-describedby": e.string,
  "aria-errormessage": e.string,
  "aria-invalid": [e.bool, e.string],
  "aria-labelledby": e.string,
  "aria-required": e.bool,
  checked: e.bool,
  disabled: e.bool,
  onChange: e.func,
  children: e.node,
  grouped: e.bool,
  value: e.any,
  isPureCardType: e.bool,
  addonId: e.string,
  extraId: e.string,
  focusInner: e.bool,
  onInputFocus: e.func,
  onInputBlur: e.func,
  preventScroll: e.bool,
  indeterminate: Boolean,
  prefixCls: String,
  name: String,
  "aria-label": String
}, M = {
  onChange: R
}, U = E(K, M), J = /* @__PURE__ */ B({
  props: {
    ...U
  },
  name: "vuePropsType",
  setup(r, {
    expose: y
  }) {
    F();
    const i = b();
    function g() {
      i.value.blur();
    }
    function I() {
      const {
        preventScroll: s
      } = r;
      i.value.focus({
        preventScroll: s
      });
    }
    return y({
      blur: g,
      focus: I
    }), () => {
      const {
        indeterminate: s,
        checked: o,
        disabled: t,
        prefixCls: h,
        name: c,
        isPureCardType: k,
        addonId: C,
        extraId: v,
        focusInner: u,
        onInputFocus: P,
        onInputBlur: x
      } = r, n = h || l.PREFIX, T = m({
        [`${n}-inner`]: !0,
        [`${n}-inner-checked`]: !!o,
        [`${n}-inner-pureCardType`]: k
      }, l.WRAPPER), S = m({
        [`${n}-inner-display`]: !0,
        [`${n}-focus`]: u,
        [`${n}-focus-border`]: u && !o
      }), $ = o ? a(N, null, null) : s ? a(w, null, null) : null, d = b(f()), p = {
        type: "checkbox",
        "aria-label": r["aria-label"],
        "aria-disabled": t,
        "aria-checked": o,
        "aria-labelledby": C,
        "aria-describedby": v || r["aria-describedby"],
        "aria-invalid": r["aria-invalid"],
        "aria-errormessage": r["aria-errormessage"],
        "aria-required": r["aria-required"],
        class: l.INPUT,
        // 虽然没用到 但是还是写一下
        // onChange: noop,
        onChange: (V) => {
          d.value = f();
        },
        checked: o,
        disabled: t,
        onFocus: P,
        onBlur: x
      };
      return c && (p.name = c), a("span", {
        class: T
      }, [a("input", q(p, {
        key: d.value,
        ref: i
      }), null), a("span", {
        class: S
      }, [$])]);
    };
  }
});
export {
  J as default,
  U as vuePropsType
};
//# sourceMappingURL=checkboxInner.js.map
