import { defineComponent as $, useSlots as G, reactive as j, onMounted as A, watch as F, onUnmounted as R, createVNode as c, cloneVNode as _, mergeProps as I, isVNode as U } from "vue";
import * as a from "../PropTypes";
import { vuePropsMake as w } from "../PropTypes";
import O from "classnames";
import { strings as f, checkboxGroupClasses as Y } from '@douyinfe/semi-foundation/lib/es/checkbox/constants';
import q from '@douyinfe/semi-foundation/lib/es/checkbox/checkboxGroupFoundation';
import { useBaseComponent as L } from "../_base/baseComponent";
import { Context as M } from "./context";
import { isEqual as B } from "lodash";
import h from "./checkbox";
function v(e) {
  return typeof e == "function" || Object.prototype.toString.call(e) === "[object Object]" && !U(e);
}
const X = {
  "aria-describedby": a.string,
  "aria-errormessage": a.string,
  "aria-invalid": [a.bool, a.string],
  "aria-labelledby": a.string,
  "aria-required": a.bool,
  defaultValue: a.array,
  disabled: a.bool,
  name: a.string,
  options: a.array,
  value: a.array,
  onChange: a.func,
  prefixCls: a.string,
  direction: String,
  className: a.string,
  type: String,
  style: a.object,
  id: String,
  "aria-label": String
}, z = {
  disabled: !1,
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onChange: () => {
  },
  type: f.TYPE_DEFAULT,
  defaultValue: [],
  direction: f.DEFAULT_DIRECTION
}, H = w(X, z), ie = /* @__PURE__ */ $({
  props: {
    ...H
  },
  name: "CheckboxGroup",
  setup(e, {}) {
    const i = G(), m = j({
      value: e.value || e.defaultValue
    }), {
      adapter: x,
      getDataAttr: P
    } = L(e, m);
    function T() {
      return {
        ...x(),
        updateGroupValue: (t) => {
          m.value = t;
        },
        notifyChange: (t) => {
          e.onChange && e.onChange(t);
        }
      };
    }
    const n = new q(T());
    A(() => {
      n.init();
    }), F(() => e.value, (t, d) => {
      B(t, d) || n.handlePropValueChange(e.value);
    }, {
      deep: !0
    }), R(() => {
      n.destroy();
    });
    function k(t) {
      n.handleChange(t);
    }
    return () => {
      var p;
      const t = (p = i.default) == null ? void 0 : p.call(i), {
        options: d,
        prefixCls: b,
        direction: l,
        className: E,
        id: N,
        style: V,
        type: C,
        disabled: J
      } = e, y = C === f.TYPE_PURECARD, g = C === f.TYPE_CARD || y, s = b || Y.PREFIX, D = O({
        [s]: !0,
        [`${s}-wrapper`]: !0,
        [`${s}-${l}`]: l,
        [`${s}-${l}-cardType`]: l && g,
        [`${s}-${l}-pureCardType`]: l && y
      }, E), S = m.value.slice();
      let o;
      return d ? o = (d || []).map((r, u) => typeof r == "string" ? c(h, {
        role: "listitem",
        key: u,
        disabled: e.disabled,
        value: r,
        prefixCls: b
      }, v(r) ? r : {
        default: () => [r]
      }) : c(h, {
        role: "listitem",
        key: u,
        disabled: r.disabled || e.disabled,
        value: r.value,
        prefixCls: b,
        extra: r.extra,
        className: r.className,
        style: r.style,
        onChange: r.onChange
      }, {
        default: () => [r.label]
      })) : t && (o = i.default ? i.default().map((r, u) => _(r, {
        key: u,
        role: "listitem"
      })) : null), c("div", I({
        id: N,
        role: "list",
        "aria-label": e["aria-label"],
        class: D,
        style: V,
        "aria-labelledby": e["aria-labelledby"],
        "aria-describedby": e["aria-describedby"]
      }, P()), [c(M.Provider, {
        value: {
          checkboxGroup: {
            onChange: k,
            value: S,
            disabled: e.disabled,
            name: n.getFormatName(),
            isCardType: g,
            isPureCardType: y
          }
        }
      }, v(o) ? o : {
        default: () => [o]
      })]);
    };
  }
});
export {
  ie as default,
  H as vuePropsType
};
//# sourceMappingURL=checkboxGroup.js.map
