import { PropType } from 'vue';
import { AriaAttributes } from '../AriaAttributes';
import { CombineProps } from '../interface';
export interface CheckboxInnerProps {
    'aria-describedby'?: AriaAttributes['aria-describedby'];
    'aria-errormessage'?: AriaAttributes['aria-errormessage'];
    'aria-invalid'?: AriaAttributes['aria-invalid'];
    'aria-labelledby'?: AriaAttributes['aria-labelledby'];
    'aria-required'?: AriaAttributes['aria-required'];
    indeterminate?: boolean;
    checked?: boolean;
    disabled?: boolean;
    prefixCls?: string;
    name?: string;
    isPureCardType?: boolean;
    addonId?: string;
    extraId?: string;
    'aria-label'?: AriaAttributes['aria-label'];
    focusInner?: boolean;
    onInputFocus?: (e: any) => void;
    onInputBlur?: (e: any) => void;
    preventScroll?: boolean;
    onChange?: any;
    children?: any;
    grouped?: boolean;
    value?: any;
}
export declare const vuePropsType: CombineProps<CheckboxInnerProps>;
declare const CheckboxInner: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    indeterminate: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    isPureCardType: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    addonId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    focusInner: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onInputFocus: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onInputBlur: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    children: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    grouped: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    indeterminate: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    isPureCardType: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    addonId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    focusInner: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onInputFocus: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onInputBlur: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    children: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    grouped: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default CheckboxInner;
