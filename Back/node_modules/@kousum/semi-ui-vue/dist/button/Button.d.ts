import { StyleValue, PropType, AriaAttributes } from 'vue';
import '@douyinfe/semi-foundation/lib/es/button/button.css';
import type { CombineProps } from '../interface';
export type HtmlType = 'button' | 'reset' | 'submit';
export type Size = 'default' | 'small' | 'large';
export type Theme = 'solid' | 'borderless' | 'light' | 'outline';
export type Type = 'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger';
export interface ButtonProps {
    id?: string;
    block?: boolean;
    circle?: boolean;
    disabled?: boolean;
    className?: string;
    htmlType?: 'button' | 'reset' | 'submit';
    icon?: any;
    iconPosition?: 'left' | 'right';
    loading?: boolean;
    size?: Size;
    style?: StyleValue;
    theme?: Theme;
    type?: Type;
    prefixCls?: string;
    onClick?: any;
    onMouseDown?: any;
    onMouseEnter?: any;
    onMouseLeave?: any;
    autoFocus?: boolean;
    role?: string;
    'aria-label'?: AriaAttributes['aria-label'];
    contentClassName?: string;
}
export declare const vuePropsType: CombineProps<ButtonProps>;
declare const Button: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    block: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    circle: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    htmlType: PropType<"button" | "reset" | "submit"> | {
        type: PropType<"button" | "reset" | "submit">;
        default?: any;
        required?: false;
    };
    icon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    iconPosition: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    style: PropType<StyleValue> | {
        type: PropType<StyleValue>;
        default?: any;
        required?: false;
    };
    theme: PropType<Theme> | {
        type: PropType<Theme>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onClick: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseDown: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    block: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    circle: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    htmlType: PropType<"button" | "reset" | "submit"> | {
        type: PropType<"button" | "reset" | "submit">;
        default?: any;
        required?: false;
    };
    icon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    iconPosition: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<Size> | {
        type: PropType<Size>;
        default?: any;
        required?: false;
    };
    style: PropType<StyleValue> | {
        type: PropType<StyleValue>;
        default?: any;
        required?: false;
    };
    theme: PropType<Theme> | {
        type: PropType<Theme>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onClick: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseDown: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Button;
