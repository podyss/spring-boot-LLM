import { defineComponent as d, ref as m, onMounted as p, onUnmounted as f, createVNode as b } from "vue";
import N from "classnames";
import { cssClasses as v } from '@douyinfe/semi-foundation/lib/es/button/constants';
import '@douyinfe/semi-foundation/lib/es/button/button.css';
const a = v.PREFIX, y = {
  style: Object,
  className: String
}, g = /* @__PURE__ */ d({
  props: {
    ...y
  },
  name: "SplitButtonGroup",
  setup(c, {
    slots: i
  }) {
    const o = m();
    let r = null;
    return p(() => {
      const l = () => {
        const s = o.value.querySelectorAll("button"), e = s[0], t = s[s.length - 1];
        e != null && e.classList.contains(`${a}-first`) || e == null || e.classList.add(`${a}-first`), t != null && t.classList.contains(`${a}-last`) || t == null || t.classList.add(`${a}-last`);
      };
      if (o.value) {
        l();
        const s = new MutationObserver((e, t) => {
          for (const n of e)
            (n.type === "attributes" && n.attributeName === "class" || n.type === "childList" && Array.from(n.addedNodes).some((u) => u.nodeName === "BUTTON")) && l();
        });
        s.observe(o.value, {
          attributes: !0,
          childList: !0,
          subtree: !0
        }), r = s;
      }
    }), f(() => {
      r == null || r.disconnect();
    }), () => {
      const {
        style: l,
        className: s
      } = c, e = N(`${a}-split`, s);
      return b("div", {
        ref: o,
        class: e,
        style: l,
        role: "group",
        "aria-label": c["aria-label"]
      }, [i.default ? i.default() : null]);
    };
  }
});
export {
  g as default,
  y as vuePropsType
};
//# sourceMappingURL=splitButtonGroup.js.map
