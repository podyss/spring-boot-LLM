import { defineComponent as B, isVNode as S, cloneVNode as C, createVNode as f } from "vue";
import { get as g } from "lodash";
import { cssClasses as L, strings as k } from '@douyinfe/semi-foundation/lib/es/button/constants';
import h from "classnames";
const n = L.PREFIX;
k.sizes;
const z = {
  disabled: Boolean,
  size: {
    type: String,
    default: "default"
  },
  type: {
    type: String,
    default: "primary"
  },
  theme: {
    type: String,
    default: "light"
  },
  "aria-label": String,
  style: Object,
  className: String
}, v = /* @__PURE__ */ B({
  props: {
    ...z
  },
  name: "ButtonGroup",
  setup(m, {
    slots: a
  }) {
    function b(e) {
      const t = [];
      return e.length > 1 ? (e.slice(0, -1).forEach((r, p) => {
        const u = g(r, "type.elementType") === "Button", c = g(r, "props"), {
          type: d,
          theme: l,
          disabled: o
        } = c ?? {};
        if (u && l !== "outline") {
          const i = h(`${n}-group-line`, `${n}-group-line-${l ?? "light"}`, `${n}-group-line-${d ?? "primary"}`, {
            [`${n}-group-line-disabled`]: o
          });
          t.push(r, f("span", {
            class: i,
            key: `line-${p}`
          }, null));
        } else
          t.push(r);
      }), t.push(e.slice(-1)), t) : e;
    }
    return () => {
      var y;
      const e = (y = a.default) == null ? void 0 : y.call(a), {
        disabled: t,
        size: r,
        type: p,
        className: u,
        style: c,
        "aria-label": d,
        ...l
      } = m;
      let o, i = [];
      const $ = h(`${n}-group`, u);
      return e && (o = (Array.isArray(e) ? e : [e]).map((s, N) => S(s) ? C(s, {
        disabled: t,
        size: r,
        type: p,
        ...s.props,
        ...l,
        key: s.key ?? N
      }) : s), i = b(o)), f("div", {
        class: $,
        style: c,
        role: "group",
        "aria-label": d
      }, [i]);
    };
  }
});
export {
  v as default,
  z as vuePropsType
};
//# sourceMappingURL=ButtonGroup.js.map
