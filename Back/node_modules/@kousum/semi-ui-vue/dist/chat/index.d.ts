import { PropType } from 'vue';
import { CombineProps } from '../interface';
import type { ChatProps, Message } from './interface';
import '@douyinfe/semi-foundation/lib/es/chat/chat.css';
import type { FileItem } from '../upload';
export declare const chatPropTypes: CombineProps<ChatProps>;
declare const index: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hints: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    renderHintBox: PropType<(props: {
        content: string;
        index: number;
        onHintClick: () => void;
    }) => import("vue").VNode> | {
        type: PropType<(props: {
            content: string;
            index: number;
            onHintClick: () => void;
        }) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    onHintClick: PropType<(hint: string) => void> | {
        type: PropType<(hint: string) => void>;
        default?: any;
        required?: false;
    };
    onChatsChange: PropType<(chats?: Message[]) => void> | {
        type: PropType<(chats?: Message[]) => void>;
        default?: any;
        required?: false;
    };
    onStopGenerator: PropType<(e?: MouseEvent) => void> | {
        type: PropType<(e?: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    customMarkDownComponents: PropType<import("mdx/types").MDXComponents> | {
        type: PropType<import("mdx/types").MDXComponents>;
        default?: any;
        required?: false;
    };
    onClear: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onInputChange: PropType<(props: {
        value?: string;
        attachment?: FileItem[];
    }) => void> | {
        type: PropType<(props: {
            value?: string;
            attachment?: FileItem[];
        }) => void>;
        default?: any;
        required?: false;
    };
    onMessageSend: PropType<(content: string, attachment: FileItem[]) => void> | {
        type: PropType<(content: string, attachment: FileItem[]) => void>;
        default?: any;
        required?: false;
    };
    inputBoxStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    inputBoxCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    renderInputArea: PropType<(props?: import("./interface").RenderInputAreaProps) => import("vue").VNode> | {
        type: PropType<(props?: import("./interface").RenderInputAreaProps) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    topSlot: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    bottomSlot: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    showStopGenerate: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hintStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    hintCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    uploadProps: PropType<import("../upload").UploadProps> | {
        type: PropType<import("../upload").UploadProps>;
        default?: any;
        required?: false;
    };
    uploadTipProps: PropType<import("../tooltip").TooltipProps> | {
        type: PropType<import("../tooltip").TooltipProps>;
        default?: any;
        required?: false;
    };
    showClearContext: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    sendHotKey: PropType<"enter" | "shift+enter"> | {
        type: PropType<"enter" | "shift+enter">;
        default?: any;
        required?: false;
    };
    inputContentConvert: PropType<(...arg: any[]) => void> | {
        type: PropType<(...arg: any[]) => void>;
        default?: any;
        required?: false;
    };
    InputBoxStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    renderFullInputBox: PropType<(...arg: any[]) => void> | {
        type: PropType<(...arg: any[]) => void>;
        default?: any;
        required?: false;
    };
    role: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    align: PropType<"leftRight" | "leftAlign"> | {
        type: PropType<"leftRight" | "leftAlign">;
        default?: any;
        required?: false;
    };
    mode: PropType<"bubble" | "noBubble" | "userBubble"> | {
        type: PropType<"bubble" | "noBubble" | "userBubble">;
        default?: any;
        required?: false;
    };
    chats: PropType<Message[]> | {
        type: PropType<Message[]>;
        default?: any;
        required?: false;
    };
    roleConfig: PropType<import("./interface").RoleConfig> | {
        type: PropType<import("./interface").RoleConfig>;
        default?: any;
        required?: false;
    };
    onMessageDelete: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageBadFeedback: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageGoodFeedback: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageReset: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageCopy: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    chatBoxRenderConfig: PropType<import("./interface").ChatBoxRenderConfig> | {
        type: PropType<import("./interface").ChatBoxRenderConfig>;
        default?: any;
        required?: false;
    };
    renderDivider: PropType<(message?: Message) => import("vue").VNode> | {
        type: PropType<(message?: Message) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hints: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    renderHintBox: PropType<(props: {
        content: string;
        index: number;
        onHintClick: () => void;
    }) => import("vue").VNode> | {
        type: PropType<(props: {
            content: string;
            index: number;
            onHintClick: () => void;
        }) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    onHintClick: PropType<(hint: string) => void> | {
        type: PropType<(hint: string) => void>;
        default?: any;
        required?: false;
    };
    onChatsChange: PropType<(chats?: Message[]) => void> | {
        type: PropType<(chats?: Message[]) => void>;
        default?: any;
        required?: false;
    };
    onStopGenerator: PropType<(e?: MouseEvent) => void> | {
        type: PropType<(e?: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    customMarkDownComponents: PropType<import("mdx/types").MDXComponents> | {
        type: PropType<import("mdx/types").MDXComponents>;
        default?: any;
        required?: false;
    };
    onClear: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onInputChange: PropType<(props: {
        value?: string;
        attachment?: FileItem[];
    }) => void> | {
        type: PropType<(props: {
            value?: string;
            attachment?: FileItem[];
        }) => void>;
        default?: any;
        required?: false;
    };
    onMessageSend: PropType<(content: string, attachment: FileItem[]) => void> | {
        type: PropType<(content: string, attachment: FileItem[]) => void>;
        default?: any;
        required?: false;
    };
    inputBoxStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    inputBoxCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    renderInputArea: PropType<(props?: import("./interface").RenderInputAreaProps) => import("vue").VNode> | {
        type: PropType<(props?: import("./interface").RenderInputAreaProps) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    topSlot: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    bottomSlot: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    showStopGenerate: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hintStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    hintCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    uploadProps: PropType<import("../upload").UploadProps> | {
        type: PropType<import("../upload").UploadProps>;
        default?: any;
        required?: false;
    };
    uploadTipProps: PropType<import("../tooltip").TooltipProps> | {
        type: PropType<import("../tooltip").TooltipProps>;
        default?: any;
        required?: false;
    };
    showClearContext: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    sendHotKey: PropType<"enter" | "shift+enter"> | {
        type: PropType<"enter" | "shift+enter">;
        default?: any;
        required?: false;
    };
    inputContentConvert: PropType<(...arg: any[]) => void> | {
        type: PropType<(...arg: any[]) => void>;
        default?: any;
        required?: false;
    };
    InputBoxStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    renderFullInputBox: PropType<(...arg: any[]) => void> | {
        type: PropType<(...arg: any[]) => void>;
        default?: any;
        required?: false;
    };
    role: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    align: PropType<"leftRight" | "leftAlign"> | {
        type: PropType<"leftRight" | "leftAlign">;
        default?: any;
        required?: false;
    };
    mode: PropType<"bubble" | "noBubble" | "userBubble"> | {
        type: PropType<"bubble" | "noBubble" | "userBubble">;
        default?: any;
        required?: false;
    };
    chats: PropType<Message[]> | {
        type: PropType<Message[]>;
        default?: any;
        required?: false;
    };
    roleConfig: PropType<import("./interface").RoleConfig> | {
        type: PropType<import("./interface").RoleConfig>;
        default?: any;
        required?: false;
    };
    onMessageDelete: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageBadFeedback: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageGoodFeedback: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageReset: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageCopy: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    chatBoxRenderConfig: PropType<import("./interface").ChatBoxRenderConfig> | {
        type: PropType<import("./interface").ChatBoxRenderConfig>;
        default?: any;
        required?: false;
    };
    renderDivider: PropType<(message?: Message) => import("vue").VNode> | {
        type: PropType<(message?: Message) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default index;
