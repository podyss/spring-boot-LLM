import { defineComponent as k, useSlots as w, ref as E, reactive as R, createVNode as t, mergeProps as U } from "vue";
import x from "classnames";
import * as n from "../../PropTypes";
import { vuePropsMake as _ } from "../../PropTypes";
import { IconChainStroked as j, IconDeleteStroked as z, IconArrowUp as D } from "@kousum/semi-icons-vue";
import { cssClasses as F, strings as H } from '@douyinfe/semi-foundation/lib/es/chat/constants';
import K from '@douyinfe/semi-foundation/lib/es/chat/inputboxFoundation';
import L from "../attachment";
import O from "../../tooltip";
import V from "../../upload";
import N from "../../button";
import X from "../../input/textArea";
import { useBaseComponent as q } from "../../_base/baseComponent";
const {
  PREFIX_INPUT_BOX: r
} = F, {
  SEND_HOT_KEY: M
} = H, Y = {
  minRows: 1,
  maxRows: 5
}, G = {
  showClearContext: n.bool,
  sendHotKey: n.string,
  placeholder: {
    type: n.string,
    required: !0
  },
  className: n.string,
  style: n.object,
  disableSend: n.bool,
  uploadRef: [n.object, n.func],
  uploadProps: n.object,
  uploadTipProps: n.object,
  manualUpload: n.func,
  renderInputArea: n.func,
  onSend: n.func,
  onClearContext: n.func,
  onInputChange: n.func
}, J = _(G, {
  uploadProps: {}
}), ue = /* @__PURE__ */ k({
  props: {
    ...J
  },
  name: "index",
  setup(s, {
    attrs: Q
  }) {
    const C = w(), I = E(), c = R({
      content: "",
      attachment: []
    }), {
      adapter: A
    } = q(s, c);
    function b() {
      return {
        ...A(),
        notifyInputChange: (e) => {
          const {
            onInputChange: o
          } = s;
          o && o(e);
        },
        setInputValue: (e) => {
          c.content = e;
        },
        setAttachment: (e) => {
          c.attachment = e;
        },
        notifySend: (e, o) => {
          const {
            onSend: a
          } = s;
          a && a(e, o);
        }
      };
    }
    const y = b(), l = new K(y), P = () => {
      var e;
      (e = I.value) == null || e.focus();
    }, B = () => {
      var g;
      const {
        uploadProps: e,
        uploadRef: o,
        uploadTipProps: a
      } = s, {
        attachment: d
      } = c, {
        className: u,
        onChange: S,
        renderFileItem: h,
        ...m
      } = e, i = (g = C.children) == null ? void 0 : g.call(C), f = {
        ...m,
        className: x(`${r}-upload`, {
          [u]: u
        }),
        onChange: l.onAttachmentAdd
      }, p = t(V, U({
        ref: o,
        fileList: d
      }, f), {
        default: () => [i || t(N, {
          class: `${r}-uploadButton`,
          icon: t(j, {
            size: "extra-large"
          }, null),
          theme: "borderless"
        }, null)]
      });
      return a ? t(O, a, {
        default: () => [t("span", null, [p])]
      }) : p;
    }, T = () => {
      const {
        content: e,
        attachment: o
      } = c, {
        placeholder: a,
        sendHotKey: d
      } = s;
      return t("div", {
        class: `${r}-inputArea`
      }, [t(X, {
        placeholder: a,
        onEnterPress: l.onEnterPress,
        value: e,
        onChange: l.onInputAreaChange,
        forwardRef: I,
        class: `${r}-textarea`,
        autosize: Y,
        disabledEnterStartNewLine: d === M.ENTER,
        onPaste: l.onPaste
      }, null), t(L, {
        attachment: o,
        onClear: l.onAttachmentDelete
      }, null)]);
    }, v = () => {
      const {
        onClearContext: e
      } = s;
      return t(N, {
        class: `${r}-clearButton`,
        theme: "borderless",
        icon: t(z, null, null),
        onClick: e
      }, null);
    }, $ = () => {
      const e = l.getDisableSend();
      return t(N, {
        "data-testid": "sendButton",
        disabled: e,
        theme: "solid",
        type: "primary",
        class: `${r}-sendButton`,
        icon: t(D, {
          size: "large",
          class: `${r}-sendButton-icon`
        }, null),
        onClick: l.onSend
      }, null);
    };
    return () => {
      const {
        onClearContext: e,
        renderInputArea: o,
        onSend: a,
        style: d,
        className: u,
        showClearContext: S
      } = s, h = v(), m = B(), i = T(), f = $(), p = t("div", {
        class: x(r, {
          [u]: u
        }),
        style: d
      }, [t("div", {
        class: `${r}-inner`,
        onClick: P
      }, [S && h, t("div", {
        class: `${r}-container`
      }, [m, i, f])])]);
      return o ? o({
        defaultNode: p,
        onClear: e,
        onSend: a,
        detailProps: {
          clearContextNode: h,
          uploadNode: m,
          inputNode: i,
          sendNode: f,
          onClick: P
        }
      }) : p;
    };
  }
});
export {
  ue as default,
  G as propsType
};
//# sourceMappingURL=index.js.map
