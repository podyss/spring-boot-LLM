import { CSSProperties, VNode, PropType } from 'vue';
import { CombineProps } from '../../interface';
import { FileItem } from '../../upload/interface';
import { InputBoxProps, RenderInputAreaProps } from '../interface';
import { TooltipProps } from '../../tooltip';
import { UploadProps } from '../../upload';
export declare const propsType: CombineProps<InputBoxProps>;
declare const index: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    showClearContext: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    sendHotKey: PropType<"enter" | "shift+enter"> | {
        type: PropType<"enter" | "shift+enter">;
        default?: any;
        required?: false;
    };
    placeholder: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    disableSend: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    uploadRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    uploadTipProps: PropType<TooltipProps> | {
        type: PropType<TooltipProps>;
        default?: any;
        required?: false;
    };
    uploadProps: PropType<UploadProps> | {
        type: PropType<UploadProps>;
        default?: any;
        required?: false;
    };
    manualUpload: PropType<(file: File[]) => void> | {
        type: PropType<(file: File[]) => void>;
        default?: any;
        required?: false;
    };
    renderInputArea: PropType<(props: RenderInputAreaProps) => VNode> | {
        type: PropType<(props: RenderInputAreaProps) => VNode>;
        default?: any;
        required?: false;
    };
    onSend: PropType<(content: string, attachment: FileItem[]) => void> | {
        type: PropType<(content: string, attachment: FileItem[]) => void>;
        default?: any;
        required?: false;
    };
    onClearContext: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onInputChange: PropType<(props: {
        inputValue: string;
        attachment: FileItem[];
    }) => void> | {
        type: PropType<(props: {
            inputValue: string;
            attachment: FileItem[];
        }) => void>;
        default?: any;
        required?: false;
    };
}>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    showClearContext: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    sendHotKey: PropType<"enter" | "shift+enter"> | {
        type: PropType<"enter" | "shift+enter">;
        default?: any;
        required?: false;
    };
    placeholder: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    disableSend: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    uploadRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    uploadTipProps: PropType<TooltipProps> | {
        type: PropType<TooltipProps>;
        default?: any;
        required?: false;
    };
    uploadProps: PropType<UploadProps> | {
        type: PropType<UploadProps>;
        default?: any;
        required?: false;
    };
    manualUpload: PropType<(file: File[]) => void> | {
        type: PropType<(file: File[]) => void>;
        default?: any;
        required?: false;
    };
    renderInputArea: PropType<(props: RenderInputAreaProps) => VNode> | {
        type: PropType<(props: RenderInputAreaProps) => VNode>;
        default?: any;
        required?: false;
    };
    onSend: PropType<(content: string, attachment: FileItem[]) => void> | {
        type: PropType<(content: string, attachment: FileItem[]) => void>;
        default?: any;
        required?: false;
    };
    onClearContext: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onInputChange: PropType<(props: {
        inputValue: string;
        attachment: FileItem[];
    }) => void> | {
        type: PropType<(props: {
            inputValue: string;
            attachment: FileItem[];
        }) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default index;
