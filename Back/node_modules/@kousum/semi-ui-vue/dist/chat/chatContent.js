import { defineComponent as k, createVNode as o, Fragment as F } from "vue";
import I from "../divider";
import v from "./chatBox";
import { cssClasses as y, strings as B } from '@douyinfe/semi-foundation/lib/es/chat/constants';
import { LocaleConsumerFunc as E } from "../locale/localeConsumer";
import { chatContentVuePropsType as b } from "./chatBox/chatPropsType";
import x from "../toast";
const V = E(), {
  PREFIX_DIVIDER: L,
  PREFIX: N
} = y, {
  ROLE: P
} = B, $ = /* @__PURE__ */ k({
  props: {
    ...b
  },
  name: "ChatContent",
  setup(a) {
    const [r, c] = x.useToast();
    return () => {
      const {
        chats: s,
        onMessageBadFeedback: m,
        onMessageCopy: l,
        mode: C,
        onChatsChange: d,
        onMessageDelete: g,
        onMessageGoodFeedback: p,
        onMessageReset: u,
        roleConfig: i,
        chatBoxRenderConfig: f,
        align: h,
        customMarkDownComponents: M,
        renderDivider: n
      } = a;
      return o(F, null, [s.map((e, t) => {
        const D = t === s.length - 1;
        return e.role === P.DIVIDER ? n ? n(e) : o(I, {
          key: e.id,
          className: L
        }, {
          default: () => [o(V, {
            componentName: "Chat"
          }, {
            default: (R) => R.clearContext
          })]
        }) : o(v, {
          previousMessage: t ? s[t - 1] : void 0,
          toast: r,
          align: h,
          mode: C,
          key: e.id,
          message: e,
          roleConfig: i,
          onMessageBadFeedback: m,
          onMessageCopy: l,
          onChatsChange: d,
          onMessageDelete: g,
          onMessageGoodFeedback: p,
          onMessageReset: u,
          lastChat: D,
          customMarkDownComponents: M,
          chatBoxRenderConfig: f
        }, null);
      }), o("div", {
        class: `${N}-toast`
      }, [c.value])]);
    };
  }
});
export {
  $ as default
};
//# sourceMappingURL=chatContent.js.map
