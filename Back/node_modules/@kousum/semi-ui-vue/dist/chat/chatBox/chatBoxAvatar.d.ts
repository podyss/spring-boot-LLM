import { VNode, PropType } from 'vue';
import { CombineProps } from '../../interface';
import type { Message, Metadata, RenderAvatarProps } from '../interface';
interface ChatBoxAvatarProps {
    role?: Metadata;
    continueSend?: boolean;
    message?: Message;
    customRenderFunc?: (props: RenderAvatarProps) => VNode;
}
export declare const vuePropsType: CombineProps<ChatBoxAvatarProps>;
declare const chatBoxAvatar: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    role: PropType<Metadata> | {
        type: PropType<Metadata>;
        default?: any;
        required?: false;
    };
    continueSend: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    message: PropType<Message> | {
        type: PropType<Message>;
        default?: any;
        required?: false;
    };
    customRenderFunc: PropType<(props: RenderAvatarProps) => VNode> | {
        type: PropType<(props: RenderAvatarProps) => VNode>;
        default?: any;
        required?: false;
    };
}>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    role: PropType<Metadata> | {
        type: PropType<Metadata>;
        default?: any;
        required?: false;
    };
    continueSend: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    message: PropType<Message> | {
        type: PropType<Message>;
        default?: any;
        required?: false;
    };
    customRenderFunc: PropType<(props: RenderAvatarProps) => VNode> | {
        type: PropType<(props: RenderAvatarProps) => VNode>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default chatBoxAvatar;
