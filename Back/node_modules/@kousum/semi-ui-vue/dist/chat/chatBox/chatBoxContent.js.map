{"version":3,"file":"chatBoxContent.js","sources":["../../../src/components/chat/chatBox/chatBoxContent.tsx"],"sourcesContent":["import { defineComponent, ref, h, Fragment, useSlots, VNode, PropType } from 'vue';\nimport { CombineProps } from '../../interface';\n\nimport cls from 'classnames';\nimport { Message, Metadata, RenderContentProps } from '../interface';\nimport MarkdownRender from '../../markdownRender';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/chat/constants';\nimport { MDXProps } from 'mdx/types';\nimport { FileAttachment, ImageAttachment } from '../attachment';\nimport Code from './code';\nimport { useMemo } from '../../_utils/useMemo';\n\nconst { PREFIX_CHAT_BOX } = cssClasses;\nconst { MESSAGE_STATUS, MODE, ROLE } = strings;\n\ninterface ChatBoxContentProps {\n  mode?: 'bubble' | 'noBubble' | 'userBubble';\n  customMarkDownComponents?: MDXProps['components'];\n  children?: string;\n  role?: Metadata;\n  message?: Message;\n  customRenderFunc?: (props: RenderContentProps) => VNode\n}\n\nexport const vuePropsType: CombineProps<ChatBoxContentProps> = {\n  mode: String as PropType<ChatBoxContentProps['mode']>,\n  customMarkDownComponents: Object as PropType<ChatBoxContentProps['customMarkDownComponents']>,\n  children: String,\n  role: Object as PropType<ChatBoxContentProps['role']>,\n  message: Object as PropType<ChatBoxContentProps['message']>,\n  customRenderFunc: Function as PropType<ChatBoxContentProps['customRenderFunc']>,\n\n};\nconst chatBoxContent = defineComponent({\n  props: { ...vuePropsType },\n  name: 'chatBoxContent',\n  setup(props, { attrs }) {\n    const slots = useSlots();\n\n    const markdownComponents = useMemo(() => ({\n      'code': Code,\n      'SemiFile': FileAttachment,\n      'img': ImageAttachment,\n      ...props.customMarkDownComponents\n    }), [()=>props.customMarkDownComponents]);\n\n    const wrapCls = useMemo(() => {\n      const isUser = props.message.role === ROLE.USER;\n      const bubble = props.mode === MODE.BUBBLE;\n      const userBubble = props.mode === MODE.USER_BUBBLE && isUser;\n      return cls(`${PREFIX_CHAT_BOX}-content`, {\n        [`${PREFIX_CHAT_BOX}-content-${props.mode}`]: bubble || userBubble,\n        [`${PREFIX_CHAT_BOX}-content-user`]: (bubble && isUser) || userBubble,\n        [`${PREFIX_CHAT_BOX}-content-error`]: props.message.status === MESSAGE_STATUS.ERROR && (bubble || userBubble)\n      });\n    }, [()=>props.message.role, ()=>props.message.status]);\n\n    const node = useMemo(() => {\n      if (props.message.status === MESSAGE_STATUS.LOADING) {\n        return <span class={`${PREFIX_CHAT_BOX}-content-loading`} >\n                <span class={`${PREFIX_CHAT_BOX}-content-loading-item`} />\n            </span>;\n      } else {\n        let realContent;\n        if (typeof props.message.content === 'string') {\n          realContent = <MarkdownRender\n            format='md'\n            raw={props.message.content}\n            components={markdownComponents as any}\n          />;\n        } else if (Array.isArray(props.message.content)) {\n          realContent = props.message.content.map((item, index)=> {\n            if (item.type === 'text') {\n              return <MarkdownRender\n                key={`index`}\n                format='md'\n                raw={item.text}\n                components={markdownComponents as any}\n              />;\n            } else if (item.type === 'image_url') {\n              return <ImageAttachment key={`index`} src={item.image_url.url} />;\n            } else if (item.type === 'file_url') {\n              const { name, size, url, type } = item.file_url;\n              const realType = name.split('.').pop() ?? type?.split('/').pop();\n              return <FileAttachment key={`index`} url={name} name={name} size={size} type={realType}></FileAttachment>;\n            }\n            return null;\n          });\n        }\n        return (<Fragment>\n          {realContent}\n        </Fragment>);\n      }\n    }, [()=>props.message.status, ()=>props.message.content]);\n\n\n    return () => {\n\n      const { message = {}, customRenderFunc, role: roleInfo, customMarkDownComponents, mode } = props;\n\n\n      if (customRenderFunc) {\n        return customRenderFunc({\n          message,\n          role: roleInfo,\n          defaultContent: node.value,\n          className: wrapCls.value,\n        });\n      } else {\n        return <div class={wrapCls.value}>{node.value}</div>;\n      }\n    };\n  },\n});\n\n\nexport default chatBoxContent;\n\n"],"names":["PREFIX_CHAT_BOX","cssClasses","MESSAGE_STATUS","MODE","ROLE","strings","vuePropsType","mode","String","customMarkDownComponents","Object","children","role","message","customRenderFunc","Function","chatBoxContent","defineComponent","props","name","setup","attrs","useSlots","markdownComponents","useMemo","Code","FileAttachment","ImageAttachment","wrapCls","isUser","USER","bubble","BUBBLE","userBubble","USER_BUBBLE","cls","status","ERROR","node","LOADING","_createVNode","realContent","content","MarkdownRender","Array","isArray","map","item","index","type","text","image_url","url","size","file_url","realType","split","pop","_Fragment","roleInfo","defaultContent","value","className"],"mappings":"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"}