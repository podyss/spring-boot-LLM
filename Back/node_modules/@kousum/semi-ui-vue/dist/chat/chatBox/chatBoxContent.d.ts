import { VNode, PropType } from 'vue';
import { CombineProps } from '../../interface';
import { Message, Metadata, RenderContentProps } from '../interface';
import { MDXProps } from 'mdx/types';
interface ChatBoxContentProps {
    mode?: 'bubble' | 'noBubble' | 'userBubble';
    customMarkDownComponents?: MDXProps['components'];
    children?: string;
    role?: Metadata;
    message?: Message;
    customRenderFunc?: (props: RenderContentProps) => VNode;
}
export declare const vuePropsType: CombineProps<ChatBoxContentProps>;
declare const chatBoxContent: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    mode: PropType<"bubble" | "noBubble" | "userBubble"> | {
        type: PropType<"bubble" | "noBubble" | "userBubble">;
        default?: any;
        required?: false;
    };
    customMarkDownComponents: PropType<import("mdx/types").MDXComponents> | {
        type: PropType<import("mdx/types").MDXComponents>;
        default?: any;
        required?: false;
    };
    children: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<Metadata> | {
        type: PropType<Metadata>;
        default?: any;
        required?: false;
    };
    message: PropType<Message> | {
        type: PropType<Message>;
        default?: any;
        required?: false;
    };
    customRenderFunc: PropType<(props: RenderContentProps) => VNode> | {
        type: PropType<(props: RenderContentProps) => VNode>;
        default?: any;
        required?: false;
    };
}>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    mode: PropType<"bubble" | "noBubble" | "userBubble"> | {
        type: PropType<"bubble" | "noBubble" | "userBubble">;
        default?: any;
        required?: false;
    };
    customMarkDownComponents: PropType<import("mdx/types").MDXComponents> | {
        type: PropType<import("mdx/types").MDXComponents>;
        default?: any;
        required?: false;
    };
    children: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<Metadata> | {
        type: PropType<Metadata>;
        default?: any;
        required?: false;
    };
    message: PropType<Message> | {
        type: PropType<Message>;
        default?: any;
        required?: false;
    };
    customRenderFunc: PropType<(props: RenderContentProps) => VNode> | {
        type: PropType<(props: RenderContentProps) => VNode>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default chatBoxContent;
