import { PropType, VNode } from 'vue';
import { CombineProps } from '../../interface';
import type { ChatBoxProps, Message, RenderActionProps } from '../interface';
interface ChatBoxActionProps extends ChatBoxProps {
    customRenderFunc?: (props: RenderActionProps) => VNode;
    showReset?: boolean;
}
export declare const vuePropsType: CombineProps<ChatBoxActionProps>;
declare const chatBoxAction: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    customRenderFunc: PropType<(props: RenderActionProps) => VNode> | {
        type: PropType<(props: RenderActionProps) => VNode>;
        default?: any;
        required?: false;
    };
    showReset: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    toast: PropType<import("../../toast/useToast").ToastFuncType> | {
        type: PropType<import("../../toast/useToast").ToastFuncType>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    previousMessage: PropType<Message> | {
        type: PropType<Message>;
        default?: any;
        required?: false;
    };
    message: PropType<Message> | {
        type: PropType<Message>;
        default?: any;
        required?: false;
    };
    lastChat: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    customMarkDownComponents: PropType<import("mdx/types").MDXComponents> | {
        type: PropType<import("mdx/types").MDXComponents>;
        default?: any;
        required?: false;
    };
    mode: PropType<"bubble" | "noBubble" | "userBubble"> | {
        type: PropType<"bubble" | "noBubble" | "userBubble">;
        default?: any;
        required?: false;
    };
    role: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    align: PropType<"leftRight" | "leftAlign"> | {
        type: PropType<"leftRight" | "leftAlign">;
        default?: any;
        required?: false;
    };
    onMessageDelete: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onChatsChange: PropType<(chats?: Message[]) => void> | {
        type: PropType<(chats?: Message[]) => void>;
        default?: any;
        required?: false;
    };
    onMessageReset: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    roleConfig: PropType<import("../interface").RoleConfig> | {
        type: PropType<import("../interface").RoleConfig>;
        default?: any;
        required?: false;
    };
    onMessageBadFeedback: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageGoodFeedback: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageCopy: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    chatBoxRenderConfig: PropType<import("../interface").ChatBoxRenderConfig> | {
        type: PropType<import("../interface").ChatBoxRenderConfig>;
        default?: any;
        required?: false;
    };
    renderDivider: PropType<(message?: Message) => VNode> | {
        type: PropType<(message?: Message) => VNode>;
        default?: any;
        required?: false;
    };
}>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    customRenderFunc: PropType<(props: RenderActionProps) => VNode> | {
        type: PropType<(props: RenderActionProps) => VNode>;
        default?: any;
        required?: false;
    };
    showReset: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    toast: PropType<import("../../toast/useToast").ToastFuncType> | {
        type: PropType<import("../../toast/useToast").ToastFuncType>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    previousMessage: PropType<Message> | {
        type: PropType<Message>;
        default?: any;
        required?: false;
    };
    message: PropType<Message> | {
        type: PropType<Message>;
        default?: any;
        required?: false;
    };
    lastChat: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    customMarkDownComponents: PropType<import("mdx/types").MDXComponents> | {
        type: PropType<import("mdx/types").MDXComponents>;
        default?: any;
        required?: false;
    };
    mode: PropType<"bubble" | "noBubble" | "userBubble"> | {
        type: PropType<"bubble" | "noBubble" | "userBubble">;
        default?: any;
        required?: false;
    };
    role: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    align: PropType<"leftRight" | "leftAlign"> | {
        type: PropType<"leftRight" | "leftAlign">;
        default?: any;
        required?: false;
    };
    onMessageDelete: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onChatsChange: PropType<(chats?: Message[]) => void> | {
        type: PropType<(chats?: Message[]) => void>;
        default?: any;
        required?: false;
    };
    onMessageReset: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    roleConfig: PropType<import("../interface").RoleConfig> | {
        type: PropType<import("../interface").RoleConfig>;
        default?: any;
        required?: false;
    };
    onMessageBadFeedback: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageGoodFeedback: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    onMessageCopy: PropType<(message?: Message) => void> | {
        type: PropType<(message?: Message) => void>;
        default?: any;
        required?: false;
    };
    chatBoxRenderConfig: PropType<import("../interface").ChatBoxRenderConfig> | {
        type: PropType<import("../interface").ChatBoxRenderConfig>;
        default?: any;
        required?: false;
    };
    renderDivider: PropType<(message?: Message) => VNode> | {
        type: PropType<(message?: Message) => VNode>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default chatBoxAction;
