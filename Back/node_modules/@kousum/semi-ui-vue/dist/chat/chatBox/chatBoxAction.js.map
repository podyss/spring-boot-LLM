{"version":3,"file":"chatBoxAction.js","sources":["../../../src/components/chat/chatBox/chatBoxAction.tsx"],"sourcesContent":["import {\n  defineComponent,\n  ref,\n  h,\n  Fragment,\n  useSlots,\n  PropType,\n  VNode,\n  shallowRef,\n  reactive,\n  onMounted,\n  onUnmounted,\n} from 'vue';\nimport * as PropTypes from '../../PropTypes';\nimport { CombineProps } from '../../interface';\nimport type { ChatBoxProps, DefaultActionNodeObj, Message, RenderActionProps } from '../interface';\nimport { IconThumbUpStroked,\n  IconDeleteStroked,\n  IconCopyStroked,\n  IconLikeThumb,\n  IconRedoStroked\n} from '@kousum/semi-icons-vue';\n\nimport copy from 'copy-text-to-clipboard';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/chat/constants';\nimport ChatBoxActionFoundation, { ChatBoxActionAdapter } from '@douyinfe/semi-foundation/chat/chatBoxActionFoundation';\nimport { LocaleConsumerFunc } from '../../locale/localeConsumer';\nimport { Locale } from \"../../locale/interface\";\nimport cls from 'classnames';\nimport { chatBoxPropTypes } from './chatPropsType';\nimport Button from '../../button';\nimport Popconfirm from '../../popconfirm';\nimport { useBaseComponent } from '../../_base/baseComponent';\nconst LocaleConsumer = LocaleConsumerFunc<Locale[\"Chat\"]>()\n\nconst { PREFIX_CHAT_BOX_ACTION } = cssClasses;\nconst { ROLE, MESSAGE_STATUS } = strings;\n\ninterface ChatBoxActionProps extends ChatBoxProps {\n  customRenderFunc?: (props: RenderActionProps) => VNode\n  showReset?: boolean\n}\n\ninterface ChatBoxActionState {\n  visible: boolean;\n  showAction: boolean\n}\n\nexport const vuePropsType: CombineProps<ChatBoxActionProps> = {\n  ...chatBoxPropTypes,\n  role: PropTypes.object as PropType<ChatBoxActionProps['role']>,\n  message: PropTypes.object,\n  showReset: PropTypes.bool,\n  onMessageBadFeedback: PropTypes.func as PropType<ChatBoxActionProps['onMessageBadFeedback']>,\n  onMessageGoodFeedback: PropTypes.func as PropType<ChatBoxActionProps['onMessageGoodFeedback']>,\n  onMessageCopy: PropTypes.func as PropType<ChatBoxActionProps['onMessageCopy']>,\n  onChatsChange: PropTypes.func as PropType<ChatBoxActionProps['onChatsChange']>,\n  onMessageDelete: PropTypes.func as PropType<ChatBoxActionProps['onMessageDelete']>,\n  onMessageReset: PropTypes.func as PropType<ChatBoxActionProps['onMessageReset']>,\n  customRenderFunc: PropTypes.func as PropType<ChatBoxActionProps['customRenderFunc']>,\n};\nconst chatBoxAction = defineComponent({\n  props: {...vuePropsType},\n  name: 'chatBoxAction',\n  setup(props, { attrs }) {\n    const slots = useSlots();\n    let copySuccessNode: VNode = null;\n    const containerRef = shallowRef();\n    let popconfirmTriggerRef = shallowRef();\n    let clickOutsideHandler: any = null;\n\n    const state = reactive<ChatBoxActionState>({\n      visible: false,\n      showAction: false,\n    })\n    onMounted(()=>{\n      copySuccessNode = <LocaleConsumer componentName=\"Chat\" >\n        {(locale: Locale[\"Chat\"]) => locale['copySuccess']}\n      </LocaleConsumer>;\n    })\n    onUnmounted(()=>{\n      foundation.destroy();\n    })\n    const { adapter: adapterInject, getDataAttr } = useBaseComponent(props, state)\n    function adapter_(): ChatBoxActionAdapter<ChatBoxActionProps, ChatBoxActionState> {\n      return {\n        ...adapterInject(),\n        notifyDeleteMessage: () => {\n          const { message, onMessageDelete } = props;\n          onMessageDelete?.(message);\n        },\n        notifyMessageCopy: () => {\n          const { message, onMessageCopy } = props;\n          onMessageCopy?.(message);\n        },\n        copyToClipboardAndToast: () => {\n          const { message = {}, toast } = props;\n          if (typeof message.content === 'string') {\n            copy(message.content);\n          } else if (Array.isArray(message.content)) {\n            const content = message.content?.map(item => item.text).join('');\n            copy(content);\n          }\n          toast.success({\n            content: copySuccessNode\n          });\n        },\n        notifyLikeMessage: () => {\n          const { message, onMessageGoodFeedback } = props;\n          onMessageGoodFeedback?.(message);\n        },\n        notifyDislikeMessage: () => {\n          const { message, onMessageBadFeedback } = props;\n          onMessageBadFeedback?.(message);\n        },\n        notifyResetMessage: () => {\n          const { message, onMessageReset } = props;\n          onMessageReset?.(message);\n        },\n        setVisible: (visible) => {\n          state.visible = visible\n        },\n        setShowAction: (showAction) => {\n          state.showAction = showAction\n        },\n        registerClickOutsideHandler: (cb: () => void) => {\n          if (clickOutsideHandler) {\n            adapter.unregisterClickOutsideHandler();\n          }\n          clickOutsideHandler = (e: MouseEvent): any => {\n            let el = popconfirmTriggerRef.value;\n            const target = e.target as Element;\n            const path = (e as any).composedPath && (e as any).composedPath() || [target];\n            if (\n              el && !(el as any).contains(target) &&\n              ! path.includes(el)\n            ) {\n              cb();\n            }\n          };\n          window.addEventListener('mousedown', clickOutsideHandler);\n        },\n        unregisterClickOutsideHandler: () => {\n          if (clickOutsideHandler) {\n            window.removeEventListener('mousedown', clickOutsideHandler);\n            clickOutsideHandler = null;\n          }\n        },\n      };\n    }\n    const adapter = adapter_()\n    const foundation = new ChatBoxActionFoundation(adapter);\n\n    const copyNode = () => {\n      return <Button\n        key={'copy'}\n        theme='borderless'\n        icon={<IconCopyStroked />}\n        type='tertiary'\n        onClick={foundation.copyMessage}\n        className={`${PREFIX_CHAT_BOX_ACTION}-btn`}\n      />;\n    }\n\n    const likeNode = () => {\n      const { message = {} } = props;\n      const { like } = message;\n      return <Button\n        key={'like'}\n        theme='borderless'\n        icon={like ? <IconLikeThumb /> : <IconThumbUpStroked /> }\n        type='tertiary'\n        className={`${PREFIX_CHAT_BOX_ACTION}-btn`}\n        onClick={foundation.likeMessage}\n      />;\n    }\n\n    const dislikeNode = () => {\n      const { message = {} } = props;\n      const { dislike } = message;\n      return <Button\n        theme='borderless'\n        key={'dislike'}\n        icon={dislike ? <IconLikeThumb className={`${PREFIX_CHAT_BOX_ACTION}-icon-flip`} /> : <IconThumbUpStroked className={'semi-chat-chatBox-action-icon-flip'} />}\n        type='tertiary'\n        className={`${PREFIX_CHAT_BOX_ACTION}-btn`}\n        onClick={foundation.dislikeMessage}\n      />;\n    }\n\n    const resetNode = () => {\n      return <Button\n        key={'reset'}\n        theme='borderless'\n        icon={<IconRedoStroked className={`${PREFIX_CHAT_BOX_ACTION}-icon-redo`}/>}\n        type='tertiary'\n        onClick={foundation.resetMessage}\n        className={`${PREFIX_CHAT_BOX_ACTION}-btn`}\n      />;\n    }\n\n    const deleteNode = () => {\n      const deleteMessage = (<LocaleConsumer componentName=\"Chat\" >\n        {(locale: Locale[\"Chat\"]) => locale['deleteConfirm']}\n      </LocaleConsumer>);\n      return (\n        <Popconfirm\n          trigger=\"custom\"\n          visible={state.visible}\n          key={'delete'}\n          title={deleteMessage}\n          onConfirm={foundation.deleteMessage}\n          onCancel={foundation.hideDeletePopup}\n          position=\"top\"\n        >\n          <span ref={popconfirmTriggerRef} class={`${PREFIX_CHAT_BOX_ACTION}-delete-wrap`}>\n            <Button\n              theme=\"borderless\"\n              icon={<IconDeleteStroked />}\n              type=\"tertiary\"\n              className={`${PREFIX_CHAT_BOX_ACTION}-btn`}\n              onClick={foundation.showDeletePopup}\n            />\n          </span>\n        </Popconfirm>\n      );\n    }\n\n    return () => {\n      const { message = {}, lastChat } = props;\n      const { showAction } = state;\n      const { role, status = MESSAGE_STATUS.COMPLETE } = message;\n      const complete = status === MESSAGE_STATUS.COMPLETE ;\n      const showFeedback = role !== ROLE.USER && complete;\n      const showReset = lastChat && role === ROLE.ASSISTANT;\n      const finished = status !== MESSAGE_STATUS.LOADING && status !== MESSAGE_STATUS.INCOMPLETE;\n      const wrapCls = cls(PREFIX_CHAT_BOX_ACTION, {\n        [`${PREFIX_CHAT_BOX_ACTION}-show`]: showReset && finished || showAction,\n        [`${PREFIX_CHAT_BOX_ACTION}-hidden`]: !finished,\n      });\n      const { customRenderFunc } = props;\n\n      if (customRenderFunc) {\n        const actionNodes = [];\n        const actionNodeObj = {} as DefaultActionNodeObj;\n        if (complete) {\n          const copyNode_ = copyNode();\n          actionNodes.push(copyNode_);\n          actionNodeObj.copyNode = copyNode_;\n        }\n        if (showFeedback) {\n          const likeNode_ = likeNode();\n          actionNodes.push(likeNode_);\n          actionNodeObj.likeNode = likeNode_;\n          const dislikeNode_ = dislikeNode();\n          actionNodes.push(dislikeNode_);\n          actionNodeObj.dislikeNode = dislikeNode_;\n        }\n        if (showReset) {\n          const resetNode_ = resetNode();\n          actionNodes.push(resetNode_);\n          actionNodeObj.resetNode = resetNode_;\n        }\n        const deleteNode_ = deleteNode();\n        actionNodes.push(deleteNode_);\n        actionNodeObj.deleteNode = deleteNode_;\n        return customRenderFunc({\n          message,\n          defaultActions: actionNodes,\n          className: wrapCls,\n          defaultActionsObj: actionNodeObj\n        });\n      }\n      return <div class={wrapCls} ref={containerRef}>\n        {complete && copyNode()}\n        {showFeedback && likeNode()}\n        {showFeedback && dislikeNode()}\n        {showReset && resetNode()}\n        {deleteNode()}\n      </div>;\n    };\n  },\n});\n\n\nexport default chatBoxAction;\n\n"],"names":["LocaleConsumer","LocaleConsumerFunc","PREFIX_CHAT_BOX_ACTION","cssClasses","ROLE","MESSAGE_STATUS","strings","vuePropsType","chatBoxPropTypes","role","PropTypes","object","message","showReset","bool","onMessageBadFeedback","func","onMessageGoodFeedback","onMessageCopy","onChatsChange","onMessageDelete","onMessageReset","customRenderFunc","chatBoxAction","defineComponent","props","name","setup","attrs","useSlots","copySuccessNode","containerRef","shallowRef","popconfirmTriggerRef","clickOutsideHandler","state","reactive","visible","showAction","onMounted","_createVNode","default","locale","onUnmounted","foundation","destroy","adapter","adapterInject","getDataAttr","useBaseComponent","adapter_","notifyDeleteMessage","notifyMessageCopy","copyToClipboardAndToast","toast","content","copy","Array","isArray","map","item","text","join","success","notifyLikeMessage","notifyDislikeMessage","notifyResetMessage","setVisible","setShowAction","registerClickOutsideHandler","cb","unregisterClickOutsideHandler","e","el","value","target","path","composedPath","contains","includes","window","addEventListener","removeEventListener","ChatBoxActionFoundation","copyNode","Button","IconCopyStroked","copyMessage","likeNode","like","IconLikeThumb","IconThumbUpStroked","likeMessage","dislikeNode","dislike","dislikeMessage","resetNode","IconRedoStroked","resetMessage","deleteNode","deleteMessage","Popconfirm","hideDeletePopup","IconDeleteStroked","showDeletePopup","lastChat","status","COMPLETE","complete","showFeedback","USER","ASSISTANT","finished","LOADING","INCOMPLETE","wrapCls","cls","actionNodes","actionNodeObj","copyNode_","push","likeNode_","dislikeNode_","resetNode_","deleteNode_","defaultActions","className","defaultActionsObj"],"mappings":"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"}