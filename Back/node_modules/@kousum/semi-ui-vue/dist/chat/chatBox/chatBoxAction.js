import { defineComponent as U, useSlots as G, shallowRef as L, reactive as V, onMounted as X, createVNode as o, onUnmounted as q } from "vue";
import * as c from "../../PropTypes";
import { IconCopyStroked as z, IconLikeThumb as _, IconThumbUpStroked as $, IconRedoStroked as J, IconDeleteStroked as K } from "@kousum/semi-icons-vue";
import B from "copy-text-to-clipboard";
import { cssClasses as Q, strings as W } from '@douyinfe/semi-foundation/lib/es/chat/constants';
import Y from '@douyinfe/semi-foundation/lib/es/chat/chatBoxActionFoundation';
import { LocaleConsumerFunc as Z } from "../../locale/localeConsumer";
import ee from "classnames";
import { chatBoxPropTypes as te } from "./chatPropsType";
import h from "../../button";
import oe from "../../popconfirm";
import { useBaseComponent as se } from "../../_base/baseComponent";
const x = Z(), {
  PREFIX_CHAT_BOX_ACTION: n
} = Q, {
  ROLE: D,
  MESSAGE_STATUS: y
} = W, ne = {
  ...te,
  role: c.object,
  message: c.object,
  showReset: c.bool,
  onMessageBadFeedback: c.func,
  onMessageGoodFeedback: c.func,
  onMessageCopy: c.func,
  onChatsChange: c.func,
  onMessageDelete: c.func,
  onMessageReset: c.func,
  customRenderFunc: c.func
}, ke = /* @__PURE__ */ U({
  props: {
    ...ne
  },
  name: "chatBoxAction",
  setup(s, {
    attrs: ce
  }) {
    G();
    let C = null;
    const j = L();
    let b = L(), u = null;
    const p = V({
      visible: !1,
      showAction: !1
    });
    X(() => {
      C = o(x, {
        componentName: "Chat"
      }, {
        default: (t) => t.copySuccess
      });
    }), q(() => {
      i.destroy();
    });
    const {
      adapter: F,
      getDataAttr: ie
    } = se(s, p);
    function H() {
      return {
        ...F(),
        notifyDeleteMessage: () => {
          const {
            message: t,
            onMessageDelete: e
          } = s;
          e == null || e(t);
        },
        notifyMessageCopy: () => {
          const {
            message: t,
            onMessageCopy: e
          } = s;
          e == null || e(t);
        },
        copyToClipboardAndToast: () => {
          var l;
          const {
            message: t = {},
            toast: e
          } = s;
          if (typeof t.content == "string")
            B(t.content);
          else if (Array.isArray(t.content)) {
            const r = (l = t.content) == null ? void 0 : l.map((d) => d.text).join("");
            B(r);
          }
          e.success({
            content: C
          });
        },
        notifyLikeMessage: () => {
          const {
            message: t,
            onMessageGoodFeedback: e
          } = s;
          e == null || e(t);
        },
        notifyDislikeMessage: () => {
          const {
            message: t,
            onMessageBadFeedback: e
          } = s;
          e == null || e(t);
        },
        notifyResetMessage: () => {
          const {
            message: t,
            onMessageReset: e
          } = s;
          e == null || e(t);
        },
        setVisible: (t) => {
          p.visible = t;
        },
        setShowAction: (t) => {
          p.showAction = t;
        },
        registerClickOutsideHandler: (t) => {
          u && A.unregisterClickOutsideHandler(), u = (e) => {
            let l = b.value;
            const r = e.target, d = e.composedPath && e.composedPath() || [r];
            l && !l.contains(r) && !d.includes(l) && t();
          }, window.addEventListener("mousedown", u);
        },
        unregisterClickOutsideHandler: () => {
          u && (window.removeEventListener("mousedown", u), u = null);
        }
      };
    }
    const A = H(), i = new Y(A), w = () => o(h, {
      key: "copy",
      theme: "borderless",
      icon: o(z, null, null),
      type: "tertiary",
      onClick: i.copyMessage,
      className: `${n}-btn`
    }, null), T = () => {
      const {
        message: t = {}
      } = s, {
        like: e
      } = t;
      return o(h, {
        key: "like",
        theme: "borderless",
        icon: e ? o(_, null, null) : o($, null, null),
        type: "tertiary",
        className: `${n}-btn`,
        onClick: i.likeMessage
      }, null);
    }, M = () => {
      const {
        message: t = {}
      } = s, {
        dislike: e
      } = t;
      return o(h, {
        theme: "borderless",
        key: "dislike",
        icon: e ? o(_, {
          className: `${n}-icon-flip`
        }, null) : o($, {
          className: "semi-chat-chatBox-action-icon-flip"
        }, null),
        type: "tertiary",
        className: `${n}-btn`,
        onClick: i.dislikeMessage
      }, null);
    }, S = () => o(h, {
      key: "reset",
      theme: "borderless",
      icon: o(J, {
        className: `${n}-icon-redo`
      }, null),
      type: "tertiary",
      onClick: i.resetMessage,
      className: `${n}-btn`
    }, null), E = () => {
      const t = o(x, {
        componentName: "Chat"
      }, {
        default: (e) => e.deleteConfirm
      });
      return o(oe, {
        trigger: "custom",
        visible: p.visible,
        key: "delete",
        title: t,
        onConfirm: i.deleteMessage,
        onCancel: i.hideDeletePopup,
        position: "top"
      }, {
        default: () => [o("span", {
          ref: b,
          class: `${n}-delete-wrap`
        }, [o(h, {
          theme: "borderless",
          icon: o(K, null, null),
          type: "tertiary",
          className: `${n}-btn`,
          onClick: i.showDeletePopup
        }, null)])]
      });
    };
    return () => {
      const {
        message: t = {},
        lastChat: e
      } = s, {
        showAction: l
      } = p, {
        role: r,
        status: d = y.COMPLETE
      } = t, g = d === y.COMPLETE, k = r !== D.USER && g, N = e && r === D.ASSISTANT, O = d !== y.LOADING && d !== y.INCOMPLETE, P = ee(n, {
        [`${n}-show`]: N && O || l,
        [`${n}-hidden`]: !O
      }), {
        customRenderFunc: R
      } = s;
      if (R) {
        const m = [], f = {};
        if (g) {
          const a = w();
          m.push(a), f.copyNode = a;
        }
        if (k) {
          const a = T();
          m.push(a), f.likeNode = a;
          const I = M();
          m.push(I), f.dislikeNode = I;
        }
        if (N) {
          const a = S();
          m.push(a), f.resetNode = a;
        }
        const v = E();
        return m.push(v), f.deleteNode = v, R({
          message: t,
          defaultActions: m,
          className: P,
          defaultActionsObj: f
        });
      }
      return o("div", {
        class: P,
        ref: j
      }, [g && w(), k && T(), k && M(), N && S(), E()]);
    };
  }
});
export {
  ke as default,
  ne as vuePropsType
};
//# sourceMappingURL=chatBoxAction.js.map
