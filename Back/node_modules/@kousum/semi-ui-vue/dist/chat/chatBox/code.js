import { defineComponent as p, useSlots as m, ref as u, createVNode as o } from "vue";
import { cssClasses as d } from '@douyinfe/semi-foundation/lib/es/chat/constants';
import i from "copy-text-to-clipboard";
import { IconTick as f, IconCopyStroked as C } from "@kousum/semi-icons-vue";
import { nth as y } from "lodash";
import { code as a } from "../../markdownRender/components";
import { LocaleConsumerFunc as S } from "../../locale/localeConsumer";
import { useMemo as v } from "../../_utils/useMemo";
const {
  PREFIX_CHAT_BOX: t
} = d, l = S(), $ = {
  className: String,
  children: String
}, L = /* @__PURE__ */ p({
  props: {
    ...$
  },
  name: "chatCode",
  setup(n, {
    attrs: h
  }) {
    m();
    const c = u(!1), s = v(() => {
      var e;
      return y((e = n.className) == null ? void 0 : e.split("-"), -1);
    }, [() => n.className]), r = () => {
      i(n.children), c.value = !0, setTimeout(() => {
        c.value = !1;
      }, 2e3);
    };
    return () => s.value ? o("div", {
      class: `${t}-content-code semi-always-dark`
    }, [o("div", {
      class: `${t}-content-code-topSlot`
    }, [o("span", {
      class: `${t}-content-code-topSlot-type`
    }, [s.value]), o("span", {
      class: `${t}-content-code-topSlot-copy`
    }, [c.value ? o("span", {
      class: `${t}-content-code-topSlot-copy-wrapper`
    }, [o(f, null, null), o(l, {
      componentName: "Chat"
    }, {
      default: (e) => e.copied
    })]) : o("button", {
      class: `${t}-content-code-topSlot-copy-wrapper ${t}-content-code-topSlot-toCopy`,
      onClick: r
    }, [o(C, null, null), o(l, {
      componentName: "Chat"
    }, {
      default: (e) => e.copy
    })])])]), a({
      ...n
    })]) : a({
      ...n
    });
  }
});
export {
  L as default,
  $ as vuePropsType
};
//# sourceMappingURL=code.js.map
