import { defineComponent as R, useSlots as S, createVNode as s, Fragment as k } from "vue";
import w from "classnames";
import g from "../../markdownRender";
import { cssClasses as x, strings as b } from '@douyinfe/semi-foundation/lib/es/chat/constants';
import { FileAttachment as f, ImageAttachment as C } from "../attachment";
import A from "./code";
import { useMemo as l } from "../../_utils/useMemo";
const {
  PREFIX_CHAT_BOX: r
} = x, {
  MESSAGE_STATUS: y,
  MODE: B,
  ROLE: M
} = b, O = {
  mode: String,
  customMarkDownComponents: Object,
  children: String,
  role: Object,
  message: Object,
  customRenderFunc: Function
}, I = /* @__PURE__ */ R({
  props: {
    ...O
  },
  name: "chatBoxContent",
  setup(e, {
    attrs: _
  }) {
    S();
    const c = l(() => ({
      code: A,
      SemiFile: f,
      img: C,
      ...e.customMarkDownComponents
    }), [() => e.customMarkDownComponents]), u = l(() => {
      const n = e.message.role === M.USER, t = e.mode === B.BUBBLE, o = e.mode === B.USER_BUBBLE && n;
      return w(`${r}-content`, {
        [`${r}-content-${e.mode}`]: t || o,
        [`${r}-content-user`]: t && n || o,
        [`${r}-content-error`]: e.message.status === y.ERROR && (t || o)
      });
    }, [() => e.message.role, () => e.message.status]), i = l(() => {
      if (e.message.status === y.LOADING)
        return s("span", {
          class: `${r}-content-loading`
        }, [s("span", {
          class: `${r}-content-loading-item`
        }, null)]);
      {
        let n;
        return typeof e.message.content == "string" ? n = s(g, {
          format: "md",
          raw: e.message.content,
          components: c
        }, null) : Array.isArray(e.message.content) && (n = e.message.content.map((t, o) => {
          if (t.type === "text")
            return s(g, {
              key: "index",
              format: "md",
              raw: t.text,
              components: c
            }, null);
          if (t.type === "image_url")
            return s(C, {
              key: "index",
              src: t.image_url.url
            }, null);
          if (t.type === "file_url") {
            const {
              name: a,
              size: d,
              url: F,
              type: m
            } = t.file_url, E = a.split(".").pop() ?? (m == null ? void 0 : m.split("/").pop());
            return s(f, {
              key: "index",
              url: a,
              name: a,
              size: d,
              type: E
            }, null);
          }
          return null;
        })), s(k, null, [n]);
      }
    }, [() => e.message.status, () => e.message.content]);
    return () => {
      const {
        message: n = {},
        customRenderFunc: t,
        role: o,
        customMarkDownComponents: a,
        mode: d
      } = e;
      return t ? t({
        message: n,
        role: o,
        defaultContent: i.value,
        className: u.value
      }) : s("div", {
        class: u.value
      }, [i.value]);
    };
  }
});
export {
  I as default,
  O as vuePropsType
};
//# sourceMappingURL=chatBoxContent.js.map
