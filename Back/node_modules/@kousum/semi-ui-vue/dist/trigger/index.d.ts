import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface TriggerProps {
    triggerRender?: (props?: any) => VueJsxNode;
    componentName?: string;
    componentProps?: Record<string, any>;
    value?: any;
    inputValue?: string;
    placeholder?: string | string[];
    className?: string;
    style?: CSSProperties;
    onChange?: (value: string, event: any) => void;
    showClearIgnoreDisabled?: boolean;
    onClear?: (e: MouseEvent) => void;
    onSearch?: (value: string, event: any) => void;
    onRemove?: (value: any, event: any) => void;
    disabled?: boolean;
}
export declare const vuePropsType: CombineProps<TriggerProps>;
declare const Index: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    triggerRender: PropType<(props?: any) => VueJsxNode> | {
        type: PropType<(props?: any) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    componentName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    componentProps: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    value: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    inputValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string, event: any) => void> | {
        type: PropType<(value: string, event: any) => void>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onSearch: PropType<(value: string, event: any) => void> | {
        type: PropType<(value: string, event: any) => void>;
        default?: any;
        required?: false;
    };
    onRemove: PropType<(value: any, event: any) => void> | {
        type: PropType<(value: any, event: any) => void>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => VueJsxNode, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    triggerRender: PropType<(props?: any) => VueJsxNode> | {
        type: PropType<(props?: any) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    componentName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    componentProps: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    value: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    inputValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string, event: any) => void> | {
        type: PropType<(value: string, event: any) => void>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onSearch: PropType<(value: string, event: any) => void> | {
        type: PropType<(value: string, event: any) => void>;
        default?: any;
        required?: false;
    };
    onRemove: PropType<(value: any, event: any) => void> | {
        type: PropType<(value: any, event: any) => void>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Index;
