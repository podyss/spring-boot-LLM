import { defineComponent as m, reactive as p, onMounted as C, watch as y, onUnmounted as g, createVNode as P, Teleport as S } from "vue";
import { BASE_CLASS_PREFIX as h } from '@douyinfe/semi-foundation/lib/es/base/constants';
import v from "classnames";
import '@douyinfe/semi-foundation/lib/es/_portal/portal.css';
import { useConfigContext as N } from "../configProvider/context/Consumer";
const x = () => document.body, b = {
  style: [Object, String],
  prefixCls: {
    type: String,
    default: `${h}-portal`
  },
  className: String,
  getPopupContainer: Function,
  didUpdate: Function
}, j = /* @__PURE__ */ m({
  props: {
    ...b
  },
  name: "Portal",
  setup(i, {
    slots: l
  }) {
    const {
      context: c
    } = N();
    let e;
    const n = p({
      container: void 0
    });
    C(() => {
      const t = s(c.value);
      t !== n.container && (n.container = t);
    });
    function s(t, r = !1) {
      try {
        let o;
        if (!e || !n.container || !Array.from(n.container.childNodes).includes(e)) {
          e = document.createElement("div");
          const a = (i.getPopupContainer || t.getPopupContainer || x)();
          return a.appendChild(e), u(i.style), f(i.prefixCls, t, i.className), o = a, o;
        }
      } catch (o) {
        if (!r)
          throw o;
      }
      return n == null ? void 0 : n.container;
    }
    y(() => i, (t, r) => {
      const {
        didUpdate: o
      } = i;
      o && o(r);
    }), g(() => {
      n.container && n.container.removeChild(e);
    });
    const u = (t = {}) => {
      if (e)
        for (const r of Object.keys(t))
          e.style[r] = t[r];
    }, f = (t, r = c.value, ...o) => {
      const {
        direction: d
      } = r, a = v(t, ...o, {
        [`${t}-rtl`]: d === "rtl"
      });
      e && (e.className = a);
    };
    return () => n.container ? P(S, {
      to: e
    }, {
      default: l.default
    }) : null;
  }
});
export {
  j as default,
  b as vuePropsType
};
//# sourceMappingURL=index.js.map
