import { CombineProps } from './interface';
export declare const any: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor | BooleanConstructor | FunctionConstructor)[];
export declare const array: ArrayConstructor;
export declare const bool: BooleanConstructor;
export declare const func: FunctionConstructor;
export declare const number: NumberConstructor;
export declare const object: ObjectConstructor;
export declare const string: StringConstructor;
export declare const node: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
export declare const element: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
export declare const symbol: ObjectConstructor;
export declare function oneOfType(arr: any[]): any[];
type Prop = ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor | BooleanConstructor | FunctionConstructor | typeof any;
export type PropObj = Record<any, {
    type: Prop;
    required?: boolean;
    default?: any;
    validator?(value: unknown): boolean;
} | Prop>;
export declare function vuePropsMake<T>(typeObj: CombineProps<T>, defaultProps: {
    [key: string]: any;
}): CombineProps<T>;
export {};
