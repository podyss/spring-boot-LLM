import type { CollapsibleFoundationProps } from '@douyinfe/semi-foundation/lib/es/collapsible/foundation';
import '@douyinfe/semi-foundation/lib/es/collapsible/collapsible.css';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../interface';
export interface CollapsibleProps extends CollapsibleFoundationProps {
    motion?: boolean;
    isOpen?: boolean;
    duration?: number;
    keepDOM?: boolean;
    lazyRender?: boolean;
    className?: string;
    style?: CSSProperties;
    collapseHeight?: number;
    reCalcKey?: number | string;
    id?: string;
    onMotionEnd?: () => void;
}
export declare const vuePropsType: CombineProps<CollapsibleProps>;
declare const Collapsible: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    isOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    lazyRender: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    collapseHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    reCalcKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onMotionEnd: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    fade: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    isOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    lazyRender: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    collapseHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    reCalcKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onMotionEnd: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    fade: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Collapsible;
