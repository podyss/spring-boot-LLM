import { defineComponent as p, useSlots as z, ref as C, reactive as D, onMounted as S, watch as r, onBeforeUnmount as w, createVNode as g, mergeProps as y } from "vue";
import x from '@douyinfe/semi-foundation/lib/es/collapsible/foundation';
import * as t from "../PropTypes";
import { vuePropsMake as B } from "../PropTypes";
import P from "classnames";
import { cssClasses as b } from '@douyinfe/semi-foundation/lib/es/collapsible/constants';
import '@douyinfe/semi-foundation/lib/es/collapsible/collapsible.css';
import { useBaseComponent as V } from "../_base/baseComponent";
const k = {
  motion: t.bool,
  isOpen: t.bool,
  duration: t.number,
  keepDOM: t.bool,
  lazyRender: t.bool,
  collapseHeight: t.number,
  style: t.object,
  className: t.string,
  reCalcKey: t.oneOfType([t.string, t.number]),
  id: t.string,
  onMotionEnd: t.func,
  fade: t.bool
}, E = {
  isOpen: !1,
  duration: 250,
  motion: !0,
  keepDOM: !1,
  lazyRender: !1,
  collapseHeight: 0,
  fade: !1
}, F = B(k, E), _ = /* @__PURE__ */ p({
  props: {
    ...F
  },
  name: "Collapsible",
  setup(n, {}) {
    const d = z(), s = C();
    let u, c = !1;
    const i = D({
      domInRenderTree: !1,
      domHeight: 0,
      visible: n.isOpen,
      isTransitioning: !1
    }), {
      adapter: O,
      getDataAttr: v
    } = V(n, i);
    function R() {
      return {
        ...O(),
        setDOMInRenderTree: (e) => {
          i.domInRenderTree !== e && (i.domInRenderTree = e);
        },
        setDOMHeight: (e) => {
          i.domHeight !== e && (i.domHeight = e);
        },
        setVisible: (e) => {
          i.visible !== e && (i.visible = e);
        },
        setIsTransitioning: (e) => {
          i.isTransitioning !== e && (i.isTransitioning = e);
        }
      };
    }
    const T = R(), l = new x(T), H = (e) => {
      let o;
      e.borderBoxSize ? o = !(e.borderBoxSize[0].blockSize === 0 && e.borderBoxSize[0].inlineSize === 0) : o = !(e.contentRect.height === 0 && e.contentRect.width === 0);
      let a = 0;
      return e.borderBoxSize ? a = Math.ceil(e.borderBoxSize[0].blockSize) : a = e.target.clientHeight, {
        isShown: o,
        height: a
      };
    };
    S(() => {
      u = new ResizeObserver(I), u.observe(s.value);
      const e = M();
      l.updateDOMInRenderTree(e), e && l.updateDOMHeight(s.value.scrollHeight);
    }), r(() => n.reCalcKey, (e, o, a) => {
      l.updateDOMHeight(s.value.scrollHeight);
    }), r(() => i.domInRenderTree, (e, o, a) => {
      i.domInRenderTree && l.updateDOMHeight(s.value.scrollHeight);
    }), r(() => n.isOpen, (e, o, a) => {
      (n.isOpen || !n.motion) && l.updateVisible(n.isOpen);
    }), r([() => n.isOpen, () => n.motion], (e, o, a) => {
      n.motion && o[0] !== n.isOpen && l.updateIsTransitioning(!0);
    }), w(() => {
      u.disconnect();
    });
    const I = (e) => {
      const o = e[0];
      if (o) {
        const a = H(o);
        l.updateDOMHeight(a.height), l.updateDOMInRenderTree(a.isShown);
      }
    }, M = () => s.value ? s.value.offsetHeight > 0 : !1;
    return () => {
      var m;
      const e = {
        overflow: "hidden",
        height: (n.isOpen ? i.domHeight : n.collapseHeight) + "px",
        opacity: n.isOpen || !n.fade || n.collapseHeight !== 0 ? 1 : 0,
        transitionDuration: `${n.motion && i.isTransitioning ? n.duration : 0}ms`,
        ...n.style
      }, o = P(`${b.PREFIX}-wrapper`, {
        [`${b.PREFIX}-transition`]: n.motion && i.isTransitioning
      }, n.className), a = (m = d.default) == null ? void 0 : m.call(d), f = n.keepDOM && (n.lazyRender ? c : !0) || n.collapseHeight !== 0 || i.visible || n.isOpen;
      return f && !c && (c = !0), g("div", y({
        class: o,
        style: e,
        onTransitionend: () => {
          var h;
          n.isOpen || l.updateVisible(!1), l.updateIsTransitioning(!1), (h = n.onMotionEnd) == null || h.call(n);
        }
      }, v()), [g("div", {
        "x-semi-prop": "children",
        ref: s,
        style: {
          overflow: "hidden"
        },
        id: n.id
      }, [f && a])]);
    };
  }
});
export {
  _ as default,
  F as vuePropsType
};
//# sourceMappingURL=index.js.map
