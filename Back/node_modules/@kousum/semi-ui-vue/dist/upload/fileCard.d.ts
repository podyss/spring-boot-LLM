import { RenderFileItemProps } from './interface';
import { PropType } from 'vue';
import type { CSSProperties, VNode } from 'vue';
import { CombineProps } from '../interface';
export interface FileCardProps extends RenderFileItemProps {
    className?: string;
    style?: CSSProperties;
    picWidth?: string | number;
    picHeight?: string | number;
    renderThumbnail?: any;
}
export declare const vuePropsType: CombineProps<FileCardProps>;
export interface FileCardState {
    fallbackPreview?: boolean;
}
declare const FileCard: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    picWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    picHeight: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    renderThumbnail: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    previewFile: PropType<(fileItem: RenderFileItemProps) => VNode | string> | {
        type: PropType<(fileItem: RenderFileItemProps) => VNode | string>;
        default?: any;
        required?: false;
    };
    listType: {
        type: PropType<"list" | "picture">;
        default?: any;
        required: true;
    };
    onRemove: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    onRetry: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    onReplace: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    showPicInfo: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderPicInfo: PropType<(renderFileItemProps: RenderFileItemProps) => VNode | string> | {
        type: PropType<(renderFileItemProps: RenderFileItemProps) => VNode | string>;
        default?: any;
        required?: false;
    };
    renderPicPreviewIcon: PropType<(renderFileItemProps: RenderFileItemProps) => VNode | string> | {
        type: PropType<(renderFileItemProps: RenderFileItemProps) => VNode | string>;
        default?: any;
        required?: false;
    };
    renderFileOperation: PropType<(fileItem: RenderFileItemProps) => VNode | string> | {
        type: PropType<(fileItem: RenderFileItemProps) => VNode | string>;
        default?: any;
        required?: false;
    };
    showRetry: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showReplace: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    onPreviewClick: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    validateMessage: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    response: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    event: PropType<Event> | {
        type: PropType<Event>;
        default?: any;
        required?: false;
    };
    status: {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/upload/foundation").FileItemStatus>;
        default?: any;
        required: true;
    };
    name: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    size: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    uid: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    url: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    fileInstance: PropType<File> | {
        type: PropType<File>;
        default?: any;
        required?: false;
    };
    percent: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    _sizeInvalid: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    preview: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    shouldUpload: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    picWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    picHeight: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    renderThumbnail: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    index: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    previewFile: PropType<(fileItem: RenderFileItemProps) => VNode | string> | {
        type: PropType<(fileItem: RenderFileItemProps) => VNode | string>;
        default?: any;
        required?: false;
    };
    listType: {
        type: PropType<"list" | "picture">;
        default?: any;
        required: true;
    };
    onRemove: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    onRetry: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    onReplace: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    showPicInfo: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderPicInfo: PropType<(renderFileItemProps: RenderFileItemProps) => VNode | string> | {
        type: PropType<(renderFileItemProps: RenderFileItemProps) => VNode | string>;
        default?: any;
        required?: false;
    };
    renderPicPreviewIcon: PropType<(renderFileItemProps: RenderFileItemProps) => VNode | string> | {
        type: PropType<(renderFileItemProps: RenderFileItemProps) => VNode | string>;
        default?: any;
        required?: false;
    };
    renderFileOperation: PropType<(fileItem: RenderFileItemProps) => VNode | string> | {
        type: PropType<(fileItem: RenderFileItemProps) => VNode | string>;
        default?: any;
        required?: false;
    };
    showRetry: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showReplace: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    onPreviewClick: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    validateMessage: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    response: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    event: PropType<Event> | {
        type: PropType<Event>;
        default?: any;
        required?: false;
    };
    status: {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/upload/foundation").FileItemStatus>;
        default?: any;
        required: true;
    };
    name: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    size: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    uid: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    url: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    fileInstance: PropType<File> | {
        type: PropType<File>;
        default?: any;
        required?: false;
    };
    percent: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    _sizeInvalid: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    preview: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    shouldUpload: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default FileCard;
