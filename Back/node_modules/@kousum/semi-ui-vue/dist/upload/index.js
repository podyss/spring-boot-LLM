import { defineComponent as fe, useSlots as pe, reactive as ge, ref as W, watch as me, onMounted as ye, onUnmounted as he, createVNode as a, mergeProps as M, nextTick as q, Fragment as ve } from "vue";
import m from "classnames";
import * as t from "../PropTypes";
import { vuePropsMake as Ce } from "../PropTypes";
import { noop as p, pick as V } from "lodash";
import be from '@douyinfe/semi-foundation/lib/es/upload/foundation';
import { cssClasses as Le, strings as h } from '@douyinfe/semi-foundation/lib/es/upload/constants';
import Pe, { vuePropsType as Ae } from "./fileCard";
import { useHasInProps as Ie, useBaseComponent as Re } from "../_base/baseComponent";
import O from "../locale/localeConsumer";
import { IconUpload as we } from "@kousum/semi-icons-vue";
import '@douyinfe/semi-foundation/lib/es/upload/upload.css';
import { styleNum as X } from "../_utils";
const r = Le.PREFIX, Se = {
  accept: t.string,
  // Limit allowed file types
  action: {
    type: String,
    required: !0
  },
  addOnPasting: t.bool,
  afterUpload: t.func,
  beforeClear: t.func,
  beforeRemove: t.func,
  beforeUpload: t.func,
  // children: PropTypes.node as PropType<any>,
  className: t.string,
  customRequest: t.func,
  data: t.oneOfType([t.object, t.func]),
  // Extra parameters attached when uploading
  defaultFileList: t.array,
  directory: t.bool,
  // Support folder upload
  disabled: t.bool,
  dragIcon: t.node,
  dragMainText: t.node,
  dragSubText: t.node,
  draggable: t.bool,
  fileList: t.array,
  // files had been uploaded
  fileName: t.string,
  // same as name, to avoid props conflict in Form.Upload
  headers: t.oneOfType([t.object, t.func]),
  hotSpotLocation: String,
  itemStyle: t.object,
  limit: t.number,
  // 最大允许上传文件个数
  listType: String,
  maxSize: t.number,
  // 文件大小限制，单位kb
  minSize: t.number,
  // 文件大小限制，单位kb
  multiple: t.bool,
  name: t.string,
  // file name
  onAcceptInvalid: t.func,
  onChange: t.func,
  onClear: t.func,
  onDrop: t.func,
  onError: t.func,
  onExceed: t.func,
  onFileChange: t.func,
  onOpenFileDialog: t.func,
  onPreviewClick: t.func,
  onProgress: t.func,
  onRemove: t.func,
  onRetry: t.func,
  onSizeError: t.func,
  onSuccess: t.func,
  onPastingError: t.func,
  previewFile: t.func,
  prompt: t.node,
  promptPosition: String,
  picWidth: t.oneOfType([t.number, t.string]),
  picHeight: t.oneOfType([t.number, t.string]),
  renderFileItem: t.func,
  renderPicPreviewIcon: t.func,
  renderFileOperation: t.func,
  renderPicInfo: t.func,
  renderThumbnail: t.func,
  showClear: t.bool,
  showPicInfo: t.bool,
  showReplace: t.bool,
  showRetry: t.bool,
  showUploadList: t.bool,
  // whether to show fileList
  style: t.object,
  timeout: t.number,
  transformFile: t.func,
  uploadTrigger: String,
  // auto、custom
  validateMessage: t.node,
  validateStatus: String,
  withCredentials: t.bool,
  capture: [t.bool, t.string]
}, Te = {
  defaultFileList: [],
  disabled: !1,
  listType: "list",
  hotSpotLocation: "end",
  multiple: !1,
  onAcceptInvalid: p,
  onChange: p,
  beforeRemove: () => !0,
  beforeClear: () => !0,
  onClear: p,
  onDrop: p,
  onError: p,
  onExceed: p,
  onFileChange: p,
  onOpenFileDialog: p,
  onProgress: p,
  onRemove: p,
  onRetry: p,
  onSizeError: p,
  onSuccess: p,
  onPastingError: p,
  promptPosition: "right",
  showClear: !0,
  showPicInfo: !1,
  showReplace: !1,
  showRetry: !0,
  showUploadList: !0,
  uploadTrigger: "auto",
  withCredentials: !1
}, $e = Ce(Se, Te), He = /* @__PURE__ */ fe({
  props: {
    ...$e
  },
  name: "Upload",
  setup(o, {
    expose: J
  }) {
    const L = pe(), {
      getProps: Q
    } = Ie(), s = ge({
      fileList: o.defaultFileList || [],
      replaceIdx: -1,
      inputKey: Math.random(),
      replaceInputKey: Math.random(),
      // Status of the drag zone
      dragAreaStatus: "default",
      localUrls: []
    }), D = W(), G = W();
    let x;
    const {
      adapter: Y,
      getDataAttr: Z
    } = Re(o, s);
    function ee() {
      return {
        ...Y(),
        notifyFileSelect: (e) => o.onFileChange(e),
        notifyError: (e, n, i, d) => o.onError(e, n, i, d),
        notifySuccess: (e, n, i) => o.onSuccess(e, n, i),
        notifyProgress: (e, n, i) => o.onProgress(e, n, i),
        notifyRemove: (e, n, i) => o.onRemove(e, n, i),
        notifySizeError: (e, n) => o.onSizeError(e, n),
        notifyExceed: (e) => o.onExceed(e),
        updateFileList: (e, n) => {
          typeof n == "function" ? (s.fileList = e, q(() => {
            n == null || n();
          })) : s.fileList = e;
        },
        notifyBeforeUpload: ({
          file: e,
          fileList: n
        }) => o.beforeUpload({
          file: e,
          fileList: n
        }),
        notifyAfterUpload: ({
          response: e,
          file: n,
          fileList: i
        }) => o.afterUpload({
          response: e,
          file: n,
          fileList: i
        }),
        resetInput: () => {
          s.inputKey = Math.random();
        },
        resetReplaceInput: () => {
          s.replaceInputKey = Math.random();
        },
        isMac: () => navigator.platform.toUpperCase().indexOf("MAC") >= 0,
        registerPastingHandler: (e) => {
          document.body.addEventListener("keydown", e), x = e;
        },
        unRegisterPastingHandler: () => {
          x && document.body.removeEventListener("keydown", x);
        },
        notifyPastingError: (e) => o.onPastingError(e),
        updateDragAreaStatus: (e) => s.dragAreaStatus = e,
        notifyChange: ({
          currentFile: e,
          fileList: n
        }) => o.onChange({
          currentFile: e,
          fileList: n
        }),
        updateLocalUrls: (e) => {
          s.localUrls = e;
        },
        notifyClear: () => o.onClear(),
        notifyPreviewClick: (e) => o.onPreviewClick(e),
        notifyDrop: (e, n, i) => o.onDrop(e, n, i),
        notifyAcceptInvalid: (e) => o.onAcceptInvalid(e),
        notifyBeforeRemove: (e, n) => o.beforeRemove(e, n),
        notifyBeforeClear: (e) => o.beforeClear(e)
      };
    }
    const te = ee(), c = new be(te);
    me(() => o.fileList, (e) => {
      "fileList" in Q(o) && (s.fileList = e || []);
    }, {
      immediate: !0
    }), ye(() => {
      c.init();
    }), he(() => {
      c.destroy();
    });
    const U = () => {
      const {
        onOpenFileDialog: e
      } = o;
      o.disabled || !D || !D.value || (D.value.click(), e && e());
    }, ne = (e) => {
      const {
        files: n
      } = e.target;
      c.handleChange(n);
    }, oe = (e) => {
      s.replaceIdx = e, q(() => {
        G.value.click();
      });
    }, ae = (e) => {
      const {
        files: n
      } = e.target;
      c.handleReplaceChange(n);
    }, ie = () => {
      c.handleClear();
    }, re = (e) => {
      c.handleRemove(e);
    };
    J({
      insert: (e, n) => c.insertFileToList(e, n),
      upload: () => {
        c.manualUpload();
      }
    });
    const N = (e, n, i) => {
      const {
        name: d,
        status: g,
        validateMessage: u,
        _sizeInvalid: l,
        uid: v
      } = e, {
        previewFile: C,
        listType: y,
        itemStyle: b,
        showPicInfo: f,
        renderPicInfo: P,
        renderPicPreviewIcon: A,
        renderFileOperation: S,
        renderFileItem: I,
        renderThumbnail: T,
        disabled: R,
        onPreviewClick: $,
        picWidth: K,
        picHeight: E
      } = o, F = () => re(e), _ = () => {
        c.retry(e);
      }, k = () => {
        oe(n);
      }, w = {
        ...V(o, ["showRetry", "showReplace", ""]),
        ...V(e, [...Object.keys(Ae)]),
        previewFile: C,
        listType: y,
        onRemove: F,
        onRetry: _,
        index: n,
        //@ts-ignore
        key: v || `${d}${n}`,
        style: b,
        disabled: R,
        showPicInfo: f,
        renderPicInfo: P,
        renderPicPreviewIcon: A,
        renderFileOperation: S,
        renderThumbnail: T,
        onReplace: k,
        onPreviewClick: typeof $ < "u" ? () => c.handlePreviewClick(e) : void 0,
        picWidth: K,
        picHeight: E
      };
      return g === h.FILE_STATUS_UPLOAD_FAIL && !u && (w.validateMessage = i.fail), l && !u && (w.validateMessage = i.illegalSize), typeof I > "u" ? a(Pe, w, null) : I(w);
    }, le = () => {
      const {
        listType: e
      } = o;
      return e === h.FILE_LIST_PIC ? se() : e === h.FILE_LIST_DEFAULT ? ce() : null;
    }, se = () => {
      var F;
      const e = (F = L.default) == null ? void 0 : F.call(L), {
        showUploadList: n,
        limit: i,
        disabled: d,
        draggable: g,
        hotSpotLocation: u,
        picHeight: l,
        picWidth: v
      } = o, {
        fileList: C,
        dragAreaStatus: y
      } = s, b = o.fileList || C, f = i ? i > b.length : !0, P = `${r}-drag-area`, A = m(`${r}-add`, {
        [`${r}-picture-add`]: !0,
        [`${r}-picture-add-disabled`]: d
      }), S = m(`${r}-file-list`, {
        [`${r}-picture-file-list`]: !0
      }), I = m({
        [`${P}-legal`]: y === h.DRAG_AREA_LEGAL,
        [`${P}-illegal`]: y === h.DRAG_AREA_ILLEGAL
      }), T = `${r}-file-list-main`, R = {
        role: "button",
        className: A,
        onClick: U,
        style: {
          height: X(l),
          width: X(v)
        }
      }, $ = {
        class: S
      };
      g && Object.assign(R, {
        onDrop: z,
        onDragover: j,
        onDragleave: B,
        onDragenter: H
      }, {
        className: m(A, I)
      });
      const E = a("div", M(R, {
        "x-semi-prop": "children"
      }), [e]);
      return !n || !b.length ? f ? E : null : a(O, {
        componentName: "Upload"
      }, {
        default: (_) => a("div", $, [a("div", {
          class: T,
          role: "list",
          "aria-label": "picture list"
        }, [f && u === "start" ? E : null, b.map((k, w) => N(k, w, _)), f && u === "end" ? E : null])])
      });
    }, ce = () => {
      const {
        showUploadList: e,
        limit: n,
        disabled: i
      } = o, {
        fileList: d
      } = s, g = o.fileList || d, u = m(`${r}-file-list`), l = `${r}-file-list-title`, v = `${r}-file-list-main`, C = n !== 1 && g.length, y = o.showClear && !i, b = {
        class: u
      };
      return !e || !g.length ? null : a(O, {
        componentName: "Upload"
      }, {
        default: (f) => a("div", b, [C ? a("div", {
          class: l
        }, [a("span", {
          class: `${l}-choosen`
        }, [f.selectedFiles]), y ? a("span", {
          role: "button",
          tabindex: 0,
          onClick: ie,
          class: `${l}-clear`
        }, [f.clear]) : null]) : null, a("div", {
          class: v,
          role: "list",
          "aria-label": "file list"
        }, [g.map((P, A) => N(P, A, f))])])
      });
    }, z = (e) => {
      c.handleDrop(e);
    }, j = (e) => {
      c.handleDragOver(e);
    }, B = (e) => {
      c.handleDragLeave(e);
    }, H = (e) => {
      c.handleDragEnter(e);
    }, de = () => {
      var u;
      const e = (u = L.default) == null ? void 0 : u.call(L), {
        draggable: n,
        listType: i,
        disabled: d
      } = o, g = m(`${r}-add`);
      return i === h.FILE_LIST_PIC ? null : n ? ue() : a("div", {
        role: "button",
        tabindex: 0,
        "aria-disabled": d,
        class: g,
        onClick: U
      }, [e]);
    }, ue = () => {
      var C;
      const {
        dragAreaStatus: e
      } = s, n = (C = L.default) == null ? void 0 : C.call(L), {
        dragIcon: i,
        dragMainText: d,
        dragSubText: g,
        disabled: u
      } = o, l = `${r}-drag-area`, v = m(l, {
        [`${l}-legal`]: e === h.DRAG_AREA_LEGAL,
        [`${l}-illegal`]: e === h.DRAG_AREA_ILLEGAL,
        [`${l}-custom`]: n
      });
      return a(O, {
        componentName: "Upload"
      }, {
        default: (y) => a("div", {
          role: "button",
          tabindex: 0,
          "aria-disabled": u,
          class: v,
          onDrop: z,
          onDragover: j,
          onDragleave: B,
          onDragenter: H,
          onClick: U
        }, [n || a(ve, null, [a("div", {
          class: `${l}-icon`,
          "x-semi-prop": "dragIcon"
        }, [i || a(we, {
          size: "extra-large"
        }, null)]), a("div", {
          class: `${l}-text`
        }, [a("div", {
          class: `${l}-main-text`,
          "x-semi-prop": "dragMainText"
        }, [d || y.mainText]), a("div", {
          class: `${l}-sub-text`,
          "x-semi-prop": "dragSubText"
        }, [g]), a("div", {
          class: `${l}-tips`
        }, [e === h.DRAG_AREA_LEGAL && a("span", {
          class: `${l}-tips-legal`
        }, [y.legalTips]), e === h.DRAG_AREA_ILLEGAL && a("span", {
          class: `${l}-tips-illegal`
        }, [y.illegalTips])])])])])
      });
    };
    return () => {
      const {
        style: e,
        className: n,
        multiple: i,
        accept: d,
        disabled: g,
        capture: u,
        listType: l,
        prompt: v,
        promptPosition: C,
        draggable: y,
        validateMessage: b,
        validateStatus: f,
        directory: P
      } = o, A = m(r, {
        [`${r}-picture`]: l === h.FILE_LIST_PIC,
        [`${r}-disabled`]: g,
        [`${r}-default`]: f === "default",
        [`${r}-error`]: f === "error",
        [`${r}-warning`]: f === "warning",
        [`${r}-success`]: f === "success"
      }, n), S = m(`${r}-hidden-input`), I = m(`${r}-hidden-input-replace`), T = m(`${r}-prompt`), R = m(`${r}-validate-message`), $ = P ? {
        directory: "directory",
        webkitdirectory: "webkitdirectory"
      } : {};
      return a("div", M({
        class: A,
        style: e,
        "x-prompt-pos": C
      }, Z()), [a("input", M({
        key: s.inputKey,
        capture: u,
        multiple: i,
        accept: d,
        onChange: ne,
        type: "file",
        "data-testid": "upload-bt",
        autocomplete: "off",
        tabindex: -1,
        class: S,
        ref: D
      }, $), null), a("input", {
        key: s.replaceInputKey,
        multiple: !1,
        accept: d,
        onChange: ae,
        type: "file",
        autocomplete: "off",
        tabindex: -1,
        class: I,
        ref: G
      }, null), de(), v ? a("div", {
        class: T,
        "x-semi-prop": "prompt"
      }, [v]) : null, b ? a("div", {
        class: R,
        "x-semi-prop": "validateMessage"
      }, [b]) : null, le()]);
    };
  }
});
export {
  He as default,
  $e as vuePropsType
};
//# sourceMappingURL=index.js.map
