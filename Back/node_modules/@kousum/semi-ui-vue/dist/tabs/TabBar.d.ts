import { type DropdownProps } from '../dropdown';
import { PlainTab, TabBarProps } from './interface';
import { PropType, VNode } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface TabBarState {
    endInd: number;
    rePosKey: number;
    startInd: number;
    uuid: string;
    currentVisibleItems: string[];
}
export interface OverflowItem extends PlainTab {
    key: string;
    active: boolean;
}
export declare const vuePropsType: CombineProps<TabBarProps>;
declare const TabBar: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    activeKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    collapsible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    list: PropType<PlainTab[]> | {
        type: PropType<PlainTab[]>;
        default?: any;
        required?: false;
    };
    onTabClick: PropType<(activeKey: string, event: MouseEvent) => void> | {
        type: PropType<(activeKey: string, event: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    showRestInDropdown: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./interface").TabSize> | {
        type: PropType<import("./interface").TabSize>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    tabBarExtraContent: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    tabPosition: PropType<import("./interface").TabPosition> | {
        type: PropType<import("./interface").TabPosition>;
        default?: any;
        required?: false;
    };
    type: PropType<import("./interface").TabType> | {
        type: PropType<import("./interface").TabType>;
        default?: any;
        required?: false;
    };
    dropdownClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    dropdownStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    deleteTabItem: PropType<(tabKey: string, event: MouseEvent) => void> | {
        type: PropType<(tabKey: string, event: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    handleKeyDown: PropType<(event: KeyboardEvent, itemKey: string, closable: boolean) => void> | {
        type: PropType<(event: KeyboardEvent, itemKey: string, closable: boolean) => void>;
        default?: any;
        required?: false;
    };
    more: PropType<number | {
        count: number;
        render?: () => VNode;
        dropdownProps?: DropdownProps;
    }> | {
        type: PropType<number | {
            count: number;
            render?: () => VNode;
            dropdownProps?: DropdownProps;
        }>;
        default?: any;
        required?: false;
    };
    onVisibleTabsChange: PropType<(visibleState: Map<string, boolean>) => void> | {
        type: PropType<(visibleState: Map<string, boolean>) => void>;
        default?: any;
        required?: false;
    };
    visibleTabsStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    arrowPosition: PropType<"both" | "end" | "start"> | {
        type: PropType<"both" | "end" | "start">;
        default?: any;
        required?: false;
    };
    renderArrow: PropType<(items: OverflowItem[], pos: "start" | "end", handleArrowClick: () => void, defaultNode: VueJsxNode) => VNode> | {
        type: PropType<(items: OverflowItem[], pos: "start" | "end", handleArrowClick: () => void, defaultNode: VueJsxNode) => VNode>;
        default?: any;
        required?: false;
    };
    dropdownProps: PropType<import("./interface").TabsDropDownProps> | {
        type: PropType<import("./interface").TabsDropDownProps>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    activeKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    collapsible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    list: PropType<PlainTab[]> | {
        type: PropType<PlainTab[]>;
        default?: any;
        required?: false;
    };
    onTabClick: PropType<(activeKey: string, event: MouseEvent) => void> | {
        type: PropType<(activeKey: string, event: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    showRestInDropdown: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<import("./interface").TabSize> | {
        type: PropType<import("./interface").TabSize>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    tabBarExtraContent: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    tabPosition: PropType<import("./interface").TabPosition> | {
        type: PropType<import("./interface").TabPosition>;
        default?: any;
        required?: false;
    };
    type: PropType<import("./interface").TabType> | {
        type: PropType<import("./interface").TabType>;
        default?: any;
        required?: false;
    };
    dropdownClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    dropdownStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    deleteTabItem: PropType<(tabKey: string, event: MouseEvent) => void> | {
        type: PropType<(tabKey: string, event: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    handleKeyDown: PropType<(event: KeyboardEvent, itemKey: string, closable: boolean) => void> | {
        type: PropType<(event: KeyboardEvent, itemKey: string, closable: boolean) => void>;
        default?: any;
        required?: false;
    };
    more: PropType<number | {
        count: number;
        render?: () => VNode;
        dropdownProps?: DropdownProps;
    }> | {
        type: PropType<number | {
            count: number;
            render?: () => VNode;
            dropdownProps?: DropdownProps;
        }>;
        default?: any;
        required?: false;
    };
    onVisibleTabsChange: PropType<(visibleState: Map<string, boolean>) => void> | {
        type: PropType<(visibleState: Map<string, boolean>) => void>;
        default?: any;
        required?: false;
    };
    visibleTabsStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    arrowPosition: PropType<"both" | "end" | "start"> | {
        type: PropType<"both" | "end" | "start">;
        default?: any;
        required?: false;
    };
    renderArrow: PropType<(items: OverflowItem[], pos: "start" | "end", handleArrowClick: () => void, defaultNode: VueJsxNode) => VNode> | {
        type: PropType<(items: OverflowItem[], pos: "start" | "end", handleArrowClick: () => void, defaultNode: VueJsxNode) => VNode>;
        default?: any;
        required?: false;
    };
    dropdownProps: PropType<import("./interface").TabsDropDownProps> | {
        type: PropType<import("./interface").TabsDropDownProps>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TabBar;
