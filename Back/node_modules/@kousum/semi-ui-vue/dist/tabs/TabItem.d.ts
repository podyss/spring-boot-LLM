import { TabType, TabSize, TabPosition } from './interface';
import { PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface TabItemProps {
    tab?: VueJsxNode | (() => VueJsxNode);
    icon?: VueJsxNode;
    size?: TabSize;
    type?: TabType;
    tabPosition?: TabPosition;
    selected?: boolean;
    closable?: boolean;
    disabled?: boolean;
    itemKey?: string;
    handleKeyDown?: (event: KeyboardEvent, itemKey: string, closable: boolean) => void;
    deleteTabItem?: (tabKey: string, event: MouseEvent) => void;
    onClick?: (itemKey: string, e: MouseEvent) => void;
    forwardRef?: any;
}
export declare const vuePropsType: CombineProps<TabItemProps>;
declare const TabItem: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    tab: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    size: PropType<TabSize> | {
        type: PropType<TabSize>;
        default?: any;
        required?: false;
    };
    type: PropType<TabType> | {
        type: PropType<TabType>;
        default?: any;
        required?: false;
    };
    tabPosition: PropType<TabPosition> | {
        type: PropType<TabPosition>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    itemKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    handleKeyDown: PropType<(event: KeyboardEvent, itemKey: string, closable: boolean) => void> | {
        type: PropType<(event: KeyboardEvent, itemKey: string, closable: boolean) => void>;
        default?: any;
        required?: false;
    };
    deleteTabItem: PropType<(tabKey: string, event: MouseEvent) => void> | {
        type: PropType<(tabKey: string, event: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(itemKey: string, e: MouseEvent) => void> | {
        type: PropType<(itemKey: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    tab: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    size: PropType<TabSize> | {
        type: PropType<TabSize>;
        default?: any;
        required?: false;
    };
    type: PropType<TabType> | {
        type: PropType<TabType>;
        default?: any;
        required?: false;
    };
    tabPosition: PropType<TabPosition> | {
        type: PropType<TabPosition>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    itemKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    handleKeyDown: PropType<(event: KeyboardEvent, itemKey: string, closable: boolean) => void> | {
        type: PropType<(event: KeyboardEvent, itemKey: string, closable: boolean) => void>;
        default?: any;
        required?: false;
    };
    deleteTabItem: PropType<(tabKey: string, event: MouseEvent) => void> | {
        type: PropType<(tabKey: string, event: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(itemKey: string, e: MouseEvent) => void> | {
        type: PropType<(itemKey: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TabItem;
