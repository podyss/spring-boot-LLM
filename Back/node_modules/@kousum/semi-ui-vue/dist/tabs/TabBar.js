import { defineComponent as X, useSlots as G, reactive as Q, onMounted as Y, watch as Z, ref as ee, createVNode as i, mergeProps as A, Fragment as K, isVNode as te } from "vue";
import * as s from "../PropTypes";
import { vuePropsMake as oe } from "../PropTypes";
import u from "classnames";
import { cssClasses as a } from '@douyinfe/semi-foundation/lib/es/tabs/constants';
import ne from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
import re from "../overflowList";
import N, { DropdownMenu as se, DropdownItem as le } from "../dropdown";
import D from "../button";
import { pick as ie, isEmpty as ae } from "lodash";
import { IconChevronDown as ce, IconChevronLeft as de, IconChevronRight as me } from "@kousum/semi-icons-vue";
import { getUuidv4 as ue } from '@douyinfe/semi-foundation/lib/es/utils/uuid';
import be from "./TabItem";
import ye from "../locale/localeConsumer";
function C(r) {
  return typeof r == "function" || Object.prototype.toString.call(r) === "[object Object]" && !te(r);
}
const fe = {
  activeKey: s.string,
  className: s.string,
  collapsible: s.bool,
  list: s.array,
  onTabClick: s.func,
  size: s.string,
  style: s.object,
  tabBarExtraContent: s.node,
  tabPosition: s.string,
  type: s.string,
  closable: s.bool,
  deleteTabItem: s.func,
  more: s.oneOfType([s.number, s.object]),
  handleKeyDown: s.func,
  showRestInDropdown: s.bool,
  dropdownClassName: s.string,
  dropdownStyle: s.object,
  onVisibleTabsChange: s.func,
  visibleTabsStyle: s.object,
  arrowPosition: s.string,
  renderArrow: s.func,
  dropdownProps: s.object
}, Te = oe(fe, {}), Ke = /* @__PURE__ */ X({
  props: {
    ...Te
  },
  name: "TabBar",
  setup(r, {
    attrs: Be
  }) {
    G();
    const b = Q({
      endInd: r.list.length,
      rePosKey: 0,
      startInd: 0,
      uuid: "",
      currentVisibleItems: []
    });
    Y(() => {
      b.uuid = ue();
    }), Z(() => r.activeKey, () => {
      r.collapsible && x();
    });
    function P(e) {
      return i("span", null, [e]);
    }
    function E() {
      const {
        tabBarExtraContent: e,
        type: t,
        size: o
      } = r, n = {
        float: "right"
      }, l = e && e.props ? e.props.style : {}, c = u(a.TABS_BAR_EXTRA, {
        [`${a.TABS_BAR}-${t}-extra`]: t,
        [`${a.TABS_BAR}-${t}-extra-${o}`]: o
      });
      if (e) {
        const d = {
          ...n,
          ...l
        };
        return i("div", {
          class: c,
          style: d,
          "x-semi-prop": "tabBarExtraContent"
        }, [e]);
      }
      return null;
    }
    const _ = (e, t) => {
      r.onTabClick(e, t);
    }, y = (e) => {
      const {
        size: t,
        type: o,
        deleteTabItem: n,
        handleKeyDown: l,
        tabPosition: c
      } = r, d = w(e.itemKey);
      return i(be, A(ie(e, ["disabled", "icon", "itemKey", "tab", "closable"]), {
        key: f(e.itemKey),
        selected: d,
        size: t,
        type: o,
        tabPosition: c,
        handleKeyDown: l,
        deleteTabItem: n,
        onClick: _
      }), null);
    }, I = ee(), R = (e, t = "nearest") => {
      const o = I.value.querySelector(`[data-uuid="${b.uuid}"] .${a.TABS_TAB}[data-scrollkey=${JSON.stringify(e)}]`);
      o == null || o.scrollIntoView({
        behavior: "smooth",
        block: t,
        inline: t
      });
    }, x = (e) => {
      const t = f(r.activeKey);
      R(t, e);
    }, L = (e) => e.map((t) => y(t)), $ = (e, t) => {
      const o = t === "start" ? e.pop() : e.shift();
      if (!o)
        return;
      const n = f(o.itemKey);
      R(n);
    }, M = (e, t, o) => {
      let n;
      const l = u({
        [`${a.TABS_BAR}-arrow-${o}`]: o,
        [`${a.TABS_BAR}-arrow`]: !0
      });
      if (ae(e))
        return i("div", {
          role: "presentation",
          class: l
        }, [i(D, {
          disabled: !0,
          icon: () => t,
          theme: "borderless"
        }, null)]);
      const {
        dropdownClassName: c,
        dropdownStyle: d,
        showRestInDropdown: k,
        dropdownProps: m
      } = r, {
        rePosKey: h
      } = b, T = !e.length, p = i(se, null, C(n = e.map((g) => {
        const {
          icon: W,
          tab: v,
          itemKey: S
        } = g, q = () => W ? P(g.icon) : null;
        return i(le, {
          key: S,
          onClick: (J) => _(S, J),
          active: w(S)
        }, {
          default: () => [q(), typeof v == "function" ? v() : v]
        });
      })) ? n : {
        default: () => [n]
      }), B = i("div", {
        role: "presentation",
        class: l,
        onClick: (g) => $(e, o)
      }, [i(D, {
        disabled: T,
        icon: () => t,
        theme: "borderless"
      }, null)]), F = u(c, {
        [`${a.TABS_BAR}-dropdown`]: !0
      }), U = (m == null ? void 0 : m[o]) ?? {};
      return i(K, null, [k ? i(N, A({
        className: F,
        clickToHide: !0,
        clickTriggerToHide: !0,
        key: `${h}-${o}`,
        position: o === "start" ? "bottomLeft" : "bottomRight",
        render: T ? null : p,
        showTick: !0,
        style: d,
        trigger: "hover",
        disableFocusListener: !0
      }, U), C(B) ? B : {
        default: () => [B]
      }) : B]);
    }, j = (e) => e.map((t, o) => {
      const n = o === 0 ? "start" : "end", l = o === 0 ? i(de, null, null) : i(me, null, null), c = M(t, l, n);
      return r.renderArrow ? r.renderArrow(t, n, () => $(t, n), c) : c;
    }), V = () => {
      const {
        list: e
      } = r, t = e.map((o) => {
        const {
          itemKey: n
        } = o;
        return {
          key: f(n),
          active: w(n),
          ...o
        };
      });
      return i(re, {
        items: t,
        overflowRenderDirection: r.arrowPosition,
        wrapperStyle: r.visibleTabsStyle,
        overflowRenderer: j,
        threshold: 0.5,
        renderMode: "scroll",
        className: `${a.TABS_BAR}-overflow-list`,
        visibleItemRenderer: y,
        onVisibleStateChange: (o) => {
          var l;
          const n = /* @__PURE__ */ new Map();
          o.forEach((c, d) => {
            n.set(O(d), c);
          }), (l = r.onVisibleTabsChange) == null || l.call(r, n);
        }
      }, null);
    }, w = (e) => e === r.activeKey, f = (e) => `${e}-bar`, O = (e) => e.replace(/-bar$/, ""), z = () => {
      const {
        list: e,
        more: t
      } = r;
      let o = [], n = i("div", {
        class: u({
          [`${a.TABS_BAR}-more-trigger`]: !0,
          [`${a.TABS_BAR}-more-trigger-${r.type}`]: !0
        })
      }, [i(ye, {
        componentName: "Tabs"
      }, {
        default: (c, d) => i("div", {
          class: `${a.TABS_BAR}-more-trigger-content`
        }, [i("div", null, [c.more]), i(ce, {
          className: `${a.TABS_BAR}-more-trigger-content-icon`
        }, null)])
      })]), l;
      if (typeof t == "number")
        l = e.length - Math.min(t, e.length), o = e.slice(0, l).map((c) => y(c));
      else if (typeof t == "object")
        l = e.length - Math.min(t.count, e.length), o = e.slice(0, l).map((c) => y(c)), t.render && (n = t.render());
      else if (t !== void 0)
        throw new Error("[Semi Tabs]: invalid tab props format: more");
      return i(K, null, [o, H(e.slice(l), t == null ? void 0 : t.dropdownProps, n)]);
    }, H = (e, t, o) => i(N, A({
      trigger: "hover",
      showTick: !0,
      position: "bottomLeft",
      className: `${a.TABS_BAR}-more-dropdown-${r.type}`,
      clickToHide: !0,
      menu: e.map((n) => ({
        node: "item",
        name: n.tab,
        icon: n.icon,
        onClick: (l) => r.onTabClick(n.itemKey, l),
        active: r.activeKey === n.itemKey
      }))
    }, t), C(o) ? o : {
      default: () => [o]
    });
    return () => {
      const {
        type: e,
        style: t,
        className: o,
        list: n,
        tabPosition: l,
        more: c,
        collapsible: d,
        handleKeyDown: k,
        ...m
      } = r, h = u(o, {
        [a.TABS_BAR]: !0,
        [a.TABS_BAR_LINE]: e === "line",
        [a.TABS_BAR_CARD]: e === "card",
        [a.TABS_BAR_BUTTON]: e === "button",
        [a.TABS_BAR_SLASH]: e === "slash",
        [`${a.TABS_BAR}-${l}`]: l,
        [`${a.TABS_BAR}-collapse`]: d
      }), T = E(), p = d ? V() : c ? z() : L(n);
      return i("div", A({
        role: "tablist",
        ref: I,
        "aria-orientation": l === "left" ? "vertical" : "horizontal",
        class: h,
        style: t
      }, ne(m), {
        "data-uuid": b.uuid
      }), [p, T]);
    };
  }
});
export {
  Ke as default,
  Te as vuePropsType
};
//# sourceMappingURL=TabBar.js.map
