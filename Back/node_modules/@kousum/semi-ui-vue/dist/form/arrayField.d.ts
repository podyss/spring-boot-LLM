export interface ArrayFieldProps {
    initValue?: any[];
    field?: string;
}
export interface ArrayFieldChildrenProps {
    arrayFields: {
        key: string;
        field: string;
        remove: () => void;
    }[];
    add: () => void;
    addWithInitValue: (lineObject: Record<string, any>) => void;
}
export interface ArrayFieldState {
    keys: string[];
}
export declare const vuePropsType: {
    initValue: ArrayConstructor;
    field: StringConstructor;
};
declare const ArrayFieldComponent: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    initValue: ArrayConstructor;
    field: StringConstructor;
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    initValue: ArrayConstructor;
    field: StringConstructor;
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ArrayFieldComponent;
