declare const FormInput: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    role: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    addonBefore: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    addonAfter: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    mode: import("vue").PropType<"password"> | {
        type: import("vue").PropType<"password">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    readonly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hideSuffix: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("../input/index").InputSize> | {
        type: import("vue").PropType<import("../input/index").InputSize>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<import("../input/index").ValidateStatus> | {
        type: import("vue").PropType<import("../input/index").ValidateStatus>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: string, e: HashChangeEvent) => void> | {
        type: import("vue").PropType<(value: string, e: HashChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onPaste: import("vue").PropType<(e: ClipboardEvent) => void> | {
        type: import("vue").PropType<(e: ClipboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onInput: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    getValueLength: import("vue").PropType<(value: string) => number> | {
        type: import("vue").PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    minlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onlyBorder: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    onCompositionstart: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onCompositionend: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    role: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    addonBefore: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    addonAfter: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    mode: import("vue").PropType<"password"> | {
        type: import("vue").PropType<"password">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    readonly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hideSuffix: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("../input/index").InputSize> | {
        type: import("vue").PropType<import("../input/index").InputSize>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<import("../input/index").ValidateStatus> | {
        type: import("vue").PropType<import("../input/index").ValidateStatus>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: string, e: HashChangeEvent) => void> | {
        type: import("vue").PropType<(value: string, e: HashChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onPaste: import("vue").PropType<(e: ClipboardEvent) => void> | {
        type: import("vue").PropType<(e: ClipboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onInput: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    getValueLength: import("vue").PropType<(value: string) => number> | {
        type: import("vue").PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    minlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onlyBorder: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    onCompositionstart: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onCompositionend: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormInputNumber: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    autofocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    formatter: import("vue").PropType<(value: number | string) => string> | {
        type: import("vue").PropType<(value: number | string) => string>;
        default?: any;
        required?: false;
    };
    forwardedRef: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    hideButtons: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    innerButtons: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    keepFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    min: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    parser: import("vue").PropType<(value: string) => string> | {
        type: import("vue").PropType<(value: string) => string>;
        default?: any;
        required?: false;
    };
    precision: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    pressInterval: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    pressTimeout: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    shiftStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<"small" | "default" | "large"> | {
        type: import("vue").PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    step: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: number | string, e?: any) => void> | {
        type: import("vue").PropType<(value: number | string, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onDownClick: import("vue").PropType<(value: string, e: MouseEvent) => void> | {
        type: import("vue").PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onNumberChange: import("vue").PropType<(value: number, e?: any) => void> | {
        type: import("vue").PropType<(value: number, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onUpClick: import("vue").PropType<(value: string, e: MouseEvent) => void> | {
        type: import("vue").PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    role: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    addonBefore: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    addonAfter: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    mode: import("vue").PropType<"password"> | {
        type: import("vue").PropType<"password">;
        default?: any;
        required?: false;
    };
    readonly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    hideSuffix: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<import("../input/index").ValidateStatus> | {
        type: import("vue").PropType<import("../input/index").ValidateStatus>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onPaste: import("vue").PropType<(e: ClipboardEvent) => void> | {
        type: import("vue").PropType<(e: ClipboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onInput: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    getValueLength: import("vue").PropType<(value: string) => number> | {
        type: import("vue").PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    minlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onlyBorder: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    onCompositionstart: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onCompositionend: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    autofocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    formatter: import("vue").PropType<(value: number | string) => string> | {
        type: import("vue").PropType<(value: number | string) => string>;
        default?: any;
        required?: false;
    };
    forwardedRef: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    hideButtons: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    innerButtons: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    keepFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    min: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    parser: import("vue").PropType<(value: string) => string> | {
        type: import("vue").PropType<(value: string) => string>;
        default?: any;
        required?: false;
    };
    precision: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    pressInterval: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    pressTimeout: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    shiftStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<"small" | "default" | "large"> | {
        type: import("vue").PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    step: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: number | string, e?: any) => void> | {
        type: import("vue").PropType<(value: number | string, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onDownClick: import("vue").PropType<(value: string, e: MouseEvent) => void> | {
        type: import("vue").PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onNumberChange: import("vue").PropType<(value: number, e?: any) => void> | {
        type: import("vue").PropType<(value: number, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onUpClick: import("vue").PropType<(value: string, e: MouseEvent) => void> | {
        type: import("vue").PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    role: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    addonBefore: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    addonAfter: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    mode: import("vue").PropType<"password"> | {
        type: import("vue").PropType<"password">;
        default?: any;
        required?: false;
    };
    readonly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    hideSuffix: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<import("../input/index").ValidateStatus> | {
        type: import("vue").PropType<import("../input/index").ValidateStatus>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onPaste: import("vue").PropType<(e: ClipboardEvent) => void> | {
        type: import("vue").PropType<(e: ClipboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onInput: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    getValueLength: import("vue").PropType<(value: string) => number> | {
        type: import("vue").PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    minlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onlyBorder: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    onCompositionstart: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onCompositionend: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormTextArea: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    autosize: import("vue").PropType<boolean | import("../input/textArea").AutosizeRow> | {
        type: import("vue").PropType<boolean | import("../input/textArea").AutosizeRow>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rows: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    cols: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxCount: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    readonly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showCounter: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: string, e: Event) => void> | {
        type: import("vue").PropType<(value: string, e: Event) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onInput: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onPressEnter: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onPaste: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onResize: import("vue").PropType<(data: {
        height: number;
    }) => void> | {
        type: import("vue").PropType<(data: {
            height: number;
        }) => void>;
        default?: any;
        required?: false;
    };
    getValueLength: import("vue").PropType<(value: string) => number> | {
        type: import("vue").PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    disabledEnterStartNewLine: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    minlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    class: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'onUpdate:value': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    autosize: import("vue").PropType<boolean | import("../input/textArea").AutosizeRow> | {
        type: import("vue").PropType<boolean | import("../input/textArea").AutosizeRow>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rows: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    cols: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxCount: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    readonly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showCounter: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: string, e: Event) => void> | {
        type: import("vue").PropType<(value: string, e: Event) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onInput: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onPressEnter: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onPaste: import("vue").PropType<(e: Event) => void> | {
        type: import("vue").PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onResize: import("vue").PropType<(data: {
        height: number;
    }) => void> | {
        type: import("vue").PropType<(data: {
            height: number;
        }) => void>;
        default?: any;
        required?: false;
    };
    getValueLength: import("vue").PropType<(value: string) => number> | {
        type: import("vue").PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    disabledEnterStartNewLine: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    minlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    class: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'onUpdate:value': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormSelect: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoClearSearchValue: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    arrowIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string | number | any[] | Record<string, any>> | {
        type: import("vue").PropType<string | number | any[] | Record<string, any>>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number | any[] | Record<string, any>> | {
        type: import("vue").PropType<string | number | any[] | Record<string, any>>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: import("../select/index").SelectProps["value"]) => void> | {
        type: import("vue").PropType<(value: import("../select/index").SelectProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    multiple: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    filter: import("vue").PropType<boolean | ((inpueValue: string, option: import("../select/option").OptionProps) => boolean)> | {
        type: import("vue").PropType<boolean | ((inpueValue: string, option: import("../select/option").OptionProps) => boolean)>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxTagCount: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxHeight: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("../select/index").SelectSize> | {
        type: import("vue").PropType<import("../select/index").SelectSize>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    expandRestTagsOnClick: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onDropdownVisibleChange: import("vue").PropType<(visible: boolean) => void> | {
        type: import("vue").PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    onSearch: import("vue").PropType<(value: string, event: KeyboardEvent | MouseEvent) => void> | {
        type: import("vue").PropType<(value: string, event: KeyboardEvent | MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    dropdownClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dropdownStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    ellipsisTrigger: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    outerTopSlot: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    innerTopSlot: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    outerBottomSlot: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    innerBottomSlot: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    optionList: import("vue").PropType<import("../select/option").OptionProps[]> | {
        type: import("vue").PropType<import("../select/option").OptionProps[]>;
        default?: any;
        required?: false;
    };
    dropdownMatchSelectWidth: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    loading: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    defaultActiveFirstOption: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChangeWithObject: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    searchPosition: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    searchPlaceholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    inputProps: import("vue").PropType<import("utility-types").Subtract<import("../input/index").InputProps, {
        value?: import("../input/index").InputProps["value"];
        onFocus?: import("../input/index").InputProps["onFocus"];
        onChange?: import("../input/index").InputProps["onChange"];
    }>> | {
        type: import("vue").PropType<import("utility-types").Subtract<import("../input/index").InputProps, {
            value?: import("../input/index").InputProps["value"];
            onFocus?: import("../input/index").InputProps["onFocus"];
            onChange?: import("../input/index").InputProps["onChange"];
        }>>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showArrow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderSelectedItem: import("vue").PropType<import("../select/index").RenderSelectedItemFn> | {
        type: import("vue").PropType<import("../select/index").RenderSelectedItemFn>;
        default?: any;
        required?: false;
    };
    renderCreateItem: import("vue").PropType<(inputValue: import("../select/option").OptionProps["value"], focus: boolean, style?: import("vue").CSSProperties) => import("vue").VNode> | {
        type: import("vue").PropType<(inputValue: import("../select/option").OptionProps["value"], focus: boolean, style?: import("vue").CSSProperties) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    renderOptionItem: import("vue").PropType<(props: import("../select/index").optionRenderProps) => import("vue").VNode> | {
        type: import("vue").PropType<(props: import("../select/index").optionRenderProps) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    clickToHide: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onExceed: import("vue").PropType<(option: import("../select/option").OptionProps) => void> | {
        type: import("vue").PropType<(option: import("../select/option").OptionProps) => void>;
        default?: any;
        required?: false;
    };
    onCreate: import("vue").PropType<(option: import("../select/option").OptionProps) => void> | {
        type: import("vue").PropType<(option: import("../select/option").OptionProps) => void>;
        default?: any;
        required?: false;
    };
    remote: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onDeselect: import("vue").PropType<(value: import("../select/index").SelectProps["value"], option: Record<string, any>) => void> | {
        type: import("vue").PropType<(value: import("../select/index").SelectProps["value"], option: Record<string, any>) => void>;
        default?: any;
        required?: false;
    };
    onSelect: import("vue").PropType<(value: import("../select/index").SelectProps["value"], option: Record<string, any>) => void> | {
        type: import("vue").PropType<(value: import("../select/index").SelectProps["value"], option: Record<string, any>) => void>;
        default?: any;
        required?: false;
    };
    allowCreate: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props?: import("../select/index").TriggerRenderProps) => import("vue").VNode> | {
        type: import("vue").PropType<(props?: import("../select/index").TriggerRenderProps) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<() => void> | {
        type: import("vue").PropType<() => void>;
        default?: any;
        required?: false;
    };
    virtualize: import("vue").PropType<import("../select/index").virtualListProps> | {
        type: import("vue").PropType<import("../select/index").virtualListProps>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onListScroll: import("vue").PropType<(e: import("@douyinfe/semi-foundation/lib/es/utils/Event").default) => void> | {
        type: import("vue").PropType<(e: import("@douyinfe/semi-foundation/lib/es/utils/Event").default) => void>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showRestTagsPopover: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    restTagsPopoverProps: import("vue").PropType<import("../popover").PopoverProps> | {
        type: import("vue").PropType<import("../popover").PopoverProps>;
        default?: any;
        required?: false;
    };
    isInInputGroup: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<import("../_base/base").Motion> | {
        type: import("vue").PropType<import("../_base/base").Motion>;
        default?: any;
        required?: false;
    };
    spacing: import("vue").PropType<number | {
        x: number;
        y: number;
    }> | {
        type: import("vue").PropType<number | {
            x: number;
            y: number;
        }>;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoClearSearchValue: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    arrowIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string | number | any[] | Record<string, any>> | {
        type: import("vue").PropType<string | number | any[] | Record<string, any>>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number | any[] | Record<string, any>> | {
        type: import("vue").PropType<string | number | any[] | Record<string, any>>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: import("../select/index").SelectProps["value"]) => void> | {
        type: import("vue").PropType<(value: import("../select/index").SelectProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    multiple: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    filter: import("vue").PropType<boolean | ((inpueValue: string, option: import("../select/option").OptionProps) => boolean)> | {
        type: import("vue").PropType<boolean | ((inpueValue: string, option: import("../select/option").OptionProps) => boolean)>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxTagCount: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxHeight: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("../select/index").SelectSize> | {
        type: import("vue").PropType<import("../select/index").SelectSize>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    expandRestTagsOnClick: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onDropdownVisibleChange: import("vue").PropType<(visible: boolean) => void> | {
        type: import("vue").PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    onSearch: import("vue").PropType<(value: string, event: KeyboardEvent | MouseEvent) => void> | {
        type: import("vue").PropType<(value: string, event: KeyboardEvent | MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    dropdownClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dropdownStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    ellipsisTrigger: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    outerTopSlot: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    innerTopSlot: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    outerBottomSlot: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    innerBottomSlot: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    optionList: import("vue").PropType<import("../select/option").OptionProps[]> | {
        type: import("vue").PropType<import("../select/option").OptionProps[]>;
        default?: any;
        required?: false;
    };
    dropdownMatchSelectWidth: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    loading: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    defaultActiveFirstOption: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChangeWithObject: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    searchPosition: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    searchPlaceholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    inputProps: import("vue").PropType<import("utility-types").Subtract<import("../input/index").InputProps, {
        value?: import("../input/index").InputProps["value"];
        onFocus?: import("../input/index").InputProps["onFocus"];
        onChange?: import("../input/index").InputProps["onChange"];
    }>> | {
        type: import("vue").PropType<import("utility-types").Subtract<import("../input/index").InputProps, {
            value?: import("../input/index").InputProps["value"];
            onFocus?: import("../input/index").InputProps["onFocus"];
            onChange?: import("../input/index").InputProps["onChange"];
        }>>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showArrow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderSelectedItem: import("vue").PropType<import("../select/index").RenderSelectedItemFn> | {
        type: import("vue").PropType<import("../select/index").RenderSelectedItemFn>;
        default?: any;
        required?: false;
    };
    renderCreateItem: import("vue").PropType<(inputValue: import("../select/option").OptionProps["value"], focus: boolean, style?: import("vue").CSSProperties) => import("vue").VNode> | {
        type: import("vue").PropType<(inputValue: import("../select/option").OptionProps["value"], focus: boolean, style?: import("vue").CSSProperties) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    renderOptionItem: import("vue").PropType<(props: import("../select/index").optionRenderProps) => import("vue").VNode> | {
        type: import("vue").PropType<(props: import("../select/index").optionRenderProps) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    clickToHide: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onExceed: import("vue").PropType<(option: import("../select/option").OptionProps) => void> | {
        type: import("vue").PropType<(option: import("../select/option").OptionProps) => void>;
        default?: any;
        required?: false;
    };
    onCreate: import("vue").PropType<(option: import("../select/option").OptionProps) => void> | {
        type: import("vue").PropType<(option: import("../select/option").OptionProps) => void>;
        default?: any;
        required?: false;
    };
    remote: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onDeselect: import("vue").PropType<(value: import("../select/index").SelectProps["value"], option: Record<string, any>) => void> | {
        type: import("vue").PropType<(value: import("../select/index").SelectProps["value"], option: Record<string, any>) => void>;
        default?: any;
        required?: false;
    };
    onSelect: import("vue").PropType<(value: import("../select/index").SelectProps["value"], option: Record<string, any>) => void> | {
        type: import("vue").PropType<(value: import("../select/index").SelectProps["value"], option: Record<string, any>) => void>;
        default?: any;
        required?: false;
    };
    allowCreate: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props?: import("../select/index").TriggerRenderProps) => import("vue").VNode> | {
        type: import("vue").PropType<(props?: import("../select/index").TriggerRenderProps) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<() => void> | {
        type: import("vue").PropType<() => void>;
        default?: any;
        required?: false;
    };
    virtualize: import("vue").PropType<import("../select/index").virtualListProps> | {
        type: import("vue").PropType<import("../select/index").virtualListProps>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onListScroll: import("vue").PropType<(e: import("@douyinfe/semi-foundation/lib/es/utils/Event").default) => void> | {
        type: import("vue").PropType<(e: import("@douyinfe/semi-foundation/lib/es/utils/Event").default) => void>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showRestTagsPopover: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    restTagsPopoverProps: import("vue").PropType<import("../popover").PopoverProps> | {
        type: import("vue").PropType<import("../popover").PopoverProps>;
        default?: any;
        required?: false;
    };
    isInInputGroup: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<import("../_base/base").Motion> | {
        type: import("vue").PropType<import("../_base/base").Motion>;
        default?: any;
        required?: false;
    };
    spacing: import("vue").PropType<number | {
        x: number;
        y: number;
    }> | {
        type: import("vue").PropType<number | {
            x: number;
            y: number;
        }>;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormSelectOption: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    value: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    label: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    children: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showTick: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    selected: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    empty: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | (() => import("vue").VNode)> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[] | (() => import("vue").VNode)>;
        default?: any;
        required?: false;
    };
    inputValue: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    renderOptionItem: import("vue").PropType<(...args: any) => import("vue").VNode> | {
        type: import("vue").PropType<(...args: any) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    focused: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onSelect: import("vue").PropType<(opts: import("../select/option").OptionProps, e: MouseEvent) => any> | {
        type: import("vue").PropType<(opts: import("../select/option").OptionProps, e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    _scrollIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    _selected: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    _show: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    semiOptionId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    key_: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    _parentGroup: import("vue").PropType<import("../select/optionGroup").OptionGroupProps> | {
        type: import("vue").PropType<import("../select/optionGroup").OptionGroupProps>;
        default?: any;
        required?: false;
    };
    _keyInOptionList: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    _keyInJsx: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    _inputCreateOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    optionRest: import("vue").PropType<Record<string, any>> | {
        type: import("vue").PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    value: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    label: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    children: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showTick: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    selected: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    empty: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | (() => import("vue").VNode)> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[] | (() => import("vue").VNode)>;
        default?: any;
        required?: false;
    };
    inputValue: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    renderOptionItem: import("vue").PropType<(...args: any) => import("vue").VNode> | {
        type: import("vue").PropType<(...args: any) => import("vue").VNode>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    focused: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onSelect: import("vue").PropType<(opts: import("../select/option").OptionProps, e: MouseEvent) => any> | {
        type: import("vue").PropType<(opts: import("../select/option").OptionProps, e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    _scrollIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    _selected: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    _show: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    semiOptionId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    key_: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    _parentGroup: import("vue").PropType<import("../select/optionGroup").OptionGroupProps> | {
        type: import("vue").PropType<import("../select/optionGroup").OptionGroupProps>;
        default?: any;
        required?: false;
    };
    _keyInOptionList: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    _keyInJsx: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    _inputCreateOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    optionRest: import("vue").PropType<Record<string, any>> | {
        type: import("vue").PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
type FormSelectType = typeof FormSelect & {
    Option: typeof FormSelectOption;
};
declare const FormSelectBase: FormSelectType;
declare const FormSelectOptionGroup: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    children: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    label: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    children: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    label: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: import("vue").PropType<string | number | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormCheckboxGroup: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<any[]> | {
        type: import("vue").PropType<any[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    options: import("vue").PropType<any[]> | {
        type: import("vue").PropType<any[]>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<any[]> | {
        type: import("vue").PropType<any[]>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: any[]) => void> | {
        type: import("vue").PropType<(value: any[]) => void>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    direction: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxDirection> | {
        type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxDirection>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxType> | {
        type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxType>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<any[]> | {
        type: import("vue").PropType<any[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    options: import("vue").PropType<any[]> | {
        type: import("vue").PropType<any[]>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<any[]> | {
        type: import("vue").PropType<any[]>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: any[]) => void> | {
        type: import("vue").PropType<(value: any[]) => void>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    direction: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxDirection> | {
        type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxDirection>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxType> | {
        type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxType>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormCheckbox: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(e: import("../checkbox/checkbox").CheckboxEvent) => any> | {
        type: import("vue").PropType<(e: import("../checkbox/checkbox").CheckboxEvent) => any>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    extra: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    role: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    tabIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    addonId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxType> | {
        type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxType>;
        default?: any;
        required?: false;
    };
    index: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    class: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultChecked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    indeterminate: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(e: import("../checkbox/checkbox").CheckboxEvent) => any> | {
        type: import("vue").PropType<(e: import("../checkbox/checkbox").CheckboxEvent) => any>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    extra: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    role: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    tabIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    addonId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxType> | {
        type: import("vue").PropType<import("../checkbox/checkboxGroup").CheckboxType>;
        default?: any;
        required?: false;
    };
    index: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    class: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultChecked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    indeterminate: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormRadioGroup: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    defaultValue: import("vue").PropType<string | number | boolean> | {
        type: import("vue").PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    options: import("vue").PropType<import("../radio/radioGroup").Options> | {
        type: import("vue").PropType<import("../radio/radioGroup").Options>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number | boolean> | {
        type: import("vue").PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(event: import("@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation").RadioChangeEvent) => void> | {
        type: import("vue").PropType<(event: import("@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation").RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    direction: import("vue").PropType<"horizontal" | "vertical"> | {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    mode: import("vue").PropType<"" | "advanced"> | {
        type: import("vue").PropType<"" | "advanced">;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../radio/radio").RadioType> | {
        type: import("vue").PropType<import("../radio/radio").RadioType>;
        default?: any;
        required?: false;
    };
    buttonSize: import("vue").PropType<"small" | "large" | "middle"> | {
        type: import("vue").PropType<"small" | "large" | "middle">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-describedby': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'onUpdate:value': import("vue").PropType<(v: any) => void> | {
        type: import("vue").PropType<(v: any) => void>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    defaultValue: import("vue").PropType<string | number | boolean> | {
        type: import("vue").PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    options: import("vue").PropType<import("../radio/radioGroup").Options> | {
        type: import("vue").PropType<import("../radio/radioGroup").Options>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number | boolean> | {
        type: import("vue").PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(event: import("@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation").RadioChangeEvent) => void> | {
        type: import("vue").PropType<(event: import("@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation").RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    direction: import("vue").PropType<"horizontal" | "vertical"> | {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    mode: import("vue").PropType<"" | "advanced"> | {
        type: import("vue").PropType<"" | "advanced">;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../radio/radio").RadioType> | {
        type: import("vue").PropType<import("../radio/radio").RadioType>;
        default?: any;
        required?: false;
    };
    buttonSize: import("vue").PropType<"small" | "large" | "middle"> | {
        type: import("vue").PropType<"small" | "large" | "middle">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-describedby': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'onUpdate:value': import("vue").PropType<(v: any) => void> | {
        type: import("vue").PropType<(v: any) => void>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormRadio: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultChecked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number | boolean> | {
        type: import("vue").PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    displayMode: import("vue").PropType<import("../radio/radio").RadioDisplayMode> | {
        type: import("vue").PropType<import("../radio/radio").RadioDisplayMode>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(e: import("@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation").RadioChangeEvent) => void> | {
        type: import("vue").PropType<(e: import("@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation").RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<(e: any) => void> | {
        type: import("vue").PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onMouseLeave: import("vue").PropType<(e: any) => void> | {
        type: import("vue").PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    mode: import("vue").PropType<"" | "advanced"> | {
        type: import("vue").PropType<"" | "advanced">;
        default?: any;
        required?: false;
    };
    extra: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    addonStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    addonClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../radio/radio").RadioType> | {
        type: import("vue").PropType<import("../radio/radio").RadioType>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    addonId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    name: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultChecked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string | number | boolean> | {
        type: import("vue").PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    displayMode: import("vue").PropType<import("../radio/radio").RadioDisplayMode> | {
        type: import("vue").PropType<import("../radio/radio").RadioDisplayMode>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(e: import("@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation").RadioChangeEvent) => void> | {
        type: import("vue").PropType<(e: import("@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation").RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<(e: any) => void> | {
        type: import("vue").PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onMouseLeave: import("vue").PropType<(e: any) => void> | {
        type: import("vue").PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    mode: import("vue").PropType<"" | "advanced"> | {
        type: import("vue").PropType<"" | "advanced">;
        default?: any;
        required?: false;
    };
    extra: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    addonStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    addonClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../radio/radio").RadioType> | {
        type: import("vue").PropType<import("../radio/radio").RadioType>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    addonId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    name: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormDatePicker: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    timePickerOpts: import("vue").PropType<import("../timePicker/TimePicker").TimePickerProps> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").TimePickerProps>;
        default?: any;
        required?: false;
    };
    bottomSlot: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)> | {
        type: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    topSlot: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)> | {
        type: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    rightSlot: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)> | {
        type: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    leftSlot: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)> | {
        type: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    renderDate: import("vue").PropType<(dayNumber?: number, fullDate?: string) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(dayNumber?: number, fullDate?: string) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderFullDate: import("vue").PropType<(dayNumber?: number, fullDate?: string, dayStatus?: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DayStatusType) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(dayNumber?: number, fullDate?: string, dayStatus?: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DayStatusType) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props: import("../datePicker/datePicker").DatePickerProps) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(props: import("../datePicker/datePicker").DatePickerProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: MouseEvent, rangeType: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").RangeType) => void> | {
        type: import("vue").PropType<(e: MouseEvent, rangeType: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").RangeType) => void>;
        default?: any;
        required?: false;
    };
    onPresetClick: import("vue").PropType<(item: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetType, e: MouseEvent) => void> | {
        type: import("vue").PropType<(item: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetType, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onClickOutSide: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    locale: import("vue").PropType<{
        placeholder: {
            date: string;
            dateTime: string;
            dateRange: [string, string];
            dateTimeRange: [string, string];
            monthRange: [string, string];
        };
        presets: string;
        footer: {
            confirm: string;
            cancel: string;
        };
        selectDate: string;
        selectTime: string;
        year: string;
        month: string;
        day: string;
        monthText: string;
        months: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        fullMonths: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        weeks: {
            Mon: string;
            Tue: string;
            Wed: string;
            Thu: string;
            Fri: string;
            Sat: string;
            Sun: string;
        };
        localeFormatToken: {
            FORMAT_SWITCH_DATE: string;
        };
    }> | {
        type: import("vue").PropType<{
            placeholder: {
                date: string;
                dateTime: string;
                dateRange: [string, string];
                dateTimeRange: [string, string];
                monthRange: [string, string];
            };
            presets: string;
            footer: {
                confirm: string;
                cancel: string;
            };
            selectDate: string;
            selectTime: string;
            year: string;
            month: string;
            day: string;
            monthText: string;
            months: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            fullMonths: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            weeks: {
                Mon: string;
                Tue: string;
                Wed: string;
                Thu: string;
                Fri: string;
                Sat: string;
                Sun: string;
            };
            localeFormatToken: {
                FORMAT_SWITCH_DATE: string;
            };
        }>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: import("vue").PropType<Locale> | {
        type: import("vue").PropType<Locale>;
        default?: any;
        required?: false;
    };
    yearAndMonthOpts: import("vue").PropType<import("../scrollList/scrollItem").ScrollItemProps<any>> | {
        type: import("vue").PropType<import("../scrollList/scrollItem").ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoSwitchDate: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultPickerValue: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    density: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DensityType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DensityType>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledDate: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledDateType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledDateType>;
        default?: any;
        required?: false;
    };
    disabledTime: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledTimeType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledTimeType>;
        default?: any;
        required?: false;
    };
    dropdownClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dropdownStyle: import("vue").PropType<Record<string, any>> | {
        type: import("vue").PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    endDateOffset: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType>;
        default?: any;
        required?: false;
    };
    format: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    inputReadOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<Record<string, any>> | {
        type: import("vue").PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    multiple: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    needConfirm: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    open: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string | string[]> | {
        type: import("vue").PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    presets: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetsType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetsType>;
        default?: any;
        required?: false;
    };
    presetPosition: import("vue").PropType<"bottom" | "left" | "right" | "top"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top">;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<"small" | "default" | "large"> | {
        type: import("vue").PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    spacing: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    startDateOffset: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<string | boolean> | {
        type: import("vue").PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<Record<string, any>> | {
        type: import("vue").PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    timeZone: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").Type> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").Type>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    weekStartsOn: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    syncSwitchMonth: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledTimePicker: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    localeCode: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    insetInput: import("vue").PropType<boolean | import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputProps> | {
        type: import("vue").PropType<boolean | import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputProps>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onCancel: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnCancelType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnCancelType>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnChangeType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnChangeType>;
        default?: any;
        required?: false;
    };
    onOpenChange: import("vue").PropType<(status: boolean) => void> | {
        type: import("vue").PropType<(status: boolean) => void>;
        default?: any;
        required?: false;
    };
    onPanelChange: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnPanelChangeType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnPanelChangeType>;
        default?: any;
        required?: false;
    };
    onConfirm: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnConfirmType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnConfirmType>;
        default?: any;
        required?: false;
    };
    startYear: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    endYear: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    timePickerOpts: import("vue").PropType<import("../timePicker/TimePicker").TimePickerProps> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").TimePickerProps>;
        default?: any;
        required?: false;
    };
    bottomSlot: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)> | {
        type: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    topSlot: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)> | {
        type: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    rightSlot: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)> | {
        type: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    leftSlot: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)> | {
        type: import("vue").PropType<import("../interface").VueJsxNode | (() => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    renderDate: import("vue").PropType<(dayNumber?: number, fullDate?: string) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(dayNumber?: number, fullDate?: string) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderFullDate: import("vue").PropType<(dayNumber?: number, fullDate?: string, dayStatus?: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DayStatusType) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(dayNumber?: number, fullDate?: string, dayStatus?: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DayStatusType) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props: import("../datePicker/datePicker").DatePickerProps) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(props: import("../datePicker/datePicker").DatePickerProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: MouseEvent, rangeType: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").RangeType) => void> | {
        type: import("vue").PropType<(e: MouseEvent, rangeType: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").RangeType) => void>;
        default?: any;
        required?: false;
    };
    onPresetClick: import("vue").PropType<(item: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetType, e: MouseEvent) => void> | {
        type: import("vue").PropType<(item: import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetType, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onClickOutSide: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    locale: import("vue").PropType<{
        placeholder: {
            date: string;
            dateTime: string;
            dateRange: [string, string];
            dateTimeRange: [string, string];
            monthRange: [string, string];
        };
        presets: string;
        footer: {
            confirm: string;
            cancel: string;
        };
        selectDate: string;
        selectTime: string;
        year: string;
        month: string;
        day: string;
        monthText: string;
        months: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        fullMonths: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        weeks: {
            Mon: string;
            Tue: string;
            Wed: string;
            Thu: string;
            Fri: string;
            Sat: string;
            Sun: string;
        };
        localeFormatToken: {
            FORMAT_SWITCH_DATE: string;
        };
    }> | {
        type: import("vue").PropType<{
            placeholder: {
                date: string;
                dateTime: string;
                dateRange: [string, string];
                dateTimeRange: [string, string];
                monthRange: [string, string];
            };
            presets: string;
            footer: {
                confirm: string;
                cancel: string;
            };
            selectDate: string;
            selectTime: string;
            year: string;
            month: string;
            day: string;
            monthText: string;
            months: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            fullMonths: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            weeks: {
                Mon: string;
                Tue: string;
                Wed: string;
                Thu: string;
                Fri: string;
                Sat: string;
                Sun: string;
            };
            localeFormatToken: {
                FORMAT_SWITCH_DATE: string;
            };
        }>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: import("vue").PropType<Locale> | {
        type: import("vue").PropType<Locale>;
        default?: any;
        required?: false;
    };
    yearAndMonthOpts: import("vue").PropType<import("../scrollList/scrollItem").ScrollItemProps<any>> | {
        type: import("vue").PropType<import("../scrollList/scrollItem").ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoSwitchDate: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultPickerValue: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    density: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DensityType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DensityType>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledDate: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledDateType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledDateType>;
        default?: any;
        required?: false;
    };
    disabledTime: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledTimeType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledTimeType>;
        default?: any;
        required?: false;
    };
    dropdownClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dropdownStyle: import("vue").PropType<Record<string, any>> | {
        type: import("vue").PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    endDateOffset: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType>;
        default?: any;
        required?: false;
    };
    format: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    inputReadOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<Record<string, any>> | {
        type: import("vue").PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    multiple: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    needConfirm: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    open: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string | string[]> | {
        type: import("vue").PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    presets: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetsType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetsType>;
        default?: any;
        required?: false;
    };
    presetPosition: import("vue").PropType<"bottom" | "left" | "right" | "top"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top">;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<"small" | "default" | "large"> | {
        type: import("vue").PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    spacing: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    startDateOffset: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<string | boolean> | {
        type: import("vue").PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<Record<string, any>> | {
        type: import("vue").PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    timeZone: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").Type> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").Type>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    weekStartsOn: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    syncSwitchMonth: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledTimePicker: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    localeCode: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    insetInput: import("vue").PropType<boolean | import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputProps> | {
        type: import("vue").PropType<boolean | import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputProps>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onCancel: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnCancelType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnCancelType>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnChangeType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnChangeType>;
        default?: any;
        required?: false;
    };
    onOpenChange: import("vue").PropType<(status: boolean) => void> | {
        type: import("vue").PropType<(status: boolean) => void>;
        default?: any;
        required?: false;
    };
    onPanelChange: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnPanelChangeType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnPanelChangeType>;
        default?: any;
        required?: false;
    };
    onConfirm: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnConfirmType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnConfirmType>;
        default?: any;
        required?: false;
    };
    startYear: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    endYear: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormSwitch: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    defaultChecked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(checked: boolean, e: any) => void> | {
        type: import("vue").PropType<(checked: boolean, e: any) => void>;
        default?: any;
        required?: false;
    };
    loading: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<"small" | "default" | "large"> | {
        type: import("vue").PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    checkedText: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    uncheckedText: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    defaultChecked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(checked: boolean, e: any) => void> | {
        type: import("vue").PropType<(checked: boolean, e: any) => void>;
        default?: any;
        required?: false;
    };
    loading: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    onMouseEnter: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: import("vue").PropType<(e: MouseEvent) => any> | {
        type: import("vue").PropType<(e: MouseEvent) => any>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<"small" | "default" | "large"> | {
        type: import("vue").PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    checkedText: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    uncheckedText: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormSlider: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    railStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<number | number[]> | {
        type: import("vue").PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showMarkLabel: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    included: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    marks: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/slider/foundation").Marks> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/slider/foundation").Marks>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    min: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    range: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    step: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    tipFormatter: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").tipFormatterBasicType | import("@douyinfe/semi-foundation/slider/foundation").tipFormatterBasicType[]) => any> | {
        type: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").tipFormatterBasicType | import("@douyinfe/semi-foundation/slider/foundation").tipFormatterBasicType[]) => any>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<number | number[]> | {
        type: import("vue").PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    vertical: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAfterChange: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").SliderProps["value"]) => void> | {
        type: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").SliderProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").SliderProps["value"]) => void> | {
        type: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").SliderProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    onMouseUp: import("vue").PropType<(e: any) => void> | {
        type: import("vue").PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    tooltipOnMark: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    tooltipVisible: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showArrow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    showBoundary: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    verticalReverse: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-valuetext': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getAriaValueText: import("vue").PropType<(value: number, index?: number) => string> | {
        type: import("vue").PropType<(value: number, index?: number) => string>;
        default?: any;
        required?: false;
    };
    handleDot: import("vue").PropType<{
        size?: string;
        color?: string;
    } | {
        size?: string;
        color?: string;
    }[]> | {
        type: import("vue").PropType<{
            size?: string;
            color?: string;
        } | {
            size?: string;
            color?: string;
        }[]>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    railStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<number | number[]> | {
        type: import("vue").PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showMarkLabel: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    included: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    marks: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/slider/foundation").Marks> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/slider/foundation").Marks>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    min: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    range: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    step: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    tipFormatter: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").tipFormatterBasicType | import("@douyinfe/semi-foundation/slider/foundation").tipFormatterBasicType[]) => any> | {
        type: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").tipFormatterBasicType | import("@douyinfe/semi-foundation/slider/foundation").tipFormatterBasicType[]) => any>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<number | number[]> | {
        type: import("vue").PropType<number | number[]>;
        default?: any;
        required?: false;
    };
    vertical: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAfterChange: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").SliderProps["value"]) => void> | {
        type: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").SliderProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").SliderProps["value"]) => void> | {
        type: import("vue").PropType<(value: import("@douyinfe/semi-foundation/lib/es/slider/foundation").SliderProps["value"]) => void>;
        default?: any;
        required?: false;
    };
    onMouseUp: import("vue").PropType<(e: any) => void> | {
        type: import("vue").PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    tooltipOnMark: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    tooltipVisible: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showArrow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    showBoundary: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    verticalReverse: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-valuetext': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getAriaValueText: import("vue").PropType<(value: number, index?: number) => string> | {
        type: import("vue").PropType<(value: number, index?: number) => string>;
        default?: any;
        required?: false;
    };
    handleDot: import("vue").PropType<{
        size?: string;
        color?: string;
    } | {
        size?: string;
        color?: string;
    }[]> | {
        type: import("vue").PropType<{
            size?: string;
            color?: string;
        } | {
            size?: string;
            color?: string;
        }[]>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormTimePicker: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearText: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: import("vue").PropType<Locale> | {
        type: import("vue").PropType<Locale>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<import("../timePicker/TimePicker").BaseValueType | import("../timePicker/TimePicker").BaseValueType[]> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").BaseValueType | import("../timePicker/TimePicker").BaseValueType[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledHours: import("vue").PropType<() => number[]> | {
        type: import("vue").PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    disabledMinutes: import("vue").PropType<(selectedHour: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    focusOnOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hourStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    inputReadOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    locale: import("vue").PropType<{
        placeholder: {
            time: string;
            timeRange: string;
        };
        begin: string;
        end: string;
        hour: string;
        minute: string;
        second: string;
        AM: string;
        PM: string;
    }> | {
        type: import("vue").PropType<{
            placeholder: {
                time: string;
                timeRange: string;
            };
            begin: string;
            end: string;
            hour: string;
            minute: string;
            second: string;
            AM: string;
            PM: string;
        }>;
        default?: any;
        required?: false;
    };
    localeCode: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    minuteStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<import("../_base/base").Motion> | {
        type: import("vue").PropType<import("../_base/base").Motion>;
        default?: any;
        required?: false;
    };
    open: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    panelFooter: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panelHeader: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panels: import("vue").PropType<import("../timePicker/TimePicker").Panel[]> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").Panel[]>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    scrollItemProps: import("vue").PropType<import("../scrollList/scrollItem").ScrollItemProps<any>> | {
        type: import("vue").PropType<import("../scrollList/scrollItem").ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    secondStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("../input/index").InputSize> | {
        type: import("vue").PropType<import("../input/index").InputSize>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    timeZone: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props?: any) => import("vue").VNode | string> | {
        type: import("vue").PropType<(props?: any) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../timePicker/TimePicker").Type> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").Type>;
        default?: any;
        required?: false;
    };
    use12Hours: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<import("../timePicker/TimePicker").BaseValueType | import("../timePicker/TimePicker").BaseValueType[]> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").BaseValueType | import("../timePicker/TimePicker").BaseValueType[]>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<{
        (value: Date | Date[], input: string | string[]): void;
        (input: string | string[], value: Date | Date[]): void;
    }> | {
        type: import("vue").PropType<{
            (value: Date | Date[], input: string | string[]): void;
            (input: string | string[], value: Date | Date[]): void;
        }>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onOpenChange: import("vue").PropType<(open: boolean) => void> | {
        type: import("vue").PropType<(open: boolean) => void>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearText: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: import("vue").PropType<Locale> | {
        type: import("vue").PropType<Locale>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<import("../timePicker/TimePicker").BaseValueType | import("../timePicker/TimePicker").BaseValueType[]> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").BaseValueType | import("../timePicker/TimePicker").BaseValueType[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledHours: import("vue").PropType<() => number[]> | {
        type: import("vue").PropType<() => number[]>;
        default?: any;
        required?: false;
    };
    disabledMinutes: import("vue").PropType<(selectedHour: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number) => number[]>;
        default?: any;
        required?: false;
    };
    disabledSeconds: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]> | {
        type: import("vue").PropType<(selectedHour: number, selectedMinute: number) => number[]>;
        default?: any;
        required?: false;
    };
    focusOnOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    hourStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    inputReadOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    locale: import("vue").PropType<{
        placeholder: {
            time: string;
            timeRange: string;
        };
        begin: string;
        end: string;
        hour: string;
        minute: string;
        second: string;
        AM: string;
        PM: string;
    }> | {
        type: import("vue").PropType<{
            placeholder: {
                time: string;
                timeRange: string;
            };
            begin: string;
            end: string;
            hour: string;
            minute: string;
            second: string;
            AM: string;
            PM: string;
        }>;
        default?: any;
        required?: false;
    };
    localeCode: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    minuteStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<import("../_base/base").Motion> | {
        type: import("vue").PropType<import("../_base/base").Motion>;
        default?: any;
        required?: false;
    };
    open: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    panelFooter: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panelHeader: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    panels: import("vue").PropType<import("../timePicker/TimePicker").Panel[]> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").Panel[]>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    popupStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    scrollItemProps: import("vue").PropType<import("../scrollList/scrollItem").ScrollItemProps<any>> | {
        type: import("vue").PropType<import("../scrollList/scrollItem").ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    secondStep: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("../input/index").InputSize> | {
        type: import("vue").PropType<import("../input/index").InputSize>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    timeZone: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props?: any) => import("vue").VNode | string> | {
        type: import("vue").PropType<(props?: any) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    type: import("vue").PropType<import("../timePicker/TimePicker").Type> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").Type>;
        default?: any;
        required?: false;
    };
    use12Hours: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<import("../timePicker/TimePicker").BaseValueType | import("../timePicker/TimePicker").BaseValueType[]> | {
        type: import("vue").PropType<import("../timePicker/TimePicker").BaseValueType | import("../timePicker/TimePicker").BaseValueType[]>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<{
        (value: Date | Date[], input: string | string[]): void;
        (input: string | string[], value: Date | Date[]): void;
    }> | {
        type: import("vue").PropType<{
            (value: Date | Date[], input: string | string[]): void;
            (input: string | string[], value: Date | Date[]): void;
        }>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    onOpenChange: import("vue").PropType<(open: boolean) => void> | {
        type: import("vue").PropType<(open: boolean) => void>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    dropdownMargin: import("vue").PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: import("vue").PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormTreeSelect: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("../treeSelect/index").TreeSelectProps>>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("../treeSelect/index").TreeSelectProps>>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormCascader: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    arrowIcon: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    expandIcon: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<import("../cascader/index").Value> | {
        type: import("vue").PropType<import("../cascader/index").Value>;
        default?: any;
        required?: false;
    };
    dropdownStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    emptyContent: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    filterTreeNode: import("vue").PropType<boolean | ((inputValue: string, treeNodeString: string, data?: import("../cascader/item").CascaderData) => boolean)> | {
        type: import("vue").PropType<boolean | ((inputValue: string, treeNodeString: string, data?: import("../cascader/item").CascaderData) => boolean)>;
        default?: any;
        required?: false;
    };
    filterSorter: import("vue").PropType<(first: import("../cascader/item").CascaderData, second: import("../cascader/item").CascaderData, inputValue: string) => number> | {
        type: import("vue").PropType<(first: import("../cascader/item").CascaderData, second: import("../cascader/item").CascaderData, inputValue: string) => number>;
        default?: any;
        required?: false;
    };
    filterRender: import("vue").PropType<(props: import("../cascader/item").FilterRenderProps) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(props: import("../cascader/item").FilterRenderProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    treeData: import("vue").PropType<import("../cascader/item").CascaderData[]> | {
        type: import("vue").PropType<import("../cascader/item").CascaderData[]>;
        default?: any;
        required?: false;
    };
    restTagsPopoverProps: import("vue").PropType<import("../popover").PopoverProps> | {
        type: import("vue").PropType<import("../popover").PopoverProps>;
        default?: any;
        required?: false;
    };
    children: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<import("../cascader/index").Value> | {
        type: import("vue").PropType<import("../cascader/index").Value>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    bottomSlot: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    topSlot: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props: import("../cascader/index").TriggerRenderProps) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(props: import("../cascader/index").TriggerRenderProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    onListScroll: import("vue").PropType<(e: any, panel: import("../cascader/index").ScrollPanelProps) => void> | {
        type: import("vue").PropType<(e: any, panel: import("../cascader/index").ScrollPanelProps) => void>;
        default?: any;
        required?: false;
    };
    loadData: import("vue").PropType<(selectOptions: import("../cascader/item").CascaderData[]) => Promise<void>> | {
        type: import("vue").PropType<(selectOptions: import("../cascader/item").CascaderData[]) => Promise<void>>;
        default?: any;
        required?: false;
    };
    onLoad: import("vue").PropType<(newLoadedKeys: Set<string>, data: import("../cascader/item").CascaderData) => void> | {
        type: import("vue").PropType<(newLoadedKeys: Set<string>, data: import("../cascader/item").CascaderData) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: import("../cascader/index").Value) => void> | {
        type: import("vue").PropType<(value: import("../cascader/index").Value) => void>;
        default?: any;
        required?: false;
    };
    onExceed: import("vue").PropType<(checkedItem: import("../cascader/item").Entity[]) => void> | {
        type: import("vue").PropType<(checkedItem: import("../cascader/item").Entity[]) => void>;
        default?: any;
        required?: false;
    };
    displayRender: import("vue").PropType<(selected: Array<string> | import("../cascader/item").Entity, idx?: number) => import("vue").VNode | string> | {
        type: import("vue").PropType<(selected: Array<string> | import("../cascader/item").Entity, idx?: number) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    searchPosition: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    loadedKeys: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    autoClearSearchValue: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    separator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    changeOnSelect: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    multiple: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoMergeValue: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    dropdownClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    filterLeafOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    searchPlaceholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").CascaderType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").CascaderType>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    treeNodeFilterProp: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    displayProp: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    maxTagCount: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showRestTagsPopover: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<string | boolean> | {
        type: import("vue").PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChangeWithObject: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showNext: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").ShowNextType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").ShowNextType>;
        default?: any;
        required?: false;
    };
    disableStrictly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    leafOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    enableLeafClick: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    virtualizeInSearch: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").Virtualize> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").Virtualize>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<() => void> | {
        type: import("vue").PropType<() => void>;
        default?: any;
        required?: false;
    };
    onDropdownVisibleChange: import("vue").PropType<(visible: boolean) => void> | {
        type: import("vue").PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    onSearch: import("vue").PropType<(value: string) => void> | {
        type: import("vue").PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
    onSelect: import("vue").PropType<(value: string | number | Array<string | number>) => void> | {
        type: import("vue").PropType<(value: string | number | Array<string | number>) => void>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: import("vue").PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean | "false" | "true"> | {
        type: import("vue").PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    arrowIcon: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    expandIcon: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<import("../cascader/index").Value> | {
        type: import("vue").PropType<import("../cascader/index").Value>;
        default?: any;
        required?: false;
    };
    dropdownStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    emptyContent: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    motion: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    filterTreeNode: import("vue").PropType<boolean | ((inputValue: string, treeNodeString: string, data?: import("../cascader/item").CascaderData) => boolean)> | {
        type: import("vue").PropType<boolean | ((inputValue: string, treeNodeString: string, data?: import("../cascader/item").CascaderData) => boolean)>;
        default?: any;
        required?: false;
    };
    filterSorter: import("vue").PropType<(first: import("../cascader/item").CascaderData, second: import("../cascader/item").CascaderData, inputValue: string) => number> | {
        type: import("vue").PropType<(first: import("../cascader/item").CascaderData, second: import("../cascader/item").CascaderData, inputValue: string) => number>;
        default?: any;
        required?: false;
    };
    filterRender: import("vue").PropType<(props: import("../cascader/item").FilterRenderProps) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(props: import("../cascader/item").FilterRenderProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    treeData: import("vue").PropType<import("../cascader/item").CascaderData[]> | {
        type: import("vue").PropType<import("../cascader/item").CascaderData[]>;
        default?: any;
        required?: false;
    };
    restTagsPopoverProps: import("vue").PropType<import("../popover").PopoverProps> | {
        type: import("vue").PropType<import("../popover").PopoverProps>;
        default?: any;
        required?: false;
    };
    children: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<import("../cascader/index").Value> | {
        type: import("vue").PropType<import("../cascader/index").Value>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    bottomSlot: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    topSlot: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    triggerRender: import("vue").PropType<(props: import("../cascader/index").TriggerRenderProps) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(props: import("../cascader/index").TriggerRenderProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    onListScroll: import("vue").PropType<(e: any, panel: import("../cascader/index").ScrollPanelProps) => void> | {
        type: import("vue").PropType<(e: any, panel: import("../cascader/index").ScrollPanelProps) => void>;
        default?: any;
        required?: false;
    };
    loadData: import("vue").PropType<(selectOptions: import("../cascader/item").CascaderData[]) => Promise<void>> | {
        type: import("vue").PropType<(selectOptions: import("../cascader/item").CascaderData[]) => Promise<void>>;
        default?: any;
        required?: false;
    };
    onLoad: import("vue").PropType<(newLoadedKeys: Set<string>, data: import("../cascader/item").CascaderData) => void> | {
        type: import("vue").PropType<(newLoadedKeys: Set<string>, data: import("../cascader/item").CascaderData) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: import("../cascader/index").Value) => void> | {
        type: import("vue").PropType<(value: import("../cascader/index").Value) => void>;
        default?: any;
        required?: false;
    };
    onExceed: import("vue").PropType<(checkedItem: import("../cascader/item").Entity[]) => void> | {
        type: import("vue").PropType<(checkedItem: import("../cascader/item").Entity[]) => void>;
        default?: any;
        required?: false;
    };
    displayRender: import("vue").PropType<(selected: Array<string> | import("../cascader/item").Entity, idx?: number) => import("vue").VNode | string> | {
        type: import("vue").PropType<(selected: Array<string> | import("../cascader/item").Entity, idx?: number) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    position: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: import("vue").PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    searchPosition: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    loadedKeys: import("vue").PropType<any> | {
        type: import("vue").PropType<any>;
        default?: any;
        required?: false;
    };
    autoClearSearchValue: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    separator: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    changeOnSelect: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    multiple: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoMergeValue: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    dropdownClassName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    filterLeafOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    searchPlaceholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").CascaderType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").CascaderType>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    treeNodeFilterProp: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    displayProp: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    maxTagCount: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showRestTagsPopover: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    zIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    stopPropagation: import("vue").PropType<string | boolean> | {
        type: import("vue").PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultOpen: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChangeWithObject: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showNext: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").ShowNextType> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").ShowNextType>;
        default?: any;
        required?: false;
    };
    disableStrictly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    leafOnly: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    enableLeafClick: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    virtualizeInSearch: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").Virtualize> | {
        type: import("vue").PropType<import("@douyinfe/semi-foundation/lib/es/cascader/foundation").Virtualize>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<() => void> | {
        type: import("vue").PropType<() => void>;
        default?: any;
        required?: false;
    };
    onDropdownVisibleChange: import("vue").PropType<(visible: boolean) => void> | {
        type: import("vue").PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    getPopupContainer: import("vue").PropType<() => HTMLElement> | {
        type: import("vue").PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    onSearch: import("vue").PropType<(value: string) => void> | {
        type: import("vue").PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
    onSelect: import("vue").PropType<(value: string | number | Array<string | number>) => void> | {
        type: import("vue").PropType<(value: string | number | Array<string | number>) => void>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormRating: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    count: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    allowHalf: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    allowClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: number) => void> | {
        type: import("vue").PropType<(value: number) => void>;
        default?: any;
        required?: false;
    };
    onHoverChange: import("vue").PropType<(value: number) => void> | {
        type: import("vue").PropType<(value: number) => void>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    character: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    tabIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onClick: import("vue").PropType<(e: MouseEvent | KeyboardEvent, index: number) => void> | {
        type: import("vue").PropType<(e: MouseEvent | KeyboardEvent, index: number) => void>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<number | "small" | "default"> | {
        type: import("vue").PropType<number | "small" | "default">;
        default?: any;
        required?: false;
    };
    tooltips: import("vue").PropType<string[]> | {
        type: import("vue").PropType<string[]>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    count: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    allowHalf: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    allowClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    prefixCls: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: number) => void> | {
        type: import("vue").PropType<(value: number) => void>;
        default?: any;
        required?: false;
    };
    onHoverChange: import("vue").PropType<(value: number) => void> | {
        type: import("vue").PropType<(value: number) => void>;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    character: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    tabIndex: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: FocusEvent) => void> | {
        type: import("vue").PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onClick: import("vue").PropType<(e: MouseEvent | KeyboardEvent, index: number) => void> | {
        type: import("vue").PropType<(e: MouseEvent | KeyboardEvent, index: number) => void>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<number | "small" | "default"> | {
        type: import("vue").PropType<number | "small" | "default">;
        default?: any;
        required?: false;
    };
    tooltips: import("vue").PropType<string[]> | {
        type: import("vue").PropType<string[]>;
        default?: any;
        required?: false;
    };
    id: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormAutoComplete: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("../autoComplete/index").AutoCompleteProps<import("../autoComplete/index").AutoCompleteItems>>>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("../autoComplete/index").AutoCompleteProps<import("../autoComplete/index").AutoCompleteItems>>>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormUpload: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    accept: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    action: {
        type: import("vue").PropType<string>;
        default?: any;
        required: true;
    };
    afterUpload: import("vue").PropType<(object: import("../upload/interface").AfterUploadProps) => import("@douyinfe/semi-foundation/lib/es/upload/foundation").AfterUploadResult> | {
        type: import("vue").PropType<(object: import("../upload/interface").AfterUploadProps) => import("@douyinfe/semi-foundation/lib/es/upload/foundation").AfterUploadResult>;
        default?: any;
        required?: false;
    };
    beforeUpload: import("vue").PropType<(object: import("../upload/interface").BeforeUploadProps) => import("@douyinfe/semi-foundation/lib/es/upload/foundation").BeforeUploadObjectResult | Promise<import("@douyinfe/semi-foundation/upload/foundation").BeforeUploadObjectResult> | boolean> | {
        type: import("vue").PropType<(object: import("../upload/interface").BeforeUploadProps) => import("@douyinfe/semi-foundation/lib/es/upload/foundation").BeforeUploadObjectResult | Promise<import("@douyinfe/semi-foundation/upload/foundation").BeforeUploadObjectResult> | boolean>;
        default?: any;
        required?: false;
    };
    beforeClear: import("vue").PropType<(fileList: Array<import("../upload/interface").FileItem>) => boolean | Promise<boolean>> | {
        type: import("vue").PropType<(fileList: Array<import("../upload/interface").FileItem>) => boolean | Promise<boolean>>;
        default?: any;
        required?: false;
    };
    beforeRemove: import("vue").PropType<(file: import("../upload/interface").FileItem, fileList: Array<import("../upload/interface").FileItem>) => boolean | Promise<boolean>> | {
        type: import("vue").PropType<(file: import("../upload/interface").FileItem, fileList: Array<import("../upload/interface").FileItem>) => boolean | Promise<boolean>>;
        default?: any;
        required?: false;
    };
    capture: import("vue").PropType<boolean | "user" | "environment"> | {
        type: import("vue").PropType<boolean | "user" | "environment">;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    customRequest: import("vue").PropType<(object: import("../upload/interface").customRequestArgs) => void> | {
        type: import("vue").PropType<(object: import("../upload/interface").customRequestArgs) => void>;
        default?: any;
        required?: false;
    };
    data: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, unknown>)> | {
        type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, unknown>)>;
        default?: any;
        required?: false;
    };
    defaultFileList: import("vue").PropType<import("../upload/interface").FileItem[]> | {
        type: import("vue").PropType<import("../upload/interface").FileItem[]>;
        default?: any;
        required?: false;
    };
    directory: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    dragIcon: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    dragMainText: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    dragSubText: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    draggable: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    addOnPasting: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    fileList: import("vue").PropType<import("../upload/interface").FileItem[]> | {
        type: import("vue").PropType<import("../upload/interface").FileItem[]>;
        default?: any;
        required?: false;
    };
    fileName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    headers: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, string>)> | {
        type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, string>)>;
        default?: any;
        required?: false;
    };
    hotSpotLocation: import("vue").PropType<"end" | "start"> | {
        type: import("vue").PropType<"end" | "start">;
        default?: any;
        required?: false;
    };
    itemStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    limit: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    listType: import("vue").PropType<"list" | "picture"> | {
        type: import("vue").PropType<"list" | "picture">;
        default?: any;
        required?: false;
    };
    maxSize: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    minSize: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    multiple: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    onAcceptInvalid: import("vue").PropType<(files: File[]) => void> | {
        type: import("vue").PropType<(files: File[]) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(object: import("../upload/interface").OnChangeProps) => void> | {
        type: import("vue").PropType<(object: import("../upload/interface").OnChangeProps) => void>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<() => void> | {
        type: import("vue").PropType<() => void>;
        default?: any;
        required?: false;
    };
    onDrop: import("vue").PropType<(e: Event, files: Array<File>, fileList: Array<import("../upload/interface").FileItem>) => void> | {
        type: import("vue").PropType<(e: Event, files: Array<File>, fileList: Array<import("../upload/interface").FileItem>) => void>;
        default?: any;
        required?: false;
    };
    onError: import("vue").PropType<(e: import("../upload/interface").CustomError, file: File, fileList: Array<import("../upload/interface").FileItem>, xhr: XMLHttpRequest) => void> | {
        type: import("vue").PropType<(e: import("../upload/interface").CustomError, file: File, fileList: Array<import("../upload/interface").FileItem>, xhr: XMLHttpRequest) => void>;
        default?: any;
        required?: false;
    };
    onPastingError: import("vue").PropType<(error: Error | PermissionStatus) => void> | {
        type: import("vue").PropType<(error: Error | PermissionStatus) => void>;
        default?: any;
        required?: false;
    };
    onExceed: import("vue").PropType<(fileList: Array<File>) => void> | {
        type: import("vue").PropType<(fileList: Array<File>) => void>;
        default?: any;
        required?: false;
    };
    onFileChange: import("vue").PropType<(files: Array<File>) => void> | {
        type: import("vue").PropType<(files: Array<File>) => void>;
        default?: any;
        required?: false;
    };
    onOpenFileDialog: import("vue").PropType<() => void> | {
        type: import("vue").PropType<() => void>;
        default?: any;
        required?: false;
    };
    onPreviewClick: import("vue").PropType<(fileItem: import("../upload/interface").FileItem) => void> | {
        type: import("vue").PropType<(fileItem: import("../upload/interface").FileItem) => void>;
        default?: any;
        required?: false;
    };
    onProgress: import("vue").PropType<(percent: number, file: File, fileList: Array<import("../upload/interface").FileItem>) => void> | {
        type: import("vue").PropType<(percent: number, file: File, fileList: Array<import("../upload/interface").FileItem>) => void>;
        default?: any;
        required?: false;
    };
    onRemove: import("vue").PropType<(currentFile: File, fileList: Array<import("../upload/interface").FileItem>, currentFileItem: import("../upload/interface").FileItem) => void> | {
        type: import("vue").PropType<(currentFile: File, fileList: Array<import("../upload/interface").FileItem>, currentFileItem: import("../upload/interface").FileItem) => void>;
        default?: any;
        required?: false;
    };
    onRetry: import("vue").PropType<(fileItem: import("../upload/interface").FileItem) => void> | {
        type: import("vue").PropType<(fileItem: import("../upload/interface").FileItem) => void>;
        default?: any;
        required?: false;
    };
    onSizeError: import("vue").PropType<(file: File, fileList: Array<import("../upload/interface").FileItem>) => void> | {
        type: import("vue").PropType<(file: File, fileList: Array<import("../upload/interface").FileItem>) => void>;
        default?: any;
        required?: false;
    };
    onSuccess: import("vue").PropType<(responseBody: any, file: File, fileList: Array<import("../upload/interface").FileItem>) => void> | {
        type: import("vue").PropType<(responseBody: any, file: File, fileList: Array<import("../upload/interface").FileItem>) => void>;
        default?: any;
        required?: false;
    };
    previewFile: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    prompt: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    promptPosition: import("vue").PropType<"bottom" | "left" | "right"> | {
        type: import("vue").PropType<"bottom" | "left" | "right">;
        default?: any;
        required?: false;
    };
    picHeight: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    picWidth: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    renderFileItem: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    renderPicInfo: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    renderThumbnail: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    renderPicPreviewIcon: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    renderFileOperation: import("vue").PropType<(fileItem: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(fileItem: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showPicInfo: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showReplace: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showRetry: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showUploadList: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    timeout: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    transformFile: import("vue").PropType<(file: File) => import("../upload/interface").FileItem> | {
        type: import("vue").PropType<(file: File) => import("../upload/interface").FileItem>;
        default?: any;
        required?: false;
    };
    uploadTrigger: import("vue").PropType<"auto" | "custom"> | {
        type: import("vue").PropType<"auto" | "custom">;
        default?: any;
        required?: false;
    };
    validateMessage: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    withCredentials: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    accept: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    action: {
        type: import("vue").PropType<string>;
        default?: any;
        required: true;
    };
    afterUpload: import("vue").PropType<(object: import("../upload/interface").AfterUploadProps) => import("@douyinfe/semi-foundation/lib/es/upload/foundation").AfterUploadResult> | {
        type: import("vue").PropType<(object: import("../upload/interface").AfterUploadProps) => import("@douyinfe/semi-foundation/lib/es/upload/foundation").AfterUploadResult>;
        default?: any;
        required?: false;
    };
    beforeUpload: import("vue").PropType<(object: import("../upload/interface").BeforeUploadProps) => import("@douyinfe/semi-foundation/lib/es/upload/foundation").BeforeUploadObjectResult | Promise<import("@douyinfe/semi-foundation/upload/foundation").BeforeUploadObjectResult> | boolean> | {
        type: import("vue").PropType<(object: import("../upload/interface").BeforeUploadProps) => import("@douyinfe/semi-foundation/lib/es/upload/foundation").BeforeUploadObjectResult | Promise<import("@douyinfe/semi-foundation/upload/foundation").BeforeUploadObjectResult> | boolean>;
        default?: any;
        required?: false;
    };
    beforeClear: import("vue").PropType<(fileList: Array<import("../upload/interface").FileItem>) => boolean | Promise<boolean>> | {
        type: import("vue").PropType<(fileList: Array<import("../upload/interface").FileItem>) => boolean | Promise<boolean>>;
        default?: any;
        required?: false;
    };
    beforeRemove: import("vue").PropType<(file: import("../upload/interface").FileItem, fileList: Array<import("../upload/interface").FileItem>) => boolean | Promise<boolean>> | {
        type: import("vue").PropType<(file: import("../upload/interface").FileItem, fileList: Array<import("../upload/interface").FileItem>) => boolean | Promise<boolean>>;
        default?: any;
        required?: false;
    };
    capture: import("vue").PropType<boolean | "user" | "environment"> | {
        type: import("vue").PropType<boolean | "user" | "environment">;
        default?: any;
        required?: false;
    };
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    customRequest: import("vue").PropType<(object: import("../upload/interface").customRequestArgs) => void> | {
        type: import("vue").PropType<(object: import("../upload/interface").customRequestArgs) => void>;
        default?: any;
        required?: false;
    };
    data: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, unknown>)> | {
        type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, unknown>)>;
        default?: any;
        required?: false;
    };
    defaultFileList: import("vue").PropType<import("../upload/interface").FileItem[]> | {
        type: import("vue").PropType<import("../upload/interface").FileItem[]>;
        default?: any;
        required?: false;
    };
    directory: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    dragIcon: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    dragMainText: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    dragSubText: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    draggable: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    addOnPasting: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    fileList: import("vue").PropType<import("../upload/interface").FileItem[]> | {
        type: import("vue").PropType<import("../upload/interface").FileItem[]>;
        default?: any;
        required?: false;
    };
    fileName: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    headers: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, string>)> | {
        type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, string>)>;
        default?: any;
        required?: false;
    };
    hotSpotLocation: import("vue").PropType<"end" | "start"> | {
        type: import("vue").PropType<"end" | "start">;
        default?: any;
        required?: false;
    };
    itemStyle: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    limit: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    listType: import("vue").PropType<"list" | "picture"> | {
        type: import("vue").PropType<"list" | "picture">;
        default?: any;
        required?: false;
    };
    maxSize: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    minSize: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    multiple: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    onAcceptInvalid: import("vue").PropType<(files: File[]) => void> | {
        type: import("vue").PropType<(files: File[]) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(object: import("../upload/interface").OnChangeProps) => void> | {
        type: import("vue").PropType<(object: import("../upload/interface").OnChangeProps) => void>;
        default?: any;
        required?: false;
    };
    onClear: import("vue").PropType<() => void> | {
        type: import("vue").PropType<() => void>;
        default?: any;
        required?: false;
    };
    onDrop: import("vue").PropType<(e: Event, files: Array<File>, fileList: Array<import("../upload/interface").FileItem>) => void> | {
        type: import("vue").PropType<(e: Event, files: Array<File>, fileList: Array<import("../upload/interface").FileItem>) => void>;
        default?: any;
        required?: false;
    };
    onError: import("vue").PropType<(e: import("../upload/interface").CustomError, file: File, fileList: Array<import("../upload/interface").FileItem>, xhr: XMLHttpRequest) => void> | {
        type: import("vue").PropType<(e: import("../upload/interface").CustomError, file: File, fileList: Array<import("../upload/interface").FileItem>, xhr: XMLHttpRequest) => void>;
        default?: any;
        required?: false;
    };
    onPastingError: import("vue").PropType<(error: Error | PermissionStatus) => void> | {
        type: import("vue").PropType<(error: Error | PermissionStatus) => void>;
        default?: any;
        required?: false;
    };
    onExceed: import("vue").PropType<(fileList: Array<File>) => void> | {
        type: import("vue").PropType<(fileList: Array<File>) => void>;
        default?: any;
        required?: false;
    };
    onFileChange: import("vue").PropType<(files: Array<File>) => void> | {
        type: import("vue").PropType<(files: Array<File>) => void>;
        default?: any;
        required?: false;
    };
    onOpenFileDialog: import("vue").PropType<() => void> | {
        type: import("vue").PropType<() => void>;
        default?: any;
        required?: false;
    };
    onPreviewClick: import("vue").PropType<(fileItem: import("../upload/interface").FileItem) => void> | {
        type: import("vue").PropType<(fileItem: import("../upload/interface").FileItem) => void>;
        default?: any;
        required?: false;
    };
    onProgress: import("vue").PropType<(percent: number, file: File, fileList: Array<import("../upload/interface").FileItem>) => void> | {
        type: import("vue").PropType<(percent: number, file: File, fileList: Array<import("../upload/interface").FileItem>) => void>;
        default?: any;
        required?: false;
    };
    onRemove: import("vue").PropType<(currentFile: File, fileList: Array<import("../upload/interface").FileItem>, currentFileItem: import("../upload/interface").FileItem) => void> | {
        type: import("vue").PropType<(currentFile: File, fileList: Array<import("../upload/interface").FileItem>, currentFileItem: import("../upload/interface").FileItem) => void>;
        default?: any;
        required?: false;
    };
    onRetry: import("vue").PropType<(fileItem: import("../upload/interface").FileItem) => void> | {
        type: import("vue").PropType<(fileItem: import("../upload/interface").FileItem) => void>;
        default?: any;
        required?: false;
    };
    onSizeError: import("vue").PropType<(file: File, fileList: Array<import("../upload/interface").FileItem>) => void> | {
        type: import("vue").PropType<(file: File, fileList: Array<import("../upload/interface").FileItem>) => void>;
        default?: any;
        required?: false;
    };
    onSuccess: import("vue").PropType<(responseBody: any, file: File, fileList: Array<import("../upload/interface").FileItem>) => void> | {
        type: import("vue").PropType<(responseBody: any, file: File, fileList: Array<import("../upload/interface").FileItem>) => void>;
        default?: any;
        required?: false;
    };
    previewFile: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    prompt: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    promptPosition: import("vue").PropType<"bottom" | "left" | "right"> | {
        type: import("vue").PropType<"bottom" | "left" | "right">;
        default?: any;
        required?: false;
    };
    picHeight: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    picWidth: import("vue").PropType<string | number> | {
        type: import("vue").PropType<string | number>;
        default?: any;
        required?: false;
    };
    renderFileItem: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    renderPicInfo: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    renderThumbnail: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    renderPicPreviewIcon: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(renderFileItemProps: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    renderFileOperation: import("vue").PropType<(fileItem: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string> | {
        type: import("vue").PropType<(fileItem: import("../upload/interface").RenderFileItemProps) => import("vue").VNode | string>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showPicInfo: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showReplace: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showRetry: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    showUploadList: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    timeout: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    transformFile: import("vue").PropType<(file: File) => import("../upload/interface").FileItem> | {
        type: import("vue").PropType<(file: File) => import("../upload/interface").FileItem>;
        default?: any;
        required?: false;
    };
    uploadTrigger: import("vue").PropType<"auto" | "custom"> | {
        type: import("vue").PropType<"auto" | "custom">;
        default?: any;
        required?: false;
    };
    validateMessage: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning" | "success"> | {
        type: import("vue").PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    withCredentials: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const FormTagInput: import("vue").DefineComponent<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string[]> | {
        type: import("vue").PropType<string[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputValue: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    maxLength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxTagCount: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showRestTagsPopover: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    restTagsPopoverProps: import("vue").PropType<import("../popover").PopoverProps> | {
        type: import("vue").PropType<import("../popover").PopoverProps>;
        default?: any;
        required?: false;
    };
    showContentTooltip: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    allowDuplicates: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    addOnBlur: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    draggable: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandRestTagsOnClick: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAdd: import("vue").PropType<(addedValue: string[]) => void> | {
        type: import("vue").PropType<(addedValue: string[]) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: string[]) => void> | {
        type: import("vue").PropType<(value: string[]) => void>;
        default?: any;
        required?: false;
    };
    onExceed: import("vue").PropType<(value: string[]) => void> | {
        type: import("vue").PropType<(value: string[]) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInputChange: import("vue").PropType<(value: string, e: MouseEvent) => void> | {
        type: import("vue").PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInputExceed: import("vue").PropType<(value: string) => void> | {
        type: import("vue").PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onRemove: import("vue").PropType<(removedValue: string, idx: number) => void> | {
        type: import("vue").PropType<(removedValue: string, idx: number) => void>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    renderTagItem: import("vue").PropType<(value: string, index: number, onClose: () => void) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(value: string, index: number, onClose: () => void) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    separator: import("vue").PropType<string | string[]> | {
        type: import("vue").PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<"small" | "default" | "large"> | {
        type: import("vue").PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning"> | {
        type: import("vue").PropType<"default" | "error" | "warning">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string[]> | {
        type: import("vue").PropType<string[]>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>, (_ctx: any, _cache: any) => import("vue").VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<import("../interface").CombineProps<import("./interface").CommonFieldProps & Readonly<import("vue").ExtractPropTypes<{
    className: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: import("vue").PropType<import("../interface").VueJsxNode> | {
        type: import("vue").PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    defaultValue: import("vue").PropType<string[]> | {
        type: import("vue").PropType<string[]>;
        default?: any;
        required?: false;
    };
    disabled: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputValue: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    maxLength: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    max: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    maxTagCount: import("vue").PropType<number> | {
        type: import("vue").PropType<number>;
        default?: any;
        required?: false;
    };
    showRestTagsPopover: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    restTagsPopoverProps: import("vue").PropType<import("../popover").PopoverProps> | {
        type: import("vue").PropType<import("../popover").PopoverProps>;
        default?: any;
        required?: false;
    };
    showContentTooltip: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    allowDuplicates: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    addOnBlur: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    draggable: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandRestTagsOnClick: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAdd: import("vue").PropType<(addedValue: string[]) => void> | {
        type: import("vue").PropType<(addedValue: string[]) => void>;
        default?: any;
        required?: false;
    };
    onBlur: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: import("vue").PropType<(value: string[]) => void> | {
        type: import("vue").PropType<(value: string[]) => void>;
        default?: any;
        required?: false;
    };
    onExceed: import("vue").PropType<(value: string[]) => void> | {
        type: import("vue").PropType<(value: string[]) => void>;
        default?: any;
        required?: false;
    };
    onFocus: import("vue").PropType<(e: MouseEvent) => void> | {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInputChange: import("vue").PropType<(value: string, e: MouseEvent) => void> | {
        type: import("vue").PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInputExceed: import("vue").PropType<(value: string) => void> | {
        type: import("vue").PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: import("vue").PropType<(e: KeyboardEvent) => void> | {
        type: import("vue").PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onRemove: import("vue").PropType<(removedValue: string, idx: number) => void> | {
        type: import("vue").PropType<(removedValue: string, idx: number) => void>;
        default?: any;
        required?: false;
    };
    placeholder: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    renderTagItem: import("vue").PropType<(value: string, index: number, onClose: () => void) => import("../interface").VueJsxNode> | {
        type: import("vue").PropType<(value: string, index: number, onClose: () => void) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    separator: import("vue").PropType<string | string[]> | {
        type: import("vue").PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    showClear: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: import("vue").PropType<"small" | "default" | "large"> | {
        type: import("vue").PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    style: import("vue").PropType<import("vue").CSSProperties> | {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    suffix: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    validateStatus: import("vue").PropType<"default" | "error" | "warning"> | {
        type: import("vue").PropType<"default" | "error" | "warning">;
        default?: any;
        required?: false;
    };
    value: import("vue").PropType<string[]> | {
        type: import("vue").PropType<string[]>;
        default?: any;
        required?: false;
    };
    autoFocus: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': import("vue").PropType<string> | {
        type: import("vue").PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: import("vue").PropType<boolean> | {
        type: import("vue").PropType<boolean>;
        default?: any;
        required?: false;
    };
}>>>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export { FormInput, FormInputNumber, FormTextArea, FormSelectBase as FormSelect, FormSelectOption, FormSelectOptionGroup, FormCheckboxGroup, FormCheckbox, FormRadioGroup, FormRadio, FormDatePicker, FormSwitch, FormSlider, FormTimePicker, FormTreeSelect, FormCascader, FormRating, FormAutoComplete, FormUpload, FormTagInput };
