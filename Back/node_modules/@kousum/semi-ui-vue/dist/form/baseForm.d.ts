import '@douyinfe/semi-foundation/lib/es/form/form.css';
import type { BaseFormProps, FormState, FormApi, FormFCChild } from './interface';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../interface';
import { ReactFieldError } from './errorMessage';
export declare const vuePropsType: CombineProps<BaseFormProps<any>>;
declare const Form: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onSubmit: PropType<(values: any, e?: any) => void> | {
        type: PropType<(values: any, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onSubmitFail: PropType<(errors: Record<string | number | symbol, ReactFieldError>, values: Partial<any>, e?: any) => void> | {
        type: PropType<(errors: Record<string | number | symbol, ReactFieldError>, values: Partial<any>, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onReset: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onValueChange: PropType<(values: any, changedValue: Partial<any>) => void> | {
        type: PropType<(values: any, changedValue: Partial<any>) => void>;
        default?: any;
        required?: false;
    };
    onErrorChange: PropType<(errors: Record<string | number | symbol, ReactFieldError>, changedError?: Partial<Record<string | number | symbol, ReactFieldError>>) => void> | {
        type: PropType<(errors: Record<string | number | symbol, ReactFieldError>, changedError?: Partial<Record<string | number | symbol, ReactFieldError>>) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(formState: FormState) => void> | {
        type: PropType<(formState: FormState) => void>;
        default?: any;
        required?: false;
    };
    allowEmpty: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateFields: PropType<(values: any) => string | Partial<Record<string, any> | {
        [x: string]: string;
    }>> | {
        type: PropType<(values: any) => string | Partial<Record<string, any> | {
            [x: string]: string;
        }>>;
        default?: any;
        required?: false;
    };
    initValues: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    getFormApi: PropType<(formApi: FormApi<any>) => void> | {
        type: PropType<(formApi: FormApi<any>) => void>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    extraTextPosition: PropType<"middle" | "bottom"> | {
        type: PropType<"middle" | "bottom">;
        default?: any;
        required?: false;
    };
    layout: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    labelPosition: PropType<"inset" | "left" | "top"> | {
        type: PropType<"inset" | "left" | "top">;
        default?: any;
        required?: false;
    };
    labelWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    labelAlign: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    labelCol: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    wrapperCol: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    render: PropType<(internalProps: FormFCChild) => import("../interface").VueJsxNode> | {
        type: PropType<(internalProps: FormFCChild) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    component: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    autoScrollToError: PropType<boolean | import("scroll-into-view-if-needed").Options<any>> | {
        type: PropType<boolean | import("scroll-into-view-if-needed").Options<any>>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showValidateIcon: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    stopValidateWithError: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<{
        submit?: boolean;
        reset?: boolean;
    }> | {
        type: PropType<{
            submit?: boolean;
            reset?: boolean;
        }>;
        default?: any;
        required?: false;
    };
    trigger: PropType<import("@douyinfe/semi-foundation/lib/es/form/interface").FieldValidateTriggerType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/form/interface").FieldValidateTriggerType>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onSubmit: PropType<(values: any, e?: any) => void> | {
        type: PropType<(values: any, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onSubmitFail: PropType<(errors: Record<string | number | symbol, ReactFieldError>, values: Partial<any>, e?: any) => void> | {
        type: PropType<(errors: Record<string | number | symbol, ReactFieldError>, values: Partial<any>, e?: any) => void>;
        default?: any;
        required?: false;
    };
    onReset: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onValueChange: PropType<(values: any, changedValue: Partial<any>) => void> | {
        type: PropType<(values: any, changedValue: Partial<any>) => void>;
        default?: any;
        required?: false;
    };
    onErrorChange: PropType<(errors: Record<string | number | symbol, ReactFieldError>, changedError?: Partial<Record<string | number | symbol, ReactFieldError>>) => void> | {
        type: PropType<(errors: Record<string | number | symbol, ReactFieldError>, changedError?: Partial<Record<string | number | symbol, ReactFieldError>>) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(formState: FormState) => void> | {
        type: PropType<(formState: FormState) => void>;
        default?: any;
        required?: false;
    };
    allowEmpty: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateFields: PropType<(values: any) => string | Partial<Record<string, any> | {
        [x: string]: string;
    }>> | {
        type: PropType<(values: any) => string | Partial<Record<string, any> | {
            [x: string]: string;
        }>>;
        default?: any;
        required?: false;
    };
    initValues: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    getFormApi: PropType<(formApi: FormApi<any>) => void> | {
        type: PropType<(formApi: FormApi<any>) => void>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    extraTextPosition: PropType<"middle" | "bottom"> | {
        type: PropType<"middle" | "bottom">;
        default?: any;
        required?: false;
    };
    layout: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    labelPosition: PropType<"inset" | "left" | "top"> | {
        type: PropType<"inset" | "left" | "top">;
        default?: any;
        required?: false;
    };
    labelWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    labelAlign: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    labelCol: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    wrapperCol: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    render: PropType<(internalProps: FormFCChild) => import("../interface").VueJsxNode> | {
        type: PropType<(internalProps: FormFCChild) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    component: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    autoScrollToError: PropType<boolean | import("scroll-into-view-if-needed").Options<any>> | {
        type: PropType<boolean | import("scroll-into-view-if-needed").Options<any>>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showValidateIcon: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    stopValidateWithError: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<{
        submit?: boolean;
        reset?: boolean;
    }> | {
        type: PropType<{
            submit?: boolean;
            reset?: boolean;
        }>;
        default?: any;
        required?: false;
    };
    trigger: PropType<import("@douyinfe/semi-foundation/lib/es/form/interface").FieldValidateTriggerType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/form/interface").FieldValidateTriggerType>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Form;
