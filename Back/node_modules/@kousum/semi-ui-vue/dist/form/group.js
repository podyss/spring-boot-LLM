import { defineComponent as A, useSlots as W, cloneVNode as B, createVNode as t, mergeProps as f, Fragment as F, isVNode as L } from "vue";
import N from "classnames";
import { isString as U } from "lodash";
import * as z from "../PropTypes";
import { isValid as M } from '@douyinfe/semi-foundation/lib/es/form/utils';
import { cssClasses as R } from '@douyinfe/semi-foundation/lib/es/form/constants';
import * as X from '@douyinfe/semi-foundation/lib/es/utils/object';
import _ from "./errorMessage";
import T from "./label";
import { useFormState as q } from "./hooks/index";
import D from "../input/inputGroup";
import { Col as b } from "../grid/index";
import { useFormUpdaterContext as H } from "./context/FormUpdaterContext/Consumer";
import { noop as $ } from '@douyinfe/semi-foundation/lib/es/utils/function';
function h(e) {
  return typeof e == "function" || Object.prototype.toString.call(e) === "[object Object]" && !L(e);
}
const i = R.PREFIX, J = (e) => {
  const {
    fieldSet: a
  } = e, x = q(), p = a.map((o) => X.get(x.value.errors, o));
  return M(p) ? null : t(_, {
    error: p,
    showValidateIcon: e.showValidateIcon,
    isInInputGroup: e.isInInputGroup
  }, null);
}, K = {
  className: {
    type: String,
    default: ""
  },
  size: {
    type: String,
    default: "default"
  },
  style: [String, Object],
  onBlur: {
    type: Function,
    default: $
  },
  onFocus: {
    type: Function,
    default: $
  },
  label: Object,
  labelPosition: String,
  disabled: Boolean,
  extraText: z.node,
  extraTextPosition: String
}, pt = /* @__PURE__ */ A({
  props: {
    ...K
  },
  name: "FormInputGroup",
  setup(e, {}) {
    const a = W(), {
      context: x
    } = H();
    function p(o, d) {
      return o ? U(o) ? t(T, {
        width: d.labelWidth,
        text: o
      }, null) : t(T, f({
        width: d.labelWidth
      }, o), null) : null;
    }
    return () => {
      var v;
      const o = (v = a.default) == null ? void 0 : v.call(a), {
        label: d,
        extraText: g,
        extraTextPosition: l,
        ...j
      } = e, r = x.value.getFormProps(["labelPosition", "labelWidth", "labelAlign", "showValidateIcon", "wrapperCol", "labelCol", "disabled"]), C = e.labelPosition || r.labelPosition, G = [], I = o.map((u) => u && u.props && u.props.field ? (G.push(u.props.field), B(u, {
        isInInputGroup: !0
        // noErrorMessage: true,
        // noLabel: true
      })) : null), O = N({
        [`${i}-field-group`]: !0
      }), c = r.labelCol, S = r.wrapperCol, E = r.labelAlign, w = c && S, V = c ? `${i}-col-${E}` : "", n = p(d, r), P = t(D, f({
        disabled: r.disabled
      }, j), h(I) ? I : {
        default: () => [I]
      }), y = t(J, {
        fieldSet: G,
        showValidateIcon: r.showValidateIcon,
        isInInputGroup: !0
      }, null), k = N(`${i}-field-extra`, {
        [`${i}-field-extra-string`]: typeof g == "string",
        [`${i}-field-extra-middle`]: l === "middle",
        [`${i}-field-extra-bottom`]: l === "bottom"
      }), s = g ? t("div", {
        class: k,
        "x-semi-prop": "extraText"
      }, [g]) : null;
      let m;
      switch (!0) {
        case !w:
          m = t(F, null, [n, t("div", null, [l === "middle" ? s : null, P, l === "bottom" ? s : null, y])]);
          break;
        case (w && C === "top"):
          m = t(F, null, [t("div", {
            style: {
              overflow: "hidden"
            }
          }, [t(b, f(c, {
            className: V
          }), h(n) ? n : {
            default: () => [n]
          })]), t(b, S, {
            default: () => [l === "middle" ? s : null, P, l === "bottom" ? s : null, y]
          })]);
          break;
        case (w && C !== "top"):
          m = t(F, null, [t(b, f(c, {
            className: V
          }), h(n) ? n : {
            default: () => [n]
          }), t(b, S, {
            default: () => [l === "middle" ? s : null, P, l === "bottom" ? s : null, y]
          })]);
          break;
      }
      return t("div", {
        "x-label-pos": C,
        class: O
      }, [m]);
    };
  }
});
export {
  pt as default,
  K as vuePropsType
};
//# sourceMappingURL=group.js.map
