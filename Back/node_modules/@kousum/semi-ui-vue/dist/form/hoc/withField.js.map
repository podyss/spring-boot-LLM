{"version":3,"file":"withField.js","sources":["../../../src/components/form/hoc/withField.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport * as PropTypes from '../../PropTypes';\nimport { cssClasses } from '@douyinfe/semi-foundation/form/constants';\nimport {\n  generateValidatesFromRules,\n  mergeOptions,\n  mergeProps,\n  transformDefaultBooleanAPI,\n  transformTrigger,\n} from '@douyinfe/semi-foundation/form/utils';\nimport { isValid } from './utils';\nimport * as ObjectUtil from '@douyinfe/semi-foundation/utils/object';\nimport isPromise from '@douyinfe/semi-foundation/utils/isPromise';\nimport warning from '@douyinfe/semi-foundation/utils/warning';\n\nimport { useArrayFieldState, useFormState, useStateWithGetter } from '../hooks/index';\nimport ErrorMessage from '../errorMessage';\nimport { isElement } from '../../_base/reactUtils';\nimport Label, { type LabelProps } from '../label';\nimport { Col } from '../../grid';\nimport type { CallOpts, WithFieldOption } from '@douyinfe/semi-foundation/form/interface';\nimport type { CommonexcludeType, CommonFieldProps } from '../interface';\nimport type { Subtract } from 'utility-types';\nimport {\n  type ComponentObjectPropsOptions,\n  type CSSProperties,\n  defineComponent,\n  type DefineComponent,\n  type DefineSetupFnComponent,\n  Fragment,\n  type FunctionalComponent,\n  h,\n  onBeforeMount,\n  onBeforeUnmount,\n  onMounted,\n  PropType,\n  type Ref,\n  ref,\n  shallowRef,\n  unref,\n  useSlots,\n  type VNode,\n  watch,\n  withMemo,\n} from 'vue';\nimport { CombineProps, VueHTMLAttributes, type VueJsxNode } from '../../interface';\nimport { useFormUpdaterContext } from '../context/FormUpdaterContext/Consumer';\nimport { omit } from 'lodash';\nimport { useHasInProps } from '../../_base/baseComponent';\n\nconst prefix = cssClasses.PREFIX;\n\n// To avoid useLayoutEffect warning when ssr, refer: https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n// Fix issue 1140\nconst useIsomorphicEffect = typeof window !== 'undefined' ? onBeforeMount : onMounted;\n\n/**\n * withFiled is used to inject components\n * 1. Takes over the value and onChange of the component and synchronizes them to Form Foundation\n * 2. Insert <Label>\n * 3. Insert <ErrorMessage>\n */\n\nfunction withField<\n  C,\n  T extends Subtract<VueHTMLAttributes, CommonexcludeType> & CommonFieldProps & VueHTMLAttributes & C,\n>(\n  Component: DefineSetupFnComponent<C> | ((props: C) => any),\n  opts?: WithFieldOption,\n  vuePropsType?: CombineProps<C>\n) {\n  const propsFromComponent_ = (Component as unknown as DefineComponent).props || {};\n  const propsFromComponent = {};\n  Object.keys(propsFromComponent_).forEach((key) => {\n    propsFromComponent[key] = {\n      ...propsFromComponent_[key],\n      default: undefined,\n    };\n    delete propsFromComponent[key].default;\n  });\n  const vueProps: CombineProps<CommonFieldProps> = {\n    ...omit(\n      { ...propsFromComponent, ...(vuePropsType || {}) } || {},\n      // 'style',\n      'class', 'key'\n    ),\n    label: [...PropTypes.node, PropTypes.func],\n    id: [String],\n    field: {\n      type: String,\n      required: true\n    },\n    className: String,\n    prefix: String,\n    labelPosition: String as PropType<CommonFieldProps['labelPosition']>,\n    labelAlign: String as PropType<CommonFieldProps['labelAlign']>,\n    labelWidth: [String, Number],\n    noLabel: Boolean,\n    noErrorMessage: Boolean,\n    name: String,\n    fieldClassName: String,\n    fieldStyle: Object,\n    initValue: PropTypes.any,\n    validate: [...PropTypes.node, Function] as PropType<CommonFieldProps['validate']>,\n    /** Check rules, check library based on async-validator */\n    rules: PropTypes.array,\n    /** Check trigger timing */\n    trigger: [PropTypes.string, PropTypes.array] as PropType<CommonFieldProps['trigger']>,\n    // onChange: (fieldValue: any) => void;\n    /** Converts form control values before validation */\n    transform: PropTypes.func as PropType<CommonFieldProps['transform']>,\n    /** Make a second change to the component's value before the UI update */\n    convert: PropTypes.func as PropType<CommonFieldProps['convert']>,\n    allowEmptyString: PropTypes.bool,\n    /** When true, use rules verification, after encountering the first rule that fails the test, the verification of subsequent rules will no longer be triggered */\n    stopValidateWithError: PropTypes.bool,\n    /* Custom prompt information is displayed in the same block as the verification information. When both have values, the verification information is displayed first */\n    helpText: PropTypes.node as PropType<CommonFieldProps['helpText']>,\n    /* Extra message, you can use this when you need an error message and the prompt text to appear at the same time, after helpText/errorMessage */\n    extraText: PropTypes.node as PropType<CommonFieldProps['extraText']>,\n    extraTextPosition: PropTypes.string as PropType<CommonFieldProps['extraTextPosition']>,\n    /** These declaration just hack for Subtract, not valid props in CommonFieldProps */\n    defaultValue: PropTypes.any,\n    /** Whether to take over only the data stream, when true, it will not automatically insert modules such as ErrorMessage, Label, extraText, etc. The style and DOM structure are consistent with the original component */\n    pure: PropTypes.bool,\n  };\n  const SemiField = defineComponent({\n    props: {\n      ...vueProps as CombineProps<CommonFieldProps & C>\n    },\n    name: 'Form' + Component.name,\n    //@ts-ignore\n    setup(truthProps, { attrs: props }) {\n      const slots = useSlots();\n      const { getProps, hasInProps } = useHasInProps();\n\n      function _getProps() {\n        return getProps({ ...props, ...truthProps });\n      }\n\n      // grab formUpdater (the api for field to read/modify FormState) from context\n      const { context: updater } = useFormUpdaterContext();\n      // use arrayFieldState to fix issue 615\n      let { context: arrayFieldState } = useArrayFieldState();\n\n      // To prevent user forgetting to pass the field, use undefined as the key, and updater.value.getValue will get the wrong value.\n      let initValueInFormOpts =\n        typeof mergeProps(_getProps()).field !== 'undefined'\n          ? updater.value.getValue(mergeProps(_getProps()).field)\n          : undefined; // Get the init value of form from formP rops.init Values Get the initial value set in the initValues of Form\n      let initVal =\n        typeof mergeProps(_getProps()).initValue !== 'undefined'\n          ? mergeProps(_getProps()).initValue\n          : initValueInFormOpts;\n\n      try {\n        if (arrayFieldState.value) {\n          initVal =\n            arrayFieldState.value.shouldUseInitValue && typeof mergeProps(_getProps()).initValue !== 'undefined'\n              ? mergeProps(_getProps()).initValue\n              : initValueInFormOpts;\n        }\n      } catch (err) {}\n\n      // FIXME typeof initVal\n      const [value, setValue, getVal] = useStateWithGetter(typeof initVal !== undefined ? initVal : null);\n\n      // watch([()=>props.field, ()=>props.initValue], ()=>{\n      //     let initValueInFormOpts = typeof mergeProps({...props, ...truthProps}).field !== 'undefined' ? updater.value.getValue(mergeProps({...props, ...truthProps}).field) : undefined; // Get the init value of form from formP rops.init Values Get the initial value set in the initValues of Form\n      //     let initVal = typeof mergeProps({...props, ...truthProps}).initValue !== 'undefined' ? mergeProps({...props, ...truthProps}).initValue : initValueInFormOpts;\n      //     setValue(typeof initVal !== undefined ? initVal : null)\n      // })\n\n      const isUnmounted = shallowRef(false);\n      const rulesRef: Ref = ref(mergeProps(_getProps()).rules);\n      const validateRef: Ref = ref(( truthProps as CommonFieldProps & C).validate);\n      const validatePromise = shallowRef<Promise<any> | null>(null);\n\n      // notNotify is true means that the onChange of the Form does not need to be triggered\n      // notUpdate is true means that this operation does not need to trigger the forceUpdate\n      const updateTouched = (isTouched: boolean, callOpts?: CallOpts) => {\n        let { field } = mergeProps(_getProps());\n        setTouched(isTouched);\n        updater.value.updateStateTouched(field, isTouched, callOpts);\n      };\n\n      const updateError = (errors: any, callOpts?: CallOpts) => {\n        if (isUnmounted.value) {\n          return;\n        }\n        let { field } = mergeProps(_getProps());\n        if (errors === getError()) {\n          // When the inspection result is unchanged, no need to update, saving a forceUpdate overhead\n          // When errors is an array, deepEqual is not used, and it is always treated as a need to update\n          // 检验结果不变时，无需更新，节省一次forceUpdate开销\n          // errors为数组时，不做deepEqual，始终当做需要更新处理\n          return;\n        }\n        setError(errors);\n        updater.value.updateStateError(field, errors, callOpts);\n        if (!isValid(errors)) {\n          setStatus('error');\n        } else {\n          setStatus('success');\n        }\n      };\n\n      function getAllowEmpty(allowEmpty) {\n        return allowEmpty || updater.value.getFormProps().allowEmpty;\n      }\n\n      const updateValue = (val: any, callOpts?: CallOpts) => {\n        let { field, allowEmpty } = mergeProps(_getProps());\n        allowEmpty = getAllowEmpty(allowEmpty);\n        setValue(val);\n        let newOpts = {\n          ...callOpts,\n          allowEmpty,\n        };\n        updater.value.updateStateValue(field, val, newOpts);\n        // truthProps['onUpdate:modelValue']?.(val)\n      };\n\n      const reset = () => {\n        let callOpts = {\n          notNotify: true,\n          notUpdate: true,\n        };\n        // reset is called by the FormFoundaion uniformly. The field level does not need to trigger notify and update.\n        updateValue(initVal !== null ? initVal : undefined, callOpts);\n        updateError(undefined, callOpts);\n        updateTouched(undefined, callOpts);\n        setStatus('default');\n      };\n\n      // Execute the validation rules specified by rules\n      const _validateInternal = (val: any, callOpts: CallOpts) => {\n        let latestRules = rulesRef.value || [];\n        const validator = generateValidatesFromRules(mergeProps(_getProps()).field, latestRules);\n        const model = {\n          [mergeProps(_getProps()).field]: val,\n        };\n\n        let { stopValidateWithError } = mergeProps(_getProps());\n        let formProps = updater.value.getFormProps([\n          'labelPosition',\n          'labelWidth',\n          'labelAlign',\n          'labelCol',\n          'wrapperCol',\n          'disabled',\n          'showValidateIcon',\n          'extraTextPosition',\n          'stopValidateWithError',\n          'trigger',\n        ]);\n        let mergeStopValidateWithError = transformDefaultBooleanAPI(\n          stopValidateWithError,\n          formProps.stopValidateWithError,\n          false\n        );\n\n        const rootPromise = new Promise((resolve, reject) => {\n          validator\n            .validate(\n              model,\n              {\n                first: mergeStopValidateWithError,\n              },\n              // eslint-disable-next-line @typescript-eslint/no-empty-function\n              (errors, fields) => {}\n            )\n            .then((res) => {\n              if (isUnmounted.value || validatePromise.value !== rootPromise) {\n                return;\n              }\n              // validation passed\n              setStatus('success');\n              updateError(undefined, callOpts);\n              resolve({});\n            })\n            .catch((err) => {\n              if (isUnmounted.value || validatePromise.value !== rootPromise) {\n                return;\n              }\n\n              let { errors, fields } = err;\n              if (errors && fields) {\n                let messages = errors.map((e: any) => e.message);\n                if (messages.length === 1) {\n                  // eslint-disable-next-line prefer-destructuring\n                  messages = messages[0];\n                }\n                updateError(messages, callOpts);\n                if (!isValid(messages)) {\n                  setStatus('error');\n                  resolve(errors);\n                }\n              } else {\n                // Some grammatical errors in rules\n                setStatus('error');\n                updateError(err.message, callOpts);\n                resolve(err.message);\n                throw err;\n              }\n            });\n        });\n        validatePromise.value = rootPromise;\n\n        return rootPromise;\n      };\n\n      // execute custom validate function\n      const _validate = (val: any, values: any, callOpts: CallOpts) => {\n        const rootPromise = new Promise((resolve) => {\n          let maybePromisedErrors;\n          // let errorThrowSync;\n          try {\n            maybePromisedErrors = validateRef.value(val, values);\n          } catch (err) {\n            // error throw by syncValidate\n            maybePromisedErrors = err;\n          }\n          if (maybePromisedErrors === undefined) {\n            resolve({});\n            updateError(undefined, callOpts);\n          } else if (isPromise(maybePromisedErrors)) {\n            maybePromisedErrors.then((result: any) => {\n              // If the async validate is outdated (a newer validate occurs), the result should be discarded\n              if (isUnmounted.value || validatePromise.value !== rootPromise) {\n                return;\n              }\n\n              if (isValid(result)) {\n                // validate success，no need to do anything with result\n                updateError(undefined, callOpts);\n                resolve(null);\n              } else {\n                // validate failed\n                updateError(result, callOpts);\n                resolve(result);\n              }\n            });\n          } else {\n            if (isValid(maybePromisedErrors)) {\n              updateError(undefined, callOpts);\n              resolve(null);\n            } else {\n              updateError(maybePromisedErrors, callOpts);\n              resolve(maybePromisedErrors);\n            }\n          }\n        });\n\n        validatePromise.value = rootPromise;\n\n        return rootPromise;\n      };\n\n      const fieldValidate = (val: any, callOpts?: CallOpts) => {\n        let finalVal = val;\n        let latestRules = rulesRef.value;\n        if (mergeProps(_getProps()).transform) {\n          finalVal = mergeProps(_getProps()).transform(val);\n        }\n        if (validateRef.value) {\n          return _validate(finalVal, updater.value.getValue(), callOpts);\n        } else if (latestRules) {\n          return _validateInternal(finalVal, callOpts);\n        }\n        return null;\n      };\n\n      /**\n       * parse / format\n       * validate when trigger\n       *\n       */\n      const handleChange = (newValue: any, e: any, ...other: any[]) => {\n\n        let { trigger, emptyValue } = mergeProps(_getProps());\n        let { allowEmptyString, allowEmpty } = mergeProps(_getProps());\n        allowEmpty = getAllowEmpty(allowEmpty);\n        let { options, shouldInject } = mergeOptions(opts, props);\n        let fnKey = options.onKeyChangeFnName;\n        if (hasInProps(fnKey) && typeof truthProps[options.onKeyChangeFnName] === 'function') {\n          // @ts-ignore\n          truthProps[options.onKeyChangeFnName](newValue, e, ...other);\n        }\n\n        // support various type component\n        let val;\n        if (!options.valuePath) {\n          val = newValue;\n        } else {\n          val = ObjectUtil.get(newValue, options.valuePath);\n        }\n\n        // User can use convert function to updateValue before Component UI render\n        if (typeof mergeProps(_getProps()).convert === 'function') {\n          val = mergeProps(_getProps()).convert(val);\n        }\n\n        // TODO: allowEmptyString split into allowEmpty, emptyValue\n        // Added abandonment warning\n        // if (process.env.NODE_ENV !== 'production') {\n        //     warning(allowEmptyString, `'allowEmptyString' will be de deprecated in next version, please replace with 'allowEmpty' & 'emptyValue'\n        // `)\n        // }\n\n        // set value to undefined if it's an empty string\n        // allowEmptyString={true} is equivalent to allowEmpty = {true} emptyValue = \"\n        if (allowEmptyString || allowEmpty) {\n          if (val === '') {\n            // do nothing\n          }\n        } else {\n          if (val === emptyValue) {\n            val = undefined;\n          }\n        }\n\n        // maintain compoent cursor if needed\n        try {\n          if (e && e.target && e.target.selectionStart) {\n            setCursor(e.target.selectionStart);\n          }\n        } catch (err) {}\n\n        updateTouched(true, { notNotify: true, notUpdate: true });\n        updateValue(val);\n\n        let formProps = updater.value.getFormProps([\n          'labelPosition',\n          'labelWidth',\n          'labelAlign',\n          'labelCol',\n          'wrapperCol',\n          'disabled',\n          'showValidateIcon',\n          'extraTextPosition',\n          'stopValidateWithError',\n          'trigger',\n        ]);\n        let mergeTrigger = transformTrigger(trigger, formProps.trigger);\n        // only validate when trigger includes change\n        if (mergeTrigger.includes('change')) {\n          fieldValidate(val);\n        }\n      };\n\n      const handleBlur = (e: FocusEvent) => {\n        let { trigger } = mergeProps(_getProps());\n        let formProps = updater.value.getFormProps([\n          'labelPosition',\n          'labelWidth',\n          'labelAlign',\n          'labelCol',\n          'wrapperCol',\n          'disabled',\n          'showValidateIcon',\n          'extraTextPosition',\n          'stopValidateWithError',\n          'trigger',\n        ]);\n        let mergeTrigger = transformTrigger(trigger, formProps.trigger);\n\n        // @ts-ignore\n        if (truthProps.onBlur) {\n          // @ts-ignore\n          truthProps.onBlur(e);\n        }\n        if (!touched.value) {\n          updateTouched(true);\n        }\n        if (mergeTrigger.includes('blur')) {\n          let val = getVal();\n          fieldValidate(val);\n        }\n      };\n\n      // grab formState from context\n      const formState = useFormState();\n\n      // Error information: Array, String, undefined\n      const [error, setError, getError] = useStateWithGetter();\n      const touched = ref<boolean | undefined>();\n\n      function setTouched(val) {\n        touched.value = val;\n      }\n\n      const [cursor, setCursor, getCursor] = useStateWithGetter(0);\n      const status = ref(mergeProps(_getProps()).validateStatus); // use props.validateStatus to init\n      function setStatus(val) {\n        status.value = val;\n      }\n\n      // avoid hooks capture value, fixed issue 346\n      watch(\n        [() => ( truthProps as CommonFieldProps & C).rules, () => ( truthProps as CommonFieldProps & C).validate],\n        () => {\n          rulesRef.value = mergeProps(_getProps()).rules;\n          validateRef.value = ( truthProps as CommonFieldProps & C).validate;\n        },\n        { immediate: true }\n      );\n\n      // exec validate once when trigger inlcude 'mount'\n      useIsomorphicEffect(() => {\n        let { trigger } = mergeProps(_getProps());\n        let formProps = updater.value.getFormProps([\n          'labelPosition',\n          'labelWidth',\n          'labelAlign',\n          'labelCol',\n          'wrapperCol',\n          'disabled',\n          'showValidateIcon',\n          'extraTextPosition',\n          'stopValidateWithError',\n          'trigger',\n        ]);\n        let mergeTrigger = transformTrigger(trigger, formProps.trigger);\n\n        const validateOnMount = mergeTrigger.includes('mount');\n        isUnmounted.value = false;\n        if (validateOnMount) {\n          fieldValidate(value);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      });\n      onBeforeUnmount(() => {\n        isUnmounted.value = true;\n      });\n\n      watch(\n        () => ( truthProps as CommonFieldProps & C).field,\n        (value, oldValue, onCleanup) => {\n          let {\n            // condition,\n            field,\n            allowEmptyString,\n            allowEmpty,\n            keepState,\n          } = mergeProps(_getProps());\n          allowEmpty = getAllowEmpty(allowEmpty);\n          /** Field level maintains a separate layer of data, which is convenient for Form to control Field to update the UI */\n          // The field level maintains a separate layer of data, which is convenient for the Form to control the Field for UI updates.\n          const fieldApi = {\n            setValue: updateValue,\n            setTouched: updateTouched,\n            setError: updateError,\n            reset,\n            validate: fieldValidate,\n          };\n\n          // register\n          if (typeof field === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            return () => {};\n          }\n          // log('register: ' + field);\n\n          // field value may change after field component mounted, we use ref value here to get changed value\n          const refValue = getVal();\n          updater.value.register(\n            field,\n            {\n              value: refValue,\n              error: error.value,\n              touched,\n              status: status.value,\n            },\n            {\n              field,\n              fieldApi,\n              keepState,\n              allowEmpty: allowEmpty || allowEmptyString,\n            }\n          );\n          // return unRegister cb\n\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          onCleanup(() => {\n            const field = mergeProps(_getProps()).field\n            field && updater.value.unRegister(field);\n          });\n        },\n        { immediate: true }\n      );\n      // onBeforeUnmount(() => {\n      //   const field = mergeProps(_getProps()).field\n      //   field && updater.value.unRegister(field);\n      // });\n\n      return (_ctx, _cache) => {\n        const label = ( truthProps as CommonFieldProps & C).label;\n        const id = ( truthProps as CommonFieldProps & C).id;\n        let {\n          // condition,\n          field,\n          labelPosition,\n          labelWidth,\n          labelAlign,\n          labelCol,\n          wrapperCol,\n          noLabel,\n          noErrorMessage,\n          isInInputGroup,\n          initValue,\n          validate,\n          validateStatus,\n          trigger,\n          allowEmptyString,\n          allowEmpty,\n          emptyValue,\n          rules,\n          required,\n          keepState,\n          transform,\n          name,\n          fieldClassName,\n          fieldStyle,\n          convert,\n          stopValidateWithError,\n          helpText,\n          extraText,\n          extraTextPosition,\n          pure,\n          rest: rest_,\n        } = mergeProps(_getProps());\n\n        const rest = ( truthProps as CommonFieldProps & C).prefix ? { ...rest_, prefix: ( truthProps as CommonFieldProps & C).prefix } : rest_;\n        let { options, shouldInject } = mergeOptions(opts, props);\n\n        warning(\n          typeof field === 'undefined' && options.shouldInject,\n          \"[Semi Form]: 'field' is required, please check your props of Field Component\"\n        );\n\n        // 无需注入的直接返回，eg：Group内的checkbox、radio\n        // Return without injection, eg: <Checkbox> / <Radio> inside CheckboxGroup/RadioGroup\n        if (!shouldInject) {\n          return <Component {...rest}>{{ default: slots.default }}</Component>;\n        }\n\n        if (!updater.value.getFormProps) {\n          warning(true, '[Semi Form]: Field Component must be use inside the Form, please check your dom declaration');\n          return null;\n        }\n\n        const fieldState = {\n          value: value.value,\n          error: error.value,\n          touched: touched.value,\n          status: status.value,\n        };\n\n        let formProps = updater.value.getFormProps([\n          'labelPosition',\n          'labelWidth',\n          'labelAlign',\n          'labelCol',\n          'wrapperCol',\n          'disabled',\n          'showValidateIcon',\n          'extraTextPosition',\n        ]);\n        let mergeLabelPos = labelPosition || formProps.labelPosition;\n        let mergeLabelWidth = labelWidth || formProps.labelWidth;\n        let mergeLabelAlign = labelAlign || formProps.labelAlign;\n        let mergeLabelCol = labelCol || formProps.labelCol;\n        let mergeWrapperCol = wrapperCol || formProps.wrapperCol;\n        let mergeExtraPos = extraTextPosition || formProps.extraTextPosition || 'bottom';\n\n        // id attribute to improve a11y\n        const a11yId = id ? id : field;\n        const labelId = `${a11yId}-label`;\n        const helpTextId = `${a11yId}-helpText`;\n        const extraTextId = `${a11yId}-extraText`;\n        const errorMessageId = `${a11yId}-errormessage`;\n\n        // prefer to use validateStatus which pass by user throught props\n        let blockStatus = validateStatus ? validateStatus : status.value;\n\n        const extraCls = classNames(`${prefix}-field-extra`, {\n          [`${prefix}-field-extra-string`]: typeof extraText === 'string',\n          [`${prefix}-field-extra-middle`]: mergeExtraPos === 'middle',\n          [`${prefix}-field-extra-botttom`]: mergeExtraPos === 'bottom',\n        });\n\n        const extraContent = extraText ? (\n          <div class={extraCls} id={extraTextId} x-semi-prop=\"extraText\">\n            {extraText}\n          </div>\n        ) : null;\n\n        let newProps: Record<string, any> = {\n          id: a11yId,\n          disabled: formProps.disabled,\n          ...rest,\n          onBlur: handleBlur,\n          [options.onKeyChangeFnName]: handleChange,\n          // value 为Ref 对象\n          [options.valueKey]: unref(value),\n          validateStatus: blockStatus,\n          'aria-required': required,\n          'aria-labelledby': labelId,\n        };\n\n        if (helpText) {\n          newProps['aria-describedby'] = extraText ? `${helpTextId} ${extraTextId}` : helpTextId;\n        }\n\n        if (extraText) {\n          newProps['aria-describedby'] = helpText ? `${helpTextId} ${extraTextId}` : extraTextId;\n        }\n\n        if (status.value === 'error') {\n          newProps['aria-errormessage'] = errorMessageId;\n          newProps['aria-invalid'] = true;\n        }\n\n        const fieldCls = classNames({\n          [`${prefix}-field`]: true,\n          [`${prefix}-field-${name}`]: Boolean(name),\n          [fieldClassName]: Boolean(fieldClassName),\n        });\n        const fieldMaincls = classNames({\n          [`${prefix}-field-main`]: true,\n        });\n\n        if (mergeLabelPos === 'inset' && !noLabel) {\n          newProps.insetLabel = label || field;\n          newProps.insetLabelId = labelId;\n          if (typeof label === 'object' && !isElement(label)) {\n            // TODO\n            // @ts-ignore\n            newProps.insetLabel = label.text;\n            newProps.insetLabelId = labelId;\n          }\n        }\n\n        // @ts-ignore\n        const com = <Component {...(newProps as any)}>{{ default: slots.default }}</Component>;\n\n        // when use in InputGroup, no need to insert <Label>、<ErrorMessage> inside Field, just add it at Group\n        if (isInInputGroup) {\n          return com;\n        }\n\n        if (pure) {\n          let pureCls = classNames(rest.className, {\n            [`${prefix}-field-pure`]: true,\n            [`${prefix}-field-${name}`]: Boolean(name),\n            [fieldClassName]: Boolean(fieldClassName),\n          });\n          newProps.className = pureCls;\n          // @ts-ignore\n          return <Component {...(newProps as any)}>{{ default: slots.default }}</Component>;\n        }\n\n        let withCol = mergeLabelCol && mergeWrapperCol;\n        const labelColCls = mergeLabelAlign ? `${prefix}-col-${mergeLabelAlign}` : '';\n\n        // get label\n        let labelContent = null;\n        if (!noLabel && mergeLabelPos !== 'inset') {\n          let needSpread = typeof label === 'object' && !isElement(label) ? label : {};\n          labelContent = (\n            // @ts-ignore\n            <Label\n              text={label || field}\n              id={labelId}\n              required={required}\n              name={a11yId || name || field}\n              width={mergeLabelWidth}\n              align={mergeLabelAlign}\n              {...needSpread}\n            />\n          );\n        }\n\n        const fieldMainContent = (\n          <div class={fieldMaincls}>\n            {mergeExtraPos === 'middle' ? extraContent : null}\n            {com}\n            {!noErrorMessage ? (\n              <ErrorMessage\n                error={error.value}\n                validateStatus={blockStatus}\n                helpText={helpText}\n                helpTextId={helpTextId}\n                errorMessageId={errorMessageId}\n                showValidateIcon={formProps.showValidateIcon}\n              />\n            ) : null}\n            {mergeExtraPos === 'bottom' ? extraContent : null}\n          </div>\n        );\n\n        const withColContent = (\n          <Fragment>\n            {mergeLabelPos === 'top' ? (\n              <div style={{ overflow: 'hidden' }}>\n                <Col {...mergeLabelCol} className={labelColCls}>\n                  {labelContent}\n                </Col>\n              </div>\n            ) : (\n              <Col {...mergeLabelCol} className={labelColCls}>\n                {labelContent}\n              </Col>\n            )}\n            <Col {...mergeWrapperCol}>{fieldMainContent}</Col>\n          </Fragment>\n        );\n\n        // !important optimization\n        const shouldUpdate = [\n          ...Object.values(fieldState),\n          ...Object.values(props),\n          ...Object.values(truthProps),\n          field,\n          mergeLabelPos,\n          mergeLabelAlign,\n          formProps.disabled,\n        ];\n\n        return withMemo(\n          shouldUpdate,\n          () => {\n            return (\n              <div\n                class={fieldCls}\n                style={fieldStyle}\n                x-label-pos={mergeLabelPos}\n                x-field-id={field}\n                x-extra-pos={mergeExtraPos}\n              >\n                {withCol ? (\n                  withColContent\n                ) : (\n                  <Fragment>\n                    {labelContent}\n                    {fieldMainContent}\n                  </Fragment>\n                )}\n              </div>\n            );\n          },\n          _cache,\n          0\n        );\n      };\n    },\n  });\n\n  return SemiField;\n}\n\n// eslint-disable-next-line\nexport default withField;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefix","cssClasses","PREFIX","useIsomorphicEffect","window","onBeforeMount","onMounted","withField","Component","opts","vuePropsType","propsFromComponent_","props","propsFromComponent","keys","forEach","key","default","undefined","vueProps","omit","label","PropTypes","node","func","id","String","field","type","required","className","labelPosition","labelAlign","labelWidth","Number","noLabel","Boolean","noErrorMessage","name","fieldClassName","fieldStyle","initValue","any","validate","Function","rules","array","trigger","string","transform","convert","allowEmptyString","bool","stopValidateWithError","helpText","extraText","extraTextPosition","defaultValue","pure","defineComponent","setup","truthProps","attrs","slots","useSlots","getProps","hasInProps","useHasInProps","_getProps","context","updater","useFormUpdaterContext","arrayFieldState","useArrayFieldState","initValueInFormOpts","mergeProps","value","getValue","initVal","shouldUseInitValue","setValue","getVal","useStateWithGetter","isUnmounted","shallowRef","rulesRef","ref","validateRef","validatePromise","updateTouched","isTouched","callOpts","setTouched","updateStateTouched","updateError","errors","getError","setError","updateStateError","isValid","setStatus","getAllowEmpty","allowEmpty","getFormProps","updateValue","val","newOpts","updateStateValue","reset","notNotify","notUpdate","_validateInternal","latestRules","validator","generateValidatesFromRules","model","formProps","mergeStopValidateWithError","transformDefaultBooleanAPI","rootPromise","Promise","resolve","reject","first","fields","then","res","catch","err","messages","map","e","message","length","_validate","values","maybePromisedErrors","isPromise","result","fieldValidate","finalVal","handleChange","newValue","other","emptyValue","options","shouldInject","mergeOptions","fnKey","onKeyChangeFnName","valuePath","ObjectUtil","get","target","selectionStart","setCursor","transformTrigger","includes","handleBlur","mergeTrigger","onBlur","touched","useFormState","error","cursor","getCursor","status","validateStatus","watch","immediate","validateOnMount","onBeforeUnmount","oldValue","onCleanup","keepState","fieldApi","refValue","register","unRegister","_ctx","_cache","labelCol","wrapperCol","isInInputGroup","rest","rest_","warning","_createVNode","fieldState","mergeLabelPos","mergeLabelWidth","mergeLabelAlign","mergeLabelCol","mergeWrapperCol","mergeExtraPos","a11yId","labelId","helpTextId","extraTextId","errorMessageId","blockStatus","extraCls","classNames","extraContent","newProps","disabled","valueKey","unref","fieldCls","fieldMaincls","insetLabel","insetLabelId","isElement","text","com","pureCls","withCol","labelColCls","labelContent","needSpread","Label","_mergeProps","fieldMainContent","ErrorMessage","showValidateIcon","withColContent","_Fragment","overflow","Col","shouldUpdate","withMemo"],"mappings":"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"}