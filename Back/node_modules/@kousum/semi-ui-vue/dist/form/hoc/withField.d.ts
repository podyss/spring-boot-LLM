import type { WithFieldOption } from '@douyinfe/semi-foundation/lib/es/form/interface';
import type { CommonexcludeType, CommonFieldProps } from '../interface';
import type { Subtract } from 'utility-types';
import { type ComponentObjectPropsOptions, type DefineComponent, type DefineSetupFnComponent, type VNode } from 'vue';
import { CombineProps, VueHTMLAttributes } from '../../interface';
/**
 * withFiled is used to inject components
 * 1. Takes over the value and onChange of the component and synchronizes them to Form Foundation
 * 2. Insert <Label>
 * 3. Insert <ErrorMessage>
 */
declare function withField<C, T extends Subtract<VueHTMLAttributes, CommonexcludeType> & CommonFieldProps & VueHTMLAttributes & C>(Component: DefineSetupFnComponent<C> | ((props: C) => any), opts?: WithFieldOption, vuePropsType?: CombineProps<C>): DefineComponent<ComponentObjectPropsOptions<{
    [x: string]: unknown;
}> extends CombineProps<CommonFieldProps & C> ? {} : import("vue").ExtractPropTypes<CombineProps<CommonFieldProps & C>>, (_ctx: any, _cache: any) => VNode<any, any, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<ComponentObjectPropsOptions<{
    [x: string]: unknown;
}> extends CombineProps<CommonFieldProps & C> ? {} : import("vue").ExtractPropTypes<CombineProps<CommonFieldProps & C>>> & Readonly<{}>, import("vue").ExtractDefaultPropTypes<CombineProps<CommonFieldProps & C>>, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default withField;
