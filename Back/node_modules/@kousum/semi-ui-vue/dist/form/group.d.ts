import { LabelProps } from './label';
import { InputGroupProps as BacisInputGroupProps } from '../input/inputGroup';
import { PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface InputGroupProps extends BacisInputGroupProps {
    label?: LabelProps;
    labelPosition?: 'left' | 'top';
    extraText?: VueJsxNode;
    extraTextPosition?: 'bottom' | 'middle';
}
export declare const vuePropsType: CombineProps<InputGroupProps>;
declare const FormInputGroup: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    label: PropType<LabelProps> | {
        type: PropType<LabelProps>;
        default?: any;
        required?: false;
    };
    labelPosition: PropType<"left" | "top"> | {
        type: PropType<"left" | "top">;
        default?: any;
        required?: false;
    };
    extraText: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    extraTextPosition: PropType<"middle" | "bottom"> | {
        type: PropType<"middle" | "bottom">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    size: PropType<import("../input/inputGroup").InputSize> | {
        type: PropType<import("../input/inputGroup").InputSize>;
        default?: any;
        required?: false;
    };
    style: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    label: PropType<LabelProps> | {
        type: PropType<LabelProps>;
        default?: any;
        required?: false;
    };
    labelPosition: PropType<"left" | "top"> | {
        type: PropType<"left" | "top">;
        default?: any;
        required?: false;
    };
    extraText: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    extraTextPosition: PropType<"middle" | "bottom"> | {
        type: PropType<"middle" | "bottom">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    size: PropType<import("../input/inputGroup").InputSize> | {
        type: PropType<import("../input/inputGroup").InputSize>;
        default?: any;
        required?: false;
    };
    style: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default FormInputGroup;
