import { defineComponent as T, useSlots as x, createVNode as t, cloneVNode as h, isVNode as N } from "vue";
import v from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as M } from "../PropTypes";
import { cssClasses as V } from '@douyinfe/semi-foundation/lib/es/form/constants';
import { IconAlertTriangle as b, IconAlertCircle as I } from "@kousum/semi-icons-vue";
const u = V.PREFIX, A = {
  error: e.oneOfType([e.bool, e.string, e.array, e.node]),
  className: e.string,
  style: e.object,
  validateStatus: e.string,
  showValidateIcon: e.bool,
  helpText: e.node,
  isInInputGroup: e.bool,
  // internal props
  errorMessageId: e.string,
  helpTextId: e.string
}, C = M(A, {}), B = /* @__PURE__ */ T({
  props: {
    ...C
  },
  name: "ErrorMessage",
  setup(l, {}) {
    x();
    function d(s) {
      const {
        helpTextId: a,
        errorMessageId: i
      } = l, o = l.error;
      let r = i;
      if (o || (r = a), typeof s == "string")
        return t("span", {
          id: r
        }, [s]);
      if (Array.isArray(s)) {
        const n = s.filter((c) => c);
        return n.length ? t("span", {
          id: r
        }, [n.join(", ")]) : null;
      } else if (N(s))
        return s;
      return null;
    }
    return () => {
      const {
        error: s,
        className: a,
        style: i,
        validateStatus: o,
        helpText: r,
        showValidateIcon: n,
        isInInputGroup: c
      } = l, y = v({
        [u + "-field-error-message"]: !!s,
        [u + "-field-help-text"]: !!r
      }, a);
      if (!s && !r)
        return null;
      const f = {
        warning: t(b, null, null),
        error: t(I, null, null)
      }, m = d(s || r), g = `${u}-field-validate-status-icon`;
      let p = null;
      return c ? p = t(I, {
        className: g
      }, null) : f[o] && (p = h(f[o], {
        class: g
      })), t("div", {
        class: y,
        style: i
      }, [n && m ? p : null, m]);
    };
  }
});
export {
  B as default,
  C as vuePropsType
};
//# sourceMappingURL=errorMessage.js.map
