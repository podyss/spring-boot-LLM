{"version":3,"file":"group.js","sources":["../../src/components/form/group.tsx"],"sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport classNames from 'classnames';\nimport { isString } from 'lodash';\nimport * as PropTypes from '../PropTypes';\nimport { isValid } from '@douyinfe/semi-foundation/form/utils';\nimport { cssClasses } from '@douyinfe/semi-foundation/form/constants';\nimport * as ObjectUtil from '@douyinfe/semi-foundation/utils/object';\nimport ErrorMessage, { ReactFieldError } from './errorMessage';\nimport Label, { LabelProps } from './label';\nimport { FormUpdaterContext } from './context';\nimport { useFormState } from './hooks/index';\nimport InputGroup, { InputGroupProps as BacisInputGroupProps } from '../input/inputGroup';\nimport { BaseFormProps, FormState } from './interface';\nimport { FormUpdaterContextType } from '@douyinfe/semi-foundation/form/interface';\nimport { Col, Row } from '../grid/index';\nimport { defineComponent, h, useSlots, Fragment, cloneVNode, PropType } from 'vue';\nimport { useFormUpdaterContext } from './context/FormUpdaterContext/Consumer';\nimport { noop } from '@douyinfe/semi-foundation/utils/function';\nimport { CombineProps, VueJsxNode } from '../interface';\nimport { ComponentObjectPropsOptions } from 'vue';\ninterface GroupErrorProps {\n  showValidateIcon?: boolean;\n  isInInputGroup?: boolean;\n  error?: ReactFieldError;\n  fieldSet?: string[];\n}\nexport interface InputGroupProps extends BacisInputGroupProps {\n  label?: LabelProps;\n  labelPosition?: 'left' | 'top';\n  extraText?: VueJsxNode;\n  extraTextPosition?: 'bottom' | 'middle';\n}\n\nconst prefix = cssClasses.PREFIX;\n\n// Group component to remove Labels and ErrorMessages from its child fields\n// Unified insertion of Labels and ErrorMessages from the group level\n\n// Get Errors of all field in this group\nconst GroupError = (props: GroupErrorProps) => {\n  const { fieldSet } = props;\n  const formState = useFormState();\n  const error = fieldSet.map((field: string) => ObjectUtil.get(formState.value.errors, field));\n\n  if (isValid(error)) {\n    return null;\n  }\n  return <ErrorMessage error={error} showValidateIcon={props.showValidateIcon} isInInputGroup={props.isInInputGroup} />;\n};\n\nexport const vuePropsType: CombineProps<InputGroupProps> = {\n  className: { type: String, default: '' },\n  size: { type: String as PropType<InputGroupProps['size']>, default: 'default' },\n  style: [String, Object],\n  onBlur: {\n    type: Function as PropType<InputGroupProps['onBlur']>,\n    default: noop,\n  },\n  onFocus: {\n    type: Function as PropType<InputGroupProps['onFocus']>,\n    default: noop,\n  },\n  label: Object,\n  labelPosition: String as PropType<InputGroupProps['labelPosition']>,\n  disabled: Boolean,\n  extraText: PropTypes.node,\n  extraTextPosition: String as PropType<InputGroupProps['extraTextPosition']>,\n};\nconst FormInputGroup = defineComponent({\n  props: { ...vuePropsType },\n  name: 'FormInputGroup',\n  setup(props, {}) {\n    const slots = useSlots();\n\n    const { context } = useFormUpdaterContext();\n    function renderLabel(label: LabelProps, formProps: BaseFormProps) {\n      if (label) {\n        if (isString(label)) {\n          return <Label width={formProps.labelWidth} text={label} />;\n        } else {\n          return <Label width={formProps.labelWidth} {...label} />;\n        }\n      }\n      return null;\n    }\n\n    return () => {\n      const children = slots.default?.();\n      const { label, extraText, extraTextPosition, ...rest } = props;\n\n      const updater = context.value;\n      const formProps = updater.getFormProps([\n        'labelPosition',\n        'labelWidth',\n        'labelAlign',\n        'showValidateIcon',\n        'wrapperCol',\n        'labelCol',\n        'disabled',\n      ]);\n      const labelPosition = props.labelPosition || formProps.labelPosition;\n      const groupFieldSet: Array<string> = [];\n      const inner = children.map((child: any) => {\n        if (child && child.props && child.props.field) {\n          groupFieldSet.push(child.props.field);\n          return cloneVNode(child, {\n            isInInputGroup: true,\n            // noErrorMessage: true,\n            // noLabel: true\n          });\n        }\n        return null;\n      });\n\n      const groupCls = classNames({\n        [`${prefix}-field-group`]: true,\n      });\n\n      const labelCol = formProps.labelCol;\n      const wrapperCol = formProps.wrapperCol;\n      const labelAlign = formProps.labelAlign;\n      const appendCol = labelCol && wrapperCol;\n\n      const labelColCls = labelCol ? `${prefix}-col-${labelAlign}` : '';\n\n      const labelContent = renderLabel(label, formProps);\n      const inputGroupContent = (\n        <InputGroup disabled={formProps.disabled} {...rest}>\n          {inner}\n        </InputGroup>\n      );\n      const groupErrorContent = (\n        <GroupError fieldSet={groupFieldSet} showValidateIcon={formProps.showValidateIcon} isInInputGroup />\n      );\n      const extraCls = classNames(`${prefix}-field-extra`, {\n        [`${prefix}-field-extra-string`]: typeof extraText === 'string',\n        [`${prefix}-field-extra-middle`]: extraTextPosition === 'middle',\n        [`${prefix}-field-extra-bottom`]: extraTextPosition === 'bottom',\n      });\n\n      const extraContent = extraText ? (\n        <div class={extraCls} x-semi-prop=\"extraText\">\n          {extraText}\n        </div>\n      ) : null;\n\n      let content: any;\n\n      switch (true) {\n        case !appendCol:\n          content = (\n            <>\n              {labelContent}\n              <div>\n                {extraTextPosition === 'middle' ? extraContent : null}\n                {inputGroupContent}\n                {extraTextPosition === 'bottom' ? extraContent : null}\n                {groupErrorContent}\n              </div>\n            </>\n          );\n          break;\n        case appendCol && labelPosition === 'top':\n          // When labelPosition is top, you need to add an overflow hidden div to the label, otherwise it will be arranged horizontally\n          content = (\n            <>\n              <div style={{ overflow: 'hidden' }}>\n                <Col {...labelCol} className={labelColCls}>\n                  {labelContent}\n                </Col>\n              </div>\n              <Col {...wrapperCol}>\n                {extraTextPosition === 'middle' ? extraContent : null}\n                {inputGroupContent}\n                {extraTextPosition === 'bottom' ? extraContent : null}\n                {groupErrorContent}\n              </Col>\n            </>\n          );\n          break;\n        case appendCol && labelPosition !== 'top':\n          content = (\n            <>\n              <Col {...labelCol} className={labelColCls}>\n                {labelContent}\n              </Col>\n              <Col {...wrapperCol}>\n                {extraTextPosition === 'middle' ? extraContent : null}\n                {inputGroupContent}\n                {extraTextPosition === 'bottom' ? extraContent : null}\n                {groupErrorContent}\n              </Col>\n            </>\n          );\n          break;\n        default:\n          break;\n      }\n\n      return (\n        <div x-label-pos={labelPosition} class={groupCls}>\n          {content}\n        </div>\n      );\n    };\n  },\n});\n\nexport default FormInputGroup;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefix","cssClasses","PREFIX","GroupError","props","fieldSet","formState","useFormState","error","map","field","ObjectUtil","get","value","errors","isValid","_createVNode","ErrorMessage","showValidateIcon","isInInputGroup","vuePropsType","className","type","String","default","size","style","onBlur","Function","noop","onFocus","label","labelPosition","disabled","Boolean","extraText","PropTypes","node","extraTextPosition","FormInputGroup","defineComponent","name","setup","slots","useSlots","context","useFormUpdaterContext","renderLabel","formProps","isString","Label","labelWidth","_mergeProps","children","rest","getFormProps","groupFieldSet","inner","child","push","cloneVNode","groupCls","classNames","labelCol","wrapperCol","labelAlign","appendCol","labelColCls","labelContent","inputGroupContent","InputGroup","groupErrorContent","extraCls","extraContent","content","_Fragment","overflow","Col"],"mappings":"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"}