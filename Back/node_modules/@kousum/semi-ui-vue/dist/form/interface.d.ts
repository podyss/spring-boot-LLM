import { Subtract } from 'utility-types';
import type { RuleItem } from 'async-validator';
import { Options as ScrollIntoViewOptions } from 'scroll-into-view-if-needed';
import type { BaseFormApi as FormApi, FormState, WithFieldOption, AllErrors, FieldValidateTriggerType } from '@douyinfe/semi-foundation/lib/es/form/interface';
import type { SelectProps } from '../select/index';
import Option from '../select/option';
import OptGroup from '../select/optionGroup';
import type { CheckboxProps } from '../checkbox/index';
import type { RadioProps } from '../radio/index';
import type { ReactFieldError as FieldError } from './errorMessage';
import type { LabelProps } from './label';
import type { VueJsxNode } from "../interface";
import type { CSSProperties, DefineComponent, VNode } from "vue";
import type { AriaAttributes } from "../AriaAttributes";
export type { FormState, FormApi, WithFieldOption, RuleItem };
export type CommonFieldProps = {
    id?: string;
    className?: string;
    prefix?: string;
    /** Field is required (except Form. Checkbox within the Group, Form. Radio) */
    field: string;
    /** The label text of the form control is the same name as the field by default when it is not passed */
    label?: LabelProps | VueJsxNode;
    labelPosition?: 'top' | 'left' | 'inset';
    labelAlign?: 'left' | 'right';
    labelWidth?: number | string;
    noLabel?: boolean;
    noErrorMessage?: boolean;
    name?: string;
    fieldClassName?: string;
    fieldStyle?: CSSProperties;
    initValue?: any;
    validate?: (fieldValue: any, values: Record<string, any>) => string | Promise<string> | VNode;
    /** Check rules, check library based on async-validator */
    rules?: Array<RuleItem>;
    /** Check trigger timing */
    trigger?: 'blur' | 'change' | 'custom' | 'mount' | Array<string>;
    /** Converts form control values before validation */
    transform?: (fieldValue: any) => any;
    /** Make a second change to the component's value before the UI update */
    convert?: (fieldValue: any) => any;
    allowEmptyString?: boolean;
    /** When true, use rules verification, after encountering the first rule that fails the test, the verification of subsequent rules will no longer be triggered */
    stopValidateWithError?: boolean;
    helpText?: VueJsxNode;
    extraText?: VueJsxNode;
    extraTextPosition?: 'middle' | 'bottom';
    /** These declaration just hack for Subtract, not valid props in CommonFieldProps */
    defaultValue?: any;
    /** Whether to take over only the data stream, when true, it will not automatically insert modules such as ErrorMessage, Label, extraText, etc. The style and DOM structure are consistent with the original component */
    pure?: boolean;
};
export type CommonexcludeType = {
    defaultValue?: any;
    value?: any;
    checked?: boolean;
    defaultChecked?: boolean;
};
export type RadioCheckboxExcludeProps = {
    defaultValue?: any;
    checked?: boolean;
    defaultChecked?: boolean;
    field: string;
};
export type RCIncludeType = {
    field?: string;
};
export declare const FormSelect: {
    Option: DefineComponent<import("vue").ExtractPropTypes<{
        value: import("vue").PropType<string | number> | {
            type: import("vue").PropType<string | number>;
            default?: any;
            required?: false;
        };
        label: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]>;
            default?: any;
            required?: false;
        };
        children: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]>;
            default?: any;
            required?: false;
        };
        disabled: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        showTick: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        className: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        style: import("vue").PropType<CSSProperties> | {
            type: import("vue").PropType<CSSProperties>;
            default?: any;
            required?: false;
        };
        selected: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        empty: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        emptyContent: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[] | (() => VNode)> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[] | (() => VNode)>;
            default?: any;
            required?: false;
        };
        inputValue: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        renderOptionItem: import("vue").PropType<(...args: any) => VNode> | {
            type: import("vue").PropType<(...args: any) => VNode>;
            default?: any;
            required?: false;
        };
        onMouseEnter: import("vue").PropType<(e: MouseEvent) => any> | {
            type: import("vue").PropType<(e: MouseEvent) => any>;
            default?: any;
            required?: false;
        };
        focused: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        onSelect: import("vue").PropType<(opts: import("../select/option").OptionProps, e: MouseEvent) => any> | {
            type: import("vue").PropType<(opts: import("../select/option").OptionProps, e: MouseEvent) => any>;
            default?: any;
            required?: false;
        };
        prefixCls: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        _scrollIndex: import("vue").PropType<number> | {
            type: import("vue").PropType<number>;
            default?: any;
            required?: false;
        };
        _selected: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        _show: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        semiOptionId: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        key_: import("vue").PropType<any> | {
            type: import("vue").PropType<any>;
            default?: any;
            required?: false;
        };
        _parentGroup: import("vue").PropType<import("../select/optionGroup").OptionGroupProps> | {
            type: import("vue").PropType<import("../select/optionGroup").OptionGroupProps>;
            default?: any;
            required?: false;
        };
        _keyInOptionList: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        _keyInJsx: import("vue").PropType<string | number> | {
            type: import("vue").PropType<string | number>;
            default?: any;
            required?: false;
        };
        _inputCreateOnly: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        optionRest: import("vue").PropType<Record<string, any>> | {
            type: import("vue").PropType<Record<string, any>>;
            default?: any;
            required?: false;
        };
    }>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
        value: import("vue").PropType<string | number> | {
            type: import("vue").PropType<string | number>;
            default?: any;
            required?: false;
        };
        label: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]>;
            default?: any;
            required?: false;
        };
        children: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]>;
            default?: any;
            required?: false;
        };
        disabled: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        showTick: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        className: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        style: import("vue").PropType<CSSProperties> | {
            type: import("vue").PropType<CSSProperties>;
            default?: any;
            required?: false;
        };
        selected: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        empty: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        emptyContent: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[] | (() => VNode)> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[] | (() => VNode)>;
            default?: any;
            required?: false;
        };
        inputValue: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        renderOptionItem: import("vue").PropType<(...args: any) => VNode> | {
            type: import("vue").PropType<(...args: any) => VNode>;
            default?: any;
            required?: false;
        };
        onMouseEnter: import("vue").PropType<(e: MouseEvent) => any> | {
            type: import("vue").PropType<(e: MouseEvent) => any>;
            default?: any;
            required?: false;
        };
        focused: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        onSelect: import("vue").PropType<(opts: import("../select/option").OptionProps, e: MouseEvent) => any> | {
            type: import("vue").PropType<(opts: import("../select/option").OptionProps, e: MouseEvent) => any>;
            default?: any;
            required?: false;
        };
        prefixCls: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        _scrollIndex: import("vue").PropType<number> | {
            type: import("vue").PropType<number>;
            default?: any;
            required?: false;
        };
        _selected: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        _show: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        semiOptionId: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        key_: import("vue").PropType<any> | {
            type: import("vue").PropType<any>;
            default?: any;
            required?: false;
        };
        _parentGroup: import("vue").PropType<import("../select/optionGroup").OptionGroupProps> | {
            type: import("vue").PropType<import("../select/optionGroup").OptionGroupProps>;
            default?: any;
            required?: false;
        };
        _keyInOptionList: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        _keyInJsx: import("vue").PropType<string | number> | {
            type: import("vue").PropType<string | number>;
            default?: any;
            required?: false;
        };
        _inputCreateOnly: import("vue").PropType<boolean> | {
            type: import("vue").PropType<boolean>;
            default?: any;
            required?: false;
        };
        optionRest: import("vue").PropType<Record<string, any>> | {
            type: import("vue").PropType<Record<string, any>>;
            default?: any;
            required?: false;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    OptGroup: DefineComponent<import("vue").ExtractPropTypes<{
        children: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]>;
            default?: any;
            required?: false;
        };
        label: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]>;
            default?: any;
            required?: false;
        };
        className: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        style: import("vue").PropType<CSSProperties> | {
            type: import("vue").PropType<CSSProperties>;
            default?: any;
            required?: false;
        };
    }>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
        children: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]>;
            default?: any;
            required?: false;
        };
        label: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]> | {
            type: import("vue").PropType<string | number | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]>;
            default?: any;
            required?: false;
        };
        className: import("vue").PropType<string> | {
            type: import("vue").PropType<string>;
            default?: any;
            required?: false;
        };
        style: import("vue").PropType<CSSProperties> | {
            type: import("vue").PropType<CSSProperties>;
            default?: any;
            required?: false;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
};
export interface SelectStatic {
    Option: typeof Option;
    OptGroup: typeof OptGroup;
}
export type Field<P> = Subtract<P & CommonFieldProps, CommonexcludeType>;
export declare let FormSelectType: DefineComponent<Subtract<SelectProps & CommonFieldProps, CommonexcludeType> & SelectStatic>;
export declare let FormCheckboxType: DefineComponent<Subtract<CommonFieldProps, RadioCheckboxExcludeProps> & CheckboxProps & RCIncludeType>;
export declare let FormRadioType: DefineComponent<Subtract<CommonFieldProps, RadioCheckboxExcludeProps> & RadioProps & RCIncludeType>;
export interface ErrorMsg {
    [optionalKey: string]: FieldError;
}
export interface FormFCChild<K extends Record<string, any> = any> {
    formState: FormState<K>;
    values: K;
    formApi: FormApi<K>;
}
export interface BaseFormProps<Values extends Record<string, any> = any> {
    'aria-label'?: AriaAttributes['aria-label'];
    onSubmit?: (values: Values, e?: any) => void;
    onSubmitFail?: (errors: Record<keyof Values, FieldError>, values: Partial<Values>, e?: any) => void;
    onReset?: () => void;
    onValueChange?: (values: Values, changedValue: Partial<Values>) => void;
    onErrorChange?: (errors: Record<keyof Values, FieldError>, changedError?: Partial<Record<keyof Values, FieldError>>) => void;
    onChange?: (formState: FormState) => void;
    allowEmpty?: boolean;
    validateFields?: (values: Values) => string | Partial<AllErrors<Values>>;
    /** Use this if you want to populate the form with initial values. */
    initValues?: Values;
    id?: string;
    /** getFormApi will be call once when Form mounted, u can save formApi reference in your component  */
    getFormApi?: (formApi: FormApi<Values>) => void;
    style?: CSSProperties;
    className?: string;
    extraTextPosition?: 'middle' | 'bottom';
    layout?: 'horizontal' | 'vertical';
    labelPosition?: 'top' | 'left' | 'inset';
    labelWidth?: number | string;
    labelAlign?: 'left' | 'right';
    labelCol?: Record<string, any>;
    wrapperCol?: Record<string, any>;
    render?: (internalProps: FormFCChild) => VueJsxNode;
    component?: VNode | string;
    autoScrollToError?: boolean | ScrollIntoViewOptions;
    disabled?: boolean;
    showValidateIcon?: boolean;
    stopValidateWithError?: boolean;
    stopPropagation?: {
        submit?: boolean;
        reset?: boolean;
    };
    trigger?: FieldValidateTriggerType;
}
