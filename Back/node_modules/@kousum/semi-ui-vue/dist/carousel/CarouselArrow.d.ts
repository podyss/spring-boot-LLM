import { ArrowProps, CarouselArrowProps } from './interface';
import { PropType } from 'vue';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<CarouselArrowProps>;
declare const CarouselArrow: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    type: PropType<"always" | "hover"> | {
        type: PropType<"always" | "hover">;
        default?: any;
        required?: false;
    };
    theme: PropType<"light" | "dark" | "primary"> | {
        type: PropType<"light" | "dark" | "primary">;
        default?: any;
        required?: false;
    };
    prev: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    next: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    arrowProps: PropType<ArrowProps> | {
        type: PropType<ArrowProps>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: PropType<"always" | "hover"> | {
        type: PropType<"always" | "hover">;
        default?: any;
        required?: false;
    };
    theme: PropType<"light" | "dark" | "primary"> | {
        type: PropType<"light" | "dark" | "primary">;
        default?: any;
        required?: false;
    };
    prev: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    next: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    arrowProps: PropType<ArrowProps> | {
        type: PropType<ArrowProps>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default CarouselArrow;
