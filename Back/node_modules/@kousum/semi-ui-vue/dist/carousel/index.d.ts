import { CarouselProps } from './interface';
import '@douyinfe/semi-foundation/lib/es/carousel/carousel.css';
import { PropType, VNode } from 'vue';
import { CombineProps } from '../interface';
export interface CarouselState {
    activeIndex: number;
    children: VNode[];
    preIndex: number;
    isReverse: boolean;
    isInit: boolean;
}
export declare const vuePropsType: CombineProps<CarouselProps>;
declare const Carousel: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    activeIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    animation: PropType<"slide" | "fade"> | {
        type: PropType<"slide" | "fade">;
        default?: any;
        required?: false;
    };
    arrowProps: PropType<import("./interface").ArrowProps> | {
        type: PropType<import("./interface").ArrowProps>;
        default?: any;
        required?: false;
    };
    autoPlay: PropType<boolean | {
        interval?: number;
        hoverToPause?: boolean;
    }> | {
        type: PropType<boolean | {
            interval?: number;
            hoverToPause?: boolean;
        }>;
        default?: any;
        required?: false;
    };
    arrowType: PropType<"always" | "hover"> | {
        type: PropType<"always" | "hover">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultActiveIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    indicatorPosition: PropType<"left" | "right" | "center"> | {
        type: PropType<"left" | "right" | "center">;
        default?: any;
        required?: false;
    };
    indicatorSize: PropType<"small" | "medium"> | {
        type: PropType<"small" | "medium">;
        default?: any;
        required?: false;
    };
    theme: PropType<"light" | "dark" | "primary"> | {
        type: PropType<"light" | "dark" | "primary">;
        default?: any;
        required?: false;
    };
    indicatorType: PropType<"line" | "dot" | "columnar"> | {
        type: PropType<"line" | "dot" | "columnar">;
        default?: any;
        required?: false;
    };
    onChange: PropType<(index: number, preIndex: number) => void> | {
        type: PropType<(index: number, preIndex: number) => void>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showIndicator: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    slideDirection: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    speed: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "hover"> | {
        type: PropType<"click" | "hover">;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    activeIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    animation: PropType<"slide" | "fade"> | {
        type: PropType<"slide" | "fade">;
        default?: any;
        required?: false;
    };
    arrowProps: PropType<import("./interface").ArrowProps> | {
        type: PropType<import("./interface").ArrowProps>;
        default?: any;
        required?: false;
    };
    autoPlay: PropType<boolean | {
        interval?: number;
        hoverToPause?: boolean;
    }> | {
        type: PropType<boolean | {
            interval?: number;
            hoverToPause?: boolean;
        }>;
        default?: any;
        required?: false;
    };
    arrowType: PropType<"always" | "hover"> | {
        type: PropType<"always" | "hover">;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultActiveIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    indicatorPosition: PropType<"left" | "right" | "center"> | {
        type: PropType<"left" | "right" | "center">;
        default?: any;
        required?: false;
    };
    indicatorSize: PropType<"small" | "medium"> | {
        type: PropType<"small" | "medium">;
        default?: any;
        required?: false;
    };
    theme: PropType<"light" | "dark" | "primary"> | {
        type: PropType<"light" | "dark" | "primary">;
        default?: any;
        required?: false;
    };
    indicatorType: PropType<"line" | "dot" | "columnar"> | {
        type: PropType<"line" | "dot" | "columnar">;
        default?: any;
        required?: false;
    };
    onChange: PropType<(index: number, preIndex: number) => void> | {
        type: PropType<(index: number, preIndex: number) => void>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showIndicator: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    slideDirection: PropType<"left" | "right"> | {
        type: PropType<"left" | "right">;
        default?: any;
        required?: false;
    };
    speed: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "hover"> | {
        type: PropType<"click" | "hover">;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Carousel;
