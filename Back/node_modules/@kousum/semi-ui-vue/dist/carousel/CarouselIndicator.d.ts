import { CarouselIndicatorProps } from './interface';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<CarouselIndicatorProps>;
declare const CarouselIndicator: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    activeIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultActiveIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    position: PropType<"left" | "right" | "center"> | {
        type: PropType<"left" | "right" | "center">;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "medium"> | {
        type: PropType<"small" | "medium">;
        default?: any;
        required?: false;
    };
    total: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    theme: PropType<"light" | "dark" | "primary"> | {
        type: PropType<"light" | "dark" | "primary">;
        default?: any;
        required?: false;
    };
    type: PropType<"line" | "dot" | "columnar"> | {
        type: PropType<"line" | "dot" | "columnar">;
        default?: any;
        required?: false;
    };
    onIndicatorChange: PropType<(activeIndex: number) => void> | {
        type: PropType<(activeIndex: number) => void>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "hover"> | {
        type: PropType<"click" | "hover">;
        default?: any;
        required?: false;
    };
    activeKey: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    activeIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultActiveIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    position: PropType<"left" | "right" | "center"> | {
        type: PropType<"left" | "right" | "center">;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "medium"> | {
        type: PropType<"small" | "medium">;
        default?: any;
        required?: false;
    };
    total: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    theme: PropType<"light" | "dark" | "primary"> | {
        type: PropType<"light" | "dark" | "primary">;
        default?: any;
        required?: false;
    };
    type: PropType<"line" | "dot" | "columnar"> | {
        type: PropType<"line" | "dot" | "columnar">;
        default?: any;
        required?: false;
    };
    onIndicatorChange: PropType<(activeIndex: number) => void> | {
        type: PropType<(activeIndex: number) => void>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "hover"> | {
        type: PropType<"click" | "hover">;
        default?: any;
        required?: false;
    };
    activeKey: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default CarouselIndicator;
