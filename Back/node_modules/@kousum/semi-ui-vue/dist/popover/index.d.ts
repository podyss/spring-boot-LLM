import { PropType } from 'vue';
import type { ArrowBounding, Position, TooltipProps, Trigger } from '../tooltip';
import '@douyinfe/semi-foundation/lib/es/popover/popover.css';
import { BaseProps } from '../_base/baseComponent';
import { Motion } from '../_base/base';
import type { ArrowProps } from './Arrow';
import { CombineProps } from '../interface';
export type { ArrowProps };
export declare interface ArrowStyle {
    borderColor?: string;
    backgroundColor?: string;
    borderOpacity?: string | number;
}
export interface PopoverProps extends BaseProps {
    content?: TooltipProps['content'];
    visible?: boolean;
    autoAdjustOverflow?: boolean;
    motion?: Motion;
    margin?: TooltipProps['margin'];
    position?: Position;
    mouseEnterDelay?: number;
    mouseLeaveDelay?: number;
    trigger?: Trigger;
    contentClassName?: string | any[];
    onVisibleChange?: (visible: boolean) => void;
    onClickOutSide?: (e: MouseEvent) => void;
    showArrow?: boolean;
    spacing?: number | {
        x: number;
        y: number;
    };
    stopPropagation?: boolean | string;
    arrowStyle?: ArrowStyle;
    arrowBounding?: ArrowBounding;
    arrowPointAtCenter?: boolean;
    prefixCls?: string;
    rePosKey?: string | number;
    getPopupContainer?: () => HTMLElement;
    zIndex?: number;
    closeOnEsc?: TooltipProps['closeOnEsc'];
    guardFocus?: TooltipProps['guardFocus'];
    returnFocusOnClose?: TooltipProps['returnFocusOnClose'];
    onEscKeyDown?: TooltipProps['onEscKeyDown'];
    clickToHide?: TooltipProps['clickToHide'];
    disableFocusListener?: boolean;
    afterClose?: () => void;
    disableArrowKeyDown?: boolean;
    keepDOM?: boolean;
    class?: string;
    cancelText?: string;
    okText?: string;
    role?: string;
}
export interface PopoverState {
    popConfirmVisible: boolean;
}
export declare const vuePropsType: CombineProps<PopoverProps>;
declare const Popover: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    content: PropType<import("../interface").VueJsxNode | import("../tooltip").RenderContent<HTMLElement>> | {
        type: PropType<import("../interface").VueJsxNode | import("../tooltip").RenderContent<HTMLElement>>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    margin: PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    position: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu"> | {
        type: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu">;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string | any[]> | {
        type: PropType<string | any[]>;
        default?: any;
        required?: false;
    };
    onVisibleChange: PropType<(visible: boolean) => void> | {
        type: PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    onClickOutSide: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    spacing: PropType<number | {
        x: number;
        y: number;
    }> | {
        type: PropType<number | {
            x: number;
            y: number;
        }>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<string | boolean> | {
        type: PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    arrowStyle: PropType<ArrowStyle> | {
        type: PropType<ArrowStyle>;
        default?: any;
        required?: false;
    };
    arrowBounding: PropType<ArrowBounding> | {
        type: PropType<ArrowBounding>;
        default?: any;
        required?: false;
    };
    arrowPointAtCenter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rePosKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    guardFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    returnFocusOnClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onEscKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    clickToHide: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableFocusListener: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    disableArrowKeyDown: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    cancelText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    okText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    content: PropType<import("../interface").VueJsxNode | import("../tooltip").RenderContent<HTMLElement>> | {
        type: PropType<import("../interface").VueJsxNode | import("../tooltip").RenderContent<HTMLElement>>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    margin: PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    position: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    mouseEnterDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    mouseLeaveDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    trigger: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu"> | {
        type: PropType<"click" | "focus" | "hover" | "custom" | "contextMenu">;
        default?: any;
        required?: false;
    };
    contentClassName: PropType<string | any[]> | {
        type: PropType<string | any[]>;
        default?: any;
        required?: false;
    };
    onVisibleChange: PropType<(visible: boolean) => void> | {
        type: PropType<(visible: boolean) => void>;
        default?: any;
        required?: false;
    };
    onClickOutSide: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    showArrow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    spacing: PropType<number | {
        x: number;
        y: number;
    }> | {
        type: PropType<number | {
            x: number;
            y: number;
        }>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<string | boolean> | {
        type: PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    arrowStyle: PropType<ArrowStyle> | {
        type: PropType<ArrowStyle>;
        default?: any;
        required?: false;
    };
    arrowBounding: PropType<ArrowBounding> | {
        type: PropType<ArrowBounding>;
        default?: any;
        required?: false;
    };
    arrowPointAtCenter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rePosKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    guardFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    returnFocusOnClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onEscKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    clickToHide: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disableFocusListener: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    disableArrowKeyDown: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    cancelText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    okText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Popover;
