import { defineComponent as S, ref as A, getCurrentInstance as x, createVNode as u, mergeProps as I } from "vue";
import * as o from "../PropTypes";
import { vuePropsMake as F } from "../PropTypes";
import v from "classnames";
import { strings as g, numbers as s, cssClasses as B } from '@douyinfe/semi-foundation/lib/es/popover/constants';
import R from "../tooltip";
import E from "./Arrow";
import '@douyinfe/semi-foundation/lib/es/popover/popover.css';
import { noop as m, isFunction as k } from "lodash";
import { useConfigContext as D } from "../configProvider/context/Consumer";
import _ from '@douyinfe/semi-foundation/lib/es/utils/isNullOrUndefined';
g.POSITION_SET;
g.TRIGGER_SET;
const j = {
  // children: PropTypes.node,
  content: o.oneOfType([o.node, o.func]),
  visible: o.bool,
  autoAdjustOverflow: o.bool,
  motion: o.bool,
  position: o.string,
  // getPopupContainer: PropTypes.func,
  mouseEnterDelay: o.number,
  mouseLeaveDelay: o.number,
  trigger: [Boolean, String],
  contentClassName: o.oneOfType([o.string, o.array]),
  onVisibleChange: o.func,
  onClickOutSide: o.func,
  style: o.object,
  spacing: o.oneOfType([o.number, o.object]),
  zIndex: o.number,
  showArrow: o.bool,
  arrowStyle: Object,
  arrowPointAtCenter: o.bool,
  arrowBounding: o.object,
  prefixCls: o.string,
  guardFocus: o.bool,
  disableArrowKeyDown: o.bool,
  className: String,
  class: String,
  stopPropagation: [Boolean, String],
  rePosKey: [String, Number, Boolean],
  getPopupContainer: Function,
  cancelText: {
    type: String,
    default: "No"
  },
  okText: {
    type: String,
    default: "Yes"
  },
  role: String,
  afterClose: Function,
  disableFocusListener: Boolean,
  keepDOM: Boolean,
  margin: [o.number, o.object],
  closeOnEsc: Boolean,
  returnFocusOnClose: Boolean,
  onEscKeyDown: Function,
  clickToHide: Boolean
}, G = {
  arrowBounding: s.ARROW_BOUNDING,
  showArrow: !1,
  autoAdjustOverflow: !0,
  zIndex: s.DEFAULT_Z_INDEX,
  motion: !0,
  trigger: "hover",
  cancelText: "No",
  okText: "Yes",
  position: "bottom",
  prefixCls: B.PREFIX,
  onClickOutSide: m,
  onEscKeyDown: m,
  closeOnEsc: !0,
  returnFocusOnClose: !0,
  guardFocus: !0,
  disableFocusListener: !0
}, h = F(j, G), oo = /* @__PURE__ */ S({
  props: {
    ...h
  },
  name: "Popover",
  setup(p, {
    slots: d,
    expose: C
  }) {
    const {
      context: b
    } = D(), f = A();
    function w() {
      var e;
      (e = f.value) == null || e.focusTrigger();
    }
    const T = x();
    C({
      focusTrigger: w,
      // 当组件内部使用了expose时，使用ref得到的内容只有expose的那部分
      getRef() {
        return T;
      }
    });
    function y({
      initialFocusRef: e
    }) {
      const {
        content: t,
        contentClassName: r,
        prefixCls: n
      } = p, {
        direction: l
      } = b.value, a = v(n, r, {
        // @ts-ignore
        [`${n}-rtl`]: l === "rtl"
      }), i = N({
        initialFocusRef: e,
        content: t
      });
      return u("div", {
        class: a
      }, [u("div", {
        class: `${n}-content`
      }, [i])]);
    }
    const N = (e) => {
      const {
        initialFocusRef: t,
        content: r
      } = e, n = {
        initialFocusRef: t
      };
      return k(r) ? r(n) : r;
    };
    return () => {
      const {
        prefixCls: e,
        showArrow: t,
        arrowStyle: r = {},
        arrowBounding: n,
        position: l,
        style: a,
        trigger: i,
        contentClassName: W,
        cancelText: K,
        okText: L,
        ...P
      } = p;
      let {
        spacing: c
      } = p;
      const O = t ? u(E, {
        position: l,
        className: "",
        popStyle: a,
        arrowStyle: r
      }, null) : !1;
      return typeof c != "number" && (c = t ? s.SPACING_WITH_ARROW : s.SPACING), _(c) && (c = t ? s.SPACING_WITH_ARROW : s.SPACING), u(R, I({
        guardFocus: !0,
        ref: f
      }, P, {
        trigger: i,
        position: l,
        style: a,
        content: y,
        prefixCls: e,
        spacing: c,
        showArrow: O,
        arrowBounding: n,
        role: i === "click" || i === "custom" ? "dialog" : "tooltip"
      }), {
        default: d.default
      });
    };
  }
});
export {
  oo as default,
  h as vuePropsType
};
//# sourceMappingURL=index.js.map
