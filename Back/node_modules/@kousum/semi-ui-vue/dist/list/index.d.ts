import '@douyinfe/semi-foundation/lib/es/list/list.css';
import ListItem from './item';
import { Grid } from './list-context';
import { CSSProperties, PropType, VNode } from 'vue';
import { VueJsxNode } from '../interface';
export type { ListItemProps } from './item';
export interface ListProps<T> {
    style?: CSSProperties;
    className?: string;
    bordered?: boolean;
    footer?: VueJsxNode;
    header?: VueJsxNode;
    layout?: 'vertical' | 'horizontal';
    size?: 'small' | 'large' | 'default';
    split?: boolean;
    emptyContent?: VueJsxNode;
    dataSource?: T[];
    renderItem?: (item: T, ind: number) => VNode;
    grid?: Grid;
    loading?: boolean;
    loadMore?: VueJsxNode;
    onClick?: (e: MouseEvent) => void;
    onRightClick?: (e: MouseEvent) => void;
}
export declare function List_<T>(): import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footer: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    header: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    layout: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    split: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<T[]> | {
        type: PropType<T[]>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(item: T, ind: number) => VNode> | {
        type: PropType<(item: T, ind: number) => VNode>;
        default?: any;
        required?: false;
    };
    grid: PropType<Grid> | {
        type: PropType<Grid>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loadMore: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRightClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footer: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    header: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    layout: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    split: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<T[]> | {
        type: PropType<T[]>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(item: T, ind: number) => VNode> | {
        type: PropType<(item: T, ind: number) => VNode>;
        default?: any;
        required?: false;
    };
    grid: PropType<Grid> | {
        type: PropType<Grid>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loadMore: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRightClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const List: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footer: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    header: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    layout: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    split: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<unknown[]> | {
        type: PropType<unknown[]>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(item: unknown, ind: number) => VNode> | {
        type: PropType<(item: unknown, ind: number) => VNode>;
        default?: any;
        required?: false;
    };
    grid: PropType<Grid> | {
        type: PropType<Grid>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loadMore: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRightClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footer: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    header: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    layout: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    split: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<unknown[]> | {
        type: PropType<unknown[]>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(item: unknown, ind: number) => VNode> | {
        type: PropType<(item: unknown, ind: number) => VNode>;
        default?: any;
        required?: false;
    };
    grid: PropType<Grid> | {
        type: PropType<Grid>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loadMore: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onRightClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export type ListType = typeof List & {
    Item: typeof ListItem;
};
declare const BaseList: ListType;
export default BaseList;
export { ListItem };
