export interface LocaleConsumerProps<T> {
    componentName: string;
}
declare function LocaleConsumerFunc<T>(): import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    componentName: {
        type: import("vue").PropType<string>;
        default?: any;
        required: true;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    componentName: {
        type: import("vue").PropType<string>;
        default?: any;
        required: true;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const LocaleConsumer: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    componentName: {
        type: import("vue").PropType<string>;
        default?: any;
        required: true;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    componentName: {
        type: import("vue").PropType<string>;
        default?: any;
        required: true;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default LocaleConsumer;
export { LocaleConsumerFunc };
