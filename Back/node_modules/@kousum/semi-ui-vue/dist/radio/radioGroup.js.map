{"version":3,"file":"radioGroup.js","sources":["../../src/components/radio/radioGroup.tsx"],"sourcesContent":["import {\n  defineComponent,\n  ref,\n  h,\n  Fragment,\n  CSSProperties,\n  VNode,\n  reactive,\n  onMounted,\n  watch,\n  onUnmounted,\n  cloneVNode,\n  isVNode,\n  ComponentObjectPropsOptions,\n  PropType,\n} from 'vue';\n\nimport classnames from 'classnames';\nimport { noop } from 'lodash';\n\nimport { radioGroupClasses as css, strings } from '@douyinfe/semi-foundation/radio/constants';\nimport RadioGroupFoundation, { RadioGroupAdapter } from '@douyinfe/semi-foundation/radio/radioGroupFoundation';\nimport { RadioChangeEvent } from '@douyinfe/semi-foundation/radio/radioInnerFoundation';\n\nimport { useBaseComponent } from '../_base/baseComponent';\nimport { ArrayElement } from '../_base/base';\nimport Radio, { RadioProps, RadioState, RadioType } from './radio';\nimport Context, { RadioGroupButtonSize, RadioMode } from './context';\nimport { CombineProps } from '../interface';\nimport * as PropTypes from '../PropTypes';\n\nexport interface OptionItem {\n  label?: VNode | string;\n  value?: string | number | boolean;\n  disabled?: boolean;\n  extra?: VNode | string;\n  style?: CSSProperties;\n  className?: string;\n}\nexport type Options = string[] | Array<OptionItem>;\n\nexport type RadioGroupProps = {\n  defaultValue?: string | number | boolean;\n  disabled?: boolean;\n  name?: string;\n  options?: Options;\n  value?: string | number | boolean;\n  onChange?: (event: RadioChangeEvent) => void;\n  className?: string;\n  style?: CSSProperties;\n  direction?: ArrayElement<typeof strings.DIRECTION_SET>;\n  mode?: RadioMode;\n  type?: RadioType;\n  buttonSize?: RadioGroupButtonSize;\n  prefixCls?: string;\n  'aria-label'?: any;\n  'aria-describedby'?: any;\n  'aria-errormessage'?: any;\n  'aria-invalid'?: any;\n  'aria-labelledby'?: any;\n  'aria-required'?: any;\n  id?: string;\n  'onUpdate:value'?: (v: any) => void;\n};\n\nexport interface RadioGroupState {\n  value?: any;\n}\n\nexport const vuePropsType: CombineProps<RadioGroupProps> = {\n  'onUpdate:value': Function as PropType<RadioGroupProps['onUpdate:value']>,\n  defaultValue: {\n    type: [String, Number, Boolean],\n    // @ts-ignore\n    default: undefined,\n  },\n  disabled: { type: Boolean, default: false },\n  name: String,\n  options: [Object, Array],\n  value: {\n    type: [String, Number, Boolean],\n    // @ts-ignore\n    default: undefined,\n  },\n  onChange: { type: Function as PropType<RadioGroupProps['onChange']>, default: noop },\n  className: String,\n  style: [Object, String] as PropType<RadioGroupProps['style']>,\n  direction: {\n    type: [String, Object, Array, Boolean] as PropType<RadioGroupProps['direction']>,\n    default: strings.DEFAULT_DIRECTION,\n  },\n  mode: { type: String as PropType<RadioGroupProps['mode']>, default: '' },\n  type: { type: String as PropType<RadioGroupProps['type']>, default: strings.TYPE_DEFAULT },\n  buttonSize: { type: String as PropType<RadioGroupProps['buttonSize']>, default: 'middle' },\n  prefixCls: String,\n  'aria-label': String,\n  'aria-describedby': String,\n  'aria-errormessage': String,\n  'aria-invalid': [PropTypes.bool, PropTypes.string] as PropType<RadioGroupProps['aria-invalid']>,\n  'aria-labelledby': String,\n  'aria-required': [String, Boolean],\n  id: String,\n};\n\nconst RadioGroup = defineComponent({\n  props: { ...vuePropsType },\n  name: 'RadioGroup',\n  setup(props, { slots }) {\n    const onUpdateValueFunc = props['onUpdate:value'];\n    // console.log(props)\n    let foundation: RadioGroupFoundation;\n    const state = reactive({\n      value: undefined,\n    });\n    const { adapter: adapterInject, getDataAttr } = useBaseComponent<RadioGroupProps>(props, state);\n\n    const theAdapter = adapter();\n    function adapter(): RadioGroupAdapter {\n      return {\n        ...adapterInject<RadioGroupProps, RadioGroupState>(),\n        setValue: (value: any) => {\n          // console.log(value)\n          state.value = value;\n        },\n        // getProps: () => props,\n        isInProps: (name: string) => {\n          return Boolean(name in props) && props[name] !== undefined;\n        },\n        notifyChange: (evt: RadioChangeEvent) => {\n          props.onChange && props.onChange(evt);\n        },\n      };\n    }\n    foundation = new RadioGroupFoundation(theAdapter);\n\n    onMounted(() => {\n      foundation.init();\n    });\n\n    watch(\n      () => props.value,\n      (prevPropsValue, nextPropsValue) => {\n        if (prevPropsValue !== nextPropsValue) {\n          foundation.handlePropValueChange(props.value);\n        }\n      }\n    );\n\n    onUnmounted(() => {\n      foundation.destroy();\n    });\n\n    const onChange = (evt: RadioChangeEvent) => {\n      // console.error(evt.target.value)\n      if (onUpdateValueFunc) {\n        onUpdateValueFunc(evt.target.value);\n      }\n      foundation.handleChange(evt);\n    };\n\n    const getFormatName = () => props.name || 'default';\n\n    return () => {\n      const children = slots.default ? slots.default() : null;\n      const { options, mode, prefixCls, className, style, direction, type, buttonSize, id, ...rest } = props;\n\n      const isButtonRadio = type === strings.TYPE_BUTTON;\n      const isPureCardRadio = type === strings.TYPE_PURECARD;\n      const isCardRadio = type === strings.TYPE_CARD || isPureCardRadio;\n      const isDefaultRadio = type === strings.TYPE_DEFAULT;\n\n      const prefix = prefixCls || css.PREFIX;\n      const prefixClsDisplay = classnames(className, {\n        [prefix]: true,\n        [`${prefix}-wrapper`]: true,\n        [`${prefix}-${direction}`]: direction && !isButtonRadio,\n        [`${prefix}-${direction}-default`]: direction && isDefaultRadio,\n        [`${prefix}-${direction}-card`]: direction && isCardRadio,\n        [`${prefix}-buttonRadio`]: isButtonRadio,\n      });\n\n      const realValue = state.value;\n\n      let inner: any;\n      // // console.log(options, children)\n      if (options) {\n        inner = (options || []).map((option, index) => {\n          if (typeof option === 'string') {\n            return (\n              <Radio key={index} disabled={props.disabled} value={option}>\n                {option}\n              </Radio>\n            );\n          } else {\n            return (\n              <Radio\n                key={index}\n                disabled={option.disabled || props.disabled}\n                value={option.value}\n                extra={option.extra}\n                className={option.className}\n                style={option.style}\n              >\n                {option.label}\n              </Radio>\n            );\n          }\n        });\n      } else if (children) {\n        // TODO React???\n        inner = children.map((itm, index) => (isVNode(itm) ? cloneVNode(itm, { key: index }) : null));\n      }\n\n      // console.log(realValue)\n      return (\n        <div\n          class={prefixClsDisplay}\n          style={style}\n          id={id}\n          aria-label={props['aria-label']}\n          aria-invalid={props['aria-invalid']}\n          aria-errormessage={props['aria-errormessage']}\n          aria-labelledby={props['aria-labelledby']}\n          aria-describedby={props['aria-describedby']}\n          aria-required={props['aria-required']}\n          {...getDataAttr()}\n        >\n          <Context\n            value={{\n              radioGroup: {\n                onChange: onChange,\n                value: realValue,\n                disabled: props.disabled,\n                name: getFormatName(),\n                isButtonRadio,\n                isCardRadio,\n                isPureCardRadio,\n                buttonSize,\n                prefixCls,\n              },\n              mode,\n            }}\n          >\n            {{\n              default: () => {\n                return inner;\n              },\n            }}\n          </Context>\n        </div>\n      );\n    };\n  },\n});\n\nexport default RadioGroup;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","vuePropsType","Function","defaultValue","type","String","Number","Boolean","default","undefined","disabled","name","options","Array","value","onChange","noop","className","style","direction","strings","DEFAULT_DIRECTION","mode","TYPE_DEFAULT","buttonSize","prefixCls","PropTypes","bool","string","id","RadioGroup","defineComponent","props","setup","slots","onUpdateValueFunc","foundation","state","reactive","adapter","adapterInject","getDataAttr","useBaseComponent","theAdapter","setValue","isInProps","notifyChange","evt","RadioGroupFoundation","onMounted","init","watch","prevPropsValue","nextPropsValue","handlePropValueChange","onUnmounted","destroy","target","handleChange","getFormatName","children","rest","isButtonRadio","TYPE_BUTTON","isPureCardRadio","TYPE_PURECARD","isCardRadio","TYPE_CARD","isDefaultRadio","prefix","css","PREFIX","prefixClsDisplay","classnames","realValue","inner","map","option","index","_createVNode","Radio","extra","label","itm","isVNode","cloneVNode","key","_mergeProps","Context","radioGroup"],"mappings":"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"}