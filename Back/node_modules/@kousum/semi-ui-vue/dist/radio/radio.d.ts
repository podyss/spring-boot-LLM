import { CSSProperties, VNode, PropType } from 'vue';
import type { RadioChangeEvent } from '@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation';
import { strings } from '@douyinfe/semi-foundation/lib/es/radio/constants';
import '@douyinfe/semi-foundation/lib/es/radio/radio.css';
import { RadioMode } from './context';
import { CombineProps } from '../interface';
export type { RadioChangeEvent };
export type RadioDisplayMode = 'vertical' | '';
export type RadioType = typeof strings.TYPE_DEFAULT | typeof strings.TYPE_BUTTON | typeof strings.TYPE_CARD | typeof strings.TYPE_PURECARD;
export type RadioProps = {
    autoFocus?: boolean;
    checked?: boolean;
    defaultChecked?: boolean;
    value?: string | number | boolean;
    disabled?: boolean;
    prefixCls?: string;
    displayMode?: RadioDisplayMode;
    onChange?: (e: RadioChangeEvent) => void;
    onMouseEnter?: (e: any) => void;
    onMouseLeave?: (e: any) => void;
    mode?: RadioMode;
    extra?: VNode | string;
    style?: CSSProperties;
    className?: string;
    addonStyle?: CSSProperties;
    addonClassName?: string;
    type?: RadioType;
    'aria-label'?: any;
    addonId?: string;
    extraId?: string;
    name?: string;
    preventScroll?: boolean;
};
export interface RadioState {
    hover?: boolean;
    addonId?: string;
    extraId?: string;
    focusVisible?: boolean;
    checked?: boolean;
}
export declare const vuePropsType: CombineProps<RadioProps>;
declare const Radio: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultChecked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<string | number | boolean> | {
        type: PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    displayMode: PropType<RadioDisplayMode> | {
        type: PropType<RadioDisplayMode>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(e: RadioChangeEvent) => void> | {
        type: PropType<(e: RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    mode: PropType<"" | "advanced"> | {
        type: PropType<"" | "advanced">;
        default?: any;
        required?: false;
    };
    extra: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    addonStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    addonClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    type: PropType<RadioType> | {
        type: PropType<RadioType>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    addonId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultChecked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<string | number | boolean> | {
        type: PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    displayMode: PropType<RadioDisplayMode> | {
        type: PropType<RadioDisplayMode>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(e: RadioChangeEvent) => void> | {
        type: PropType<(e: RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    mode: PropType<"" | "advanced"> | {
        type: PropType<"" | "advanced">;
        default?: any;
        required?: false;
    };
    extra: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    addonStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    addonClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    type: PropType<RadioType> | {
        type: PropType<RadioType>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    addonId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Radio;
