import { PropType } from 'vue';
import { RadioChangeEvent } from '@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation';
import { BaseProps } from '../_base/baseComponent';
import { CombineProps } from '../interface';
export type RadioInnerMode = 'advanced' | '';
export interface RadioInnerProps extends BaseProps {
    checked?: boolean;
    disabled?: boolean;
    isButtonRadio?: boolean;
    onChange?: (e: RadioChangeEvent) => void;
    mode?: RadioInnerMode;
    autoFocus?: boolean;
    name?: string;
    prefixCls?: string;
    isPureCardRadioGroup?: boolean;
    addonId?: string;
    extraId?: string;
    'aria-label'?: any;
    focusInner?: boolean;
    onInputFocus?: (e: any) => void;
    onInputBlur?: (e: any) => void;
    preventScroll?: boolean;
    defaultChecked?: boolean;
    value?: any;
    type?: string;
}
export declare const vuePropsType: CombineProps<RadioInnerProps>;
declare const RadioInner: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    isButtonRadio: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(e: RadioChangeEvent) => void> | {
        type: PropType<(e: RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    mode: PropType<RadioInnerMode> | {
        type: PropType<RadioInnerMode>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    isPureCardRadioGroup: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    addonId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    focusInner: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onInputFocus: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onInputBlur: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultChecked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    isButtonRadio: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(e: RadioChangeEvent) => void> | {
        type: PropType<(e: RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    mode: PropType<RadioInnerMode> | {
        type: PropType<RadioInnerMode>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    isPureCardRadioGroup: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    addonId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    extraId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    focusInner: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onInputFocus: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onInputBlur: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultChecked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default RadioInner;
