import { defineComponent as x, reactive as $, onMounted as N, watch as P, onUnmounted as w, ref as j, createVNode as r } from "vue";
import G from '@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation';
import { useBaseComponent as A } from "../_base/baseComponent";
import { radioClasses as E } from '@douyinfe/semi-foundation/lib/es/radio/constants';
import s from "classnames";
import { IconRadio as K } from "@kousum/semi-icons-vue";
import { noop as L } from "lodash";
import { symbol as f } from "../PropTypes";
const M = {
  checked: {
    type: Boolean,
    // @ts-ignore
    default: void 0
  },
  disabled: Boolean,
  isButtonRadio: {
    type: Boolean,
    default: !1
  },
  onChange: {
    type: Function,
    default: L
  },
  mode: String,
  autoFocus: Boolean,
  name: String,
  prefixCls: String,
  // ref: [Object, String],
  isPureCardRadioGroup: Boolean,
  addonId: String,
  extraId: String,
  "aria-label": String,
  className: String,
  // TODO 区别
  defaultChecked: {
    type: Boolean,
    default: !1
  },
  value: [String, Boolean, Number],
  type: {
    type: String,
    default: "default"
  },
  focusInner: Boolean,
  onInputFocus: Function,
  onInputBlur: Function,
  preventScroll: Boolean,
  style: Object
}, Q = /* @__PURE__ */ x({
  props: {
    ...M
  },
  name: "RadioInner",
  setup(o, {
    slots: O
  }) {
    let a;
    const d = $({
      checked: !1
    }), {
      adapter: p
    } = A(o, d), m = h();
    function h() {
      return {
        ...p(),
        setNativeControlChecked: (e) => {
          d.checked = e;
        },
        notifyChange: (e) => {
          o.onChange(e);
        }
      };
    }
    a = new G(m), N(() => {
      a.init();
    }), P(() => o.checked, (e, i) => {
      e !== i && a.setChecked(o.checked);
    }), w(() => {
      a.destroy();
    });
    const l = j(f());
    function y(e) {
      a.handleChange(e), l.value = f();
    }
    return () => {
      const {
        disabled: e,
        mode: i,
        autoFocus: C,
        name: b,
        isButtonRadio: u,
        isPureCardRadioGroup: B,
        addonId: I,
        extraId: g,
        "aria-label": k,
        focusInner: c,
        onInputFocus: R,
        onInputBlur: F
      } = o, {
        checked: t
      } = d, n = o.prefixCls || E.PREFIX, S = s({
        [`${n}-inner`]: !0,
        [`${n}-inner-checked`]: !!t,
        [`${n}-inner-buttonRadio`]: u,
        [`${n}-inner-pureCardRadio`]: B
      }), v = s({
        [`${n}-focus`]: c,
        [`${n}-focus-border`]: c && !t,
        [`${n}-inner-display`]: !u
      });
      return r("span", {
        class: S,
        style: {
          opacity: 1
        }
      }, [r("input", {
        ref: (T) => {
        },
        key: l.value,
        autofocus: C,
        type: i === "advanced" ? "checkbox" : "radio",
        checked: !!t,
        disabled: e,
        onChange: y,
        name: b,
        "aria-label": k,
        "aria-labelledby": I,
        "aria-describedby": g,
        onFocus: R,
        onBlur: F
      }, null), r("span", {
        class: v
      }, [t ? r(K, null, null) : null])]);
    };
  }
});
export {
  Q as default,
  M as vuePropsType
};
//# sourceMappingURL=radioInner.js.map
