import { CSSProperties, VNode, PropType } from 'vue';
import { strings } from '@douyinfe/semi-foundation/lib/es/radio/constants';
import { RadioChangeEvent } from '@douyinfe/semi-foundation/lib/es/radio/radioInnerFoundation';
import { ArrayElement } from '../_base/base';
import { RadioType } from './radio';
import { RadioGroupButtonSize, RadioMode } from './context';
import { CombineProps } from '../interface';
export interface OptionItem {
    label?: VNode | string;
    value?: string | number | boolean;
    disabled?: boolean;
    extra?: VNode | string;
    style?: CSSProperties;
    className?: string;
}
export type Options = string[] | Array<OptionItem>;
export type RadioGroupProps = {
    defaultValue?: string | number | boolean;
    disabled?: boolean;
    name?: string;
    options?: Options;
    value?: string | number | boolean;
    onChange?: (event: RadioChangeEvent) => void;
    className?: string;
    style?: CSSProperties;
    direction?: ArrayElement<typeof strings.DIRECTION_SET>;
    mode?: RadioMode;
    type?: RadioType;
    buttonSize?: RadioGroupButtonSize;
    prefixCls?: string;
    'aria-label'?: any;
    'aria-describedby'?: any;
    'aria-errormessage'?: any;
    'aria-invalid'?: any;
    'aria-labelledby'?: any;
    'aria-required'?: any;
    id?: string;
    'onUpdate:value'?: (v: any) => void;
};
export interface RadioGroupState {
    value?: any;
}
export declare const vuePropsType: CombineProps<RadioGroupProps>;
declare const RadioGroup: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    defaultValue: PropType<string | number | boolean> | {
        type: PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    options: PropType<Options> | {
        type: PropType<Options>;
        default?: any;
        required?: false;
    };
    value: PropType<string | number | boolean> | {
        type: PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(event: RadioChangeEvent) => void> | {
        type: PropType<(event: RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    direction: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    mode: PropType<"" | "advanced"> | {
        type: PropType<"" | "advanced">;
        default?: any;
        required?: false;
    };
    type: PropType<RadioType> | {
        type: PropType<RadioType>;
        default?: any;
        required?: false;
    };
    buttonSize: PropType<"small" | "large" | "middle"> | {
        type: PropType<"small" | "large" | "middle">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-describedby': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'onUpdate:value': PropType<(v: any) => void> | {
        type: PropType<(v: any) => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    defaultValue: PropType<string | number | boolean> | {
        type: PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    name: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    options: PropType<Options> | {
        type: PropType<Options>;
        default?: any;
        required?: false;
    };
    value: PropType<string | number | boolean> | {
        type: PropType<string | number | boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(event: RadioChangeEvent) => void> | {
        type: PropType<(event: RadioChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    direction: PropType<"horizontal" | "vertical"> | {
        type: PropType<"horizontal" | "vertical">;
        default?: any;
        required?: false;
    };
    mode: PropType<"" | "advanced"> | {
        type: PropType<"" | "advanced">;
        default?: any;
        required?: false;
    };
    type: PropType<RadioType> | {
        type: PropType<RadioType>;
        default?: any;
        required?: false;
    };
    buttonSize: PropType<"small" | "large" | "middle"> | {
        type: PropType<"small" | "large" | "middle">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-describedby': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'onUpdate:value': PropType<(v: any) => void> | {
        type: PropType<(v: any) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default RadioGroup;
