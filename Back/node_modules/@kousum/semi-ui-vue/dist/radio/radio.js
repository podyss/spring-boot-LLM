import { defineComponent as oe, reactive as ae, inject as te, ref as de, createVNode as l, mergeProps as P, Fragment as ne } from "vue";
import _ from "classnames";
import { noop as j } from "lodash";
import re from '@douyinfe/semi-foundation/lib/es/radio/radioFoundation';
import { radioClasses as ie } from '@douyinfe/semi-foundation/lib/es/radio/constants';
import { getUuidShort as E } from '@douyinfe/semi-foundation/lib/es/utils/uuid';
import '@douyinfe/semi-foundation/lib/es/radio/radio.css';
import { useBaseComponent as ue } from "../_base/baseComponent";
import le from "./radioInner";
const se = {
  autoFocus: {
    type: Boolean,
    default: !1
  },
  checked: {
    type: [Boolean],
    // @ts-ignore
    default: void 0
  },
  defaultChecked: {
    type: Boolean,
    default: !1
  },
  value: [String, Number, Boolean],
  disabled: Boolean,
  prefixCls: String,
  displayMode: String,
  onChange: Function,
  onMouseEnter: {
    type: Function,
    default: j
  },
  onMouseLeave: {
    type: Function,
    default: j
  },
  mode: {
    type: String,
    default: ""
  },
  extra: [Object, String],
  style: [Object, String],
  className: String,
  addonStyle: [Object, String],
  addonClassName: String,
  type: {
    type: String,
    default: "default"
  },
  "aria-label": String,
  addonId: String,
  extraId: String,
  name: String,
  preventScroll: Boolean
}, Ge = /* @__PURE__ */ oe({
  props: {
    ...se
  },
  name: "Radio",
  setup(t, {
    slots: x
  }) {
    let a, s;
    const u = ae({
      hover: !1,
      addonId: t.addonId,
      extraId: t.extraId,
      checked: t.checked || t.defaultChecked || !1
    }), {
      adapter: H,
      getDataAttr: O
    } = ue(t, u);
    a = te("RadioContextValue", de(null));
    const A = L();
    function L() {
      return {
        ...H(),
        setHover: (o) => {
          u.hover = o;
        },
        setAddonId: () => {
          u.addonId = E({
            prefix: "addon"
          });
        },
        setChecked: (o) => {
          u.checked = o;
        },
        setExtraId: () => {
          u.extraId = E({
            prefix: "extra"
          });
        },
        setFocusVisible: (o) => {
          u.focusVisible = o;
        }
      };
    }
    s = new re(A);
    function v() {
      return a && a.value && a.value.radioGroup;
    }
    const w = (o) => {
      const {
        onChange: f
      } = t;
      if (v()) {
        const {
          radioGroup: m
        } = a.value;
        m.onChange && m.onChange(o);
      }
      f && f(o);
    }, z = (o) => {
      t.onMouseEnter(o), s.setHover(!0);
    }, D = (o) => {
      t.onMouseLeave(o), s.setHover(!1);
    }, T = (o) => {
      s.handleFocusVisible(o);
    }, U = (o) => {
      s.handleBlur();
    };
    return () => {
      const {
        addonClassName: o,
        addonStyle: f,
        checked: m,
        disabled: I,
        style: X,
        className: S,
        prefixCls: y,
        displayMode: B,
        extra: b,
        mode: q,
        type: J,
        value: K,
        name: Q,
        ...ce
      } = t, C = x.default ? x.default() : null;
      let r, d, R, c, i, h, g, p, $;
      const {
        hover: k,
        addonId: F,
        extraId: M,
        focusVisible: G
      } = u;
      let V = {};
      v() ? (r = a.value.radioGroup.value === K, d = I || a.value.radioGroup.disabled, R = a.value.mode, c = a.value.radioGroup.isButtonRadio, i = a.value.radioGroup.isCardRadio, h = a.value.radioGroup.isPureCardRadio, p = a.value.radioGroup.buttonSize, $ = y || a.value.radioGroup.prefixCls, V = {
        checked: r,
        disabled: d
      }) : (r = m, d = I, R = q, g = J === "button", $ = y);
      const n = typeof c > "u" ? g : c, e = $ || ie.PREFIX, W = i || h || n, Y = _(e, {
        [`${e}-disabled`]: d,
        [`${e}-checked`]: r,
        [`${e}-${B}`]: !!B,
        [`${e}-buttonRadioComponent`]: g,
        [`${e}-buttonRadioGroup`]: c,
        [`${e}-buttonRadioGroup-${p}`]: c && p,
        [`${e}-cardRadioGroup`]: i,
        [`${e}-cardRadioGroup_disabled`]: d && i,
        [`${e}-cardRadioGroup_checked`]: i && r && !d,
        [`${e}-cardRadioGroup_checked_disabled`]: i && r && d,
        [`${e}-cardRadioGroup_hover`]: i && !r && k && !d,
        [S]: !!S,
        [`${e}-focus`]: G && (i || h)
      }), Z = v() && a.value.radioGroup.name, ee = _({
        [`${e}-addon`]: !n,
        [`${e}-addon-buttonRadio`]: n,
        [`${e}-addon-buttonRadio-checked`]: n && r,
        [`${e}-addon-buttonRadio-disabled`]: n && d,
        [`${e}-addon-buttonRadio-hover`]: n && !r && !d && k,
        [`${e}-addon-buttonRadio-${p}`]: n && p,
        [`${e}-focus`]: G && n
      }, o), N = () => l(ne, null, [C ? l("span", {
        class: ee,
        style: f,
        id: F
      }, [C]) : null, b && !n ? l("div", {
        class: `${e}-extra`,
        id: M
      }, [b]) : null]);
      return l("label", P({
        style: X,
        class: Y,
        onMouseenter: z,
        onMouseleave: D
      }, O()), [l(le, P({
        ...t,
        ...V,
        onChange: w
      }, {
        mode: R,
        name: Q ?? Z,
        isButtonRadio: n,
        isPureCardRadioGroup: h,
        ref: (pe) => {
        },
        addonId: C && F,
        extraId: b && M,
        focusInner: G && !W,
        onInputFocus: T,
        onInputBlur: U
      }), null), i ? l("div", {
        class: `${e}-isCardRadioGroup_content`
      }, [N()]) : N()]);
    };
  }
});
export {
  Ge as default,
  se as vuePropsType
};
//# sourceMappingURL=radio.js.map
