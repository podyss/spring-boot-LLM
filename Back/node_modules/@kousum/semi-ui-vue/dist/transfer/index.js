import { defineComponent as he, useSlots as pe, ref as ge, reactive as Se, watch as ye, createVNode as d, mergeProps as _, Fragment as F, isVNode as Ce } from "vue";
import T from "classnames";
import * as c from "../PropTypes";
import { vuePropsMake as be } from "../PropTypes";
import { noop as P, isArray as M, isEqual as H, isEmpty as Ie, omit as Te } from "lodash";
import ve from '@douyinfe/semi-foundation/lib/es/transfer/foundation';
import { _generateDataByType as Y, _generateSelectedItems as z } from '@douyinfe/semi-foundation/lib/es/transfer/transferUtils';
import { cssClasses as ke, strings as v } from '@douyinfe/semi-foundation/lib/es/transfer/constants';
import '@douyinfe/semi-foundation/lib/es/transfer/transfer.css';
import { useBaseComponent as Pe } from "../_base/baseComponent";
import $e from "../locale/localeConsumer";
import { Checkbox as we } from "../checkbox/index";
import Re from "../input/index";
import Ee from "../spin";
import Ae from "../button";
import De from "../tree";
import { IconSearch as _e, IconClose as Oe, IconHandle as Le } from "@kousum/semi-icons-vue";
import { Sortable as Ve } from "../_sortable";
import { RestrictToVerticalAxis as xe } from "@dnd-kit/abstract/modifiers";
import { pointerIntersection as Be } from "@dnd-kit/collision";
function Ne(u) {
  return typeof u == "function" || Object.prototype.toString.call(u) === "[object Object]" && !Ce(u);
}
const s = ke.PREFIX, je = {
  style: c.object,
  className: c.string,
  disabled: c.bool,
  dataSource: c.array,
  filter: c.oneOfType([c.func, c.bool]),
  onSearch: c.func,
  inputProps: c.object,
  value: c.array,
  defaultValue: c.array,
  onChange: c.func,
  onSelect: c.func,
  onDeselect: c.func,
  renderSourceItem: c.func,
  renderSelectedItem: c.func,
  loading: c.bool,
  type: c.string,
  treeProps: c.object,
  showPath: c.bool,
  emptyContent: c.object,
  renderSourcePanel: c.func,
  renderSelectedPanel: c.func,
  draggable: c.bool,
  renderSourceHeader: c.func,
  renderSelectedHeader: c.func
}, Fe = {
  type: v.TYPE_LIST,
  dataSource: [],
  onSearch: P,
  onChange: P,
  onSelect: P,
  onDeselect: P,
  onClear: P,
  defaultValue: [],
  emptyContent: {},
  showPath: !1
}, Me = be(je, Fe), st = /* @__PURE__ */ he({
  props: {
    ...Me
  },
  name: "Transfer",
  setup(u, {}) {
    pe();
    const $ = ge(), {
      defaultValue: w = [],
      dataSource: R,
      type: G
    } = u, i = Se({
      data: [],
      selectedItems: /* @__PURE__ */ new Map(),
      searchResult: /* @__PURE__ */ new Set(),
      inputValue: ""
    });
    R && M(R) && (i.data = Y(R, G)), w && M(w) && (i.selectedItems = z(w, i.data));
    function q(e) {
      const {
        value: t,
        dataSource: r,
        type: l,
        filter: a
      } = e, n = {};
      let o = i.data, f = i.selectedItems;
      if (r && Array.isArray(r) && (o = Y(r, l), n.data = o), t && Array.isArray(t) && (f = z(t, o), n.selectedItems = f), !H(i.data, o) && typeof i.inputValue == "string" && i.inputValue !== "") {
        const b = typeof a == "function" ? (m) => a(i.inputValue, m) : (m) => typeof m.label == "string" && m.label.includes(i.inputValue), y = o.filter(b), p = new Set(y.map((m) => m.key));
        n.searchResult = p;
      }
      return Ie(n) ? null : n;
    }
    ye([() => i.selectedItems, () => i.data, () => i.inputValue, () => u.value, () => u.dataSource, () => u.type, () => u.filter], (e, t, r) => {
      if (!H(e, t)) {
        const l = q({
          ...u
        });
        l && Object.keys(l).forEach((a) => {
          i[a] = l[a];
        });
      }
    }, {
      immediate: !0
    });
    const {
      adapter: U,
      getDataAttr: X
    } = Pe(u, i);
    function J() {
      return {
        ...U(),
        getSelected: () => new Map(i.selectedItems),
        updateSelected: (e) => {
          i.selectedItems = e;
        },
        notifyChange: (e, t) => {
          u.onChange(e, t);
        },
        notifySearch: (e) => {
          u.onSearch(e);
        },
        notifySelect: (e) => {
          u.onSelect(e);
        },
        notifyDeselect: (e) => {
          u.onDeselect(e);
        },
        updateInput: (e) => {
          i.inputValue = e;
        },
        updateSearchResult: (e) => {
          i.searchResult = e;
        },
        searchTree: (e) => {
          $.value && $.value.search(e);
        }
      };
    }
    const O = J(), h = new ve(O);
    function L(e) {
      h.handleInputChange(e, !0);
    }
    function E(e) {
      h.handleSelectOrRemove(e);
    }
    function V(e) {
      if (e) {
        const {
          active: t,
          over: r
        } = {
          active: e.operation.source,
          over: e.operation.target
        };
        let a = [...O.getSelected().values()].map((n) => n.key);
        if (!t || !r)
          return;
        if (t.id !== r.id) {
          const n = a.indexOf(t.id), o = a.indexOf(r.id);
          h.handleSortEnd({
            oldIndex: n,
            newIndex: o
          });
        }
      }
    }
    function K(e) {
      const {
        inputProps: t,
        filter: r,
        disabled: l
      } = u;
      return typeof r == "boolean" && !r ? null : d("div", {
        role: "search",
        "aria-label": "Transfer filter",
        class: `${s}-filter`
      }, [d(Re, _({
        prefix: d(_e, null, null),
        placeholder: e.placeholder,
        showClear: !0,
        value: i.inputValue,
        disabled: l,
        onChange: L
      }, t), null)]);
    }
    function x(e) {
      const {
        disabled: t,
        renderSourceHeader: r,
        renderSelectedHeader: l
      } = u, {
        totalContent: a,
        allContent: n,
        onAllClick: o,
        type: f,
        showButton: b
      } = e, y = T({
        [`${s}-header`]: !0,
        [`${s}-right-header`]: f === "right",
        [`${s}-left-header`]: f === "left"
      });
      if (f === "left" && typeof r == "function") {
        const {
          num: p,
          showButton: m,
          allChecked: C,
          onAllClick: g
        } = e;
        return r({
          num: p,
          showButton: m,
          allChecked: C,
          onAllClick: g
        });
      }
      if (f === "right" && typeof l == "function") {
        const {
          num: p,
          showButton: m,
          onAllClick: C
        } = e;
        return l({
          num: p,
          showButton: m,
          onClear: C
        });
      }
      return d("div", {
        class: y
      }, [d("span", {
        class: `${s}-header-total`
      }, [a]), b ? d(Ae, {
        theme: "borderless",
        disabled: t,
        type: "tertiary",
        size: "small",
        className: `${s}-header-all`,
        onClick: o
      }, Ne(n) ? n : {
        default: () => [n]
      }) : null]);
    }
    function Q(e, t) {
      const {
        renderSourceItem: r,
        disabled: l
      } = u, {
        selectedItems: a
      } = i, n = a.has(e.key);
      if (r)
        return r({
          ...e,
          checked: n,
          onChange: () => E(e)
        });
      const o = T({
        [`${s}-item`]: !0,
        [`${s}-item-disabled`]: e.disabled
      });
      return d(we, {
        key: t,
        disabled: e.disabled || l,
        className: o,
        checked: n,
        role: "listitem",
        onChange: () => E(e),
        "x-semi-children-alias": `dataSource[${t}].label`
      }, {
        default: () => [e.label]
      });
    }
    function W(e) {
      const {
        data: t,
        selectedItems: r,
        inputValue: l,
        searchResult: a
      } = i, {
        loading: n,
        type: o,
        emptyContent: f,
        renderSourcePanel: b,
        dataSource: y
      } = u, p = e.total, m = l !== "", C = m ? a.size : t.length, g = m ? t.filter((k) => a.has(k.key)) : t, S = !!g.find((k) => !r.has(k.key)), oe = {
        totalContent: p.replace("${total}", `${C}`),
        allContent: S ? e.selectAll : e.clearSelectAll,
        onAllClick: () => h.handleAll(S),
        type: "left",
        showButton: o !== v.TYPE_TREE_TO_LIST,
        num: C,
        allChecked: !S
      }, ae = K(e), j = x(oe), D = m && a.size === 0, se = f.search ? f.search : e.emptySearch, ce = f.left ? f.left : e.emptyLeft, ie = A("left", ce), de = A("left", se), ue = d(Ee, null, null);
      let I = null;
      switch (!0) {
        case n:
          I = ue;
          break;
        case D:
          I = de;
          break;
        case t.length === 0:
          I = ie;
          break;
        case o === v.TYPE_TREE_TO_LIST:
          I = d(F, null, [j, ee()]);
          break;
        case (!D && (o === v.TYPE_LIST || o === v.TYPE_GROUP_LIST)):
          I = d(F, null, [j, te(g)]);
          break;
        default:
          I = null;
          break;
      }
      const {
        values: fe
      } = h.getValuesAndItemsFromMap(r), me = {
        loading: n,
        noMatch: D,
        filterData: g,
        sourceData: t,
        propsDataSource: y,
        allChecked: !S,
        showNumber: C,
        inputValue: l,
        selectedItems: r,
        value: fe,
        onSelect: h.handleSelect.bind(h),
        onAllClick: () => h.handleAll(S),
        onSearch: L,
        onSelectOrRemove: (k) => E(k)
      };
      return b ? b(me) : d("section", {
        class: `${s}-left`
      }, [ae, I]);
    }
    function Z(e, t) {
      const r = T(`${s}-group-title`);
      return d("div", {
        class: r,
        key: `title-${t}`
      }, [e.title]);
    }
    function ee() {
      const {
        selectedItems: e
      } = i, {
        disabled: t,
        dataSource: r,
        treeProps: l
      } = u, {
        values: a
      } = h.getValuesAndItemsFromMap(e), n = (f) => {
        h.handleSelect(f);
      }, o = Te(l, ["value", "ref", "onChange"]);
      return d(De, _({
        disabled: t,
        treeData: r,
        multiple: !0,
        disableStrictly: !0,
        value: a,
        defaultExpandAll: !0,
        leafOnly: !0,
        ref: $,
        filterTreeNode: !0,
        searchRender: !1,
        searchStyle: {
          padding: 0
        },
        style: {
          flex: 1,
          overflow: "overlay"
        },
        onChange: n
      }, o), null);
    }
    function te(e) {
      const t = [], r = /* @__PURE__ */ new Map();
      return e.forEach((l, a) => {
        const n = l._parent, o = Q(l, a);
        if (n && r.has(n.title))
          t.push(o);
        else if (n) {
          const f = Z(n, a);
          r.set(n.title, !0), t.push(f), t.push(o);
        } else
          t.push(o);
      }), d("div", {
        class: `${s}-left-list`,
        role: "list",
        "aria-label": "Option list"
      }, [t]);
    }
    function B(e, t) {
      const {
        renderSelectedItem: r,
        draggable: l,
        type: a,
        showPath: n
      } = u, o = () => h.handleSelectOrRemove(e), f = T({
        [`${s}-item`]: !0,
        [`${s}-right-item`]: !0,
        [`${s}-right-item-draggable`]: l
      }), y = a === v.TYPE_TREE_TO_LIST && n === !0 ? h._generatePath(e) : e.label;
      if (r)
        return r({
          ...e,
          onRemove: o,
          sortableHandle: t
        });
      const p = t && t(() => d(Le, {
        role: "button",
        "aria-label": "Drag and sort",
        className: `${s}-right-item-drag-handler`
      }, null));
      return (
        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
        d("div", {
          role: "listitem",
          class: f,
          key: e.key
        }, [l && t ? d(p, null, null) : null, d("div", {
          class: `${s}-right-item-text`
        }, [y]), d(Oe, {
          onClick: o,
          "aria-disabled": e.disabled,
          className: T(`${s}-item-close-icon`, {
            [`${s}-item-close-icon-disabled`]: e.disabled
          })
        }, null)])
      );
    }
    const ne = (e) => {
      const {
        id: t,
        sortableHandle: r
      } = e, {
        selectedItems: l
      } = i, n = [...l.values()].find((o) => o.key === t);
      return B(n, r);
    };
    function A(e, t) {
      const r = T({
        [`${s}-empty`]: !0,
        [`${s}-right-empty`]: e === "right",
        [`${s}-left-empty`]: e === "left"
      });
      return d("div", {
        "aria-label": "empty",
        class: r
      }, [t]);
    }
    function re(e) {
      const t = e.map((l) => l.key);
      return d(Ve, {
        modifiers: [xe],
        collisionDetector: Be,
        onSortEnd: V,
        items: t,
        renderItem: ne,
        prefix: `${s}-right-item`,
        dragOverlayCls: `${s}-right-item-drag-item-move`
      }, null);
    }
    function le(e) {
      const {
        selectedItems: t
      } = i, {
        emptyContent: r,
        renderSelectedPanel: l,
        draggable: a
      } = u, n = [...t.values()], o = {
        length: n.length,
        selectedData: n,
        onClear: () => h.handleClear(),
        onRemove: (S) => h.handleSelectOrRemove(S),
        onSortEnd: (S) => V(S)
      };
      if (l)
        return l(o);
      const y = {
        totalContent: e.selected.replace("${total}", `${n.length}`),
        allContent: e.clear,
        onAllClick: () => h.handleClear(),
        type: "right",
        showButton: !!n.length,
        num: n.length
      }, p = x(y), m = A("right", r.right ? r.right : e.emptyRight), C = `${s}-right`;
      let g = null;
      switch (!0) {
        case !n.length:
          g = m;
          break;
        case (n.length && !a):
          g = d("div", {
            class: `${s}-right-list`,
            role: "list",
            "aria-label": "Selected list"
          }, [n.map((N) => B({
            ...N
          }))]);
          break;
        case (n.length && a):
          g = re(n);
          break;
      }
      return d("section", {
        class: C
      }, [p, g]);
    }
    return () => {
      const {
        className: e,
        style: t,
        disabled: r,
        renderSelectedPanel: l,
        renderSourcePanel: a
      } = u, n = T(s, e, {
        [`${s}-disabled`]: r,
        [`${s}-custom-panel`]: l && a
      });
      return d($e, {
        componentName: "Transfer"
      }, {
        default: (o) => d("div", _({
          class: n,
          style: t
        }, X()), [W(o), le(o)])
      });
    };
  }
});
export {
  st as default,
  s as prefixCls,
  Me as vuePropsType
};
//# sourceMappingURL=index.js.map
