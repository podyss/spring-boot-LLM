{"version":3,"file":"index.js","sources":["../../src/components/transfer/index.tsx"],"sourcesContent":["import cls from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { vuePropsMake } from '../PropTypes';\nimport { isEqual, noop, omit, isEmpty, isArray, pick } from 'lodash';\nimport TransferFoundation, {\n  BasicDataItem,\n  OnSortEndProps,\n  TransferAdapter,\n} from '@douyinfe/semi-foundation/transfer/foundation';\nimport { _generateDataByType, _generateSelectedItems } from '@douyinfe/semi-foundation/transfer/transferUtils';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/transfer/constants';\nimport '@douyinfe/semi-foundation/transfer/transfer.scss';\nimport { useBaseComponent } from '../_base/baseComponent';\nimport LocaleConsumer from '../locale/localeConsumer';\nimport { Locale } from '../locale/interface';\nimport { Checkbox } from '../checkbox/index';\nimport Input, { InputProps } from '../input/index';\nimport Spin from '../spin';\nimport Button from '../button';\nimport Tree from '../tree';\nimport { IconClose, IconHandle, IconSearch } from '@kousum/semi-icons-vue';\nimport { TreeProps, Value as TreeValue } from '../tree/interface';\nimport {\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  Fragment,\n  h,\n  PropType,\n  reactive,\n  ref,\n  UnwrapRef,\n  useSlots,\n  VNode,\n  watch,\n} from 'vue';\nimport { CombineProps, VueJsxNode } from '../interface';\nimport SortableList from './SortableList';\nimport type { SortableItemFuncArg } from '../tagInput';\nimport type { Events } from '@kousum/dnd-kit-vue';\nimport { RenderItemProps, Sortable } from '../_sortable';\nimport { RestrictToVerticalAxis } from '@dnd-kit/abstract/modifiers';\nimport { pointerIntersection } from '@dnd-kit/collision';\n\nexport interface DataItem extends BasicDataItem {\n  label?: VueJsxNode;\n  style?: CSSProperties;\n}\n\nexport interface GroupItem {\n  title?: string;\n  children?: Array<DataItem>;\n}\n\nexport interface TreeItem extends DataItem {\n  children: Array<TreeItem>;\n}\n\nexport interface RenderSourceItemProps extends DataItem {\n  checked: boolean;\n  onChange?: () => void;\n}\n\nexport interface RenderSelectedItemProps extends DataItem {\n  onRemove?: () => void;\n  sortableHandle?: any;\n}\n\nexport interface EmptyContent {\n  left?: VueJsxNode;\n  right?: VueJsxNode;\n  search?: VueJsxNode;\n}\n\nexport type Type = 'list' | 'groupList' | 'treeList';\n\nexport interface SourcePanelProps {\n  value: Array<string | number>;\n  /* Loading */\n  loading: boolean;\n  /* Whether there are no items that match the current search value */\n  noMatch: boolean;\n  /* Items that match the current search value */\n  filterData: Array<DataItem>;\n  /* All items */\n  sourceData: Array<DataItem>;\n  /* transfer props' dataSource */\n  propsDataSource: DataSource;\n  /* Whether to select all */\n  allChecked: boolean;\n  /* Number of filtered results */\n  showNumber: number;\n  /* Input search box value */\n  inputValue: string;\n  /* The function that should be called when the search box changes */\n  onSearch: (searchString: string) => void;\n  /* The function that should be called when all the buttons on the left are clicked */\n  onAllClick: () => void;\n  /* Selected item on the left */\n  selectedItems: Map<string | number, DataItem>;\n  /* The function that should be called when selecting or deleting a single option */\n  onSelectOrRemove: (item: DataItem) => void;\n  /* The function that should be called when selecting an option, */\n  onSelect: (value: Array<string | number>) => void;\n}\n\nexport type OnSortEnd = (event: Parameters<Events['dragend']>[0]) => void;\n\nexport interface SelectedPanelProps {\n  /* Number of selected options */\n  length: number;\n  /* Collection of all selected options */\n  selectedData: Array<DataItem>;\n  /* Callback function that should be called when click to clear */\n  onClear: () => void;\n  /* The function that should be called when a single option is deleted */\n  onRemove: (item: DataItem) => void;\n  /* The function that should be called when reordering the results */\n  onSortEnd: OnSortEnd;\n}\n\nexport interface ResolvedDataItem extends DataItem {\n  _parent?: {\n    title: string;\n  };\n  _optionKey?: string | number;\n}\n\nexport interface DraggableResolvedDataItem {\n  key?: string | number;\n  index?: number;\n  item?: ResolvedDataItem;\n}\n\nexport type DataSource = Array<DataItem> | Array<GroupItem> | Array<TreeItem>;\n\ninterface HeaderConfig {\n  totalContent: string;\n  allContent: string;\n  onAllClick: () => void;\n  type: string;\n  showButton: boolean;\n  num: number;\n  allChecked?: boolean;\n}\n\ntype SourceHeaderProps = {\n  num: number;\n  showButton: boolean;\n  allChecked: boolean;\n  onAllClick: () => void;\n};\n\ntype SelectedHeaderProps = {\n  num: number;\n  showButton: boolean;\n  onClear: () => void;\n};\nexport interface TransferState {\n  data: ResolvedDataItem[];\n  selectedItems: Map<number | string, ResolvedDataItem>;\n  searchResult: Set<number | string>;\n  inputValue: string;\n}\n\nexport interface TransferProps {\n  style?: CSSProperties;\n  className?: string;\n  disabled?: boolean;\n  dataSource?: DataSource;\n  filter?: boolean | ((sugInput: string, item: DataItem) => boolean);\n  defaultValue?: Array<string | number>;\n  value?: Array<string | number>;\n  inputProps?: InputProps;\n  type?: Type;\n  emptyContent?: EmptyContent;\n  draggable?: boolean;\n  treeProps?: Omit<TreeProps, 'value' | 'ref' | 'onChange'>;\n  showPath?: boolean;\n  loading?: boolean;\n  onChange?: (values: Array<string | number>, items: Array<DataItem>) => void;\n  onSelect?: (item: DataItem) => void;\n  onDeselect?: (item: DataItem) => void;\n  onSearch?: (sunInput: string) => void;\n  renderSourceItem?: (item: RenderSourceItemProps) => VNode;\n  renderSelectedItem?: (item: RenderSelectedItemProps) => VueJsxNode;\n  renderSourcePanel?: (sourcePanelProps: SourcePanelProps) => VueJsxNode;\n  renderSelectedPanel?: (selectedPanelProps: SelectedPanelProps) => VueJsxNode;\n  renderSourceHeader?: (headProps: SourceHeaderProps) => VueJsxNode;\n  renderSelectedHeader?: (headProps: SelectedHeaderProps) => VueJsxNode;\n}\n\nexport const prefixCls = cssClasses.PREFIX;\n\nconst propTypes: CombineProps<TransferProps> = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  dataSource: PropTypes.array,\n  filter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  onSearch: PropTypes.func as PropType<TransferProps['onSearch']>,\n  inputProps: PropTypes.object,\n  value: PropTypes.array,\n  defaultValue: PropTypes.array,\n  onChange: PropTypes.func as PropType<TransferProps['onChange']>,\n  onSelect: PropTypes.func as PropType<TransferProps['onSelect']>,\n  onDeselect: PropTypes.func as PropType<TransferProps['onDeselect']>,\n  renderSourceItem: PropTypes.func as PropType<TransferProps['renderSourceItem']>,\n  renderSelectedItem: PropTypes.func as PropType<TransferProps['renderSelectedItem']>,\n  loading: PropTypes.bool,\n  type: PropTypes.string as PropType<TransferProps['type']>,\n  treeProps: PropTypes.object,\n  showPath: PropTypes.bool,\n  emptyContent: PropTypes.object,\n  renderSourcePanel: PropTypes.func as PropType<TransferProps['renderSourcePanel']>,\n  renderSelectedPanel: PropTypes.func as PropType<TransferProps['renderSelectedPanel']>,\n  draggable: PropTypes.bool,\n  renderSourceHeader: PropTypes.func as PropType<TransferProps['renderSourceHeader']>,\n  renderSelectedHeader: PropTypes.func as PropType<TransferProps['renderSelectedHeader']>,\n};\n\nconst defaultProps = {\n  type: strings.TYPE_LIST,\n  dataSource: [] as DataSource,\n  onSearch: noop,\n  onChange: noop,\n  onSelect: noop,\n  onDeselect: noop,\n  onClear: noop,\n  defaultValue: [] as Array<string | number>,\n  emptyContent: {},\n  showPath: false,\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst Transfer = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Transfer',\n  setup(props, {}) {\n    const slots = useSlots();\n    const _treeRef = ref();\n\n    const { defaultValue = [], dataSource, type } = props;\n    const state = reactive<TransferState>({\n      data: [],\n      selectedItems: new Map(),\n      searchResult: new Set(),\n      inputValue: '',\n    });\n    if (Boolean(dataSource) && isArray(dataSource)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore Avoid reporting errors this.state.xxx is read-only\n      state.data = _generateDataByType(dataSource, type);\n    }\n    if (Boolean(defaultValue) && isArray(defaultValue)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore Avoid reporting errors this.state.xxx is read-only\n      state.selectedItems = _generateSelectedItems(defaultValue, state.data);\n    }\n\n    function getDerivedStateFromProps(props: TransferProps) {\n      const { value, dataSource, type, filter } = props;\n      const mergedState = {} as TransferState;\n      let newData: ResolvedDataItem[] = state.data as any;\n      let newSelectedItems = state.selectedItems as TransferState['selectedItems'];\n      if (Boolean(dataSource) && Array.isArray(dataSource)) {\n        newData = _generateDataByType(dataSource, type);\n        mergedState.data = newData;\n      }\n      if (Boolean(value) && Array.isArray(value)) {\n        newSelectedItems = _generateSelectedItems(value, newData);\n        mergedState.selectedItems = newSelectedItems;\n      }\n      if (!isEqual(state.data, newData)) {\n        if (typeof state.inputValue === 'string' && state.inputValue !== '') {\n          const filterFunc =\n            typeof filter === 'function'\n              ? (item: DataItem) => filter(state.inputValue, item)\n              : (item: DataItem) => typeof item.label === 'string' && item.label.includes(state.inputValue);\n          const searchData = newData.filter(filterFunc);\n          const searchResult = new Set(searchData.map((item) => item.key));\n          mergedState.searchResult = searchResult;\n        }\n      }\n\n      return isEmpty(mergedState) ? null : mergedState;\n    }\n\n    watch(\n      [\n        () => state.selectedItems as TransferState['selectedItems'],\n        () => state.data as TransferState['data'],\n        () => state.inputValue,\n        () => props.value,\n        () => props.dataSource,\n        () => props.type,\n        () => props.filter,\n      ],\n      (value, oldValue, onCleanup) => {\n        if (!isEqual(value, oldValue)) {\n          const newState = getDerivedStateFromProps({ ...props });\n          if (newState) {\n            Object.keys(newState).forEach((key) => {\n              state[key] = newState[key];\n            });\n          }\n        }\n      },\n      { immediate: true }\n    );\n    const { adapter: adapterInject, getDataAttr } = useBaseComponent<TransferProps>(props, state);\n    function adapter_(): TransferAdapter<TransferProps, TransferState> {\n      return {\n        ...adapterInject(),\n        getSelected: () => new Map(state.selectedItems) as any,\n        updateSelected: (selectedItems) => {\n          state.selectedItems = selectedItems;\n        },\n        notifyChange: (values, items) => {\n          props.onChange(values, items);\n        },\n        notifySearch: (input) => {\n          props.onSearch(input);\n        },\n        notifySelect: (item) => {\n          props.onSelect(item);\n        },\n        notifyDeselect: (item) => {\n          props.onDeselect(item);\n        },\n        updateInput: (input) => {\n          state.inputValue = input;\n        },\n        updateSearchResult: (searchResult) => {\n          state.searchResult = searchResult;\n        },\n        searchTree: (keyword) => {\n          _treeRef.value && _treeRef.value.search(keyword); // TODO check this._treeRef.current?\n        },\n      };\n    }\n    const adapter = adapter_();\n    const foundation = new TransferFoundation<TransferProps, TransferState>(adapter);\n\n    function onInputChange(value: string) {\n      foundation.handleInputChange(value, true);\n    }\n\n    function search(value: string) {\n      // The search method is used to provide the user with a manually triggered search\n      // Since the method is manually called by the user, setting the second parameter to false does not trigger the onSearch callback to notify the user\n      foundation.handleInputChange(value, false);\n    }\n\n    function onSelectOrRemove(item: ResolvedDataItem) {\n      foundation.handleSelectOrRemove(item);\n    }\n\n    function onSortEnd(event?: Parameters<Events['dragend']>[0]) {\n      if (event) {\n        const { active, over } = {active: event.operation.source, over: event.operation.target};\n        const selectedItems = adapter.getSelected();\n        let selectedArr = [...selectedItems.values()].map((item) => item.key);\n\n        if (!active || !over) {\n          return;\n        }\n        if (active.id !== over.id) {\n          const oldIndex = selectedArr.indexOf(active.id);\n          const newIndex = selectedArr.indexOf(over.id);\n          foundation.handleSortEnd({ oldIndex, newIndex });\n        }\n      }\n    }\n    // function onSortEnd(callbackProps: OnSortEndProps) {\n    //   foundation.handleSortEnd(callbackProps);\n    // }\n\n    function renderFilter(locale: Locale['Transfer']) {\n      const { inputProps, filter, disabled } = props;\n      if (typeof filter === 'boolean' && !filter) {\n        return null;\n      }\n      return (\n        <div role=\"search\" aria-label=\"Transfer filter\" class={`${prefixCls}-filter`}>\n          <Input\n            prefix={<IconSearch />}\n            placeholder={locale.placeholder}\n            showClear\n            value={state.inputValue}\n            disabled={disabled}\n            onChange={onInputChange}\n            {...inputProps}\n          />\n        </div>\n      );\n    }\n\n    function renderHeader(headerConfig: HeaderConfig) {\n      const { disabled, renderSourceHeader, renderSelectedHeader } = props;\n      const { totalContent, allContent, onAllClick, type, showButton } = headerConfig;\n      const headerCls = cls({\n        [`${prefixCls}-header`]: true,\n        [`${prefixCls}-right-header`]: type === 'right',\n        [`${prefixCls}-left-header`]: type === 'left',\n      });\n\n      if (type === 'left' && typeof renderSourceHeader === 'function') {\n        const { num, showButton, allChecked, onAllClick } = headerConfig;\n        return renderSourceHeader({ num, showButton, allChecked, onAllClick });\n      }\n\n      if (type === 'right' && typeof renderSelectedHeader === 'function') {\n        const { num, showButton, onAllClick: onClear } = headerConfig;\n        return renderSelectedHeader({ num, showButton, onClear });\n      }\n\n      return (\n        <div class={headerCls}>\n          <span class={`${prefixCls}-header-total`}>{totalContent}</span>\n          {showButton ? (\n            <Button\n              theme=\"borderless\"\n              disabled={disabled}\n              type=\"tertiary\"\n              size=\"small\"\n              className={`${prefixCls}-header-all`}\n              onClick={onAllClick}\n            >\n              {allContent}\n            </Button>\n          ) : null}\n        </div>\n      );\n    }\n\n    function renderLeftItem(item: ResolvedDataItem, index: number) {\n      const { renderSourceItem, disabled } = props;\n      const { selectedItems } = state;\n      const checked = selectedItems.has(item.key);\n      if (renderSourceItem) {\n        return renderSourceItem({ ...item, checked, onChange: () => onSelectOrRemove(item) });\n      }\n      const leftItemCls = cls({\n        [`${prefixCls}-item`]: true,\n        [`${prefixCls}-item-disabled`]: item.disabled,\n      });\n      return (\n        <Checkbox\n          key={index}\n          disabled={item.disabled || disabled}\n          className={leftItemCls}\n          checked={checked}\n          role=\"listitem\"\n          onChange={() => onSelectOrRemove(item)}\n          x-semi-children-alias={`dataSource[${index}].label`}\n        >\n          {item.label}\n        </Checkbox>\n      );\n    }\n\n    function renderLeft(locale: Locale['Transfer']) {\n      const { data, selectedItems, inputValue, searchResult } = state;\n      const { loading, type, emptyContent, renderSourcePanel, dataSource } = props;\n      const totalToken = locale.total;\n      const inSearchMode = inputValue !== '';\n      const showNumber = inSearchMode ? searchResult.size : data.length;\n      // @ts-ignore\n      const filterData: ResolvedDataItem[] = inSearchMode ? data.filter((item) => searchResult.has(item.key)) : data;\n      // Whether to select all should be a judgment, whether the filtered data on the left is a subset of the selected items\n      // For example, the filtered data on the left is 1, 3, 4;\n      // The selected option is 1,2,3,4, it is true\n      // The selected option is 2,3,4, then it is false\n      const leftContainesNotInSelected = Boolean(filterData.find((f) => !selectedItems.has(f.key)));\n\n      const totalText = totalToken.replace('${total}', `${showNumber}`);\n\n      const headerConfig: HeaderConfig = {\n        totalContent: totalText,\n        allContent: leftContainesNotInSelected ? locale.selectAll : locale.clearSelectAll,\n        onAllClick: () => foundation.handleAll(leftContainesNotInSelected),\n        type: 'left',\n        showButton: type !== strings.TYPE_TREE_TO_LIST,\n        num: showNumber,\n        allChecked: !leftContainesNotInSelected,\n      };\n      const inputCom = renderFilter(locale);\n      const headerCom = renderHeader(headerConfig);\n      const noMatch = inSearchMode && searchResult.size === 0;\n      const emptySearch = emptyContent.search ? emptyContent.search : locale.emptySearch;\n      const emptyLeft = emptyContent.left ? emptyContent.left : locale.emptyLeft;\n      const emptyDataCom = renderEmpty('left', emptyLeft);\n      const emptySearchCom = renderEmpty('left', emptySearch);\n\n      const loadingCom = <Spin />;\n\n      let content: VueJsxNode = null;\n      switch (true) {\n        case loading:\n          content = loadingCom;\n          break;\n        case noMatch:\n          content = emptySearchCom;\n          break;\n        case data.length === 0:\n          content = emptyDataCom;\n          break;\n        case type === strings.TYPE_TREE_TO_LIST:\n          content = (\n            <Fragment>\n              {headerCom}\n              {renderLeftTree()}\n            </Fragment>\n          );\n          break;\n        case !noMatch && (type === strings.TYPE_LIST || type === strings.TYPE_GROUP_LIST):\n          content = (\n            <Fragment>\n              {headerCom}\n              {renderLeftList(filterData)}\n            </Fragment>\n          );\n          break;\n        default:\n          content = null;\n          break;\n      }\n\n      const { values } = foundation.getValuesAndItemsFromMap(selectedItems);\n\n      const renderProps: SourcePanelProps = {\n        loading,\n        noMatch,\n        filterData,\n        sourceData: data as ResolvedDataItem[],\n        propsDataSource: dataSource,\n        allChecked: !leftContainesNotInSelected,\n        showNumber,\n        inputValue,\n        selectedItems: selectedItems as TransferState['selectedItems'],\n        value: values,\n        onSelect: foundation.handleSelect.bind(foundation),\n        onAllClick: () => foundation.handleAll(leftContainesNotInSelected),\n        onSearch: onInputChange,\n        onSelectOrRemove: (item: ResolvedDataItem) => onSelectOrRemove(item),\n      };\n\n      if (renderSourcePanel) {\n        return renderSourcePanel(renderProps);\n      }\n\n      return (\n        <section class={`${prefixCls}-left`}>\n          {inputCom}\n          {content}\n        </section>\n      );\n    }\n\n    function renderGroupTitle(group: GroupItem, index: number) {\n      const groupCls = cls(`${prefixCls}-group-title`);\n      return (\n        <div class={groupCls} key={`title-${index}`}>\n          {group.title}\n        </div>\n      );\n    }\n\n    function renderLeftTree() {\n      const { selectedItems } = state;\n      const { disabled, dataSource, treeProps } = props;\n      const { values } = foundation.getValuesAndItemsFromMap(selectedItems);\n      const onChange = (value: TreeValue) => {\n        foundation.handleSelect(value);\n      };\n      const restTreeProps = omit(treeProps, ['value', 'ref', 'onChange']);\n      return (\n        <Tree\n          disabled={disabled}\n          treeData={dataSource as any}\n          multiple\n          disableStrictly\n          value={values}\n          defaultExpandAll\n          leafOnly\n          ref={_treeRef}\n          filterTreeNode\n          searchRender={false}\n          searchStyle={{ padding: 0 }}\n          style={{ flex: 1, overflow: 'overlay' }}\n          onChange={onChange}\n          {...restTreeProps}\n        />\n      );\n    }\n\n    function renderLeftList(visibileItems: Array<ResolvedDataItem>) {\n      const content = [] as Array<VNode>;\n      const groupStatus = new Map();\n\n      visibileItems.forEach((item, index) => {\n        const parentGroup = item._parent;\n        const optionContent = renderLeftItem(item, index);\n        if (parentGroup && groupStatus.has(parentGroup.title)) {\n          // group content already insert\n          content.push(optionContent);\n        } else if (parentGroup) {\n          const groupContent = renderGroupTitle(parentGroup, index);\n          groupStatus.set(parentGroup.title, true);\n          content.push(groupContent);\n          content.push(optionContent);\n        } else {\n          content.push(optionContent);\n        }\n      });\n      return (\n        <div class={`${prefixCls}-left-list`} role=\"list\" aria-label=\"Option list\">\n          {content}\n        </div>\n      );\n    }\n\n    function renderRightItem(item: ResolvedDataItem, sortableHandle?: any) {\n      const { renderSelectedItem, draggable, type, showPath } = props;\n      const onRemove = () => foundation.handleSelectOrRemove(item);\n      const rightItemCls = cls({\n        [`${prefixCls}-item`]: true,\n        [`${prefixCls}-right-item`]: true,\n        [`${prefixCls}-right-item-draggable`]: draggable,\n      });\n      const shouldShowPath = type === strings.TYPE_TREE_TO_LIST && showPath === true;\n\n      const label = shouldShowPath ? foundation._generatePath(item) : item.label;\n\n      if (renderSelectedItem) {\n        return renderSelectedItem({ ...item, onRemove, sortableHandle: sortableHandle });\n      }\n\n      const DragHandle = sortableHandle && sortableHandle(() => (\n        <IconHandle role=\"button\" aria-label=\"Drag and sort\" className={`${prefixCls}-right-item-drag-handler`} />\n      ));\n      return (\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\n        <div role=\"listitem\" class={rightItemCls} key={item.key}>\n          {draggable && sortableHandle ? <DragHandle /> : null}\n          <div class={`${prefixCls}-right-item-text`}>{label}</div>\n          <IconClose\n            onClick={onRemove}\n            aria-disabled={item.disabled}\n            className={cls(`${prefixCls}-item-close-icon`, {\n              [`${prefixCls}-item-close-icon-disabled`]: item.disabled\n            })}\n          />\n        </div>\n      );\n    }\n    const renderSortItem = (props: RenderItemProps): VueJsxNode => {\n      const { id, sortableHandle } = props;\n      const { selectedItems } = state;\n      const selectedData = [...selectedItems.values()];\n      const item = selectedData.find(item => item.key === id);\n      return renderRightItem(item, sortableHandle);\n    }\n    function renderEmpty(type: string, emptyText: VueJsxNode) {\n      const emptyCls = cls({\n        [`${prefixCls}-empty`]: true,\n        [`${prefixCls}-right-empty`]: type === 'right',\n        [`${prefixCls}-left-empty`]: type === 'left',\n      });\n      return (\n        <div aria-label=\"empty\" class={emptyCls}>\n          {emptyText}\n        </div>\n      );\n    }\n\n    function renderRightSortableList(selectedData: Array<ResolvedDataItem>) {\n      const sortItems = selectedData.map(item => item.key);\n      const sortList = <Sortable\n        modifiers={[RestrictToVerticalAxis]}\n        collisionDetector={pointerIntersection}\n        onSortEnd={onSortEnd}\n        items={sortItems}\n        renderItem={renderSortItem}\n        prefix={`${prefixCls}-right-item`}\n        dragOverlayCls={`${prefixCls}-right-item-drag-item-move`}\n      />;\n      return sortList;\n\n\n      // const sortableListItems = selectedData.map((item) => {\n      //   return {\n      //     ...item,\n      //     id: item.key,\n      //     node: renderRightItem(item),\n      //   };\n      // });\n      //\n      // // helperClass：add styles to the helper(item being dragged) https://github.com/clauderic/react-sortable-hoc/issues/87\n      // // @ts-ignore skip SortableItem type check\n      // const sortList = (\n      //   <SortableList\n      //     useDragHandle\n      //     helperClass={`${prefixCls}-right-item-drag-item-move`}\n      //     onSortOver={onSortEnd}\n      //     items={sortableListItems}\n      //   />\n      // );\n      // return sortList;\n    }\n\n    function renderRight(locale: Locale['Transfer']) {\n      const { selectedItems } = state;\n      const { emptyContent, renderSelectedPanel, draggable } = props;\n      const selectedData = [...selectedItems.values()] as Array<DataItem>;\n\n      // when custom render panel\n      const renderProps: SelectedPanelProps = {\n        length: selectedData.length,\n        selectedData,\n        onClear: () => foundation.handleClear(),\n        onRemove: (item) => foundation.handleSelectOrRemove(item),\n        onSortEnd: (props) => onSortEnd(props),\n      };\n      if (renderSelectedPanel) {\n        return renderSelectedPanel(renderProps);\n      }\n      const selectedToken = locale.selected;\n      const selectedText = selectedToken.replace('${total}', `${selectedData.length}`);\n      const headerConfig = {\n        totalContent: selectedText,\n        allContent: locale.clear,\n        onAllClick: () => foundation.handleClear(),\n        type: 'right',\n        showButton: Boolean(selectedData.length),\n        num: selectedData.length,\n      };\n      const headerCom = renderHeader(headerConfig);\n      const emptyCom = renderEmpty('right', emptyContent.right ? emptyContent.right : locale.emptyRight);\n      const panelCls = `${prefixCls}-right`;\n\n      let content = null;\n\n      switch (true) {\n        // when empty\n        case !selectedData.length:\n          content = emptyCom;\n          break;\n        case selectedData.length && !draggable:\n          const list = (\n            <div class={`${prefixCls}-right-list`} role=\"list\" aria-label=\"Selected list\">\n              {selectedData.map((item) => {\n                return renderRightItem({ ...item });\n              })}\n            </div>\n          );\n          content = list;\n          break;\n        case selectedData.length && draggable:\n          content = renderRightSortableList(selectedData);\n          break;\n        default:\n          break;\n      }\n\n      return (\n        <section class={panelCls}>\n          {headerCom}\n          {content}\n        </section>\n      );\n    }\n\n    return () => {\n      const { className, style, disabled, renderSelectedPanel, renderSourcePanel } = props;\n      const transferCls = cls(prefixCls, className, {\n        [`${prefixCls}-disabled`]: disabled,\n        [`${prefixCls}-custom-panel`]: renderSelectedPanel && renderSourcePanel,\n      });\n\n      return (\n        <LocaleConsumer componentName=\"Transfer\">\n          {(locale: Locale['Transfer']) => (\n            <div class={transferCls} style={style} {...getDataAttr()}>\n              {renderLeft(locale)}\n              {renderRight(locale)}\n            </div>\n          )}\n        </LocaleConsumer>\n      );\n    };\n  },\n});\n\nexport default Transfer;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefixCls","cssClasses","PREFIX","propTypes","style","PropTypes","object","className","string","disabled","bool","dataSource","array","filter","oneOfType","func","onSearch","inputProps","value","defaultValue","onChange","onSelect","onDeselect","renderSourceItem","renderSelectedItem","loading","type","treeProps","showPath","emptyContent","renderSourcePanel","renderSelectedPanel","draggable","renderSourceHeader","renderSelectedHeader","defaultProps","strings","TYPE_LIST","noop","onClear","vuePropsType","vuePropsMake","Transfer","defineComponent","props","name","setup","useSlots","_treeRef","ref","state","reactive","data","selectedItems","Map","searchResult","Set","inputValue","isArray","_generateDataByType","_generateSelectedItems","getDerivedStateFromProps","mergedState","newData","newSelectedItems","Array","isEqual","filterFunc","item","label","includes","searchData","map","key","isEmpty","watch","oldValue","onCleanup","newState","keys","forEach","immediate","adapter","adapterInject","getDataAttr","useBaseComponent","adapter_","getSelected","updateSelected","notifyChange","values","items","notifySearch","input","notifySelect","notifyDeselect","updateInput","updateSearchResult","searchTree","keyword","search","foundation","TransferFoundation","onInputChange","handleInputChange","onSelectOrRemove","handleSelectOrRemove","onSortEnd","event","active","over","operation","source","target","selectedArr","id","oldIndex","indexOf","newIndex","handleSortEnd","renderFilter","locale","_createVNode","Input","_mergeProps","IconSearch","placeholder","renderHeader","headerConfig","totalContent","allContent","onAllClick","showButton","headerCls","cls","num","allChecked","Button","default","renderLeftItem","index","checked","has","leftItemCls","Checkbox","renderLeft","totalToken","total","inSearchMode","showNumber","size","length","filterData","leftContainesNotInSelected","Boolean","find","f","replace","selectAll","clearSelectAll","handleAll","TYPE_TREE_TO_LIST","inputCom","headerCom","noMatch","emptySearch","emptyLeft","left","emptyDataCom","renderEmpty","emptySearchCom","loadingCom","Spin","content","_Fragment","renderLeftTree","TYPE_GROUP_LIST","renderLeftList","getValuesAndItemsFromMap","renderProps","sourceData","propsDataSource","handleSelect","bind","renderGroupTitle","group","groupCls","title","restTreeProps","omit","Tree","padding","flex","overflow","visibileItems","groupStatus","parentGroup","_parent","optionContent","push","groupContent","set","renderRightItem","sortableHandle","onRemove","rightItemCls","_generatePath","DragHandle","IconHandle","IconClose","renderSortItem","emptyText","emptyCls","renderRightSortableList","selectedData","sortItems","Sortable","RestrictToVerticalAxis","pointerIntersection","renderRight","handleClear","selected","clear","emptyCom","right","emptyRight","panelCls","transferCls","LocaleConsumer"],"mappings":"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"}