import { BasicDataItem } from '@douyinfe/semi-foundation/lib/es/transfer/foundation';
import '@douyinfe/semi-foundation/lib/es/transfer/transfer.css';
import { InputProps } from '../input/index';
import { TreeProps } from '../tree/interface';
import { CSSProperties, PropType, VNode } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
import type { Events } from '@kousum/dnd-kit-vue';
export interface DataItem extends BasicDataItem {
    label?: VueJsxNode;
    style?: CSSProperties;
}
export interface GroupItem {
    title?: string;
    children?: Array<DataItem>;
}
export interface TreeItem extends DataItem {
    children: Array<TreeItem>;
}
export interface RenderSourceItemProps extends DataItem {
    checked: boolean;
    onChange?: () => void;
}
export interface RenderSelectedItemProps extends DataItem {
    onRemove?: () => void;
    sortableHandle?: any;
}
export interface EmptyContent {
    left?: VueJsxNode;
    right?: VueJsxNode;
    search?: VueJsxNode;
}
export type Type = 'list' | 'groupList' | 'treeList';
export interface SourcePanelProps {
    value: Array<string | number>;
    loading: boolean;
    noMatch: boolean;
    filterData: Array<DataItem>;
    sourceData: Array<DataItem>;
    propsDataSource: DataSource;
    allChecked: boolean;
    showNumber: number;
    inputValue: string;
    onSearch: (searchString: string) => void;
    onAllClick: () => void;
    selectedItems: Map<string | number, DataItem>;
    onSelectOrRemove: (item: DataItem) => void;
    onSelect: (value: Array<string | number>) => void;
}
export type OnSortEnd = (event: Parameters<Events['dragend']>[0]) => void;
export interface SelectedPanelProps {
    length: number;
    selectedData: Array<DataItem>;
    onClear: () => void;
    onRemove: (item: DataItem) => void;
    onSortEnd: OnSortEnd;
}
export interface ResolvedDataItem extends DataItem {
    _parent?: {
        title: string;
    };
    _optionKey?: string | number;
}
export interface DraggableResolvedDataItem {
    key?: string | number;
    index?: number;
    item?: ResolvedDataItem;
}
export type DataSource = Array<DataItem> | Array<GroupItem> | Array<TreeItem>;
type SourceHeaderProps = {
    num: number;
    showButton: boolean;
    allChecked: boolean;
    onAllClick: () => void;
};
type SelectedHeaderProps = {
    num: number;
    showButton: boolean;
    onClear: () => void;
};
export interface TransferState {
    data: ResolvedDataItem[];
    selectedItems: Map<number | string, ResolvedDataItem>;
    searchResult: Set<number | string>;
    inputValue: string;
}
export interface TransferProps {
    style?: CSSProperties;
    className?: string;
    disabled?: boolean;
    dataSource?: DataSource;
    filter?: boolean | ((sugInput: string, item: DataItem) => boolean);
    defaultValue?: Array<string | number>;
    value?: Array<string | number>;
    inputProps?: InputProps;
    type?: Type;
    emptyContent?: EmptyContent;
    draggable?: boolean;
    treeProps?: Omit<TreeProps, 'value' | 'ref' | 'onChange'>;
    showPath?: boolean;
    loading?: boolean;
    onChange?: (values: Array<string | number>, items: Array<DataItem>) => void;
    onSelect?: (item: DataItem) => void;
    onDeselect?: (item: DataItem) => void;
    onSearch?: (sunInput: string) => void;
    renderSourceItem?: (item: RenderSourceItemProps) => VNode;
    renderSelectedItem?: (item: RenderSelectedItemProps) => VueJsxNode;
    renderSourcePanel?: (sourcePanelProps: SourcePanelProps) => VueJsxNode;
    renderSelectedPanel?: (selectedPanelProps: SelectedPanelProps) => VueJsxNode;
    renderSourceHeader?: (headProps: SourceHeaderProps) => VueJsxNode;
    renderSelectedHeader?: (headProps: SelectedHeaderProps) => VueJsxNode;
}
export declare const prefixCls: string;
export declare const vuePropsType: CombineProps<TransferProps>;
declare const Transfer: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<DataSource> | {
        type: PropType<DataSource>;
        default?: any;
        required?: false;
    };
    filter: PropType<boolean | ((sugInput: string, item: DataItem) => boolean)> | {
        type: PropType<boolean | ((sugInput: string, item: DataItem) => boolean)>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    value: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    inputProps: PropType<InputProps> | {
        type: PropType<InputProps>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<EmptyContent> | {
        type: PropType<EmptyContent>;
        default?: any;
        required?: false;
    };
    draggable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    treeProps: PropType<Omit<TreeProps, "ref" | "value" | "onChange">> | {
        type: PropType<Omit<TreeProps, "ref" | "value" | "onChange">>;
        default?: any;
        required?: false;
    };
    showPath: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(values: Array<string | number>, items: Array<DataItem>) => void> | {
        type: PropType<(values: Array<string | number>, items: Array<DataItem>) => void>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(item: DataItem) => void> | {
        type: PropType<(item: DataItem) => void>;
        default?: any;
        required?: false;
    };
    onDeselect: PropType<(item: DataItem) => void> | {
        type: PropType<(item: DataItem) => void>;
        default?: any;
        required?: false;
    };
    onSearch: PropType<(sunInput: string) => void> | {
        type: PropType<(sunInput: string) => void>;
        default?: any;
        required?: false;
    };
    renderSourceItem: PropType<(item: RenderSourceItemProps) => VNode> | {
        type: PropType<(item: RenderSourceItemProps) => VNode>;
        default?: any;
        required?: false;
    };
    renderSelectedItem: PropType<(item: RenderSelectedItemProps) => VueJsxNode> | {
        type: PropType<(item: RenderSelectedItemProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSourcePanel: PropType<(sourcePanelProps: SourcePanelProps) => VueJsxNode> | {
        type: PropType<(sourcePanelProps: SourcePanelProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSelectedPanel: PropType<(selectedPanelProps: SelectedPanelProps) => VueJsxNode> | {
        type: PropType<(selectedPanelProps: SelectedPanelProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSourceHeader: PropType<(headProps: SourceHeaderProps) => VueJsxNode> | {
        type: PropType<(headProps: SourceHeaderProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSelectedHeader: PropType<(headProps: SelectedHeaderProps) => VueJsxNode> | {
        type: PropType<(headProps: SelectedHeaderProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    dataSource: PropType<DataSource> | {
        type: PropType<DataSource>;
        default?: any;
        required?: false;
    };
    filter: PropType<boolean | ((sugInput: string, item: DataItem) => boolean)> | {
        type: PropType<boolean | ((sugInput: string, item: DataItem) => boolean)>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    value: PropType<(string | number)[]> | {
        type: PropType<(string | number)[]>;
        default?: any;
        required?: false;
    };
    inputProps: PropType<InputProps> | {
        type: PropType<InputProps>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<EmptyContent> | {
        type: PropType<EmptyContent>;
        default?: any;
        required?: false;
    };
    draggable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    treeProps: PropType<Omit<TreeProps, "ref" | "value" | "onChange">> | {
        type: PropType<Omit<TreeProps, "ref" | "value" | "onChange">>;
        default?: any;
        required?: false;
    };
    showPath: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(values: Array<string | number>, items: Array<DataItem>) => void> | {
        type: PropType<(values: Array<string | number>, items: Array<DataItem>) => void>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(item: DataItem) => void> | {
        type: PropType<(item: DataItem) => void>;
        default?: any;
        required?: false;
    };
    onDeselect: PropType<(item: DataItem) => void> | {
        type: PropType<(item: DataItem) => void>;
        default?: any;
        required?: false;
    };
    onSearch: PropType<(sunInput: string) => void> | {
        type: PropType<(sunInput: string) => void>;
        default?: any;
        required?: false;
    };
    renderSourceItem: PropType<(item: RenderSourceItemProps) => VNode> | {
        type: PropType<(item: RenderSourceItemProps) => VNode>;
        default?: any;
        required?: false;
    };
    renderSelectedItem: PropType<(item: RenderSelectedItemProps) => VueJsxNode> | {
        type: PropType<(item: RenderSelectedItemProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSourcePanel: PropType<(sourcePanelProps: SourcePanelProps) => VueJsxNode> | {
        type: PropType<(sourcePanelProps: SourcePanelProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSelectedPanel: PropType<(selectedPanelProps: SelectedPanelProps) => VueJsxNode> | {
        type: PropType<(selectedPanelProps: SelectedPanelProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSourceHeader: PropType<(headProps: SourceHeaderProps) => VueJsxNode> | {
        type: PropType<(headProps: SourceHeaderProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderSelectedHeader: PropType<(headProps: SelectedHeaderProps) => VueJsxNode> | {
        type: PropType<(headProps: SelectedHeaderProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Transfer;
