import { defineComponent as s, ref as u, shallowRef as m, watch as a } from "vue";
import { useSortable as c } from "@kousum/dnd-kit-vue/sortable";
import { pointerIntersection as f } from "@dnd-kit/collision";
const b = {
  id: {
    type: [String, Number],
    required: !0
  },
  item: {
    type: Function,
    required: !0
  },
  index: {
    type: Number,
    required: !0
  }
}, y = /* @__PURE__ */ s({
  props: {
    ...b
  },
  name: "SortableItem",
  setup(t, {}) {
    const i = u(null), r = u(null), l = m(t.id);
    a(() => t.id, (e, n) => {
      console.log(e), e !== n && (l.value = n);
    });
    const d = m(t.index);
    a(() => t.index, (e, n) => {
      console.log(e), e !== n && (d.value = n);
    });
    const {
      isDragSource: o
    } = c({
      id: l,
      index: d,
      element: i,
      handle: r,
      collisionDetector: f
    });
    return () => t.item({
      element: i,
      handleRef: (e) => {
        r.value = e == null ? void 0 : e.$el;
      },
      attributes: {
        "data-shadow": o == null ? void 0 : o.value
      }
    });
  }
});
export {
  y as default,
  b as vuePropsType
};
//# sourceMappingURL=SortableItem.js.map
