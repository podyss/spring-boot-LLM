{"version":3,"file":"yearAndMonth.js","sources":["../../src/components/datePicker/yearAndMonth.tsx"],"sourcesContent":["import { defineComponent, ref, h, Fragment, useSlots, reactive, watch, PropType } from 'vue';\n\nimport YearAndMonthFoundation, {\n  MonthScrollItem,\n  YearAndMonthAdapter,\n  YearAndMonthFoundationProps,\n  YearAndMonthFoundationState,\n  YearScrollItem,\n} from '@douyinfe/semi-foundation/datePicker/yearAndMonthFoundation';\nimport { BaseProps, useBaseComponent } from '../_base/baseComponent';\nimport ScrollList from '../scrollList/index';\nimport ScrollItem from '../scrollList/scrollItem';\nimport { getYears } from '@douyinfe/semi-foundation/datePicker/_utils/index';\n\nimport IconButton from '../iconButton';\nimport { IconChevronLeft } from '@kousum/semi-icons-vue';\nimport { BASE_CLASS_PREFIX } from '@douyinfe/semi-foundation/base/constants';\n\nimport { noop, stubFalse, isEqual } from 'lodash';\nimport { setYear, setMonth, set } from 'date-fns';\nimport { Locale } from '../locale/interface';\nimport * as PropTypes from '../PropTypes';\nimport { vuePropsMake } from '../PropTypes';\nimport { strings } from '@douyinfe/semi-foundation/datePicker/constants';\nimport { PanelType } from '@douyinfe/semi-foundation/datePicker/monthsGridFoundation';\nimport { ComponentObjectPropsOptions } from 'vue';\nimport { CombineProps } from '../interface';\n\nconst prefixCls = `${BASE_CLASS_PREFIX}-datepicker`;\n\nexport interface YearAndMonthProps extends YearAndMonthFoundationProps, BaseProps {\n  locale?: Locale['DatePicker'];\n}\n\nexport type YearAndMonthState = YearAndMonthFoundationState;\n\nconst propTypes: CombineProps<YearAndMonthProps> = {\n  currentYear: {\n    type: PropTypes.object,\n    required: true\n  },\n  currentMonth: {\n    type: PropTypes.object,\n    required: true\n  },\n  onSelect: PropTypes.func as PropType<YearAndMonthProps['onSelect']>,\n  locale: PropTypes.object,\n  localeCode: PropTypes.string,\n  monthCycled: PropTypes.bool,\n  yearCycled: PropTypes.bool,\n  noBackBtn: PropTypes.bool,\n  disabledDate: PropTypes.func as PropType<YearAndMonthProps['disabledDate']>,\n  density: PropTypes.string,\n\n  presetPosition: PropTypes.string as PropType<YearAndMonthProps['presetPosition']>,\n  renderQuickControls: PropTypes.node,\n  renderDateInput: PropTypes.node,\n  yearAndMonthOpts: PropTypes.any,\n  type: PropTypes.string as PropType<YearAndMonthProps['type']>,\n  startYear: PropTypes.number,\n  endYear: PropTypes.number,\n\n  onBackToMain: PropTypes.func as PropType<YearAndMonthProps['onBackToMain']>,\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nconst defaultProps = {\n  disabledDate: stubFalse,\n  monthCycled: false,\n  yearCycled: false,\n  noBackBtn: false,\n  onSelect: noop,\n  type: 'month',\n};\nexport const vuePropsType = vuePropsMake<YearAndMonthProps>(propTypes, defaultProps);\nconst yearAndMonth = defineComponent({\n  props: { ...vuePropsType },\n  name: 'DatePickerYearAndMonth',\n  setup(props, { expose }) {\n    const slots = useSlots();\n\n    const now = new Date();\n\n    let { currentYear, currentMonth } = props;\n\n    const state = reactive<YearAndMonthState>({\n      years: getYears(props.startYear, props.endYear).map((year) => ({\n        value: year,\n        year,\n      })),\n      months: Array(12)\n        .fill(0)\n        .map((v, idx) => ({\n          value: idx + 1,\n          month: idx + 1,\n        })),\n      currentYear: { left: currentYear.left || now.getFullYear(), right: currentYear.right || now.getFullYear() },\n      currentMonth: { left: currentMonth.left || now.getMonth() + 1, right: currentMonth.right || now.getMonth() + 2 },\n    });\n\n    const { adapter: adapterInject } = useBaseComponent<YearAndMonthProps>(props, state);\n    const yearRef = ref();\n    const monthRef = ref();\n    const foundation = new YearAndMonthFoundation(adapter());\n\n    function adapter(): YearAndMonthAdapter {\n      return {\n        ...adapterInject<YearAndMonthProps, YearAndMonthState>(),\n        // updateYears: years => this.setState({ years }),\n        // updateMonths: months => this.setState({ months }),\n        setCurrentYear: (currentYear) => (state.currentYear = currentYear),\n        setCurrentMonth: (currentMonth) => (state.currentMonth = currentMonth),\n        setCurrentYearAndMonth: (currentYear, currentMonth) => {\n          state.currentYear = currentYear;\n          state.currentMonth = currentMonth;\n        },\n        notifySelectYear: (year) =>\n          props.onSelect({\n            currentMonth: state.currentMonth,\n            currentYear: year,\n          }),\n        notifySelectMonth: (month) =>\n          props.onSelect({\n            currentYear: state.currentYear,\n            currentMonth: month,\n          }),\n        notifySelectYearAndMonth: (year, month) =>\n          props.onSelect({\n            currentYear: year,\n            currentMonth: month,\n          }),\n        notifyBackToMain: () => props.onBackToMain(),\n      };\n    }\n\n    // ok\n    function getDerivedStateFromProps(props: YearAndMonthProps, state: YearAndMonthState) {\n      const willUpdateStates: Partial<YearAndMonthState> = {};\n      const now = new Date();\n\n      if (!isEqual(props.currentYear, state.currentYear) && props.currentYear.left !== 0) {\n        const nowYear = new Date().getFullYear();\n        willUpdateStates.currentYear = {\n          left: props.currentYear.left || nowYear,\n          right: props.currentYear.right || nowYear,\n        };\n      }\n\n      if (!isEqual(props.currentMonth, state.currentMonth) && props.currentMonth.left !== 0) {\n        const nowMonth = new Date().getMonth();\n        willUpdateStates.currentMonth = {\n          left: props.currentMonth.left || nowMonth + 1,\n          right: props.currentMonth.right || nowMonth + 2,\n        };\n      }\n\n      return willUpdateStates;\n    }\n    watch(\n      [() => props.currentMonth, () => props.currentYear],\n      (val) => {\n        const newState = getDerivedStateFromProps({ ...props }, { ...state });\n        if (newState) {\n          Object.keys(newState).forEach((key) => {\n            state[key] = newState[key];\n          });\n        }\n      },\n      { immediate: true }\n    );\n\n    function renderColYear(panelType: PanelType) {\n      const { years, currentYear, currentMonth, months } = state;\n      const { disabledDate, localeCode, yearCycled, yearAndMonthOpts } = props;\n      const currentDate = setMonth(Date.now(), currentMonth[panelType] - 1);\n      const left = strings.PANEL_TYPE_LEFT;\n      const right = strings.PANEL_TYPE_RIGHT;\n\n      const needDisabled = (year) => {\n        if (panelType === right && currentYear[left]) {\n          if (currentMonth[left] <= currentMonth[right]) {\n            return currentYear[left] > year;\n          } else {\n            return currentYear[left] >= year;\n          }\n        }\n        return false;\n      };\n\n      const list: any[] = years.map(({ value, year }) => {\n        const isAllMonthDisabled = months.every(({ month }) => {\n          return disabledDate(set(currentDate, { year, month: month - 1 }));\n        });\n        const isRightPanelDisabled = needDisabled(year);\n        return {\n          year,\n          value, // Actual rendered text\n          disabled: isAllMonthDisabled || isRightPanelDisabled,\n        };\n      });\n      let transform = (val: string) => val;\n      if (localeCode === 'zh-CN' || localeCode === 'zh-TW') {\n        // Only Chinese needs to add [year] after the selected year\n        transform = (val) => `${val}年`;\n      }\n      return (\n        <ScrollItem\n          ref={yearRef}\n          {...{\n            cycled: yearCycled,\n            list: list,\n            transform: transform,\n            selectedIndex: years.findIndex((item) => item.value === currentYear[panelType]),\n            type: 'year',\n            onSelect: (item) => selectYear(item as YearScrollItem, panelType),\n            mode: 'normal',\n            ...yearAndMonthOpts,\n          }}\n        />\n      );\n    }\n\n    const selectYear = (item: YearScrollItem, panelType?: PanelType) => {\n      foundation.selectYear(item, panelType);\n    };\n\n    const selectMonth = (item: MonthScrollItem, panelType?: PanelType) => {\n      foundation.selectMonth(item, panelType);\n    };\n\n    const reselect = () => {\n      const refKeys = [yearRef, monthRef];\n\n      refKeys.forEach((refValue) => {\n        if (refValue.value && refValue.value.scrollToIndex) {\n          refValue.value.scrollToIndex();\n        }\n      });\n    };\n    expose({\n      reselect,\n    });\n\n    function renderColMonth(panelType: PanelType) {\n      const { months, currentMonth, currentYear } = state;\n      const { locale, localeCode, monthCycled, disabledDate, yearAndMonthOpts } = props;\n      let transform = (val: string) => val;\n      const currentDate = setYear(Date.now(), currentYear[panelType]);\n      const left = strings.PANEL_TYPE_LEFT;\n      const right = strings.PANEL_TYPE_RIGHT;\n\n      if (localeCode === 'zh-CN' || localeCode === 'zh-TW') {\n        // Only Chinese needs to add [month] after the selected month\n        transform = (val) => `${val}月`;\n      }\n      // i18n\n      const list: MonthScrollItem[] = months.map(({ value, month }) => {\n        const isRightPanelDisabled =\n          panelType === right &&\n          currentMonth[left] &&\n          currentYear[left] === currentYear[right] &&\n          currentMonth[left] > month;\n\n        return {\n          month,\n          disabled: disabledDate(setMonth(currentDate, month - 1)) || isRightPanelDisabled,\n          value: locale.fullMonths[value], // Actual rendered text\n        };\n      });\n      const selectedIndex = list.findIndex((item) => item.month === currentMonth[panelType]);\n\n      return (\n        <ScrollItem\n          ref={monthRef}\n          {...{\n            cycled: monthCycled,\n            list: list,\n            transform: transform,\n            selectedIndex: selectedIndex,\n            type: 'month',\n            onSelect: (item) => selectMonth(item as MonthScrollItem, panelType),\n            mode: 'normal',\n            ...yearAndMonthOpts,\n          }}\n        />\n      );\n    }\n\n    const backToMain = (e) => {\n      e.stopImmediatePropagation();\n      foundation.backToMain();\n    };\n\n    function renderPanel(panelType: PanelType) {\n      return (\n        <Fragment>\n          <ScrollList>\n            {renderColYear(panelType)}\n            {renderColMonth(panelType)}\n          </ScrollList>\n        </Fragment>\n      );\n    }\n    return () => {\n      const { locale, noBackBtn, density, presetPosition, renderQuickControls, renderDateInput, type } = props;\n      const prefix = `${prefixCls}-yearmonth-header`;\n      const bodyCls = `${prefixCls}-yearmonth-body`;\n\n      // i18n\n      const selectDateText = locale.selectDate;\n      const iconSize = density === 'compact' ? 'default' : 'large';\n      const buttonSize = density === 'compact' ? 'small' : 'default';\n      const panelTypeLeft = strings.PANEL_TYPE_LEFT;\n      const panelTypeRight = strings.PANEL_TYPE_RIGHT;\n\n      let content = null;\n      if (type === 'month') {\n        content = renderPanel(panelTypeLeft);\n      } else {\n        content = (\n          <div class={bodyCls}>\n            {renderPanel(panelTypeLeft)}\n            {renderPanel(panelTypeRight)}\n          </div>\n        );\n      }\n\n      return (\n        <Fragment>\n          {noBackBtn ? null : (\n            <div class={prefix}>\n              <IconButton\n                noHorizontalPadding={false}\n                icon={<IconChevronLeft aria-hidden size={iconSize} />}\n                size={buttonSize}\n                onClick={backToMain}\n              >\n                <span>{selectDateText}</span>\n              </IconButton>\n            </div>\n          )}\n          {presetPosition ? (\n            <div style={{ display: 'flex' }}>\n              {/* todo: monthRange does not support presetPosition temporarily */}\n              {presetPosition === 'left' && type !== 'monthRange' && renderQuickControls}\n              <div>\n                {renderDateInput}\n                {content}\n              </div>\n              {/* todo: monthRange does not support presetPosition temporarily */}\n              {presetPosition === 'right' && type !== 'monthRange' && renderQuickControls}\n            </div>\n          ) : (\n            <>\n              {renderDateInput}\n              {content}\n            </>\n          )}\n        </Fragment>\n      );\n    };\n  },\n});\n\nexport default yearAndMonth;\n"],"names":["prefixCls","BASE_CLASS_PREFIX","propTypes","currentYear","type","PropTypes","object","required","currentMonth","onSelect","func","locale","localeCode","string","monthCycled","bool","yearCycled","noBackBtn","disabledDate","density","presetPosition","renderQuickControls","node","renderDateInput","yearAndMonthOpts","any","startYear","number","endYear","onBackToMain","className","style","defaultProps","stubFalse","noop","vuePropsType","vuePropsMake","yearAndMonth","defineComponent","props","name","setup","expose","useSlots","now","Date","state","reactive","years","getYears","map","year","value","months","Array","fill","v","idx","month","left","getFullYear","right","getMonth","adapter","adapterInject","useBaseComponent","yearRef","ref","monthRef","foundation","YearAndMonthFoundation","setCurrentYear","setCurrentMonth","setCurrentYearAndMonth","notifySelectYear","notifySelectMonth","notifySelectYearAndMonth","notifyBackToMain","getDerivedStateFromProps","willUpdateStates","isEqual","nowYear","nowMonth","watch","val","newState","Object","keys","forEach","key","immediate","renderColYear","panelType","currentDate","setMonth","strings","PANEL_TYPE_LEFT","PANEL_TYPE_RIGHT","needDisabled","list","isAllMonthDisabled","every","set","isRightPanelDisabled","disabled","transform","_createVNode","ScrollItem","_mergeProps","cycled","selectedIndex","findIndex","item","selectYear","mode","selectMonth","reselect","refKeys","refValue","scrollToIndex","renderColMonth","setYear","fullMonths","backToMain","e","stopImmediatePropagation","renderPanel","_Fragment","ScrollList","default","prefix","bodyCls","selectDateText","selectDate","iconSize","buttonSize","panelTypeLeft","panelTypeRight","content","IconButton","IconChevronLeft","display"],"mappings":"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"}