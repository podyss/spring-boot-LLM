import { PropType } from 'vue';
import type { DatePickerFoundationProps, DatePickerFoundationState, DayStatusType, PresetType, RangeType, Type } from '@douyinfe/semi-foundation/lib/es/datePicker/foundation';
import { PopoverProps } from '../popover/index';
import '@douyinfe/semi-foundation/lib/es/datePicker/datePicker.css';
import { Locale } from '../locale/interface';
import type { TimePickerProps } from '../timePicker';
import type { ScrollItemProps } from '../scrollList';
import type { AriaAttributes } from '../AriaAttributes';
import { CombineProps, VueJsxNode } from '../interface';
export interface DatePickerProps extends DatePickerFoundationProps {
    'aria-describedby'?: AriaAttributes['aria-describedby'];
    'aria-errormessage'?: AriaAttributes['aria-errormessage'];
    'aria-invalid'?: AriaAttributes['aria-invalid'];
    'aria-labelledby'?: AriaAttributes['aria-labelledby'];
    'aria-required'?: AriaAttributes['aria-required'];
    clearIcon?: VueJsxNode;
    timePickerOpts?: TimePickerProps;
    bottomSlot?: VueJsxNode | (() => VueJsxNode);
    insetLabel?: VueJsxNode;
    insetLabelId?: string;
    prefix?: VueJsxNode;
    topSlot?: VueJsxNode | (() => VueJsxNode);
    rightSlot?: VueJsxNode | (() => VueJsxNode);
    leftSlot?: VueJsxNode | (() => VueJsxNode);
    renderDate?: (dayNumber?: number, fullDate?: string) => VueJsxNode;
    renderFullDate?: (dayNumber?: number, fullDate?: string, dayStatus?: DayStatusType) => VueJsxNode;
    triggerRender?: (props: DatePickerProps) => VueJsxNode;
    /**
     * There are multiple input boxes when selecting a range, and the input boxes will be out of focus multiple times.
     *
     * Use `onOpenChange` or `onClickOutSide` instead
     */
    onBlur?: any;
    onClear?: any;
    /**
     * There are multiple input boxes when selecting a range, and the input boxes will be focused multiple times.
     *
     * Use `onOpenChange` or `triggerRender` instead
     */
    onFocus?: (e: MouseEvent, rangeType: RangeType) => void;
    onPresetClick?: (item: PresetType, e: MouseEvent) => void;
    onClickOutSide?: (e: MouseEvent) => void;
    locale?: Locale['DatePicker'];
    dateFnsLocale?: Locale['dateFnsLocale'];
    yearAndMonthOpts?: ScrollItemProps<any>;
    dropdownMargin?: PopoverProps['margin'];
    id?: string;
}
export type DatePickerState = DatePickerFoundationState;
export declare const vuePropsTypeDatePickerProps: CombineProps<DatePickerProps>;
declare const DatePicker: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    timePickerOpts: PropType<TimePickerProps> | {
        type: PropType<TimePickerProps>;
        default?: any;
        required?: false;
    };
    bottomSlot: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    topSlot: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    rightSlot: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    leftSlot: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    renderDate: PropType<(dayNumber?: number, fullDate?: string) => VueJsxNode> | {
        type: PropType<(dayNumber?: number, fullDate?: string) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderFullDate: PropType<(dayNumber?: number, fullDate?: string, dayStatus?: DayStatusType) => VueJsxNode> | {
        type: PropType<(dayNumber?: number, fullDate?: string, dayStatus?: DayStatusType) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    triggerRender: PropType<(props: DatePickerProps) => VueJsxNode> | {
        type: PropType<(props: DatePickerProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onClear: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: MouseEvent, rangeType: RangeType) => void> | {
        type: PropType<(e: MouseEvent, rangeType: RangeType) => void>;
        default?: any;
        required?: false;
    };
    onPresetClick: PropType<(item: PresetType, e: MouseEvent) => void> | {
        type: PropType<(item: PresetType, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onClickOutSide: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    locale: PropType<{
        placeholder: {
            date: string;
            dateTime: string;
            dateRange: [string, string];
            dateTimeRange: [string, string];
            monthRange: [string, string];
        };
        presets: string;
        footer: {
            confirm: string;
            cancel: string;
        };
        selectDate: string;
        selectTime: string;
        year: string;
        month: string;
        day: string;
        monthText: string;
        months: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        fullMonths: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        weeks: {
            Mon: string;
            Tue: string;
            Wed: string;
            Thu: string;
            Fri: string;
            Sat: string;
            Sun: string;
        };
        localeFormatToken: {
            FORMAT_SWITCH_DATE: string;
        };
    }> | {
        type: PropType<{
            placeholder: {
                date: string;
                dateTime: string;
                dateRange: [string, string];
                dateTimeRange: [string, string];
                monthRange: [string, string];
            };
            presets: string;
            footer: {
                confirm: string;
                cancel: string;
            };
            selectDate: string;
            selectTime: string;
            year: string;
            month: string;
            day: string;
            monthText: string;
            months: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            fullMonths: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            weeks: {
                Mon: string;
                Tue: string;
                Wed: string;
                Thu: string;
                Fri: string;
                Sat: string;
                Sun: string;
            };
            localeFormatToken: {
                FORMAT_SWITCH_DATE: string;
            };
        }>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: PropType<globalThis.Locale> | {
        type: PropType<globalThis.Locale>;
        default?: any;
        required?: false;
    };
    yearAndMonthOpts: PropType<ScrollItemProps<any>> | {
        type: PropType<ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    dropdownMargin: PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoSwitchDate: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultPickerValue: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    density: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DensityType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DensityType>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledDate: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledDateType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledDateType>;
        default?: any;
        required?: false;
    };
    disabledTime: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledTimeType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledTimeType>;
        default?: any;
        required?: false;
    };
    dropdownClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    dropdownStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    endDateOffset: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    inputReadOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    multiple: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    needConfirm: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    open: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    position: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    presets: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetsType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetsType>;
        default?: any;
        required?: false;
    };
    presetPosition: PropType<"bottom" | "left" | "right" | "top"> | {
        type: PropType<"bottom" | "left" | "right" | "top">;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    spacing: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    startDateOffset: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<string | boolean> | {
        type: PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    timeZone: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<"default" | "error" | "warning" | "success"> | {
        type: PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    weekStartsOn: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    syncSwitchMonth: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledTimePicker: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    localeCode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    insetInput: PropType<boolean | import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputProps> | {
        type: PropType<boolean | import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputProps>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onCancel: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnCancelType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnCancelType>;
        default?: any;
        required?: false;
    };
    onChange: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnChangeType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnChangeType>;
        default?: any;
        required?: false;
    };
    onOpenChange: PropType<(status: boolean) => void> | {
        type: PropType<(status: boolean) => void>;
        default?: any;
        required?: false;
    };
    onPanelChange: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnPanelChangeType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnPanelChangeType>;
        default?: any;
        required?: false;
    };
    onConfirm: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnConfirmType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnConfirmType>;
        default?: any;
        required?: false;
    };
    startYear: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    endYear: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    timePickerOpts: PropType<TimePickerProps> | {
        type: PropType<TimePickerProps>;
        default?: any;
        required?: false;
    };
    bottomSlot: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    topSlot: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    rightSlot: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    leftSlot: PropType<VueJsxNode | (() => VueJsxNode)> | {
        type: PropType<VueJsxNode | (() => VueJsxNode)>;
        default?: any;
        required?: false;
    };
    renderDate: PropType<(dayNumber?: number, fullDate?: string) => VueJsxNode> | {
        type: PropType<(dayNumber?: number, fullDate?: string) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderFullDate: PropType<(dayNumber?: number, fullDate?: string, dayStatus?: DayStatusType) => VueJsxNode> | {
        type: PropType<(dayNumber?: number, fullDate?: string, dayStatus?: DayStatusType) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    triggerRender: PropType<(props: DatePickerProps) => VueJsxNode> | {
        type: PropType<(props: DatePickerProps) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onClear: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: MouseEvent, rangeType: RangeType) => void> | {
        type: PropType<(e: MouseEvent, rangeType: RangeType) => void>;
        default?: any;
        required?: false;
    };
    onPresetClick: PropType<(item: PresetType, e: MouseEvent) => void> | {
        type: PropType<(item: PresetType, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onClickOutSide: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    locale: PropType<{
        placeholder: {
            date: string;
            dateTime: string;
            dateRange: [string, string];
            dateTimeRange: [string, string];
            monthRange: [string, string];
        };
        presets: string;
        footer: {
            confirm: string;
            cancel: string;
        };
        selectDate: string;
        selectTime: string;
        year: string;
        month: string;
        day: string;
        monthText: string;
        months: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        fullMonths: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        weeks: {
            Mon: string;
            Tue: string;
            Wed: string;
            Thu: string;
            Fri: string;
            Sat: string;
            Sun: string;
        };
        localeFormatToken: {
            FORMAT_SWITCH_DATE: string;
        };
    }> | {
        type: PropType<{
            placeholder: {
                date: string;
                dateTime: string;
                dateRange: [string, string];
                dateTimeRange: [string, string];
                monthRange: [string, string];
            };
            presets: string;
            footer: {
                confirm: string;
                cancel: string;
            };
            selectDate: string;
            selectTime: string;
            year: string;
            month: string;
            day: string;
            monthText: string;
            months: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            fullMonths: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            weeks: {
                Mon: string;
                Tue: string;
                Wed: string;
                Thu: string;
                Fri: string;
                Sat: string;
                Sun: string;
            };
            localeFormatToken: {
                FORMAT_SWITCH_DATE: string;
            };
        }>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: PropType<globalThis.Locale> | {
        type: PropType<globalThis.Locale>;
        default?: any;
        required?: false;
    };
    yearAndMonthOpts: PropType<ScrollItemProps<any>> | {
        type: PropType<ScrollItemProps<any>>;
        default?: any;
        required?: false;
    };
    dropdownMargin: PropType<number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    }> | {
        type: PropType<number | {
            marginLeft: number;
            marginTop: number;
            marginRight: number;
            marginBottom: number;
        }>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    autoAdjustOverflow: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoSwitchDate: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    defaultOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultPickerValue: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    density: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DensityType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DensityType>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledDate: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledDateType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledDateType>;
        default?: any;
        required?: false;
    };
    disabledTime: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledTimeType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DisabledTimeType>;
        default?: any;
        required?: false;
    };
    dropdownClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    dropdownStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    endDateOffset: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    inputReadOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    multiple: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    needConfirm: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChangeWithDateFirst: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    open: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    position: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    presets: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetsType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").PresetsType>;
        default?: any;
        required?: false;
    };
    presetPosition: PropType<"bottom" | "left" | "right" | "top"> | {
        type: PropType<"bottom" | "left" | "right" | "top">;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    spacing: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    startDateOffset: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").DateOffsetType>;
        default?: any;
        required?: false;
    };
    stopPropagation: PropType<string | boolean> | {
        type: PropType<string | boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    timeZone: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<"default" | "error" | "warning" | "success"> | {
        type: PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    value: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").ValueType>;
        default?: any;
        required?: false;
    };
    weekStartsOn: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    syncSwitchMonth: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hideDisabledOptions: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledTimePicker: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    localeCode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    insetInput: PropType<boolean | import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputProps> | {
        type: PropType<boolean | import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputProps>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onCancel: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnCancelType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnCancelType>;
        default?: any;
        required?: false;
    };
    onChange: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnChangeType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnChangeType>;
        default?: any;
        required?: false;
    };
    onOpenChange: PropType<(status: boolean) => void> | {
        type: PropType<(status: boolean) => void>;
        default?: any;
        required?: false;
    };
    onPanelChange: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnPanelChangeType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnPanelChangeType>;
        default?: any;
        required?: false;
    };
    onConfirm: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnConfirmType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/foundation").OnConfirmType>;
        default?: any;
        required?: false;
    };
    startYear: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    endYear: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default DatePicker;
