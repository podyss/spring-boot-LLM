{"version":3,"file":"navigation.js","sources":["../../src/components/datePicker/navigation.tsx"],"sourcesContent":["import { defineComponent, ref, h, Fragment, VNode, CSSProperties, ComponentObjectPropsOptions, PropType } from 'vue';\n\nimport * as PropTypes from '../PropTypes';\nimport { noop } from 'lodash';\n\nimport IconButton from '../iconButton';\nimport Button from '../button';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/datePicker/constants';\nimport {\n  IconChevronLeft,\n  IconChevronRight,\n  IconDoubleChevronLeft,\n  IconDoubleChevronRight,\n} from '@kousum/semi-icons-vue';\nimport { PanelType } from '@douyinfe/semi-foundation/datePicker/monthsGridFoundation';\nimport { CombineProps } from '../interface';\n\nconst prefixCls = cssClasses.NAVIGATION;\n\ninterface NavigationProps {\n  forwardRef?: any;\n  monthText?: string;\n  density?: string;\n  onMonthClick?: (e: MouseEvent) => void;\n  onNextMonth?: () => void;\n  onPrevMonth?: () => void;\n  onNextYear?: () => void;\n  onPrevYear?: () => void;\n  navPrev?: VNode;\n  navNext?: VNode;\n  // Whether to switch synchronously for two panels\n  shouldBimonthSwitch?: boolean;\n  // Panel type, divided into left panel and right panel\n  panelType?: PanelType;\n}\n\nexport const vuePropsType: CombineProps<NavigationProps> = {\n  monthText: { type: PropTypes.string, default: '' },\n  density: PropTypes.string,\n  onMonthClick: {\n    type: PropTypes.func as PropType<NavigationProps['onMonthClick']>,\n    default: noop,\n  },\n  onNextMonth: {\n    type: PropTypes.func as PropType<NavigationProps['onNextMonth']>,\n    default: noop,\n  },\n  onPrevMonth: {\n    type: PropTypes.func as PropType<NavigationProps['onPrevMonth']>,\n    default: noop,\n  },\n  onNextYear: {\n    type: PropTypes.func as PropType<NavigationProps['onNextYear']>,\n    default: noop,\n  },\n  onPrevYear: {\n    type: PropTypes.func as PropType<NavigationProps['onPrevYear']>,\n    default: noop,\n  },\n  navPrev: PropTypes.node as PropType<NavigationProps['navPrev']>,\n  navNext: PropTypes.node as PropType<NavigationProps['navNext']>,\n  // Whether to switch synchronously for two panels\n  shouldBimonthSwitch: PropTypes.bool,\n  // Panel type, divided into left panel and right panel\n  panelType: PropTypes.string as PropType<NavigationProps['panelType']>,\n  forwardRef: [PropTypes.object, PropTypes.func]\n};\nconst navigation = defineComponent({\n  props: { ...vuePropsType },\n  name: 'DatePickerNavigation',\n  setup(props, { slots }) {\n    const navRef = ref();\n\n    return () => {\n      const {\n        forwardRef,\n        monthText,\n        onMonthClick,\n        onNextMonth,\n        onPrevMonth,\n        onPrevYear,\n        onNextYear,\n        density,\n        shouldBimonthSwitch,\n        panelType,\n      } = props;\n\n      const btnTheme = 'borderless';\n      const iconBtnSize = density === 'compact' ? 'default' : 'large';\n      const btnNoHorizontalPadding = true;\n      const buttonSize = density === 'compact' ? 'small' : 'default';\n      const isLeftPanel = panelType === strings.PANEL_TYPE_LEFT;\n      const isRightPanel = panelType === strings.PANEL_TYPE_RIGHT;\n\n      // syncSwitchMonth and the current panel is the left\n      const hiddenLeftPanelRightButtons = shouldBimonthSwitch && isLeftPanel;\n      // syncSwitchMonth and the current panel is the right\n      const hiddenRightPanelLeftButtons = shouldBimonthSwitch && isRightPanel;\n      // `visibility: hidden` will keep the icon in position\n      const leftButtonStyle: CSSProperties = {};\n      const rightButtonStyle: CSSProperties = {};\n      if (hiddenRightPanelLeftButtons) {\n        leftButtonStyle.visibility = 'hidden';\n      }\n      if (hiddenLeftPanelRightButtons) {\n        rightButtonStyle.visibility = 'hidden';\n      }\n\n      const ref = forwardRef || navRef;\n      return (\n        <div class={prefixCls} ref={ref}>\n          <IconButton\n            key=\"double-chevron-left\"\n            aria-label=\"Previous year\"\n            icon={<IconDoubleChevronLeft aria-hidden size={iconBtnSize} />}\n            size={buttonSize}\n            theme={btnTheme}\n            noHorizontalPadding={btnNoHorizontalPadding}\n            onClick={onPrevYear}\n            style={leftButtonStyle}\n          />\n          <IconButton\n            key=\"chevron-left\"\n            aria-label=\"Previous month\"\n            icon={<IconChevronLeft aria-hidden size={iconBtnSize} />}\n            size={buttonSize}\n            onClick={onPrevMonth}\n            theme={btnTheme}\n            noHorizontalPadding={btnNoHorizontalPadding}\n            style={leftButtonStyle}\n          />\n          <div class={`${prefixCls}-month`}>\n            <Button onClick={onMonthClick} theme={btnTheme} size={buttonSize}>\n              <span>{monthText}</span>\n            </Button>\n          </div>\n          <IconButton\n            key=\"chevron-right\"\n            aria-label=\"Next month\"\n            icon={<IconChevronRight aria-hidden size={iconBtnSize} />}\n            size={buttonSize}\n            onClick={onNextMonth}\n            theme={btnTheme}\n            noHorizontalPadding={btnNoHorizontalPadding}\n            style={rightButtonStyle}\n          />\n          <IconButton\n            key=\"double-chevron-right\"\n            aria-label=\"Next year\"\n            icon={<IconDoubleChevronRight aria-hidden size={iconBtnSize} />}\n            size={buttonSize}\n            theme={btnTheme}\n            noHorizontalPadding={btnNoHorizontalPadding}\n            onClick={onNextYear}\n            style={rightButtonStyle}\n          />\n        </div>\n      );\n    };\n  },\n});\n\nexport default navigation;\n"],"names":["prefixCls","cssClasses","NAVIGATION","vuePropsType","monthText","type","PropTypes","string","default","density","onMonthClick","func","noop","onNextMonth","onPrevMonth","onNextYear","onPrevYear","navPrev","node","navNext","shouldBimonthSwitch","bool","panelType","forwardRef","object","navigation","defineComponent","props","name","setup","slots","navRef","ref","btnTheme","iconBtnSize","btnNoHorizontalPadding","buttonSize","isLeftPanel","strings","PANEL_TYPE_LEFT","isRightPanel","PANEL_TYPE_RIGHT","hiddenLeftPanelRightButtons","hiddenRightPanelLeftButtons","leftButtonStyle","rightButtonStyle","visibility","_createVNode","IconButton","IconDoubleChevronLeft","IconChevronLeft","Button","IconChevronRight","IconDoubleChevronRight"],"mappings":"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"}