import { CSSProperties, VNode, Ref, PropType } from 'vue';
import { DateInputFoundationProps, InsetInputChangeProps, InsetInputProps, RangeType } from '@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation';
import type { RangeType as RangeType2 } from '@douyinfe/semi-foundation/lib/es/datePicker/foundation';
import { ValueType } from '@douyinfe/semi-foundation/lib/es/datePicker/foundation';
import { BaseProps } from '../_base/baseComponent';
import { InputProps } from '../input/index';
import { CombineProps, RemoveIndexSignature } from '../interface';
export interface DateInputProps extends RemoveIndexSignature<DateInputFoundationProps>, BaseProps {
    insetLabel?: VNode;
    prefix?: VNode;
    onClick?: (e: MouseEvent) => void;
    onChange?: (value: string, e: MouseEvent) => void;
    onEnterPress?: (e: KeyboardEvent) => void;
    onBlur?: (e: MouseEvent) => void;
    onFocus?: (e: MouseEvent, rangeType?: RangeType) => void;
    onClear?: (e: MouseEvent) => void;
    onInsetInputChange?: (options: InsetInputChangeProps) => void;
    value?: Date[];
    inputRef?: Ref;
    rangeInputStartRef?: Ref;
    rangeInputEndRef?: Ref;
    showClearIgnoreDisabled?: boolean;
    dateFnsLocale?: any;
    placeholder?: any;
    rangeInputFocus?: RangeType2;
    clearIcon?: any;
    inputValue?: string;
    block?: boolean;
    insetLabelId?: string;
    multiple?: boolean;
    size?: InputProps['size'];
    autofocus?: boolean;
    onRangeBlur?: (value: any, e: any) => void;
    onRangeClear?: (e: MouseEvent) => void;
    text?: string;
    handleInsetDateFocus?: (e: FocusEvent, rangeType: 'rangeStart' | 'rangeEnd') => void;
    handleInsetTimeFocus?: (e: FocusEvent) => void;
    suffix?: VNode;
    inputCls?: string;
}
export declare const vuePropsType: CombineProps<DateInputProps>;
declare const dateInput: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    insetLabel: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    prefix: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string, e: MouseEvent) => void> | {
        type: PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: MouseEvent, rangeType?: RangeType) => void> | {
        type: PropType<(e: MouseEvent, rangeType?: RangeType) => void>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInsetInputChange: PropType<(options: InsetInputChangeProps) => void> | {
        type: PropType<(options: InsetInputChangeProps) => void>;
        default?: any;
        required?: false;
    };
    value: PropType<Date[]> | {
        type: PropType<Date[]>;
        default?: any;
        required?: false;
    };
    inputRef: PropType<Ref<any, any>> | {
        type: PropType<Ref<any, any>>;
        default?: any;
        required?: false;
    };
    rangeInputStartRef: PropType<Ref<any, any>> | {
        type: PropType<Ref<any, any>>;
        default?: any;
        required?: false;
    };
    rangeInputEndRef: PropType<Ref<any, any>> | {
        type: PropType<Ref<any, any>>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    rangeInputFocus: PropType<RangeType2> | {
        type: PropType<RangeType2>;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    inputValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    block: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    multiple: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<import("../input/index").InputSize> | {
        type: PropType<import("../input/index").InputSize>;
        default?: any;
        required?: false;
    };
    autofocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onRangeBlur: PropType<(value: any, e: any) => void> | {
        type: PropType<(value: any, e: any) => void>;
        default?: any;
        required?: false;
    };
    onRangeClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    text: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    handleInsetDateFocus: PropType<(e: FocusEvent, rangeType: "rangeStart" | "rangeEnd") => void> | {
        type: PropType<(e: FocusEvent, rangeType: "rangeStart" | "rangeEnd") => void>;
        default?: any;
        required?: false;
    };
    handleInsetTimeFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    suffix: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    inputCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").Type> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").Type>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    inputStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    inputReadOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<"default" | "error" | "warning" | "success"> | {
        type: PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    panelType: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").PanelType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").PanelType>;
        default?: any;
        required?: false;
    };
    insetInput: PropType<boolean | InsetInputProps> | {
        type: PropType<boolean | InsetInputProps>;
        default?: any;
        required?: false;
    };
    insetInputValue: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputValue> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputValue>;
        default?: any;
        required?: false;
    };
    density: PropType<"default" | "compact"> | {
        type: PropType<"default" | "compact">;
        default?: any;
        required?: false;
    };
    defaultPickerValue: PropType<ValueType> | {
        type: PropType<ValueType>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onRangeInputClear: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onRangeEndTabPress: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    insetLabel: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    prefix: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string, e: MouseEvent) => void> | {
        type: PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: MouseEvent, rangeType?: RangeType) => void> | {
        type: PropType<(e: MouseEvent, rangeType?: RangeType) => void>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInsetInputChange: PropType<(options: InsetInputChangeProps) => void> | {
        type: PropType<(options: InsetInputChangeProps) => void>;
        default?: any;
        required?: false;
    };
    value: PropType<Date[]> | {
        type: PropType<Date[]>;
        default?: any;
        required?: false;
    };
    inputRef: PropType<Ref<any, any>> | {
        type: PropType<Ref<any, any>>;
        default?: any;
        required?: false;
    };
    rangeInputStartRef: PropType<Ref<any, any>> | {
        type: PropType<Ref<any, any>>;
        default?: any;
        required?: false;
    };
    rangeInputEndRef: PropType<Ref<any, any>> | {
        type: PropType<Ref<any, any>>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    dateFnsLocale: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    rangeInputFocus: PropType<RangeType2> | {
        type: PropType<RangeType2>;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    inputValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    block: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    multiple: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<import("../input/index").InputSize> | {
        type: PropType<import("../input/index").InputSize>;
        default?: any;
        required?: false;
    };
    autofocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onRangeBlur: PropType<(value: any, e: any) => void> | {
        type: PropType<(value: any, e: any) => void>;
        default?: any;
        required?: false;
    };
    onRangeClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    text: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    handleInsetDateFocus: PropType<(e: FocusEvent, rangeType: "rangeStart" | "rangeEnd") => void> | {
        type: PropType<(e: FocusEvent, rangeType: "rangeStart" | "rangeEnd") => void>;
        default?: any;
        required?: false;
    };
    handleInsetTimeFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    suffix: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    inputCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").Type> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").Type>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    format: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    inputStyle: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    inputReadOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<"default" | "error" | "warning" | "success"> | {
        type: PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rangeSeparator: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    panelType: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").PanelType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").PanelType>;
        default?: any;
        required?: false;
    };
    insetInput: PropType<boolean | InsetInputProps> | {
        type: PropType<boolean | InsetInputProps>;
        default?: any;
        required?: false;
    };
    insetInputValue: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputValue> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation").InsetInputValue>;
        default?: any;
        required?: false;
    };
    density: PropType<"default" | "compact"> | {
        type: PropType<"default" | "compact">;
        default?: any;
        required?: false;
    };
    defaultPickerValue: PropType<ValueType> | {
        type: PropType<ValueType>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onRangeInputClear: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    onRangeEndTabPress: PropType<(e: any) => void> | {
        type: PropType<(e: any) => void>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default dateInput;
