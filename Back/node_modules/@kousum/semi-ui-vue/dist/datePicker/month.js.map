{"version":3,"file":"month.js","sources":["../../src/components/datePicker/month.tsx"],"sourcesContent":["import {\n  defineComponent,\n  ref,\n  h,\n  Fragment,\n  reactive,\n  onMounted,\n  nextTick,\n  onUnmounted,\n  watch,\n  Ref,\n  PropType,\n} from 'vue';\n\nimport classNames from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport MonthFoundation, {\n  MonthAdapter,\n  MonthDayInfo,\n  MonthFoundationProps,\n  MonthFoundationState,\n} from '@douyinfe/semi-foundation/datePicker/monthFoundation';\nimport { cssClasses, numbers } from '@douyinfe/semi-foundation/datePicker/constants';\nimport { BaseProps, useBaseComponent } from '../_base/baseComponent';\nimport { isBefore, isAfter, isBetween, isSameDay } from '@douyinfe/semi-foundation/datePicker/_utils/index';\nimport { noop, stubFalse, isFunction } from 'lodash';\nimport { parseISO } from 'date-fns';\nimport { Locale } from '../locale/interface';\nimport { vuePropsMake } from '../PropTypes';\nimport { ComponentObjectPropsOptions } from 'vue';\nimport { CombineProps } from '../interface';\n\nconst prefixCls = cssClasses.PREFIX;\n\nexport interface MonthProps extends MonthFoundationProps, BaseProps {\n  forwardRef: any;\n  locale: Locale['DatePicker'];\n  focusRecordsRef: Ref<{ rangeStart: boolean; rangeEnd: boolean }>;\n}\n\nexport type MonthState = MonthFoundationState;\nconst propTypes: CombineProps<MonthProps> = {\n  forwardRef: undefined,\n  localeCode: undefined,\n  month: { type: PropTypes.object, default: new Date(), required: true },\n  selected: { type: PropTypes.object, default: new Set(), required: true },\n  rangeStart: { type: PropTypes.string, default: '', required: true },\n  rangeEnd: { type: PropTypes.string, default: '', required: true },\n  offsetRangeStart: {\n    type: PropTypes.string,\n    required: true,\n  },\n  offsetRangeEnd: {\n    type: PropTypes.string,\n    required: true,\n  },\n  onDayClick: { type: PropTypes.func as PropType<MonthProps['onDayClick']>, default: noop, required: true },\n  onDayHover: { type: PropTypes.func as PropType<MonthProps['onDayHover']>, default: noop, required: true },\n  weekStartsOn: {\n    type: PropTypes.number as PropType<MonthProps['weekStartsOn']>,\n    default: numbers.WEEK_START_ON,\n    required: true,\n  },\n  disabledDate: { type: PropTypes.func as PropType<MonthProps['disabledDate']>, default: stubFalse, required: true },\n  weeksRowNum: { type: PropTypes.number, default: 0, required: true },\n  onWeeksRowNumChange: {\n    type: PropTypes.func as PropType<MonthProps['onWeeksRowNumChange']>,\n    default: noop,\n    required: true,\n  },\n  renderDate: {\n    type: PropTypes.func as PropType<MonthProps['renderDate']>,\n    required: true,\n  },\n  renderFullDate: {\n    type: PropTypes.func as PropType<MonthProps['renderFullDate']>,\n    required: true,\n  },\n  // Real-time hover date\n  hoverDay: {\n    type: PropTypes.string,\n    required: true,\n  },\n  startDateOffset: {\n    type: PropTypes.func as PropType<MonthProps['startDateOffset']>,\n    required: true,\n  },\n  endDateOffset: {\n    type: PropTypes.func as PropType<MonthProps['endDateOffset']>,\n    required: true,\n  },\n  rangeInputFocus: {\n    type: [PropTypes.string, PropTypes.bool],\n    required: true,\n  },\n  focusRecordsRef: {\n    type: PropTypes.object,\n    required: true,\n  },\n  multiple: {\n    type: PropTypes.bool,\n    required: true,\n  },\n  locale: {\n    type: Object,\n    required: true,\n  },\n  style: PropTypes.object,\n  className: PropTypes.string,\n};\n\nconst defaultProps = {\n  month: new Date(),\n  selected: new Set(),\n  rangeStart: '',\n  rangeEnd: '',\n  onDayClick: noop,\n  onDayHover: noop,\n  onWeeksRowNumChange: noop,\n  weekStartsOn: numbers.WEEK_START_ON,\n  disabledDate: stubFalse,\n  weeksRowNum: 0,\n};\nexport const vuePropsType = vuePropsMake<MonthProps>(propTypes, defaultProps);\nconst month = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Month',\n  setup(props, { slots }) {\n    const monthRef = ref();\n    const state = reactive<MonthState>({\n      weekdays: [],\n      month: { weeks: [], monthText: '' },\n      todayText: '',\n      weeksRowNum: props.weeksRowNum,\n    });\n\n    const { adapter: adapterInject } = useBaseComponent<MonthProps>(props, state);\n    let foundation: MonthFoundation;\n    function adapter(): MonthAdapter {\n      return {\n        ...adapterInject<MonthProps, MonthState>(),\n        updateToday: (todayText) => (state.todayText = todayText),\n        setWeekDays: (weekdays) => (state.weekdays = weekdays),\n        setWeeksRowNum: (weeksRowNum, callback) => {\n          state.weeksRowNum = weeksRowNum;\n          nextTick(() => {\n            callback();\n          });\n        },\n        updateMonthTable: (month) => (state.month = month),\n        notifyDayClick: (day) => props.onDayClick(day),\n        notifyDayHover: (day) => props.onDayHover(day),\n        notifyWeeksRowNumChange: (weeksRowNum) => props.onWeeksRowNumChange(weeksRowNum),\n      };\n    }\n    foundation = new MonthFoundation(adapter());\n    onMounted(() => {\n      foundation.init();\n    });\n\n    onUnmounted(() => {\n      foundation.destroy();\n    });\n\n    watch(\n      () => props.month,\n      () => {\n        foundation.getMonthTable();\n      },\n      { immediate: true }\n    );\n\n    function getSingleDayStatus(options: Partial<MonthProps> & { fullDate: string; todayText: string }) {\n      const { rangeInputFocus } = props;\n      const { fullDate, todayText, selected, disabledDate, rangeStart, rangeEnd } = options;\n      const disabledOptions = { rangeStart, rangeEnd, rangeInputFocus };\n      const isToday = fullDate === todayText;\n      const isSelected = selected.has(fullDate);\n\n      let isDisabled = disabledDate && disabledDate(parseISO(fullDate), disabledOptions);\n      if (\n        !isDisabled &&\n        props.rangeInputFocus === 'rangeStart' &&\n        rangeEnd &&\n        props.focusRecordsRef &&\n        props.focusRecordsRef.value.rangeEnd\n      ) {\n        // The reason for splitting is that the dateRangeTime format: 'yyyy-MM-dd HH:MM:SS'\n        isDisabled = isAfter(fullDate, rangeEnd.trim().split(/\\s+/)[0]);\n      }\n      if (\n        !isDisabled &&\n        props.rangeInputFocus === 'rangeEnd' &&\n        rangeStart &&\n        props.focusRecordsRef &&\n        props.focusRecordsRef.value.rangeStart\n      ) {\n        // The reason for splitting is that the dateRangeTime format: 'yyyy-MM-dd HH:MM:SS'\n        isDisabled = isBefore(fullDate, rangeStart.trim().split(/\\s+/)[0]);\n      }\n\n      return {\n        isToday, // Today\n        isSelected, // Selected\n        isDisabled, // Disabled\n      };\n    }\n\n    function getDateRangeStatus(options: Partial<MonthProps> & { fullDate: string }) {\n      const { rangeStart, rangeEnd, fullDate, hoverDay, offsetRangeStart, offsetRangeEnd, rangeInputFocus } = options;\n\n      // If no item is selected, return the empty object directly\n      const _isDateRangeAnySelected = Boolean(rangeStart || rangeEnd);\n      const _isDateRangeSelected = Boolean(rangeStart && rangeEnd);\n      const _isOffsetDateRangeAnyExist = offsetRangeStart || offsetRangeEnd;\n      if (!_isDateRangeAnySelected) {\n        return {};\n      }\n\n      // The range selects the hover date, and the normal hover is .semi-datepicker-main: hover\n      const _isHoverDay = isSameDay(hoverDay, fullDate);\n\n      // When one is selected\n      // eslint-disable-next-line one-var\n      let _isHoverAfterStart, _isHoverBeforeEnd, isSelectedStart, isSelectedEnd, isHoverDayAroundOneSelected;\n      if (rangeStart) {\n        isSelectedStart = isSameDay(fullDate, rangeStart);\n        if (rangeInputFocus === 'rangeEnd') {\n          _isHoverAfterStart = isBetween(fullDate, { start: rangeStart, end: hoverDay });\n        }\n      }\n      if (rangeEnd) {\n        isSelectedEnd = isSameDay(fullDate, rangeEnd);\n        if (rangeInputFocus === 'rangeStart') {\n          _isHoverBeforeEnd = isBetween(fullDate, { start: hoverDay, end: rangeEnd });\n        }\n      }\n\n      if (!_isDateRangeSelected && _isDateRangeAnySelected) {\n        isHoverDayAroundOneSelected = _isHoverDay;\n      }\n\n      // eslint-disable-next-line one-var\n      let isHover;\n      if (!_isOffsetDateRangeAnyExist) {\n        isHover = _isHoverAfterStart || _isHoverBeforeEnd || _isHoverDay;\n      }\n\n      // Select all\n      // eslint-disable-next-line one-var\n      let isInRange,\n        isSelectedStartAfterHover,\n        isSelectedEndBeforeHover,\n        isHoverDayInStartSelection,\n        isHoverDayInEndSelection,\n        isHoverDayInRange;\n      if (_isDateRangeSelected) {\n        isInRange = isBetween(fullDate, { start: rangeStart, end: rangeEnd });\n        if (!_isOffsetDateRangeAnyExist) {\n          isSelectedStartAfterHover = isSelectedStart && isAfter(rangeStart, hoverDay);\n          isSelectedEndBeforeHover = isSelectedEnd && isBefore(rangeEnd, hoverDay);\n          isHoverDayInStartSelection = _isHoverDay && rangeInputFocus === 'rangeStart';\n          isHoverDayInEndSelection = _isHoverDay && rangeInputFocus === 'rangeEnd';\n          isHoverDayInRange = _isHoverDay && isBetween(hoverDay, { start: rangeStart, end: rangeEnd });\n        }\n      }\n\n      return {\n        isHoverDay: _isHoverDay, // Is the current hover date\n        isSelectedStart, // Select Start\n        isSelectedEnd, // End of selection\n        isInRange, // Range within the selected date\n        isHover, // Date between selection and hover date\n        isSelectedStartAfterHover, // Choose to start behind the hover\n        isSelectedEndBeforeHover, // Choose to end in front of the hover\n        isHoverDayInRange, // Hover date within range\n        isHoverDayInStartSelection, // Hover date when starting Date is selected\n        isHoverDayInEndSelection, // Hover date when endDate is selected\n        isHoverDayAroundOneSelected, // Hover date and select a date\n      };\n    }\n\n    function getOffsetDateStatus(options: Partial<MonthProps> & { fullDate: string }) {\n      const { offsetRangeStart, offsetRangeEnd, rangeStart, rangeEnd, fullDate, hoverDay } = options;\n\n      // When there is no offset, return the empty object directly\n      const _isOffsetDateRangeNull = !(offsetRangeStart || offsetRangeEnd);\n      if (_isOffsetDateRangeNull) {\n        return {};\n      }\n\n      // Range Select base date\n      const _isInRange = isBetween(fullDate, { start: rangeStart, end: rangeEnd });\n      const _isHoverDay = isSameDay(hoverDay, fullDate);\n      const _isSelectedStart = rangeStart && isSameDay(fullDate, rangeStart);\n      const _isSelectedEnd = rangeEnd && isSameDay(fullDate, rangeEnd);\n      const _isDateRangeSelected = Boolean(rangeStart && rangeEnd);\n\n      // Determine whether it is offsetStart or offsetRangeEnd\n      const isOffsetRangeStart = isSameDay(fullDate, offsetRangeStart);\n      const isOffsetRangeEnd = isSameDay(fullDate, offsetRangeEnd);\n      const isHoverDayOffset = _isHoverDay;\n\n      // When selected\n      let isHoverInOffsetRange, isInOffsetRange;\n      if (_isDateRangeSelected) {\n        isHoverInOffsetRange = _isInRange && _isHoverDay;\n      }\n\n      // When there is an offset area\n      const _isOffsetDateRangeSelected = Boolean(offsetRangeStart && offsetRangeEnd);\n      if (_isOffsetDateRangeSelected) {\n        isInOffsetRange =\n          _isSelectedStart || isBetween(fullDate, { start: offsetRangeStart, end: offsetRangeEnd }) || _isSelectedEnd;\n      }\n\n      return {\n        isOffsetRangeStart, // Week selection start\n        isOffsetRangeEnd, // End of week selection\n        isHoverInOffsetRange, // Hover in the week selection\n        isHoverDayOffset, // Week selection hover day\n        isInOffsetRange, // Include start and end within the week selection (start and end styles are the same as other dates, so start and end are included)\n      };\n    }\n\n    /**\n     * get day current status\n     * @param {Object} fullDate\n     * @param {Object} options\n     * @returns {Object}\n     */\n    function getDayStatus(currentDay: MonthDayInfo, options: MonthProps & { todayText: string }) {\n      const { fullDate } = currentDay;\n      const {\n        hoverDay,\n        rangeStart,\n        rangeEnd,\n        todayText,\n        offsetRangeStart,\n        offsetRangeEnd,\n        disabledDate,\n        selected,\n        rangeInputFocus,\n      } = options;\n\n      const singleDayStatus = getSingleDayStatus({\n        fullDate,\n        todayText,\n        hoverDay,\n        selected,\n        disabledDate,\n        rangeStart,\n        rangeEnd,\n      });\n      const dateRangeStatus = getDateRangeStatus({\n        fullDate,\n        rangeStart,\n        rangeEnd,\n        hoverDay,\n        offsetRangeStart,\n        offsetRangeEnd,\n        rangeInputFocus,\n        ...singleDayStatus,\n      });\n      const offsetDataStatus = getOffsetDateStatus({\n        offsetRangeStart,\n        offsetRangeEnd,\n        rangeStart,\n        rangeEnd,\n        fullDate,\n        hoverDay,\n        ...singleDayStatus,\n        ...dateRangeStatus,\n      });\n\n      // this parameter will pass to the user when given renderFullDate function, do not delete or modify its key\n      const dayStatus = {\n        ...singleDayStatus,\n        ...dateRangeStatus,\n        ...offsetDataStatus,\n      };\n\n      return dayStatus;\n    }\n\n    function renderDayOfWeek() {\n      const { locale } = props;\n      const weekdayCls = classNames(cssClasses.WEEKDAY);\n      const weekdayItemCls = classNames(`${prefixCls}-weekday-item`);\n      const { weekdays } = state;\n      // i18n\n      const weekdaysText = weekdays.map((key) => locale.weeks[key]);\n      return (\n        <div role=\"row\" class={weekdayCls}>\n          {weekdaysText.map((E, i) => (\n            <div role=\"columnheader\" key={E + i} class={weekdayItemCls}>\n              {E}\n            </div>\n          ))}\n        </div>\n      );\n    }\n\n    function renderWeeks() {\n      const { month } = state;\n      const { weeks } = month;\n      const { weeksRowNum } = props;\n      let style = {};\n      if (weeksRowNum) {\n        const height = weeksRowNum * numbers.WEEK_HEIGHT;\n        style = { height };\n      }\n      const weeksCls = classNames(cssClasses.WEEKS);\n      return (\n        <div class={weeksCls} style={style}>\n          {weeks.map((week, weekIndex) => renderWeek(week, weekIndex))}\n        </div>\n      );\n    }\n\n    function renderWeek(week: MonthDayInfo[], weekIndex: number) {\n      const weekCls = cssClasses.WEEK;\n      return (\n        <div role=\"row\" class={weekCls} key={weekIndex}>\n          {week.map((day, dayIndex) => renderDay(day, dayIndex))}\n        </div>\n      );\n    }\n\n    function renderDay(day: MonthDayInfo, dayIndex: number) {\n      const { todayText } = state;\n      const { renderFullDate, renderDate } = props;\n      const { fullDate, dayNumber } = day;\n      if (!fullDate) {\n        return (\n          <div role=\"gridcell\" tabindex={-1} key={(dayNumber as number) + dayIndex} class={cssClasses.DAY}>\n            <span />\n          </div>\n        );\n      }\n\n      const dayStatus = getDayStatus(day, { todayText, ...props });\n\n      const dayCls = classNames(cssClasses.DAY, {\n        [cssClasses.DAY_TODAY]: dayStatus.isToday,\n        [cssClasses.DAY_IN_RANGE]: dayStatus.isInRange,\n        [cssClasses.DAY_HOVER]: dayStatus.isHover,\n        [cssClasses.DAY_SELECTED]: dayStatus.isSelected,\n        [cssClasses.DAY_SELECTED_START]: dayStatus.isSelectedStart,\n        [cssClasses.DAY_SELECTED_END]: dayStatus.isSelectedEnd,\n        [cssClasses.DAY_DISABLED]: dayStatus.isDisabled,\n        // offsetDate class\n        [cssClasses.DAY_HOVER_DAY]: dayStatus.isHoverDayOffset,\n        [cssClasses.DAY_IN_OFFSET_RANGE]: dayStatus.isInOffsetRange,\n        [cssClasses.DAY_SELECTED_RANGE_HOVER]: dayStatus.isHoverInOffsetRange,\n        [cssClasses.DAY_OFFSET_RANGE_START]: dayStatus.isOffsetRangeStart,\n        [cssClasses.DAY_OFFSET_RANGE_END]: dayStatus.isOffsetRangeEnd,\n        // range input class\n        [cssClasses.DAY_SELECTED_START_AFTER_HOVER]: dayStatus.isSelectedStartAfterHover,\n        [cssClasses.DAY_SELECTED_END_BEFORE_HOVER]: dayStatus.isSelectedEndBeforeHover,\n        [cssClasses.DAY_HOVER_DAY_BEFORE_RANGE]: dayStatus.isHoverDayInStartSelection,\n        [cssClasses.DAY_HOVER_DAY_AFTER_RANGE]: dayStatus.isHoverDayInEndSelection,\n        [cssClasses.DAY_HOVER_DAY_AROUND_SINGLE_SELECTED]: dayStatus.isHoverDayAroundOneSelected,\n      });\n\n      const dayMainCls = classNames({\n        [`${cssClasses.DAY}-main`]: true,\n      });\n\n      const fullDateArgs = [dayNumber, fullDate, dayStatus];\n      const customRender = isFunction(renderFullDate);\n\n      return (\n        <div\n          role=\"gridcell\"\n          tabindex={dayStatus.isDisabled ? -1 : 0}\n          aria-disabled={dayStatus.isDisabled}\n          aria-selected={dayStatus.isSelected}\n          aria-label={fullDate}\n          class={!customRender ? dayCls : cssClasses.DAY}\n          title={fullDate}\n          key={(dayNumber as number) + dayIndex}\n          onClick={(e) => !dayStatus.isDisabled && foundation.handleClick(day)}\n          onMouseenter={() => foundation.handleHover(day)}\n          onMouseleave={() => foundation.handleHover()}\n        >\n          {customRender ? (\n            // @ts-ignore\n            renderFullDate(...fullDateArgs)\n          ) : (\n            <div class={dayMainCls}>\n              {/*// @ts-ignore*/}\n              {isFunction(renderDate) ? renderDate(dayNumber, fullDate) : <span>{dayNumber}</span>}\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    return () => {\n      const { forwardRef, multiple } = props;\n      const weekday = renderDayOfWeek();\n      const weeks = renderWeeks();\n      const monthCls = classNames(cssClasses.MONTH);\n      const ref = forwardRef || monthRef;\n      return (\n        <div role=\"grid\" aria-multiselectable={multiple} ref={ref} class={monthCls}>\n          {weekday}\n          {weeks}\n        </div>\n      );\n    };\n  },\n});\n\nexport default month;\n"],"names":["prefixCls","cssClasses","PREFIX","propTypes","forwardRef","undefined","localeCode","month","type","PropTypes","object","default","Date","required","selected","Set","rangeStart","string","rangeEnd","offsetRangeStart","offsetRangeEnd","onDayClick","func","noop","onDayHover","weekStartsOn","number","numbers","WEEK_START_ON","disabledDate","stubFalse","weeksRowNum","onWeeksRowNumChange","renderDate","renderFullDate","hoverDay","startDateOffset","endDateOffset","rangeInputFocus","bool","focusRecordsRef","multiple","locale","Object","style","className","defaultProps","vuePropsType","vuePropsMake","defineComponent","props","name","setup","slots","monthRef","ref","state","reactive","weekdays","weeks","monthText","todayText","adapter","adapterInject","useBaseComponent","foundation","updateToday","setWeekDays","setWeeksRowNum","callback","nextTick","updateMonthTable","notifyDayClick","day","notifyDayHover","notifyWeeksRowNumChange","MonthFoundation","onMounted","init","onUnmounted","destroy","watch","getMonthTable","immediate","getSingleDayStatus","options","fullDate","disabledOptions","isToday","isSelected","has","isDisabled","parseISO","value","isAfter","trim","split","isBefore","getDateRangeStatus","_isDateRangeAnySelected","Boolean","_isDateRangeSelected","_isOffsetDateRangeAnyExist","_isHoverDay","isSameDay","_isHoverAfterStart","_isHoverBeforeEnd","isSelectedStart","isSelectedEnd","isHoverDayAroundOneSelected","isBetween","start","end","isHover","isInRange","isSelectedStartAfterHover","isSelectedEndBeforeHover","isHoverDayInStartSelection","isHoverDayInEndSelection","isHoverDayInRange","isHoverDay","getOffsetDateStatus","_isInRange","_isSelectedStart","_isSelectedEnd","isOffsetRangeStart","isOffsetRangeEnd","isHoverDayOffset","isHoverInOffsetRange","isInOffsetRange","getDayStatus","currentDay","singleDayStatus","dateRangeStatus","offsetDataStatus","renderDayOfWeek","weekdayCls","classNames","WEEKDAY","weekdayItemCls","weekdaysText","map","key","_createVNode","E","i","renderWeeks","height","WEEK_HEIGHT","weeksCls","WEEKS","week","weekIndex","renderWeek","weekCls","WEEK","dayIndex","renderDay","dayNumber","DAY","dayStatus","dayCls","DAY_TODAY","DAY_IN_RANGE","DAY_HOVER","DAY_SELECTED","DAY_SELECTED_START","DAY_SELECTED_END","DAY_DISABLED","DAY_HOVER_DAY","DAY_IN_OFFSET_RANGE","DAY_SELECTED_RANGE_HOVER","DAY_OFFSET_RANGE_START","DAY_OFFSET_RANGE_END","DAY_SELECTED_START_AFTER_HOVER","DAY_SELECTED_END_BEFORE_HOVER","DAY_HOVER_DAY_BEFORE_RANGE","DAY_HOVER_DAY_AFTER_RANGE","DAY_HOVER_DAY_AROUND_SINGLE_SELECTED","dayMainCls","fullDateArgs","customRender","isFunction","e","handleClick","onMouseenter","handleHover","onMouseleave","weekday","monthCls","MONTH"],"mappings":"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"}