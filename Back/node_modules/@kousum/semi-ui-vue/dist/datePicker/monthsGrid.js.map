{"version":3,"file":"monthsGrid.js","sources":["../../src/components/datePicker/monthsGrid.tsx"],"sourcesContent":["import { CSSProperties, defineComponent, h, nextTick, onMounted, PropType, reactive, Ref, watch } from 'vue';\n\nimport classnames from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { vuePropsMake } from '../PropTypes';\nimport { format as formatFn, isSameDay } from 'date-fns';\n\nimport MonthsGridFoundation, {\n  MonthInfo,\n  MonthsGridAdapter,\n  MonthsGridDateAdapter,\n  MonthsGridFoundationProps,\n  MonthsGridFoundationState,\n  MonthsGridRangeAdapter,\n  PanelType,\n} from '@douyinfe/semi-foundation/datePicker/monthsGridFoundation';\nimport { cssClasses, numbers, strings } from '@douyinfe/semi-foundation/datePicker/constants';\nimport { compatibleParse } from '@douyinfe/semi-foundation/datePicker/_utils/parser';\nimport { noop, stubFalse } from 'lodash';\nimport { BaseProps, useBaseComponent } from '../_base/baseComponent';\nimport Navigation from './navigation';\nimport Month from './month';\nimport Combobox from '../timePicker/Combobox';\nimport YearAndMonth from './yearAndMonth';\nimport { IconCalendar, IconClock } from '@kousum/semi-icons-vue';\nimport { getDefaultFormatTokenByType } from '@douyinfe/semi-foundation/datePicker/_utils/getDefaultFormatToken';\nimport getDefaultPickerDate from '@douyinfe/semi-foundation/datePicker/_utils/getDefaultPickerDate';\nimport { DayStatusType } from '@douyinfe/semi-foundation/datePicker/foundation';\nimport { CombineProps, VueJsxNode } from '../interface';\nimport type { ScrollItemProps } from '../scrollList';\nimport { ComponentObjectPropsOptions } from 'vue';\n\nconst prefixCls = cssClasses.PREFIX;\n\nexport interface MonthsGridProps extends MonthsGridFoundationProps, BaseProps {\n  navPrev?: VueJsxNode;\n  navNext?: VueJsxNode;\n  renderDate?: (dayNumber?: number, fullDate?: string) => VueJsxNode;\n  renderFullDate?: (dayNumber?: number, fullDate?: string, dayStatus?: DayStatusType) => VueJsxNode;\n  focusRecordsRef?: Ref<{ rangeStart: boolean; rangeEnd: boolean }>;\n  yearAndMonthOpts?: ScrollItemProps<any>;\n\n  motionEnd?: boolean;\n}\n\nexport type MonthsGridState = MonthsGridFoundationState;\n\nconst propTypes: CombineProps<MonthsGridProps> = {\n  type: PropTypes.string as PropType<MonthsGridProps['type']>,\n  defaultValue: PropTypes.array,\n  defaultPickerValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object, PropTypes.array]),\n  multiple: PropTypes.bool,\n  max: PropTypes.number, // only work when multiple is true\n  weekStartsOn: PropTypes.number as PropType<MonthsGridProps['weekStartsOn']>,\n  disabledDate: PropTypes.func as PropType<MonthsGridProps['disabledDate']>,\n  disabledTime: PropTypes.func as PropType<MonthsGridProps['disabledTime']>,\n  disabledTimePicker: PropTypes.bool,\n  hideDisabledOptions: PropTypes.bool,\n  navPrev: PropTypes.node,\n  navNext: PropTypes.node,\n  onMaxSelect: PropTypes.func as PropType<MonthsGridProps['onMaxSelect']>,\n  timePickerOpts: PropTypes.object,\n  // Whether the outer datePicker is a controlled component\n  isControlledComponent: PropTypes.bool,\n  rangeStart: PropTypes.oneOfType([PropTypes.string]),\n  rangeInputFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  locale: PropTypes.object,\n  localeCode: PropTypes.string,\n  format: PropTypes.string,\n  renderDate: PropTypes.func as PropType<MonthsGridProps['renderDate']>,\n  renderFullDate: PropTypes.func as PropType<MonthsGridProps['renderFullDate']>,\n  startDateOffset: PropTypes.func as PropType<MonthsGridProps['startDateOffset']>,\n  endDateOffset: PropTypes.func as PropType<MonthsGridProps['endDateOffset']>,\n  autoSwitchDate: PropTypes.bool,\n  density: PropTypes.string,\n  dateFnsLocale: PropTypes.any,\n  timeZone: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  // Support synchronous switching of months\n  syncSwitchMonth: PropTypes.bool,\n  // Callback function for panel date switching\n  onPanelChange: PropTypes.func as PropType<MonthsGridProps['onPanelChange']>,\n  focusRecordsRef: PropTypes.object,\n  triggerRender: PropTypes.func as PropType<MonthsGridProps['triggerRender']>,\n  presetPosition: PropTypes.string as PropType<MonthsGridProps['presetPosition']>,\n  renderQuickControls: PropTypes.node,\n  renderDateInput: PropTypes.node,\n\n  style: [Object, String] as PropType<MonthsGridProps['style']>,\n  className: String,\n  motionEnd: PropTypes.bool as PropType<MonthsGridProps['motionEnd']>,\n  splitPanels: Boolean,\n  onChange: Function as PropType<MonthsGridProps['onChange']>,\n  setRangeInputFocus: Function as PropType<MonthsGridProps['setRangeInputFocus']>,\n  isAnotherPanelHasOpened: Function as PropType<MonthsGridProps['isAnotherPanelHasOpened']>,\n  insetInput: {\n    type: Boolean,\n    required: true\n  },\n  yearAndMonthOpts: Object as PropType<MonthsGridProps['yearAndMonthOpts']>,\n  startYear: Number,\n  endYear: Number\n};\n\nconst defaultProps = {\n  type: 'date',\n  rangeStart: '',\n  multiple: false,\n  weekStartsOn: numbers.WEEK_START_ON,\n  disabledDate: stubFalse,\n  onMaxSelect: noop,\n  locale: {},\n};\nexport const vuePropsType = vuePropsMake<MonthsGridProps>(propTypes, defaultProps);\nconst monthsGrid = defineComponent({\n  props: { ...vuePropsType },\n  name: 'MonthsGrid',\n  setup(props, { slots }) {\n    const validFormat = props.format || getDefaultFormatTokenByType(props.type);\n    const { nowDate, nextDate } = getDefaultPickerDate({\n      defaultPickerValue: props.defaultPickerValue,\n      format: validFormat,\n      dateFnsLocale: props.dateFnsLocale,\n    });\n    const dateState = {\n      // Direct use of full date string storage, mainly considering the month rendering comparison to save a conversion\n      // The selected value for single or multiple selection, full date string, eg. {'2019-10-01', '2019-10-02'}\n      selected: new Set<string>(),\n    };\n    const rangeState = {\n      monthLeft: {\n        pickerDate: nowDate,\n        showDate: nowDate,\n        isTimePickerOpen: false,\n        isYearPickerOpen: false,\n      },\n      monthRight: {\n        pickerDate: nextDate,\n        showDate: nextDate,\n        isTimePickerOpen: false,\n        isYearPickerOpen: false,\n      },\n      maxWeekNum: 0, // Maximum number of weeks left and right for manual height adjustment\n      hoverDay: '', // Real-time hover date\n      rangeStart: props.rangeStart, // Start date for range selection\n      rangeEnd: '', // End date of range selection\n      currentPanelHeight: 0, // current month panel height,\n      offsetRangeStart: '',\n      offsetRangeEnd: '',\n    };\n    const state = reactive<MonthsGridState>({\n      ...dateState,\n      ...rangeState,\n    });\n    const { adapter: adapterInject } = useBaseComponent<MonthsGridProps>(props, state);\n    const foundation: MonthsGridFoundation = new MonthsGridFoundation(adapter());\n\n    function dateAdapter(): MonthsGridDateAdapter {\n      return {\n        updateDaySelected: (selected) => (state.selected = selected),\n      };\n    }\n\n    function rangeAdapter(): MonthsGridRangeAdapter {\n      return {\n        setRangeStart: (rangeStart) => (state.rangeStart = rangeStart),\n        setRangeEnd: (rangeEnd) => (state.rangeEnd = rangeEnd),\n        setHoverDay: (hoverDay) => (state.hoverDay = hoverDay),\n        setWeeksHeight: (maxWeekNum) => (state.maxWeekNum = maxWeekNum),\n        setOffsetRangeStart: (offsetRangeStart) => (state.offsetRangeStart = offsetRangeStart),\n        setOffsetRangeEnd: (offsetRangeEnd) => (state.offsetRangeEnd = offsetRangeEnd),\n      };\n    }\n    function adapter(): MonthsGridAdapter {\n      return {\n        ...adapterInject<MonthsGridProps, MonthsGridState>(),\n        ...dateAdapter(),\n        ...rangeAdapter(),\n        updateMonthOnLeft: (v) => (state.monthLeft = v),\n        updateMonthOnRight: (v) => (state.monthRight = v),\n        notifySelectedChange: (value, options) => {\n          props.onChange(value, options);\n        },\n        notifyMaxLimit: (v) => props.onMaxSelect(v),\n        notifyPanelChange: (date, dateString) => props.onPanelChange(date, dateString),\n        setRangeInputFocus: (rangeInputFocus) => props.setRangeInputFocus(rangeInputFocus),\n        isAnotherPanelHasOpened: (currentRangeInput) => props.isAnotherPanelHasOpened(currentRangeInput),\n      };\n    }\n\n    onMounted(() => {\n      // super.componentDidMount();\n    });\n\n    watch(\n      () => props.defaultValue,\n      (value) => {\n        foundation.updateSelectedFromProps(value);\n      },\n      { immediate: true }\n    );\n\n    watch(\n      () => props.defaultPickerValue,\n      (value) => {\n        foundation.initDefaultPickerValue();\n      },\n      { immediate: true }\n    );\n\n    // watch(()=>props.motionEnd, (value)=>{\n    //   if (value === true){\n    //     if (foundation.isRangeType()) {\n    //       const currentPanelHeight = calcScrollListHeight();\n    //       state.currentPanelHeight = currentPanelHeight\n    //     }\n    //   }\n    // })\n\n    watch(\n      state,\n      (value, prevState, onCleanup) => {\n        const isRange = foundation.isRangeType();\n        if (isRange) {\n          /**\n           * we have to add these code to ensure that scroll list's selector places center\n           */\n          const prevAll = leftIsYearOrTime(prevState) && rightIsYearOrTime(prevState);\n          const prevSome =\n            (leftIsYearOrTime(prevState) && !rightIsYearOrTime(prevState)) ||\n            (!leftIsYearOrTime(prevState) && rightIsYearOrTime(prevState));\n          const nowAll = leftIsYearOrTime() && rightIsYearOrTime();\n          const nowSome = (leftIsYearOrTime() && !rightIsYearOrTime()) || (!leftIsYearOrTime() && rightIsYearOrTime());\n          const prevAllToSome = prevAll && nowSome;\n          const prevSomeToAll = prevSome && nowAll;\n\n          if (prevSomeToAll) {\n            state.currentPanelHeight = calcScrollListHeight();\n            nextTick(() => {\n              reselect();\n            });\n          } else if (prevAllToSome) {\n            reselect();\n          }\n        }\n      },\n      { immediate: true }\n    );\n\n    const cacheRefCurrent = (key: string, current: any) => {\n      if (typeof key === 'string' && key.length) {\n        adapter().setCache(key, current);\n      }\n    };\n\n    function leftIsYearOrTime(state_?: MonthsGridState) {\n      const { monthLeft } = state_ || state;\n\n      if (monthLeft && (monthLeft.isTimePickerOpen || monthLeft.isYearPickerOpen)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function rightIsYearOrTime(state_?: MonthsGridState) {\n      const { monthRight } = state_ || state;\n\n      if (monthRight && (monthRight.isTimePickerOpen || monthRight.isYearPickerOpen)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Calculate the height of the scrolling list, if the animation is not over, return 0\n     */\n    const calcScrollListHeight = () => {\n      const wrapLeft = adapter().getCache(`wrap-${strings.PANEL_TYPE_LEFT}`);\n      const wrapRight = adapter().getCache(`wrap-${strings.PANEL_TYPE_RIGHT}`);\n      const switchLeft = adapter().getCache(`switch-${strings.PANEL_TYPE_LEFT}`);\n      const switchRight = adapter().getCache(`switch-${strings.PANEL_TYPE_RIGHT}`);\n\n      const leftRect = wrapLeft && wrapLeft.getBoundingClientRect();\n      const rightRect = wrapRight && wrapRight.getBoundingClientRect();\n\n      let leftHeight = (leftRect && leftRect.height) || 0;\n      let rightHeight = (rightRect && rightRect.height) || 0;\n\n      if (switchLeft) {\n        leftHeight += switchLeft.getBoundingClientRect().height;\n      }\n      if (switchRight) {\n        rightHeight += switchRight.getBoundingClientRect().height;\n      }\n\n      return Math.max(leftHeight, rightHeight);\n    };\n\n    function renderPanel(month: Date, panelType: PanelType) {\n      let monthCls = classnames(`${prefixCls}-month-grid-${panelType}`);\n      const { monthLeft, monthRight, currentPanelHeight } = state;\n      const { insetInput } = props;\n      const panelDetail = panelType === strings.PANEL_TYPE_RIGHT ? monthRight : monthLeft;\n      const { isTimePickerOpen, isYearPickerOpen } = panelDetail;\n\n      const panelContent = renderMonth(month, panelType);\n\n      const yearAndMonthLayer = isYearPickerOpen ? (\n        <div class={`${prefixCls}-yam`}>{renderYearAndMonth(panelType, panelDetail)}</div>\n      ) : null;\n      const timePickerLayer = isTimePickerOpen ? (\n        <div class={`${prefixCls}-tpk`}>{renderTimePicker(panelType, panelDetail)}</div>\n      ) : null;\n\n      const style: CSSProperties = {};\n      const wrapLeft = adapter().getCache(`wrap-${strings.PANEL_TYPE_LEFT}`);\n      const wrapRight = adapter().getCache(`wrap-${strings.PANEL_TYPE_RIGHT}`);\n      const wrap = panelType === strings.PANEL_TYPE_RIGHT ? wrapRight : wrapLeft;\n\n      if (foundation.isRangeType()) {\n        if (isYearPickerOpen || isTimePickerOpen) {\n          style.minWidth = wrap.getBoundingClientRect().width;\n          style.minWidth = typeof style.minWidth === 'string' ? style.minWidth : style.minWidth + 'px';\n        }\n\n        if (leftIsYearOrTime() && rightIsYearOrTime() && !insetInput) {\n          /**\n           * left和right同时为tpk时，panel会有一个minHeight\n           * 如果缓存的currentPanelHeight为0，则需要计算滚动列表的高度\n           * 如果有缓存的值则使用currentPanelHeight（若此高度<实际值，则会影响ScrollList中渲染列表的循环次数）\n           * 详见 packages/semi-foundation/scrollList/itemFoundation.js initWheelList函数\n           *\n           * When left and right are tpk at the same time, the panel will have a minHeight\n           * If the cached currentPanelHeight is 0, you need to calculate the height of the scrolling list\n           * If there is a cached value, use currentPanelHeight (if this height is less than the actual value, it will affect the number of cycles in the ScrollList to render the list)\n           * See packages/semi-foundation/scrollList/itemFoundation.js initWheelList function\n           */\n\n          style.minHeight = currentPanelHeight ? currentPanelHeight : calcScrollListHeight();\n          style.minHeight = style.minHeight + 'px';\n        }\n      } else if (props.type !== 'year' && props.type !== 'month' && (isTimePickerOpen || isYearPickerOpen)) {\n        monthCls = classnames(monthCls, `${prefixCls}-yam-showing`);\n      }\n\n      const _isDatePanelOpen = !(isYearPickerOpen || isTimePickerOpen);\n      const xOpenType = _isDatePanelOpen ? 'date' : isYearPickerOpen ? 'year' : 'time';\n\n      return (\n        <div class={monthCls} key={panelType} style={style} x-open-type={xOpenType}>\n          {yearAndMonthLayer}\n          {timePickerLayer}\n          {/* {isYearPickerOpen || isTimePickerOpen ? null : panelContent} */}\n          {foundation.isRangeType() ? panelContent : isYearPickerOpen || isTimePickerOpen ? null : panelContent}\n          {renderSwitch(panelType)}\n        </div>\n      );\n    }\n\n    function showYearPicker(panelType: PanelType, e: MouseEvent) {\n      // e.stopPropagation();\n      // When switching to the year and month, the e.target at this time is generated from Navigation, and the Navigation module will be removed from the DOM after switching\n      // If you do not prevent the event from spreading to index.jsx, panel.contain (e.target) in clickOutSide will call closePanel because there is no Nav in the Panel and think this click is clickOutSide\n      // Cause the entire component pop-up window to be closed by mistake\n      // console.log(this.navRef.current.clientHeight, this.monthRef.current.clientHeight);\n      // this.wrapRef.current.style.height = this.wrapRef.current.clientHeight + 'px';\n      // this.wrapRef.current.style.overflow = 'hidden';\n      e.stopImmediatePropagation();\n      foundation.showYearPicker(panelType);\n    }\n\n    function renderMonth(month: Date, panelType: PanelType) {\n      const { selected, rangeStart, rangeEnd, hoverDay, maxWeekNum, offsetRangeStart, offsetRangeEnd } = state;\n      const {\n        weekStartsOn,\n        disabledDate,\n        locale,\n        localeCode,\n        renderDate,\n        renderFullDate,\n        startDateOffset,\n        endDateOffset,\n        density,\n        rangeInputFocus,\n        syncSwitchMonth,\n        multiple,\n      } = props;\n      let monthText = '';\n      // i18n monthText\n      if (month) {\n        // Get the absolute value of the year and month\n        const yearNumber = month ? formatFn(month, 'yyyy') : '';\n        const monthNumber = month ? formatFn(month, 'L') : '';\n        // Display the month as the corresponding language text\n        const mText = locale && locale.months && locale.months[monthNumber];\n        const monthFormatToken = locale.monthText;\n        // Display the year and month in a specific language format order\n        monthText = monthFormatToken && monthFormatToken.replace('${year}', yearNumber).replace('${month}', mText);\n      }\n\n      let style = {};\n      const detail = panelType === strings.PANEL_TYPE_RIGHT ? state.monthRight : state.monthLeft;\n      // Whether to select type for range\n      const isRangeType = foundation.isRangeType();\n      // Whether to switch synchronously for two panels\n      const shouldBimonthSwitch = isRangeType && syncSwitchMonth;\n\n      if (isRangeType && detail && (detail.isYearPickerOpen || detail.isTimePickerOpen)) {\n        style = {\n          visibility: 'hidden',\n          position: 'absolute',\n          pointerEvents: 'none',\n        };\n      }\n\n      // TODO forwardRef\n      return (\n        <div ref={(current) => cacheRefCurrent(`wrap-${panelType}`, current)} style={style}>\n          <Navigation\n            forwardRef={(current) => cacheRefCurrent(`nav-${panelType}`, current)}\n            monthText={monthText}\n            density={density}\n            onMonthClick={(e) => showYearPicker(panelType, e)}\n            onPrevMonth={() => foundation.prevMonth(panelType)}\n            onNextMonth={() => foundation.nextMonth(panelType)}\n            onNextYear={() => foundation.nextYear(panelType)}\n            onPrevYear={() => foundation.prevYear(panelType)}\n            shouldBimonthSwitch={shouldBimonthSwitch}\n            panelType={panelType}\n          />\n          <Month\n            locale={locale}\n            localeCode={localeCode}\n            forwardRef={(current) => cacheRefCurrent(`month-${panelType}`, current)}\n            disabledDate={disabledDate}\n            weekStartsOn={weekStartsOn}\n            month={month}\n            selected={selected}\n            rangeStart={rangeStart}\n            rangeEnd={rangeEnd}\n            rangeInputFocus={rangeInputFocus}\n            offsetRangeStart={offsetRangeStart}\n            offsetRangeEnd={offsetRangeEnd}\n            hoverDay={hoverDay}\n            weeksRowNum={maxWeekNum}\n            renderDate={renderDate}\n            renderFullDate={renderFullDate}\n            onDayClick={(day) => foundation.handleDayClick(day, panelType)}\n            onDayHover={(day) => foundation.handleDayHover(day, panelType)}\n            onWeeksRowNumChange={(weeksRowNum) => handleWeeksRowNumChange(weeksRowNum, panelType)}\n            startDateOffset={startDateOffset}\n            endDateOffset={endDateOffset}\n            focusRecordsRef={props.focusRecordsRef}\n            multiple={multiple}\n          />\n        </div>\n      );\n    }\n\n    const handleWeeksRowNumChange = (weeksRowNum: number, panelType: PanelType) => {\n      const isLeft = panelType === strings.PANEL_TYPE_RIGHT;\n      const isRight = panelType === strings.PANEL_TYPE_RIGHT;\n      const allIsYearOrTime = leftIsYearOrTime() && rightIsYearOrTime();\n\n      if (foundation.isRangeType() && !allIsYearOrTime) {\n        state.weeksRowNum = weeksRowNum;\n        state.currentPanelHeight = calcScrollListHeight();\n        nextTick(() => {\n          if ((leftIsYearOrTime() && isRight) || (rightIsYearOrTime() && isLeft)) {\n            reselect();\n          }\n        });\n      }\n    };\n\n    const reselect = () => {\n      const refKeys = [\n        `timepicker-${strings.PANEL_TYPE_LEFT}`,\n        `timepicker-${strings.PANEL_TYPE_RIGHT}`,\n        `yam-${strings.PANEL_TYPE_LEFT}`,\n        `yam-${strings.PANEL_TYPE_RIGHT}`,\n      ];\n\n      refKeys.forEach((key) => {\n        const current = adapter().getCache(key);\n\n        if (current && typeof current.reselect === 'function') {\n          current.reselect();\n        }\n      });\n    };\n\n    const getYAMOpenType = () => {\n      return foundation.getYAMOpenType();\n    };\n\n    function renderTimePicker(panelType: PanelType, panelDetail: MonthInfo) {\n      const { type, locale, format, hideDisabledOptions, timePickerOpts, dateFnsLocale } = props;\n      const { pickerDate } = panelDetail;\n      const timePanelCls = classnames(`${prefixCls}-time`);\n      const restProps = {\n        ...timePickerOpts,\n        hideDisabledOptions,\n      };\n\n      const disabledOptions = foundation.calcDisabledTime(panelType);\n\n      if (disabledOptions) {\n        ['disabledHours', 'disabledMinutes', 'disabledSeconds'].forEach((key) => {\n          if (disabledOptions[key]) {\n            restProps[key] = disabledOptions[key];\n          }\n        });\n      }\n\n      const { rangeStart, rangeEnd } = state;\n      const dateFormat = foundation.getValidDateFormat();\n      let startDate, endDate;\n      if (\n        type === 'dateTimeRange' &&\n        rangeStart &&\n        rangeEnd &&\n        isSameDay(\n          (startDate = compatibleParse(rangeStart, dateFormat, undefined, dateFnsLocale)),\n          (endDate = compatibleParse(rangeEnd, dateFormat, undefined, dateFnsLocale))\n        )\n      ) {\n        if (panelType === strings.PANEL_TYPE_RIGHT) {\n          rangeStart && (restProps.startDate = startDate);\n        } else {\n          rangeEnd && (restProps.endDate = endDate);\n        }\n      }\n      // i18n placeholder\n      const placeholder = locale.selectTime;\n      return (\n        <div class={timePanelCls}>\n          <Combobox\n            ref={(current) => cacheRefCurrent(`timepicker-${panelType}`, current)}\n            panelHeader={placeholder}\n            format={format || strings.FORMAT_TIME_PICKER}\n            timeStampValue={pickerDate}\n            onChange={(newTime: { timeStampValue: number }) => foundation.handleTimeChange(newTime, panelType)}\n            {...restProps}\n          />\n        </div>\n      );\n    }\n\n    function renderYearAndMonth(panelType: PanelType, panelDetail: MonthInfo) {\n      const { pickerDate } = panelDetail;\n      const { locale, localeCode, density, yearAndMonthOpts, startYear, endYear } = props;\n      const y = pickerDate.getFullYear();\n      const m = pickerDate.getMonth() + 1;\n      return (\n        <YearAndMonth\n          ref={(current) => cacheRefCurrent(`yam-${panelType}`, current)}\n          locale={locale}\n          localeCode={localeCode}\n          currentYear={{ left: y, right: 0 }}\n          currentMonth={{ left: m, right: 0 }}\n          onSelect={(item) =>\n            foundation.toYearMonth(panelType, new Date(item.currentYear.left, item.currentMonth.left - 1))\n          }\n          onBackToMain={() => {\n            foundation.showDatePanel(panelType);\n            const wrapCurrent = adapter().getCache(`wrap-${panelType}`);\n            if (wrapCurrent) {\n              wrapCurrent.style.height = 'auto';\n            }\n          }}\n          density={density}\n          yearAndMonthOpts={yearAndMonthOpts}\n          startYear={startYear}\n          endYear={endYear}\n        />\n      );\n    }\n\n    function renderSwitch(panelType: PanelType) {\n      const { rangeStart, rangeEnd, monthLeft, monthRight } = state;\n      const { type, locale, disabledTimePicker, density, dateFnsLocale, insetInput } = props;\n      // Type: date, dateRange, year, month, inset input no rendering required\n      if (!type.includes('Time') || insetInput) {\n        return null;\n      }\n\n      // switch year/month & time\n      let panelDetail, dateText;\n\n      // i18n\n      const { FORMAT_SWITCH_DATE } = locale.localeFormatToken;\n      // Timepicker format is constant and does not change with language\n      // const FORMAT_TIME_PICKER = strings.FORMAT_TIME_PICKER;\n      const formatTimePicker = foundation.getValidTimeFormat();\n      const dateFormat = foundation.getValidDateFormat();\n\n      if (panelType === strings.PANEL_TYPE_LEFT) {\n        panelDetail = monthLeft;\n        dateText = rangeStart\n          ? formatFn(compatibleParse(rangeStart, dateFormat, undefined, dateFnsLocale), FORMAT_SWITCH_DATE)\n          : '';\n      } else {\n        panelDetail = monthRight;\n        dateText = rangeEnd\n          ? formatFn(compatibleParse(rangeEnd, dateFormat, undefined, dateFnsLocale), FORMAT_SWITCH_DATE)\n          : '';\n      }\n\n      const { isTimePickerOpen, showDate } = panelDetail;\n      const monthText = showDate ? formatFn(showDate, FORMAT_SWITCH_DATE) : '';\n\n      const timeText = showDate ? formatFn(showDate, formatTimePicker) : '';\n\n      const showSwitchIcon = ['default'].includes(density);\n\n      const switchCls = classnames(`${prefixCls}-switch`);\n      const dateCls = classnames({\n        [`${prefixCls}-switch-date`]: true,\n        [`${prefixCls}-switch-date-active`]: !isTimePickerOpen,\n      });\n      const timeCls = classnames({\n        [`${prefixCls}-switch-time`]: true,\n        [`${prefixCls}-switch-time-disabled`]: disabledTimePicker,\n        [`${prefixCls}-switch-date-active`]: isTimePickerOpen,\n      });\n      const textCls = classnames(`${prefixCls}-switch-text`);\n\n      return (\n        <div class={switchCls} ref={(current) => adapter().setCache(`switch-${panelType}`, current)}>\n          <div\n            role=\"button\"\n            aria-label=\"Switch to date panel\"\n            class={dateCls}\n            onClick={(e) => foundation.showDatePanel(panelType)}\n          >\n            {showSwitchIcon && <IconCalendar aria-hidden />}\n            <span class={textCls}>{dateText || monthText}</span>\n          </div>\n          <div\n            role=\"button\"\n            aria-label=\"Switch to time panel\"\n            class={timeCls}\n            onClick={(e) => foundation.showTimePicker(panelType, true)}\n          >\n            {showSwitchIcon && <IconClock aria-hidden />}\n            <span class={textCls}>{timeText}</span>\n          </div>\n        </div>\n      );\n    }\n\n    return () => {\n      const { monthLeft, monthRight } = state;\n      const { type, insetInput, presetPosition, renderQuickControls, renderDateInput } = props;\n      const monthGridCls = classnames({\n        [`${prefixCls}-month-grid`]: true,\n      });\n      const panelTypeLeft = strings.PANEL_TYPE_LEFT;\n      const panelTypeRight = strings.PANEL_TYPE_RIGHT;\n      let content = null;\n      if (type === 'date' || type === 'dateTime') {\n        content = renderPanel(monthLeft.pickerDate, panelTypeLeft);\n      } else if (type === 'dateRange' || type === 'dateTimeRange') {\n        content = [\n          renderPanel(monthLeft.pickerDate, panelTypeLeft),\n          renderPanel(monthRight.pickerDate, panelTypeRight),\n        ];\n      } else if (type === 'year' || type === 'month') {\n        content = 'year month';\n      }\n      const yearOpenType = getYAMOpenType();\n\n      return (\n        <div style={{ display: 'flex' }}>\n          {presetPosition === 'left' && renderQuickControls}\n          <div>\n            {renderDateInput}\n            <div\n              class={monthGridCls}\n              x-type={type}\n              x-panel-yearandmonth-open-type={yearOpenType}\n              // FIXME:\n              x-insetinput={insetInput ? 'true' : 'false'}\n              x-preset-position={renderQuickControls === null ? 'null' : presetPosition}\n              ref={(current) => cacheRefCurrent('monthGrid', current)}\n            >\n              {content}\n            </div>\n          </div>\n          {presetPosition === 'right' && renderQuickControls}\n        </div>\n      );\n    };\n  },\n});\n\nexport default monthsGrid;\n"],"names":["prefixCls","cssClasses","PREFIX","propTypes","type","PropTypes","string","defaultValue","array","defaultPickerValue","oneOfType","number","object","multiple","bool","max","weekStartsOn","disabledDate","func","disabledTime","disabledTimePicker","hideDisabledOptions","navPrev","node","navNext","onMaxSelect","timePickerOpts","isControlledComponent","rangeStart","rangeInputFocus","locale","localeCode","format","renderDate","renderFullDate","startDateOffset","endDateOffset","autoSwitchDate","density","dateFnsLocale","any","timeZone","syncSwitchMonth","onPanelChange","focusRecordsRef","triggerRender","presetPosition","renderQuickControls","renderDateInput","style","Object","String","className","motionEnd","splitPanels","Boolean","onChange","Function","setRangeInputFocus","isAnotherPanelHasOpened","insetInput","required","yearAndMonthOpts","startYear","Number","endYear","defaultProps","numbers","WEEK_START_ON","stubFalse","noop","vuePropsType","vuePropsMake","monthsGrid","defineComponent","props","name","setup","slots","validFormat","getDefaultFormatTokenByType","nowDate","nextDate","getDefaultPickerDate","dateState","selected","Set","rangeState","monthLeft","pickerDate","showDate","isTimePickerOpen","isYearPickerOpen","monthRight","maxWeekNum","hoverDay","rangeEnd","currentPanelHeight","offsetRangeStart","offsetRangeEnd","state","reactive","adapter","adapterInject","useBaseComponent","foundation","MonthsGridFoundation","dateAdapter","updateDaySelected","rangeAdapter","setRangeStart","setRangeEnd","setHoverDay","setWeeksHeight","setOffsetRangeStart","setOffsetRangeEnd","updateMonthOnLeft","v","updateMonthOnRight","notifySelectedChange","value","options","notifyMaxLimit","notifyPanelChange","date","dateString","currentRangeInput","onMounted","watch","updateSelectedFromProps","immediate","initDefaultPickerValue","prevState","onCleanup","isRangeType","prevAll","leftIsYearOrTime","rightIsYearOrTime","prevSome","nowAll","nowSome","calcScrollListHeight","nextTick","reselect","cacheRefCurrent","key","current","length","setCache","state_","wrapLeft","getCache","strings","PANEL_TYPE_LEFT","wrapRight","PANEL_TYPE_RIGHT","switchLeft","switchRight","leftRect","getBoundingClientRect","rightRect","leftHeight","height","rightHeight","Math","renderPanel","month","panelType","monthCls","classnames","panelDetail","panelContent","renderMonth","yearAndMonthLayer","_createVNode","renderYearAndMonth","timePickerLayer","renderTimePicker","wrap","minWidth","width","minHeight","renderSwitch","showYearPicker","e","stopImmediatePropagation","monthText","yearNumber","formatFn","monthNumber","mText","months","monthFormatToken","replace","detail","shouldBimonthSwitch","visibility","position","pointerEvents","Navigation","onPrevMonth","prevMonth","onNextMonth","nextMonth","onNextYear","nextYear","onPrevYear","prevYear","Month","day","handleDayClick","handleDayHover","weeksRowNum","handleWeeksRowNumChange","isLeft","isRight","allIsYearOrTime","refKeys","forEach","getYAMOpenType","timePanelCls","restProps","disabledOptions","calcDisabledTime","dateFormat","getValidDateFormat","startDate","endDate","isSameDay","compatibleParse","undefined","placeholder","selectTime","Combobox","_mergeProps","FORMAT_TIME_PICKER","newTime","handleTimeChange","y","getFullYear","m","getMonth","YearAndMonth","left","right","item","toYearMonth","Date","currentYear","currentMonth","onBackToMain","showDatePanel","wrapCurrent","includes","dateText","FORMAT_SWITCH_DATE","localeFormatToken","formatTimePicker","getValidTimeFormat","timeText","showSwitchIcon","switchCls","dateCls","timeCls","textCls","IconCalendar","showTimePicker","IconClock","monthGridCls","panelTypeLeft","panelTypeRight","content","yearOpenType","display"],"mappings":"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"}