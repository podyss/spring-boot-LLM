import { Ref, PropType } from 'vue';
import { MonthDayInfo, MonthFoundationProps, MonthFoundationState } from '@douyinfe/semi-foundation/lib/es/datePicker/monthFoundation';
import { BaseProps } from '../_base/baseComponent';
import { Locale } from '../locale/interface';
import { CombineProps } from '../interface';
export interface MonthProps extends MonthFoundationProps, BaseProps {
    forwardRef: any;
    locale: Locale['DatePicker'];
    focusRecordsRef: Ref<{
        rangeStart: boolean;
        rangeEnd: boolean;
    }>;
}
export type MonthState = MonthFoundationState;
export declare const vuePropsType: CombineProps<MonthProps>;
declare const month: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    forwardRef: {
        type: PropType<any>;
        default?: any;
        required: true;
    };
    locale: {
        type: PropType<{
            placeholder: {
                date: string;
                dateTime: string;
                dateRange: [string, string];
                dateTimeRange: [string, string];
                monthRange: [string, string];
            };
            presets: string;
            footer: {
                confirm: string;
                cancel: string;
            };
            selectDate: string;
            selectTime: string;
            year: string;
            month: string;
            day: string;
            monthText: string;
            months: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            fullMonths: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            weeks: {
                Mon: string;
                Tue: string;
                Wed: string;
                Thu: string;
                Fri: string;
                Sat: string;
                Sun: string;
            };
            localeFormatToken: {
                FORMAT_SWITCH_DATE: string;
            };
        }>;
        default?: any;
        required: true;
    };
    focusRecordsRef: {
        type: PropType<Ref<{
            rangeStart: boolean;
            rangeEnd: boolean;
        }, {
            rangeStart: boolean;
            rangeEnd: boolean;
        }>>;
        default?: any;
        required: true;
    };
    month: {
        type: PropType<Date>;
        default?: any;
        required: true;
    };
    selected: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    rangeStart: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    rangeEnd: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    offsetRangeStart: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    offsetRangeEnd: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    onDayClick: {
        type: PropType<(day: MonthDayInfo) => void>;
        default?: any;
        required: true;
    };
    onDayHover: {
        type: PropType<(day: MonthDayInfo) => void>;
        default?: any;
        required: true;
    };
    weekStartsOn: {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber>;
        default?: any;
        required: true;
    };
    disabledDate: {
        type: PropType<(day: Date, options?: {
            rangeStart: string;
            rangeEnd: string;
        }) => boolean>;
        default?: any;
        required: true;
    };
    weeksRowNum: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    onWeeksRowNumChange: {
        type: PropType<(weeksRowNum: number) => void>;
        default?: any;
        required: true;
    };
    renderDate: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    renderFullDate: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    hoverDay: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    startDateOffset: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    endDateOffset: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    rangeInputFocus: {
        type: PropType<string | boolean>;
        default?: any;
        required: true;
    };
    localeCode: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    multiple: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    forwardRef: {
        type: PropType<any>;
        default?: any;
        required: true;
    };
    locale: {
        type: PropType<{
            placeholder: {
                date: string;
                dateTime: string;
                dateRange: [string, string];
                dateTimeRange: [string, string];
                monthRange: [string, string];
            };
            presets: string;
            footer: {
                confirm: string;
                cancel: string;
            };
            selectDate: string;
            selectTime: string;
            year: string;
            month: string;
            day: string;
            monthText: string;
            months: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            fullMonths: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            weeks: {
                Mon: string;
                Tue: string;
                Wed: string;
                Thu: string;
                Fri: string;
                Sat: string;
                Sun: string;
            };
            localeFormatToken: {
                FORMAT_SWITCH_DATE: string;
            };
        }>;
        default?: any;
        required: true;
    };
    focusRecordsRef: {
        type: PropType<Ref<{
            rangeStart: boolean;
            rangeEnd: boolean;
        }, {
            rangeStart: boolean;
            rangeEnd: boolean;
        }>>;
        default?: any;
        required: true;
    };
    month: {
        type: PropType<Date>;
        default?: any;
        required: true;
    };
    selected: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    rangeStart: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    rangeEnd: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    offsetRangeStart: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    offsetRangeEnd: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    onDayClick: {
        type: PropType<(day: MonthDayInfo) => void>;
        default?: any;
        required: true;
    };
    onDayHover: {
        type: PropType<(day: MonthDayInfo) => void>;
        default?: any;
        required: true;
    };
    weekStartsOn: {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/datePicker/_utils/getMonthTable").WeekStartNumber>;
        default?: any;
        required: true;
    };
    disabledDate: {
        type: PropType<(day: Date, options?: {
            rangeStart: string;
            rangeEnd: string;
        }) => boolean>;
        default?: any;
        required: true;
    };
    weeksRowNum: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    onWeeksRowNumChange: {
        type: PropType<(weeksRowNum: number) => void>;
        default?: any;
        required: true;
    };
    renderDate: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    renderFullDate: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    hoverDay: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    startDateOffset: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    endDateOffset: {
        type: PropType<() => void>;
        default?: any;
        required: true;
    };
    rangeInputFocus: {
        type: PropType<string | boolean>;
        default?: any;
        required: true;
    };
    localeCode: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    multiple: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default month;
