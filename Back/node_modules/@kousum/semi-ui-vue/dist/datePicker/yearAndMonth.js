import { defineComponent as W, useSlots as U, reactive as X, ref as p, watch as J, createVNode as l, Fragment as v, mergeProps as L } from "vue";
import Z from '@douyinfe/semi-foundation/lib/es/datePicker/yearAndMonthFoundation';
import { useBaseComponent as V } from "../_base/baseComponent";
import ee from "../scrollList/index";
import w from "../scrollList/scrollItem";
import { getYears as te } from '@douyinfe/semi-foundation/lib/es/datePicker/_utils/index';
import ne from "../iconButton";
import { IconChevronLeft as re } from "@kousum/semi-icons-vue";
import { BASE_CLASS_PREFIX as oe } from '@douyinfe/semi-foundation/lib/es/base/constants';
import { stubFalse as ce, noop as ae, isEqual as B } from "lodash";
import { setMonth as x, set as le, setYear as se } from "date-fns";
import * as r from "../PropTypes";
import { vuePropsMake as ie } from "../PropTypes";
import { strings as P } from '@douyinfe/semi-foundation/lib/es/datePicker/constants';
const F = `${oe}-datepicker`, ue = {
  currentYear: {
    type: r.object,
    required: !0
  },
  currentMonth: {
    type: r.object,
    required: !0
  },
  onSelect: r.func,
  locale: r.object,
  localeCode: r.string,
  monthCycled: r.bool,
  yearCycled: r.bool,
  noBackBtn: r.bool,
  disabledDate: r.func,
  density: r.string,
  presetPosition: r.string,
  renderQuickControls: r.node,
  renderDateInput: r.node,
  yearAndMonthOpts: r.any,
  type: r.string,
  startYear: r.number,
  endYear: r.number,
  onBackToMain: r.func,
  className: r.string,
  style: r.object
}, de = {
  disabledDate: ce,
  monthCycled: !1,
  yearCycled: !1,
  noBackBtn: !1,
  onSelect: ae,
  type: "month"
}, fe = ie(ue, de), Ae = /* @__PURE__ */ W({
  props: {
    ...fe
  },
  name: "DatePickerYearAndMonth",
  setup(a, {
    expose: R
  }) {
    U();
    const D = /* @__PURE__ */ new Date();
    let {
      currentYear: A,
      currentMonth: I
    } = a;
    const s = X({
      years: te(a.startYear, a.endYear).map((e) => ({
        value: e,
        year: e
      })),
      months: Array(12).fill(0).map((e, t) => ({
        value: t + 1,
        month: t + 1
      })),
      currentYear: {
        left: A.left || D.getFullYear(),
        right: A.right || D.getFullYear()
      },
      currentMonth: {
        left: I.left || D.getMonth() + 1,
        right: I.right || D.getMonth() + 2
      }
    }), {
      adapter: N
    } = V(a, s), k = p(), _ = p(), S = new Z(z());
    function z() {
      return {
        ...N(),
        // updateYears: years => this.setState({ years }),
        // updateMonths: months => this.setState({ months }),
        setCurrentYear: (e) => s.currentYear = e,
        setCurrentMonth: (e) => s.currentMonth = e,
        setCurrentYearAndMonth: (e, t) => {
          s.currentYear = e, s.currentMonth = t;
        },
        notifySelectYear: (e) => a.onSelect({
          currentMonth: s.currentMonth,
          currentYear: e
        }),
        notifySelectMonth: (e) => a.onSelect({
          currentYear: s.currentYear,
          currentMonth: e
        }),
        notifySelectYearAndMonth: (e, t) => a.onSelect({
          currentYear: e,
          currentMonth: t
        }),
        notifyBackToMain: () => a.onBackToMain()
      };
    }
    function j(e, t) {
      const o = {};
      if (!B(e.currentYear, t.currentYear) && e.currentYear.left !== 0) {
        const c = (/* @__PURE__ */ new Date()).getFullYear();
        o.currentYear = {
          left: e.currentYear.left || c,
          right: e.currentYear.right || c
        };
      }
      if (!B(e.currentMonth, t.currentMonth) && e.currentMonth.left !== 0) {
        const c = (/* @__PURE__ */ new Date()).getMonth();
        o.currentMonth = {
          left: e.currentMonth.left || c + 1,
          right: e.currentMonth.right || c + 2
        };
      }
      return o;
    }
    J([() => a.currentMonth, () => a.currentYear], (e) => {
      const t = j({
        ...a
      }, {
        ...s
      });
      t && Object.keys(t).forEach((o) => {
        s[o] = t[o];
      });
    }, {
      immediate: !0
    });
    function $(e) {
      const {
        years: t,
        currentYear: o,
        currentMonth: c,
        months: Y
      } = s, {
        disabledDate: h,
        localeCode: u,
        yearCycled: b,
        yearAndMonthOpts: C
      } = a, y = x(Date.now(), c[e] - 1), d = P.PANEL_TYPE_LEFT, f = P.PANEL_TYPE_RIGHT, m = (n) => e === f && o[d] ? c[d] <= c[f] ? o[d] > n : o[d] >= n : !1, g = t.map(({
        value: n,
        year: M
      }) => {
        const T = Y.every(({
          month: Q
        }) => h(le(y, {
          year: M,
          month: Q - 1
        }))), K = m(M);
        return {
          year: M,
          value: n,
          // Actual rendered text
          disabled: T || K
        };
      });
      let i = (n) => n;
      return (u === "zh-CN" || u === "zh-TW") && (i = (n) => `${n}年`), l(w, L({
        ref: k
      }, {
        cycled: b,
        list: g,
        transform: i,
        selectedIndex: t.findIndex((n) => n.value === o[e]),
        type: "year",
        onSelect: (n) => H(n, e),
        mode: "normal",
        ...C
      }), null);
    }
    const H = (e, t) => {
      S.selectYear(e, t);
    }, O = (e, t) => {
      S.selectMonth(e, t);
    };
    R({
      reselect: () => {
        [k, _].forEach((t) => {
          t.value && t.value.scrollToIndex && t.value.scrollToIndex();
        });
      }
    });
    function q(e) {
      const {
        months: t,
        currentMonth: o,
        currentYear: c
      } = s, {
        locale: Y,
        localeCode: h,
        monthCycled: u,
        disabledDate: b,
        yearAndMonthOpts: C
      } = a;
      let y = (n) => n;
      const d = se(Date.now(), c[e]), f = P.PANEL_TYPE_LEFT, m = P.PANEL_TYPE_RIGHT;
      (h === "zh-CN" || h === "zh-TW") && (y = (n) => `${n}月`);
      const g = t.map(({
        value: n,
        month: M
      }) => {
        const T = e === m && o[f] && c[f] === c[m] && o[f] > M;
        return {
          month: M,
          disabled: b(x(d, M - 1)) || T,
          value: Y.fullMonths[n]
          // Actual rendered text
        };
      }), i = g.findIndex((n) => n.month === o[e]);
      return l(w, L({
        ref: _
      }, {
        cycled: u,
        list: g,
        transform: y,
        selectedIndex: i,
        type: "month",
        onSelect: (n) => O(n, e),
        mode: "normal",
        ...C
      }), null);
    }
    const G = (e) => {
      e.stopImmediatePropagation(), S.backToMain();
    };
    function E(e) {
      return l(v, null, [l(ee, null, {
        default: () => [$(e), q(e)]
      })]);
    }
    return () => {
      const {
        locale: e,
        noBackBtn: t,
        density: o,
        presetPosition: c,
        renderQuickControls: Y,
        renderDateInput: h,
        type: u
      } = a, b = `${F}-yearmonth-header`, C = `${F}-yearmonth-body`, y = e.selectDate, d = o === "compact" ? "default" : "large", f = o === "compact" ? "small" : "default", m = P.PANEL_TYPE_LEFT, g = P.PANEL_TYPE_RIGHT;
      let i = null;
      return u === "month" ? i = E(m) : i = l("div", {
        class: C
      }, [E(m), E(g)]), l(v, null, [t ? null : l("div", {
        class: b
      }, [l(ne, {
        noHorizontalPadding: !1,
        icon: l(re, {
          "aria-hidden": !0,
          size: d
        }, null),
        size: f,
        onClick: G
      }, {
        default: () => [l("span", null, [y])]
      })]), c ? l("div", {
        style: {
          display: "flex"
        }
      }, [c === "left" && u !== "monthRange" && Y, l("div", null, [h, i]), c === "right" && u !== "monthRange" && Y]) : l(v, null, [h, i])]);
    };
  }
});
export {
  Ae as default,
  fe as vuePropsType
};
//# sourceMappingURL=yearAndMonth.js.map
