import { defineComponent as c, useSlots as d, ref as P, createVNode as n, mergeProps as g } from "vue";
import { strings as I, numbers as N } from '@douyinfe/semi-foundation/lib/es/datePicker/constants';
import v, { vuePropsTypeDatePickerProps as T } from "./datePicker";
import y from "../locale/localeConsumer";
import C from "../configProvider/context";
import { useHasInProps as S } from "../_base/baseComponent";
const b = {
  ...T
  // forwardRef: [Object, Function],
}, R = /* @__PURE__ */ c({
  props: {
    ...b
  },
  name: "DatePickerIndex",
  setup(i, {
    expose: p
  }) {
    d();
    const {
      getProps: a
    } = S(), o = P();
    return p({
      open: () => {
        var e;
        return (e = o.value) == null ? void 0 : e.open();
      },
      close: () => {
        var e;
        return (e = o.value) == null ? void 0 : e.close();
      },
      focus: () => {
        var e;
        return (e = o.value) == null ? void 0 : e.focus();
      },
      blur: () => {
        var e;
        return (e = o.value) == null ? void 0 : e.blur();
      }
    }), () => {
      const e = a(i), {
        type: s,
        format: t,
        rangeSeparator: r
      } = e;
      return typeof t == "string" && t && (/[Hhms]+/.test(t) || (s === "dateTime" ? e.type = "date" : s === "dateTimeRange" && (e.type = "dateRange"))), r && typeof r == "string" && (e.rangeSeparator = ` ${r.trim()} `), e.insetInput && (e.position || (e.position = I.POSITION_INLINE_INPUT), e.position.includes("Over") && !e.spacing && (e.spacing = N.SPACING_INSET_INPUT)), n(C.Consumer, null, {
        default: ({
          timeZone: f
        }) => n(y, {
          componentName: "DatePicker"
        }, {
          default: (m, u, l) => n(v, g({
            ...e,
            timeZone: f,
            localeCode: u,
            locale: m,
            dateFnsLocale: l
          }, {
            ref: o
          }), null)
        })
      });
    };
  }
});
export {
  R as default,
  b as vuePropsType
};
//# sourceMappingURL=index.js.map
