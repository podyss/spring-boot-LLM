{"version":3,"file":"index.js","sources":["../../src/components/datePicker/index.tsx"],"sourcesContent":["import { defineComponent, h, ref, useSlots } from 'vue';\n\nimport { numbers, strings } from '@douyinfe/semi-foundation/datePicker/constants';\nimport DatePicker, { DatePickerProps, vuePropsTypeDatePickerProps } from './datePicker';\nimport LocaleConsumer from '../locale/localeConsumer';\nimport type { Locale } from '../locale/interface';\nimport Context from '../configProvider/context';\n\nexport type {\n  BaseValueType,\n  DayStatusType,\n  DisabledDateOptions,\n  DisabledDateType,\n  DisabledTimeType,\n  InputSize,\n  Position,\n  PresetType,\n  PresetsType,\n  TriggerRenderProps,\n  ValidateStatus,\n  ValueType,\n} from '@douyinfe/semi-foundation/datePicker/foundation';\nexport type { DateInputProps } from './dateInput';\nexport type { DatePickerProps } from './datePicker';\nexport type { MonthProps } from './month';\nexport type { MonthsGridProps } from './monthsGrid';\nexport type { QuickControlProps } from './quickControl';\nexport type { YearAndMonthProps } from './yearAndMonth';\nexport type { InsetInputProps } from '@douyinfe/semi-foundation/datePicker/inputFoundation';\nexport type { DatePicker as BaseDatePicker };\nimport { useHasInProps } from '../_base/baseComponent';\n\nexport const vuePropsType = {\n  ...vuePropsTypeDatePickerProps,\n  // forwardRef: [Object, Function],\n};\nconst index = defineComponent({\n  props: { ...vuePropsType },\n  name: 'DatePickerIndex',\n  setup(props, {expose}) {\n    const slots = useSlots();\n    const { getProps } = useHasInProps();\n    const vRef = ref()\n    expose({\n      open: ()=>vRef.value?.open(),\n      close: ()=>vRef.value?.close(),\n      focus: ()=>vRef.value?.focus(),\n      blur: ()=>vRef.value?.blur(),\n    })\n    return () => {\n      const propsObj: DatePickerProps = getProps(props);\n      const { type, format, rangeSeparator } = propsObj;\n\n      if (typeof format === 'string' && format) {\n        if (!/[Hhms]+/.test(format)) {\n          if (type === 'dateTime') {\n            propsObj.type = 'date';\n          } else if (type === 'dateTimeRange') {\n            propsObj.type = 'dateRange';\n          }\n        }\n      }\n\n      // Add spaces at both ends to prevent conflicts with characters in the date when separating\n      if (rangeSeparator && typeof rangeSeparator === 'string') {\n        propsObj.rangeSeparator = ` ${rangeSeparator.trim()} `;\n      }\n\n      if (propsObj.insetInput) {\n        if (!propsObj.position) {\n          propsObj.position = strings.POSITION_INLINE_INPUT;\n        }\n        /**\n         * When insetInput is `true` and `position` includes `over`, use 1px `spacing` to solve the problem of border-radius leakage in the upper left corner\n         *\n         * @see https://user-images.githubusercontent.com/26477537/158817185-126a5f33-41f7-414a-8e36-8d1be2dda5cd.png\n         */\n        if (propsObj.position.includes('Over') && !propsObj.spacing) {\n          propsObj.spacing = numbers.SPACING_INSET_INPUT;\n        }\n      }\n\n      return (\n        <Context.Consumer>\n          {({ timeZone }: { timeZone?: string | number }) => (\n            <LocaleConsumer componentName={'DatePicker'}>\n              {(locale: Locale['DatePicker'], localeCode: string, dateFnsLocale: Locale['dateFnsLocale']) => {\n                return (\n                  <DatePicker\n                    {...{\n                      ...propsObj,\n                      timeZone: timeZone,\n                      localeCode: localeCode,\n                      locale: locale,\n                      dateFnsLocale: dateFnsLocale,\n                    }}\n                    // @ts-ignore\n                    ref={vRef}\n                  />\n                );\n              }}\n            </LocaleConsumer>\n          )}\n        </Context.Consumer>\n      );\n    };\n  },\n});\n\nexport default index;\n"],"names":["vuePropsType","vuePropsTypeDatePickerProps","index","defineComponent","props","name","setup","expose","useSlots","getProps","useHasInProps","vRef","ref","open","value","close","focus","blur","propsObj","type","format","rangeSeparator","test","trim","insetInput","position","strings","POSITION_INLINE_INPUT","includes","spacing","numbers","SPACING_INSET_INPUT","_createVNode","Context","Consumer","default","timeZone","LocaleConsumer","locale","localeCode","dateFnsLocale","DatePicker","_mergeProps"],"mappings":";;;;;;AAgCO,MAAMA,IAAe;AAAA,EAC1B,GAAGC;AAAAA;AAEL,GACMC,IAAQC,gBAAAA,EAAgB;AAAA,EAC5BC,OAAO;AAAA,IAAE,GAAGJ;AAAAA,EAAc;AAAA,EAC1BK,MAAM;AAAA,EACNC,MAAMF,GAAO;AAAA,IAACG,QAAAA;AAAAA,EAAM,GAAG;AACPC,IAAAA,EAAU;AACxB,UAAM;AAAA,MAAEC,UAAAA;AAAAA,IAAU,IAAGC,EAAa,GAC5BC,IAAOC;AACbL,WAAAA,EAAO;AAAA,MACLM,MAAMA,MAAIF;;AAAAA,gBAAAA,IAAAA,EAAKG,UAALH,gBAAAA,EAAYE;AAAAA;AAAAA,MACtBE,OAAOA,MAAIJ;;AAAAA,gBAAAA,IAAAA,EAAKG,UAALH,gBAAAA,EAAYI;AAAAA;AAAAA,MACvBC,OAAOA,MAAIL;;AAAAA,gBAAAA,IAAAA,EAAKG,UAALH,gBAAAA,EAAYK;AAAAA;AAAAA,MACvBC,MAAMA,MAAIN;;AAAAA,gBAAAA,IAAAA,EAAKG,UAALH,gBAAAA,EAAYM;AAAAA;AAAAA,IACxB,CAAC,GACM,MAAM;AACX,YAAMC,IAA4BT,EAASL,CAAK,GAC1C;AAAA,QAAEe,MAAAA;AAAAA,QAAMC,QAAAA;AAAAA,QAAQC,gBAAAA;AAAAA,MAAgB,IAAGH;AAEzC,aAAI,OAAOE,KAAW,YAAYA,MAC3B,UAAUE,KAAKF,CAAM,MACpBD,MAAS,aACXD,EAASC,OAAO,SACPA,MAAS,oBAClBD,EAASC,OAAO,gBAMlBE,KAAkB,OAAOA,KAAmB,aAC9CH,EAASG,iBAAiB,IAAIA,EAAeE,KAAI,CAAE,MAGjDL,EAASM,eACNN,EAASO,aACZP,EAASO,WAAWC,EAAQC,wBAO1BT,EAASO,SAASG,SAAS,MAAM,KAAK,CAACV,EAASW,YAClDX,EAASW,UAAUC,EAAQC,uBAI/BC,EAAAC,EAAAC,UAAA,MAAA;AAAA,QAAAC,SAEKA,CAAC;AAAA,UAAEC,UAAAA;AAAAA,cAA0CJ,EAAAK,GAAA;AAAA,UAAA,eACb;AAAA,QAAY,GAAA;AAAA,UAAAF,SACxCA,CAACG,GAA8BC,GAAoBC,MAClDR,EAAAS,GAAAC,EAAA;AAAA,YAGM,GAAGxB;AAAAA,YACHkB,UAAUA;AAAAA,YACVG,YAAYA;AAAAA,YACZD,QAAQA;AAAAA,YACRE,eAAeA;AAAAA,UAAa,GAAA;AAAA,YAAA,KAGzB7B;AAAAA,UAAI,CAAA,GAAA,IAAA;AAAA,QAGd,CAAA;AAAA,MAEJ,CAAA;AAAA;EAIT;AACF,CAAC;"}