import { PropType } from 'vue';
import { YearAndMonthFoundationProps, YearAndMonthFoundationState } from '@douyinfe/semi-foundation/lib/es/datePicker/yearAndMonthFoundation';
import { BaseProps } from '../_base/baseComponent';
import { Locale } from '../locale/interface';
import { CombineProps } from '../interface';
export interface YearAndMonthProps extends YearAndMonthFoundationProps, BaseProps {
    locale?: Locale['DatePicker'];
}
export type YearAndMonthState = YearAndMonthFoundationState;
export declare const vuePropsType: CombineProps<YearAndMonthProps>;
declare const yearAndMonth: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    locale: PropType<{
        placeholder: {
            date: string;
            dateTime: string;
            dateRange: [string, string];
            dateTimeRange: [string, string];
            monthRange: [string, string];
        };
        presets: string;
        footer: {
            confirm: string;
            cancel: string;
        };
        selectDate: string;
        selectTime: string;
        year: string;
        month: string;
        day: string;
        monthText: string;
        months: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        fullMonths: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        weeks: {
            Mon: string;
            Tue: string;
            Wed: string;
            Thu: string;
            Fri: string;
            Sat: string;
            Sun: string;
        };
        localeFormatToken: {
            FORMAT_SWITCH_DATE: string;
        };
    }> | {
        type: PropType<{
            placeholder: {
                date: string;
                dateTime: string;
                dateRange: [string, string];
                dateTimeRange: [string, string];
                monthRange: [string, string];
            };
            presets: string;
            footer: {
                confirm: string;
                cancel: string;
            };
            selectDate: string;
            selectTime: string;
            year: string;
            month: string;
            day: string;
            monthText: string;
            months: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            fullMonths: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            weeks: {
                Mon: string;
                Tue: string;
                Wed: string;
                Thu: string;
                Fri: string;
                Sat: string;
                Sun: string;
            };
            localeFormatToken: {
                FORMAT_SWITCH_DATE: string;
            };
        }>;
        default?: any;
        required?: false;
    };
    currentYear: {
        type: PropType<{
            left: number;
            right: number;
        }>;
        default?: any;
        required: true;
    };
    currentMonth: {
        type: PropType<{
            left: number;
            right: number;
        }>;
        default?: any;
        required: true;
    };
    onSelect: PropType<(obj: {
        currentMonth: {
            left: number;
            right: number;
        };
        currentYear: {
            left: number;
            right: number;
        };
    }) => void> | {
        type: PropType<(obj: {
            currentMonth: {
                left: number;
                right: number;
            };
            currentYear: {
                left: number;
                right: number;
            };
        }) => void>;
        default?: any;
        required?: false;
    };
    onBackToMain: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    localeCode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    monthCycled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    yearCycled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    noBackBtn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledDate: PropType<(date: Date) => boolean> | {
        type: PropType<(date: Date) => boolean>;
        default?: any;
        required?: false;
    };
    density: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    presetPosition: PropType<"bottom" | "left" | "right" | "top"> | {
        type: PropType<"bottom" | "left" | "right" | "top">;
        default?: any;
        required?: false;
    };
    renderQuickControls: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    renderDateInput: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    type: PropType<"date" | "month" | "dateTime" | "year" | "dateRange" | "dateTimeRange" | "monthRange"> | {
        type: PropType<"date" | "month" | "dateTime" | "year" | "dateRange" | "dateTimeRange" | "monthRange">;
        default?: any;
        required?: false;
    };
    yearAndMonthOpts: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    startYear: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    endYear: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    locale: PropType<{
        placeholder: {
            date: string;
            dateTime: string;
            dateRange: [string, string];
            dateTimeRange: [string, string];
            monthRange: [string, string];
        };
        presets: string;
        footer: {
            confirm: string;
            cancel: string;
        };
        selectDate: string;
        selectTime: string;
        year: string;
        month: string;
        day: string;
        monthText: string;
        months: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        fullMonths: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            11: string;
            12: string;
        };
        weeks: {
            Mon: string;
            Tue: string;
            Wed: string;
            Thu: string;
            Fri: string;
            Sat: string;
            Sun: string;
        };
        localeFormatToken: {
            FORMAT_SWITCH_DATE: string;
        };
    }> | {
        type: PropType<{
            placeholder: {
                date: string;
                dateTime: string;
                dateRange: [string, string];
                dateTimeRange: [string, string];
                monthRange: [string, string];
            };
            presets: string;
            footer: {
                confirm: string;
                cancel: string;
            };
            selectDate: string;
            selectTime: string;
            year: string;
            month: string;
            day: string;
            monthText: string;
            months: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            fullMonths: {
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                11: string;
                12: string;
            };
            weeks: {
                Mon: string;
                Tue: string;
                Wed: string;
                Thu: string;
                Fri: string;
                Sat: string;
                Sun: string;
            };
            localeFormatToken: {
                FORMAT_SWITCH_DATE: string;
            };
        }>;
        default?: any;
        required?: false;
    };
    currentYear: {
        type: PropType<{
            left: number;
            right: number;
        }>;
        default?: any;
        required: true;
    };
    currentMonth: {
        type: PropType<{
            left: number;
            right: number;
        }>;
        default?: any;
        required: true;
    };
    onSelect: PropType<(obj: {
        currentMonth: {
            left: number;
            right: number;
        };
        currentYear: {
            left: number;
            right: number;
        };
    }) => void> | {
        type: PropType<(obj: {
            currentMonth: {
                left: number;
                right: number;
            };
            currentYear: {
                left: number;
                right: number;
            };
        }) => void>;
        default?: any;
        required?: false;
    };
    onBackToMain: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    localeCode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    monthCycled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    yearCycled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    noBackBtn: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabledDate: PropType<(date: Date) => boolean> | {
        type: PropType<(date: Date) => boolean>;
        default?: any;
        required?: false;
    };
    density: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    presetPosition: PropType<"bottom" | "left" | "right" | "top"> | {
        type: PropType<"bottom" | "left" | "right" | "top">;
        default?: any;
        required?: false;
    };
    renderQuickControls: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    renderDateInput: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    type: PropType<"date" | "month" | "dateTime" | "year" | "dateRange" | "dateTimeRange" | "monthRange"> | {
        type: PropType<"date" | "month" | "dateTime" | "year" | "dateRange" | "dateTimeRange" | "monthRange">;
        default?: any;
        required?: false;
    };
    yearAndMonthOpts: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    startYear: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    endYear: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default yearAndMonth;
