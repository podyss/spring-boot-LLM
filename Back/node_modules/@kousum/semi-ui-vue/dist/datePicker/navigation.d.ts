import { VNode, PropType } from 'vue';
import { PanelType } from '@douyinfe/semi-foundation/lib/es/datePicker/monthsGridFoundation';
import { CombineProps } from '../interface';
interface NavigationProps {
    forwardRef?: any;
    monthText?: string;
    density?: string;
    onMonthClick?: (e: MouseEvent) => void;
    onNextMonth?: () => void;
    onPrevMonth?: () => void;
    onNextYear?: () => void;
    onPrevYear?: () => void;
    navPrev?: VNode;
    navNext?: VNode;
    shouldBimonthSwitch?: boolean;
    panelType?: PanelType;
}
export declare const vuePropsType: CombineProps<NavigationProps>;
declare const navigation: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    monthText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    density: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onMonthClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onNextMonth: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onPrevMonth: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onNextYear: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onPrevYear: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    navPrev: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    navNext: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    shouldBimonthSwitch: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    panelType: PropType<PanelType> | {
        type: PropType<PanelType>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    monthText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    density: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onMonthClick: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onNextMonth: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onPrevMonth: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onNextYear: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    onPrevYear: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    navPrev: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    navNext: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    shouldBimonthSwitch: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    panelType: PropType<PanelType> | {
        type: PropType<PanelType>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default navigation;
