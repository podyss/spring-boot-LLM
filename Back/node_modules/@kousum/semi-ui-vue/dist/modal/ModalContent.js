import { defineComponent as V, useSlots as _, useAttrs as H, reactive as R, ref as J, onMounted as Q, onBeforeUnmount as W, createVNode as i, mergeProps as L, isVNode as X } from "vue";
import * as o from "../PropTypes";
import { vuePropsMake as Y } from "../PropTypes";
import u from "classnames";
import { cssClasses as n } from '@douyinfe/semi-foundation/lib/es/modal/constants';
import Z from "../iconButton";
import { Title as ee } from "../typography";
import { useBaseComponent as te } from "../_base/baseComponent";
import oe from '@douyinfe/semi-foundation/lib/es/modal/modalContentFoundation';
import { noop as v, get as ne, isFunction as le, isNumber as w } from "lodash";
import { IconClose as se } from "@kousum/semi-icons-vue";
import b from '@douyinfe/semi-foundation/lib/es/utils/FocusHandle';
import { useConfigContext as ie } from "../configProvider/context/Consumer";
import ae from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
function E(e) {
  return typeof e == "function" || Object.prototype.toString.call(e) === "[object Object]" && !X(e);
}
let ce = 0;
const re = {
  onClose: {
    type: Function,
    required: !0
  },
  // close: PropTypes.func as PropType<ModalContentReactProps['close']>,
  getContainerContext: {
    type: o.func,
    required: !0
  },
  contentClassName: o.string,
  maskClassName: o.string,
  onAnimationEnd: o.func,
  preventScroll: o.bool,
  isFullScreen: o.bool,
  maskExtraProps: Object,
  contentExtraProps: Object,
  title: o.any,
  afterClose: Function,
  bodyStyle: Object,
  cancelButtonProps: o.any,
  cancelText: o.string,
  centered: o.bool,
  className: o.string,
  closable: o.bool,
  confirmLoading: o.bool,
  cancelLoading: o.bool,
  content: {
    type: o.any,
    default: void 0
  },
  footer: {
    type: o.any,
    default: void 0
  },
  hasCancel: o.bool,
  header: {
    type: o.any,
    default: void 0
  },
  height: [o.bool, o.string],
  mask: o.bool,
  maskClosable: o.bool,
  maskStyle: Object,
  maskFixed: o.bool,
  motion: o.any,
  okButtonProps: o.any,
  okText: String,
  okType: String,
  onCancel: Function,
  onOk: Function,
  style: Object,
  visible: o.bool,
  width: [String, Number],
  zIndex: Number,
  icon: o.any,
  getPopupContainer: Function,
  closeIcon: o.any,
  closeOnEsc: o.bool,
  size: String,
  lazyRender: o.bool,
  keepDOM: o.bool,
  direction: o.any,
  fullScreen: o.bool,
  modalContentClass: String,
  footerFill: Boolean
}, de = {
  close: v,
  onClose: v,
  getContainerContext: v,
  contentClassName: "",
  maskClassName: ""
}, ue = Y(re, de), Le = /* @__PURE__ */ V({
  props: {
    ...ue
  },
  name: "ModalContent",
  setup(e, {}) {
    const C = _(), M = H();
    let O, {
      context: $
    } = ie(), d;
    const m = R({
      dialogMouseDown: !1,
      prevFocusElement: b.getActiveElement()
    });
    let x = `dialog-${ce++}`;
    const c = J(), {
      adapter: G
    } = te(e, m);
    function p() {
      return {
        ...G(),
        notifyClose: (t) => {
          e.onClose(t);
        },
        notifyDialogMouseDown: () => {
          m.dialogMouseDown = !0;
        },
        notifyDialogMouseUp: () => {
          m.dialogMouseDown && (O = setTimeout(() => {
            m.dialogMouseDown = !1;
          }, 0));
        },
        addKeyDownEventListener: () => {
          e.closeOnEsc && document.addEventListener("keydown", a.handleKeyDown.bind(a));
        },
        removeKeyDownEventListener: () => {
          e.closeOnEsc && document.removeEventListener("keydown", a.handleKeyDown.bind(a));
        },
        getMouseState: () => m.dialogMouseDown,
        modalDialogFocus: () => {
          const {
            preventScroll: t
          } = e;
          let l;
          if (c.value) {
            const s = b.getActiveElement();
            l = c.value.contains(s), d == null || d.destroy(), d = new b(c.value, {
              preventScroll: t
            });
          }
          l || c == null || c.value.focus({
            preventScroll: t
          });
        },
        modalDialogBlur: () => {
          c.value.blur(), d == null || d.destroy();
        },
        prevFocusElementReFocus: () => {
          const {
            prevFocusElement: t
          } = m, {
            preventScroll: l
          } = e, s = ne(t, "focus");
          le(s) && t.focus({
            preventScroll: l
          });
        }
      };
    }
    const D = p(), a = new oe(D);
    Q(() => {
      var l;
      a.handleKeyDownEventListenerMount(), a.modalDialogFocus();
      const t = b.getFocusableElements(c.value);
      c.value.contains(document.activeElement) || (l = t[0]) == null || l.focus();
    }), W(() => {
      clearTimeout(O), a.destroy();
    });
    const F = () => {
      a.handleDialogMouseDown();
    }, S = () => {
      a.handleMaskMouseUp();
    }, P = (t) => {
      a.handleMaskClick(t);
    }, N = (t) => {
      a.close(t);
    }, j = () => {
      const {
        mask: t,
        maskClassName: l
      } = e;
      if (t) {
        const s = u(`${n.DIALOG}-mask`, {
          // [`${cssClasses.DIALOG}-mask-hidden`]: !props.visible,
        });
        return i("div", {
          key: "mask",
          class: u(s, l),
          style: e.maskStyle
        }, null);
      }
      return null;
    }, k = () => {
      const {
        closable: t,
        closeIcon: l
      } = e;
      let s;
      if (t) {
        const r = (typeof l == "function" ? l() : l) || i(se, {
          "x-semi-prop": "closeIcon"
        }, null);
        s = i(Z, {
          "aria-label": "close",
          class: `${n.DIALOG}-close`,
          key: "close-btn",
          onClick: N,
          type: "tertiary",
          icon: r,
          theme: "borderless",
          size: "small"
        }, null);
      }
      return s;
    }, I = () => {
      const {
        icon: t
      } = e;
      return t ? i("span", {
        class: `${n.DIALOG}-icon-wrapper`,
        "x-semi-prop": "icon"
      }, [typeof t == "function" ? t() : t]) : null;
    }, B = () => {
      if ("header" in D.getProps())
        return typeof e.header == "function" ? e.header() : e.header;
      const {
        title: t
      } = e, l = k(), s = I();
      return t == null ? null : i("div", {
        class: `${n.DIALOG}-header`
      }, [s, i(ee, {
        heading: 5,
        class: `${n.DIALOG}-title`,
        id: `${n.DIALOG}-title`,
        "x-semi-prop": "title"
      }, E(t) ? t : {
        default: () => [t]
      }), l]);
    }, T = () => {
      const {
        bodyStyle: t,
        title: l
      } = e, s = u(`${n.DIALOG}-body`, {
        [`${n.DIALOG}-withIcon`]: e.icon
      }), r = k(), f = I();
      return l != null || "header" in D.getProps() ? i("div", {
        class: s,
        id: `${n.DIALOG}-body`,
        style: t,
        "x-semi-prop": "children"
      }, {
        default: C.default
      }) : i("div", {
        class: `${n.DIALOG}-body-wrapper`
      }, [f, i("div", {
        class: s,
        style: t,
        "x-semi-prop": "children"
      }, {
        default: C.default
      }), r]);
    }, z = () => {
      const t = {}, l = u(`${n.DIALOG}`, {
        [`${n.DIALOG}-centered`]: e.centered,
        [`${n.DIALOG}-${e.size}`]: e.size
      });
      e.width && (t.width = w(e.width) ? e.width + "px" : e.width), e.height && (t.height = w(e.height) ? e.height + "px" : e.height), e.isFullScreen && (t.width = "100%", t.height = "100%", t.margin = "unset");
      const s = T(), r = B(), f = e.footer ? i("div", {
        class: `${n.DIALOG}-footer`,
        "x-semi-prop": "footer"
      }, [e.footer]) : null;
      return (
        // eslint-disable-next-line jsx-a11y/no-static-element-interactions
        i("div", {
          key: "dialog-element",
          class: l,
          onMousedown: F,
          style: {
            ...e.style,
            ...t
          },
          id: x
        }, [i("div", {
          role: "dialog",
          ref: c,
          "aria-modal": "true",
          "aria-labelledby": `${n.DIALOG}-title`,
          "aria-describedby": `${n.DIALOG}-body`,
          onAnimationend: e.onAnimationEnd,
          class: u([`${n.DIALOG}-content`, e.contentClassName, {
            [`${n.DIALOG}-content-fullScreen`]: e.isFullScreen
          }])
        }, [r, s, f])])
      );
    };
    return () => {
      var A;
      const {
        maskClosable: t,
        className: l,
        getPopupContainer: s,
        maskFixed: r,
        getContainerContext: f,
        ...h
      } = e, {
        direction: K
      } = $.value, U = u(l, {
        [`${n.DIALOG}-popup`]: s && s() !== ((A = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : A.body) && !r,
        [`${n.DIALOG}-fixed`]: r,
        [`${n.DIALOG}-rtl`]: K === "rtl"
      }), y = f(), q = ae({
        ...h,
        ...M
      }), g = i("div", L({
        class: U
      }, q), [j(), i("div", L({
        role: "none",
        class: u({
          [`${n.DIALOG}-wrap`]: !0,
          [`${n.DIALOG}-wrap-center`]: e.centered
        }),
        onClick: t ? P : null,
        onMouseup: t ? S : null
      }, e.contentExtraProps), [z()])]);
      return y && y.Provider ? i(y.Provider, {
        value: y.value
      }, E(g) ? g : {
        default: () => [g]
      }) : g;
    };
  }
});
export {
  Le as default,
  ue as vuePropsType
};
//# sourceMappingURL=ModalContent.js.map
