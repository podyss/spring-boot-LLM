import { ModalProps, ModalState } from '@douyinfe/semi-foundation/lib/es/modal/modalFoundation';
import '@douyinfe/semi-foundation/lib/es/modal/modal.css';
import useModal from './useModal';
import { ButtonProps } from '../button/Button';
import { CSSProperties, PropType, VNode } from 'vue';
import { CombineProps } from '../interface';
export declare let destroyFns: any[];
export type ConfirmType = 'leftTop' | 'leftBottom' | 'rightTop' | 'rightBottom';
export type Directions = 'ltr' | 'rtl';
export type { ModalState };
export interface ModalReactProps extends ModalProps {
    getContainerContext?: () => {
        Provider: VNode;
    };
    cancelButtonProps?: ButtonProps;
    okButtonProps?: ButtonProps;
    bodyStyle?: CSSProperties;
    maskStyle?: CSSProperties;
    style?: CSSProperties;
    icon?: VNode | string | (() => VNode | string);
    closeIcon?: VNode | string | (() => VNode | string);
    title?: VNode | string | (() => VNode | string);
    content?: VNode | string | (() => VNode | string);
    footer?: VNode | string | null | (() => VNode | string);
    header?: VNode | string | (() => VNode | string);
    onCancel?: (e: MouseEvent) => void | Promise<any>;
    onOk?: (e: MouseEvent) => void | Promise<any>;
    type?: string;
}
export declare const vuePropsType: CombineProps<ModalReactProps>;
declare const Modal: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    getContainerContext: PropType<() => {
        Provider: VNode;
    }> | {
        type: PropType<() => {
            Provider: VNode;
        }>;
        default?: any;
        required?: false;
    };
    cancelButtonProps: PropType<ButtonProps> | {
        type: PropType<ButtonProps>;
        default?: any;
        required?: false;
    };
    okButtonProps: PropType<ButtonProps> | {
        type: PropType<ButtonProps>;
        default?: any;
        required?: false;
    };
    bodyStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    maskStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    icon: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    title: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    content: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    footer: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    header: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    onCancel: PropType<(e: MouseEvent) => void | Promise<any>> | {
        type: PropType<(e: MouseEvent) => void | Promise<any>>;
        default?: any;
        required?: false;
    };
    onOk: PropType<(e: MouseEvent) => void | Promise<any>> | {
        type: PropType<(e: MouseEvent) => void | Promise<any>>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    cancelText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    centered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    modalContentClass: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    confirmLoading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    cancelLoading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hasCancel: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    mask: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    okText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    okType: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size>;
        default?: any;
        required?: false;
    };
    lazyRender: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    direction: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    fullScreen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footerFill: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    cancel: (e: MouseEvent) => void | Promise<any>;
    ok: (e: MouseEvent) => void | Promise<any>;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    getContainerContext: PropType<() => {
        Provider: VNode;
    }> | {
        type: PropType<() => {
            Provider: VNode;
        }>;
        default?: any;
        required?: false;
    };
    cancelButtonProps: PropType<ButtonProps> | {
        type: PropType<ButtonProps>;
        default?: any;
        required?: false;
    };
    okButtonProps: PropType<ButtonProps> | {
        type: PropType<ButtonProps>;
        default?: any;
        required?: false;
    };
    bodyStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    maskStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    icon: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    title: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    content: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    footer: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    header: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => VNode | string)> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => VNode | string)>;
        default?: any;
        required?: false;
    };
    onCancel: PropType<(e: MouseEvent) => void | Promise<any>> | {
        type: PropType<(e: MouseEvent) => void | Promise<any>>;
        default?: any;
        required?: false;
    };
    onOk: PropType<(e: MouseEvent) => void | Promise<any>> | {
        type: PropType<(e: MouseEvent) => void | Promise<any>>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    cancelText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    centered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    modalContentClass: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    confirmLoading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    cancelLoading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hasCancel: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    mask: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    okText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    okType: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size>;
        default?: any;
        required?: false;
    };
    lazyRender: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    direction: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    fullScreen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footerFill: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{
    onCancel?: (e: MouseEvent) => any;
    onOk?: (e: MouseEvent) => any;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export declare class ModalClass {
    static useModal: typeof useModal;
    static info: (props: ModalReactProps) => {
        destroy: () => void;
        update: (newConfig: import("./confirm").ConfirmProps) => void;
    };
    static success: (props: ModalReactProps) => {
        destroy: () => void;
        update: (newConfig: import("./confirm").ConfirmProps) => void;
    };
    static error: (props: ModalReactProps) => {
        destroy: () => void;
        update: (newConfig: import("./confirm").ConfirmProps) => void;
    };
    static warning: (props: ModalReactProps) => {
        destroy: () => void;
        update: (newConfig: import("./confirm").ConfirmProps) => void;
    };
    static confirm: (props: ModalReactProps) => {
        destroy: () => void;
        update: (newConfig: import("./confirm").ConfirmProps) => void;
    };
    static destroyAll: () => void;
}
export type ModalType = typeof Modal & {
    useModal: typeof ModalClass.useModal;
    info: typeof ModalClass.info;
    success: typeof ModalClass.success;
    error: typeof ModalClass.error;
    warning: typeof ModalClass.warning;
    confirm: typeof ModalClass.confirm;
    destroyAll: typeof ModalClass.destroyAll;
};
export default Modal;
