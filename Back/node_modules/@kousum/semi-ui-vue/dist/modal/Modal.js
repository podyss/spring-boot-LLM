var te = Object.defineProperty;
var ne = (t, l, a) => l in t ? te(t, l, { enumerable: !0, configurable: !0, writable: !0, value: a }) : t[l] = a;
var u = (t, l, a) => ne(t, typeof l != "symbol" ? l + "" : l, a);
import { defineComponent as le, useSlots as ie, reactive as re, ref as ae, watch as j, onMounted as se, onUnmounted as ce, nextTick as de, createVNode as m, mergeProps as N } from "vue";
import { cssClasses as g } from '@douyinfe/semi-foundation/lib/es/modal/constants';
import E from "../button";
import ue from '@douyinfe/semi-foundation/lib/es/modal/modalFoundation';
import me from "./ModalContent";
import fe from "../_portal";
import ye from "../locale/localeConsumer";
import z from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as be } from "../PropTypes";
import { noop as S } from "lodash";
import '@douyinfe/semi-foundation/lib/es/modal/modal.css';
import { useBaseComponent as ge } from "../_base/baseComponent";
import h, { withInfo as pe, withSuccess as Ce, withError as he, withWarning as Se, withConfirm as ke } from "./confirm";
import Pe from "./useModal";
import R from "../_cssAnimation";
import { getScrollbarWidth as we } from "../_utils";
let T = [];
const Oe = {
  mask: e.bool,
  closable: e.bool,
  centered: e.bool,
  visible: e.bool,
  width: e.oneOfType([e.string, e.number]),
  height: e.oneOfType([e.string, e.number]),
  confirmLoading: e.bool,
  cancelLoading: e.bool,
  okText: e.string,
  okType: e.string,
  cancelText: e.string,
  maskClosable: e.bool,
  onCancel: e.func,
  onOk: e.func,
  afterClose: e.func,
  okButtonProps: e.object,
  cancelButtonProps: e.object,
  style: e.object,
  className: e.string,
  maskStyle: e.object,
  bodyStyle: e.object,
  zIndex: e.number,
  title: e.any,
  icon: e.node,
  header: [...e.any, e.func],
  footer: [...e.any, e.func],
  hasCancel: e.bool,
  motion: e.oneOfType([e.bool, e.func, e.object]),
  getPopupContainer: e.func,
  getContainerContext: e.func,
  maskFixed: e.bool,
  closeIcon: e.node,
  closeOnEsc: e.bool,
  size: String,
  keepDOM: e.bool,
  lazyRender: e.bool,
  direction: String,
  fullScreen: e.bool,
  footerFill: e.bool,
  content: [Object, String],
  type: String,
  modalContentClass: String,
  preventScroll: Boolean
}, xe = {
  zIndex: 1e3,
  motion: !0,
  mask: !0,
  centered: !1,
  closable: !0,
  visible: !1,
  okType: "primary",
  maskClosable: !0,
  hasCancel: !0,
  onCancel: S,
  onOk: S,
  afterClose: S,
  maskFixed: !1,
  closeOnEsc: !0,
  size: "small",
  keepDOM: !1,
  lazyRender: !0,
  fullScreen: !1,
  getContainerContext: S
}, ve = be(Oe, xe), Fe = /* @__PURE__ */ le({
  props: {
    ...ve
  },
  name: "Modal",
  emits: {
    cancel: (t) => {
    },
    ok: (t) => {
    }
  },
  setup(t, {
    expose: l
  }) {
    const a = ie(), i = re({
      displayNone: !t.visible,
      isFullScreen: t.fullScreen
    }), k = ae();
    let p = null, B = 0, x = "100%", D;
    const {
      adapter: G
    } = ge(t, i);
    function W() {
      return {
        ...G(),
        // getProps: () => props,
        disabledBodyScroll: () => {
          var n;
          const {
            getPopupContainer: o
          } = t;
          p = document.body.style.overflow || "", (!o || o() === ((n = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : n.body)) && p !== "hidden" && (document.body.style.overflow = "hidden", document.body.style.width = `calc(${x || "100%"} - ${B}px)`);
        },
        enabledBodyScroll: () => {
          var n;
          const {
            getPopupContainer: o
          } = t;
          (!o || o() === ((n = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : n.body)) && p !== null && p !== "hidden" && (document.body.style.overflow = p, document.body.style.width = x);
        },
        notifyCancel: (o) => t.onCancel(o),
        notifyOk: (o) => t.onOk(o),
        notifyClose: () => {
          t.afterClose();
        },
        toggleDisplayNone: (o, n) => {
          o !== i.displayNone && (i.displayNone = o, de(() => {
            (n || S)();
          }));
        },
        notifyFullScreen: (o) => {
          o !== i.isFullScreen && (i.isFullScreen = o);
        }
      };
    }
    const v = W(), d = new ue(v);
    function _(o, n) {
      const s = {};
      return o.fullScreen !== n.isFullScreen && (s.isFullScreen = o.fullScreen), o.visible && n.displayNone && (s.displayNone = !1), s;
    }
    j(() => t.fullScreen, (o) => {
      const n = _({
        ...t
      }, {
        ...i
      });
      n && Object.keys(n).forEach((s) => {
        i[s] = n[s];
      });
    }), se(() => {
      B = we(), x = document.body.style.width, t.visible && d.beforeShow();
    }), j(() => t.visible, (o, n) => {
      !n && o && d.beforeShow(), n && !o && d.afterHide();
    }), ce(() => {
      t.visible ? d.destroy() : d.enabledBodyScroll();
    });
    const A = (o) => {
      d.handleCancel(o);
    }, H = (o) => {
      d.handleOk(o);
    }, L = () => {
      const {
        visible: o
      } = t;
      d.toggleDisplayNone(!o);
    }, K = () => {
      const {
        okText: o,
        okType: n,
        cancelText: s,
        confirmLoading: P,
        cancelLoading: w,
        hasCancel: F,
        footerFill: f
      } = t, b = (c) => {
        var C;
        return F ? m(E, N({
          "aria-label": "cancel",
          onClick: A,
          loading: w === void 0 ? i.onCancelReturnPromiseStatus === "pending" : w,
          type: "tertiary",
          block: f,
          autoFocus: !0
        }, t.cancelButtonProps, {
          style: {
            ...f ? {
              marginLeft: "unset"
            } : {},
            ...((C = t.cancelButtonProps) == null ? void 0 : C.style) || {}
          },
          "x-semi-children-alias": "cancelText"
        }), {
          default: () => [s || c.cancel]
        }) : null;
      };
      return m(ye, {
        componentName: "Modal"
      }, {
        default: (c, C) => {
          var O;
          return m("div", {
            class: z({
              [`${g.DIALOG}-footerfill`]: f
            })
          }, [(O = a.extraFooter) == null ? void 0 : O.call(a), b(c), m(E, N({
            "aria-label": "confirm",
            type: n,
            theme: "solid",
            block: f,
            loading: P === void 0 ? i.onOKReturnPromiseStatus === "pending" : P,
            onClick: H
          }, t.okButtonProps, {
            "x-semi-children-alias": "okText"
          }), {
            default: () => [o || c.confirm]
          })]);
        }
      });
    }, U = () => {
      var $;
      let {
        footer: o,
        className: n,
        motion: s,
        maskStyle: P,
        keepDOM: w,
        style: F,
        zIndex: f,
        getPopupContainer: b,
        visible: c,
        modalContentClass: C,
        //@ts-ignore
        getContainerContext: O,
        ...q
      } = v.getProps(), J = F;
      const Q = P, V = "footer" in v.getProps() ? typeof o == "function" ? o() : o : K();
      let I = {
        zIndex: f
      };
      b && b() !== (($ = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : $.body) && (I = {
        zIndex: f,
        position: "static"
      });
      const X = z(n, {
        [`${g.DIALOG}-displayNone`]: w && i.displayNone
      }), M = t.visible || t.keepDOM && (!t.lazyRender || D) || t.motion && !i.displayNone;
      return M && (D = !0), m(R, {
        motion: t.motion,
        animationState: c ? "enter" : "leave",
        startClassName: c ? `${g.DIALOG}-content-animate-show` : `${g.DIALOG}-content-animate-hide`,
        onAnimationEnd: () => {
          L();
        },
        children: ({
          animationClassName: Y,
          animationEventsNeedBind: Z
        }) => m(R, {
          motion: t.motion,
          animationState: c ? "enter" : "leave",
          startClassName: c ? `${g.DIALOG}-mask-animate-show` : `${g.DIALOG}-mask-animate-hide`,
          onAnimationEnd: () => {
            L();
          },
          children: ({
            animationClassName: ee,
            animationEventsNeedBind: oe
          }) => M ? m(fe, {
            style: I,
            getPopupContainer: b
          }, {
            default: () => [m(me, N(q, {
              getContainerContext: O,
              contentExtraProps: Z,
              maskExtraProps: oe,
              isFullScreen: i.isFullScreen,
              contentClassName: `${Y} ${C}`,
              maskClassName: ee,
              className: X,
              getPopupContainer: b,
              maskStyle: Q,
              style: J,
              ref: k,
              footer: V,
              onClose: A
            }), {
              default: a.default
            })]
          }) : null
        }, null)
      }, null);
    };
    return () => U();
  }
});
class r {
}
u(r, "useModal", Pe), u(r, "info", function(l) {
  return h(pe(l));
}), u(r, "success", function(l) {
  return h(Ce(l));
}), u(r, "error", function(l) {
  return h(he(l));
}), u(r, "warning", function(l) {
  return h(Se(l));
}), u(r, "confirm", function(l) {
  return h(ke(l));
}), u(r, "destroyAll", function() {
  for (let a = 0, i = T.length; a < i; a++) {
    const k = T[a];
    k && k();
  }
  T = [];
});
const y = Fe;
y.useModal = r.useModal;
y.info = r.info;
y.success = r.success;
y.error = r.error;
y.warning = r.warning;
y.confirm = r.confirm;
y.destroyAll = r.destroyAll;
export {
  r as ModalClass,
  Fe as default,
  T as destroyFns,
  ve as vuePropsType
};
//# sourceMappingURL=Modal.js.map
