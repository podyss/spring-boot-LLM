import '@douyinfe/semi-foundation/lib/es/modal/modal.css';
import { ConfirmProps } from './confirm';
import { PropType } from 'vue';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<ConfirmProps>;
declare const ConfirmModal: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<"error" | "warning" | "success" | "confirm" | "info">;
        default?: any;
        required: true;
    };
    getContainerContext: PropType<() => {
        Provider: import("vue").VNode;
    }> | {
        type: PropType<() => {
            Provider: import("vue").VNode;
        }>;
        default?: any;
        required?: false;
    };
    cancelButtonProps: PropType<import("../button/Button").ButtonProps> | {
        type: PropType<import("../button/Button").ButtonProps>;
        default?: any;
        required?: false;
    };
    okButtonProps: PropType<import("../button/Button").ButtonProps> | {
        type: PropType<import("../button/Button").ButtonProps>;
        default?: any;
        required?: false;
    };
    bodyStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    maskStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    icon: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    title: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    content: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    footer: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    header: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    onCancel: PropType<(e: MouseEvent) => void | Promise<any>> | {
        type: PropType<(e: MouseEvent) => void | Promise<any>>;
        default?: any;
        required?: false;
    };
    onOk: PropType<(e: MouseEvent) => void | Promise<any>> | {
        type: PropType<(e: MouseEvent) => void | Promise<any>>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    cancelText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    centered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    modalContentClass: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    confirmLoading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    cancelLoading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hasCancel: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    mask: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    okText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    okType: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size>;
        default?: any;
        required?: false;
    };
    lazyRender: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    direction: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    fullScreen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footerFill: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<"error" | "warning" | "success" | "confirm" | "info">;
        default?: any;
        required: true;
    };
    getContainerContext: PropType<() => {
        Provider: import("vue").VNode;
    }> | {
        type: PropType<() => {
            Provider: import("vue").VNode;
        }>;
        default?: any;
        required?: false;
    };
    cancelButtonProps: PropType<import("../button/Button").ButtonProps> | {
        type: PropType<import("../button/Button").ButtonProps>;
        default?: any;
        required?: false;
    };
    okButtonProps: PropType<import("../button/Button").ButtonProps> | {
        type: PropType<import("../button/Button").ButtonProps>;
        default?: any;
        required?: false;
    };
    bodyStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    maskStyle: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    icon: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    title: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    content: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    footer: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    header: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | (() => import("vue").VNode | string)> | {
        type: PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | (() => import("vue").VNode | string)>;
        default?: any;
        required?: false;
    };
    onCancel: PropType<(e: MouseEvent) => void | Promise<any>> | {
        type: PropType<(e: MouseEvent) => void | Promise<any>>;
        default?: any;
        required?: false;
    };
    onOk: PropType<(e: MouseEvent) => void | Promise<any>> | {
        type: PropType<(e: MouseEvent) => void | Promise<any>>;
        default?: any;
        required?: false;
    };
    afterClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    cancelText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    centered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    modalContentClass: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    confirmLoading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    cancelLoading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hasCancel: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    height: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    mask: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskClosable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    maskFixed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    okText: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    okType: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    width: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    closeOnEsc: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size>;
        default?: any;
        required?: false;
    };
    lazyRender: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    keepDOM: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    direction: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    fullScreen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    footerFill: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ConfirmModal;
