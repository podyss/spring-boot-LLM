import { ConfirmProps } from '../confirm';
import { Motion } from '../../_base/base';
import { PropType } from 'vue';
import { CombineProps } from '../../interface';
interface HookModalProps {
    afterClose: (...args: any[]) => void;
    config: ConfirmProps;
    motion?: Motion;
}
export interface HookModalRef {
    destroy: () => void;
    update: (newConfig: ConfirmProps) => void;
}
export declare const vuePropsType: CombineProps<HookModalProps>;
declare const HookModal: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    afterClose: {
        type: PropType<(...args: any[]) => void>;
        default?: any;
        required: true;
    };
    config: {
        type: PropType<ConfirmProps>;
        default?: any;
        required: true;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    afterClose: {
        type: PropType<(...args: any[]) => void>;
        default?: any;
        required: true;
    };
    config: {
        type: PropType<ConfirmProps>;
        default?: any;
        required: true;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default HookModal;
