import { defineComponent as S, createVNode as p, mergeProps as d, createTextVNode as N, isVNode as P } from "vue";
import b from "classnames";
import { cssClasses as A, strings as y } from '@douyinfe/semi-foundation/lib/es/tag/constants';
import T from "./index";
import x from "../popover";
import { omit as z } from "lodash";
function _(a) {
  return typeof a == "function" || Object.prototype.toString.call(a) === "[object Object]" && !P(a);
}
const i = A.PREFIX, j = y.TAG_SIZE;
y.AVATAR_SHAPE;
const w = {
  maxTagCount: Number,
  restCount: Number,
  tagList: Array,
  showPopover: Boolean,
  popoverProps: Object,
  mode: String,
  // TODO: This API is not in the check file
  style: {
    type: [Object, String],
    default: {}
  },
  className: {
    type: String,
    default: ""
  },
  size: {
    type: String,
    default: j[0]
  },
  avatarShape: {
    type: String,
    default: "square"
  },
  onTagClose: Function,
  onPlusNMouseEnter: Function
}, G = /* @__PURE__ */ S({
  props: {
    ...w
  },
  name: "TagGroup",
  setup(a, {
    slots: E
  }) {
    function h(t, r) {
      const {
        size: l,
        showPopover: n,
        popoverProps: s,
        onPlusNMouseEnter: u
      } = a;
      let e = p(T, {
        closable: !1,
        size: l,
        color: "grey",
        style: {
          backgroundColor: "transparent"
        },
        key: "_+n",
        onMouseenter: u
      }, {
        default: () => [N("+"), t]
      });
      if (n) {
        const c = /* @__PURE__ */ function() {
          return e;
        }();
        e = p(x, d({
          showArrow: !0,
          content: r,
          trigger: "hover",
          position: "top",
          autoAdjustOverflow: !0,
          className: `${i}-rest-group-popover`
        }, s, {
          key: "_+n_Popover"
        }), _(e) ? e : {
          default: () => [c]
        });
      }
      return e;
    }
    function v(t) {
      const {
        maxTagCount: r,
        tagList: l,
        restCount: n
      } = a, s = n || l.length - r;
      let u = t;
      const e = t.slice(0, r), c = t.slice(r);
      let o = null;
      return s > 0 && (o = h(s, c), e.push(o), u = e), u;
    }
    function C() {
      const {
        tagList: t,
        size: r,
        mode: l,
        avatarShape: n,
        onTagClose: s
      } = a;
      return t.map((e, c) => {
        if (l === "custom")
          return e;
        const o = {
          ...e
        };
        return e.size || (e.size = r), e.avatarShape || (e.avatarShape = n), o.tagKey || (typeof o.children == "string" || typeof o.children == "number" ? o.tagKey = o.children : o.tagKey = Math.random()), p(T, d(z(o, "children"), {
          key: o.tagKey,
          onClose: (g, f, m) => {
            o.onClose && o.onClose(g, f, m), s && s(g, f, m);
          }
        }), {
          default: () => e.children
        });
      });
    }
    return () => {
      const {
        style: t,
        className: r,
        maxTagCount: l,
        size: n
      } = a, s = b({
        [`${i}-group`]: !0,
        [`${i}-group-max`]: l,
        [`${i}-group-small`]: n === "small",
        [`${i}-group-large`]: n === "large"
      }, r), u = C(), e = typeof l > "u" ? u : v(u);
      return p("div", {
        style: t,
        class: s
      }, [e]);
    };
  }
});
export {
  G as default,
  w as vuePropsType
};
//# sourceMappingURL=group.js.map
