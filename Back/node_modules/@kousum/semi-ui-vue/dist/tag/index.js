import { defineComponent as M, reactive as R, watch as j, createVNode as l, mergeProps as H } from "vue";
import * as n from "../PropTypes";
import { vuePropsMake as B, symbol as L } from "../PropTypes";
import P from "classnames";
import { cssClasses as X, strings as f } from '@douyinfe/semi-foundation/lib/es/tag/constants';
import Y from "../avatar";
import { IconClose as Z } from "@kousum/semi-icons-vue";
import { handlePrevent as h } from '@douyinfe/semi-foundation/lib/es/utils/a11y';
import '@douyinfe/semi-foundation/lib/es/tag/tag.css';
import { isString as J } from "lodash";
import { useHasInProps as Q } from "../_base/baseComponent";
export * from "./interface";
const a = X.PREFIX, U = f.TAG_COLOR, W = f.TAG_SIZE, ee = f.TAG_TYPE;
f.AVATAR_SHAPE;
const ae = {
  tagKey: n.oneOfType([n.string, n.number]),
  size: String,
  color: String,
  type: String,
  closable: n.bool,
  visible: n.bool,
  onClose: n.func,
  onClick: n.func,
  style: n.object,
  className: n.string,
  avatarSrc: n.string,
  avatarShape: String,
  "aria-label": n.string,
  shape: {
    type: String,
    default: "square"
  },
  onKeydown: Function,
  tabIndex: Number,
  // use internal, when tag in taInput, we want to use left arrow and right arrow to control the tag focus, so the tabIndex need to be -1.
  onMouseenter: [Function, Array],
  prefixIcon: n.node,
  suffixIcon: n.node
}, k = {
  size: W[0],
  color: U[0],
  closable: !1,
  // visible: true,
  type: ee[0],
  onClose: () => {
  },
  onClick: () => {
  },
  onMouseenter: () => {
  },
  style: {},
  className: "",
  shape: "square",
  avatarShape: "square",
  prefixIcon: null,
  suffixIcon: null
}, ne = B(ae, k), me = /* @__PURE__ */ M({
  props: {
    ...ne
  },
  name: "Tag",
  setup(s, {
    slots: c
  }) {
    const {
      getProps: x
    } = Q(), p = R({
      visible: !0
    });
    function I(e) {
      return "visible" in e ? {
        visible: e.visible
      } : null;
    }
    j(() => s.visible, (e) => {
      const o = I({
        ...s
      });
      o && Object.keys(o).forEach((t) => {
        p[t] = o[t];
      });
    });
    function T(e) {
      "visible" in s || (p.visible = e);
    }
    function b(e, o, t) {
      const {
        onClose: r
      } = s;
      e.stopPropagation(), e.stopImmediatePropagation(), r && r(o, e, t), !e.defaultPrevented && T(!1);
    }
    function A(e) {
      var i;
      const {
        closable: o,
        onClick: t,
        onKeydown: r
      } = s;
      switch (e.key) {
        case "Backspace":
        case "Delete":
          o && b(e, (i = c.default) == null ? void 0 : i.call(c), s.tagKey), h(e);
          break;
        case "Enter":
          t(e), h(e);
          break;
        case "Escape":
          e.target.blur();
          break;
      }
      r && r(e);
    }
    function w() {
      const {
        avatarShape: e,
        avatarSrc: o
      } = s;
      return l(Y, {
        src: o,
        shape: e
      }, null);
    }
    return () => {
      const e = c.default ? c.default() : null, {
        tagKey: o,
        size: t,
        color: r,
        closable: i,
        visible: oe,
        onClose: te,
        onClick: d,
        className: E,
        type: u,
        shape: m,
        avatarSrc: v,
        avatarShape: K,
        tabIndex: g,
        prefixIcon: y,
        suffixIcon: $,
        ...N
      } = x(s), {
        visible: q
      } = p, z = d !== k.onClick || i, F = {
        role: "button",
        tabindex: g || 0,
        onKeydown: A
      }, C = {
        ...N,
        onClick: d,
        tabindex: g,
        class: P(a, {
          [`${a}-default`]: t === "default",
          [`${a}-small`]: t === "small",
          [`${a}-large`]: t === "large",
          [`${a}-square`]: m === "square",
          [`${a}-circle`]: m === "circle",
          [`${a}-${u}`]: u,
          [`${a}-${r}-${u}`]: r && u,
          [`${a}-closable`]: i,
          [`${a}-invisible`]: !q,
          [`${a}-avatar-${K}`]: v
        }, E)
      }, O = z ? {
        ...C,
        ...F
      } : C, V = i ? l("div", {
        class: `${a}-close`,
        onClick: (G) => b(G, e[0], o)
      }, [l(Z, {
        size: "small"
      }, null)]) : null, S = J(e), _ = P(`${a}-content`, `${a}-content-${S ? "ellipsis" : "center"}`), D = L();
      return l("div", H({
        "aria-label": s["aria-label"] || S ? `${i ? "Closable " : ""}Tag: ${e}` : ""
      }, O), [y ? l("div", {
        class: `${a}-prefix-icon`
      }, [y]) : null, v ? w() : null, l("div", {
        class: _,
        key: D
      }, [e]), $ ? l("div", {
        class: `${a}-suffix-icon`
      }, [$]) : null, V]);
    };
  }
});
export {
  me as default,
  ne as vuePropsType
};
//# sourceMappingURL=index.js.map
