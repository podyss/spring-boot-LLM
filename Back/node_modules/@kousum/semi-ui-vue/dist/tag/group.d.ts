import { CSSProperties, PropType } from 'vue';
import { PopoverProps } from '../popover';
import { AvatarShape } from './interface';
import { CombineProps, VueJsxNode } from '../interface';
export interface TagGroupProps {
    style?: CSSProperties;
    className?: string;
    maxTagCount?: number;
    restCount?: number;
    tagList?: any[];
    size?: 'small' | 'large';
    showPopover?: boolean;
    popoverProps?: PopoverProps;
    avatarShape?: AvatarShape;
    mode?: string;
    onTagClose?: (tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void;
    onPlusNMouseEnter?: () => void;
}
export declare const vuePropsType: CombineProps<TagGroupProps>;
declare const Group: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    maxTagCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    restCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    tagList: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "large"> | {
        type: PropType<"small" | "large">;
        default?: any;
        required?: false;
    };
    showPopover: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    popoverProps: PropType<PopoverProps> | {
        type: PropType<PopoverProps>;
        default?: any;
        required?: false;
    };
    avatarShape: PropType<AvatarShape> | {
        type: PropType<AvatarShape>;
        default?: any;
        required?: false;
    };
    mode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onTagClose: PropType<(tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void> | {
        type: PropType<(tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void>;
        default?: any;
        required?: false;
    };
    onPlusNMouseEnter: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    maxTagCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    restCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    tagList: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "large"> | {
        type: PropType<"small" | "large">;
        default?: any;
        required?: false;
    };
    showPopover: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    popoverProps: PropType<PopoverProps> | {
        type: PropType<PopoverProps>;
        default?: any;
        required?: false;
    };
    avatarShape: PropType<AvatarShape> | {
        type: PropType<AvatarShape>;
        default?: any;
        required?: false;
    };
    mode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onTagClose: PropType<(tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void> | {
        type: PropType<(tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void>;
        default?: any;
        required?: false;
    };
    onPlusNMouseEnter: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Group;
