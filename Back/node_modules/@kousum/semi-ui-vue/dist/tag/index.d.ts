import { VNode, CSSProperties, PropType } from 'vue';
import { TagProps, TagSize, TagColor, TagType, AvatarShape, TagShape } from './interface';
import '@douyinfe/semi-foundation/lib/es/tag/tag.css';
import { CombineProps, VueJsxNode } from '../interface';
export * from './interface';
export interface TagState {
    visible: boolean;
}
export declare const vuePropsType: CombineProps<TagProps>;
declare const Index: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    tagKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    size: PropType<TagSize> | {
        type: PropType<TagSize>;
        default?: any;
        required?: false;
    };
    color: PropType<TagColor> | {
        type: PropType<TagColor>;
        default?: any;
        required?: false;
    };
    type: PropType<TagType> | {
        type: PropType<TagType>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClose: PropType<(tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void> | {
        type: PropType<(tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    prefixIcon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    suffixIcon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    avatarSrc: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    avatarShape: PropType<AvatarShape> | {
        type: PropType<AvatarShape>;
        default?: any;
        required?: false;
    };
    shape: PropType<TagShape> | {
        type: PropType<TagShape>;
        default?: any;
        required?: false;
    };
    onKeydown: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    tabIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onMouseenter: PropType<() => void | (() => void)[]> | {
        type: PropType<() => void | (() => void)[]>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    tagKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    size: PropType<TagSize> | {
        type: PropType<TagSize>;
        default?: any;
        required?: false;
    };
    color: PropType<TagColor> | {
        type: PropType<TagColor>;
        default?: any;
        required?: false;
    };
    type: PropType<TagType> | {
        type: PropType<TagType>;
        default?: any;
        required?: false;
    };
    closable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    visible: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClose: PropType<(tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void> | {
        type: PropType<(tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    prefixIcon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    suffixIcon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    avatarSrc: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    avatarShape: PropType<AvatarShape> | {
        type: PropType<AvatarShape>;
        default?: any;
        required?: false;
    };
    shape: PropType<TagShape> | {
        type: PropType<TagShape>;
        default?: any;
        required?: false;
    };
    onKeydown: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    tabIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onMouseenter: PropType<() => void | (() => void)[]> | {
        type: PropType<() => void | (() => void)[]>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Index;
