{"version":3,"file":"group.js","sources":["../../src/components/tag/group.tsx"],"sourcesContent":["import { defineComponent, ref, h, Fragment, CSSProperties, VNode, ComponentObjectPropsOptions, PropType } from 'vue';\nimport classNames from 'classnames';\nimport { cssClasses, strings } from '@douyinfe/semi-foundation/tag/constants';\nimport Tag from './index';\nimport Popover, { PopoverProps } from '../popover';\nimport { AvatarShape, TagProps } from './interface';\nimport { CombineProps, VueJsxNode, VueJsxNodeSingle } from '../interface';\nimport { omit } from 'lodash';\n\nconst prefixCls = cssClasses.PREFIX;\nconst tagSize = strings.TAG_SIZE;\nconst avatarShapeSet = strings.AVATAR_SHAPE;\n\nexport interface TagGroupProps {\n  style?: CSSProperties;\n  className?: string;\n  maxTagCount?: number;\n  restCount?: number;\n  tagList?: any[];\n  size?: 'small' | 'large';\n  showPopover?: boolean;\n  popoverProps?: PopoverProps;\n  avatarShape?: AvatarShape;\n  mode?: string; // TODO: This API is not in the check file\n  onTagClose?: (tagChildren: VueJsxNode, event: MouseEvent, tagKey: string | number) => void;\n  onPlusNMouseEnter?: () => void;\n}\n\nexport const vuePropsType: CombineProps<TagGroupProps> = {\n  maxTagCount: Number,\n  restCount: Number,\n  tagList: Array,\n  showPopover: Boolean,\n  popoverProps: Object,\n  mode: String, // TODO: This API is not in the check file\n  style: {\n    type: [Object, String] as PropType<TagGroupProps['style']>,\n    default: {},\n  },\n  className: {\n    type: String,\n    default: '',\n  },\n  size: {\n    type: String as PropType<TagGroupProps['size']>,\n    default: tagSize[0] as any,\n  },\n  avatarShape: {\n    type: String as PropType<TagGroupProps['avatarShape']>,\n    default: 'square',\n  },\n  onTagClose: Function as PropType<TagGroupProps['onTagClose']>,\n  onPlusNMouseEnter: Function as PropType<TagGroupProps['onPlusNMouseEnter']>,\n};\nconst Group = defineComponent({\n  props: { ...vuePropsType },\n  name: 'TagGroup',\n  setup(props, { slots }) {\n    function renderNTag(n: number, restTags: (TagProps | VNode)[]) {\n      const { size, showPopover, popoverProps, onPlusNMouseEnter } = props;\n      let nTag = (\n        <Tag closable={false} size={size} color=\"grey\" style={{ backgroundColor: 'transparent' }} key=\"_+n\"\n             onMouseenter={onPlusNMouseEnter}>\n          +{n}\n        </Tag>\n      );\n\n      if (showPopover) {\n        nTag = (\n          <Popover\n            showArrow\n            content={restTags as VueJsxNode}\n            trigger=\"hover\"\n            position=\"top\"\n            autoAdjustOverflow\n            className={`${prefixCls}-rest-group-popover`}\n            {...popoverProps}\n            key=\"_+n_Popover\"\n          >\n            {nTag}\n          </Popover>\n        );\n      }\n      return nTag;\n    }\n\n    function renderMergeTags(tags: (TagProps | VNode)[]) {\n      const { maxTagCount, tagList, restCount } = props;\n      const n = restCount ? restCount : tagList.length - maxTagCount;\n      let renderTags: (TagProps | VNode)[] = tags;\n\n      const normalTags: (TagProps | VNode)[] = tags.slice(0, maxTagCount);\n      const restTags = tags.slice(maxTagCount);\n      let nTag = null;\n      if (n > 0) {\n        nTag = renderNTag(n, restTags);\n        normalTags.push(nTag);\n        renderTags = normalTags;\n      }\n      return renderTags;\n    }\n\n    function renderAllTags() {\n      const { tagList, size, mode, avatarShape, onTagClose } = props;\n      const renderTags: (TagProps | VNode)[] = tagList.map((tag, index): TagProps | VNode => {\n        if (mode === 'custom') {\n          return tag;\n        }\n        const newTag = { ...(tag as TagProps) };\n        if (!(tag as TagProps).size) {\n          (tag as TagProps).size = size;\n        }\n        if (!(tag as TagProps).avatarShape) {\n          (tag as TagProps).avatarShape = avatarShape;\n        }\n\n        if (!(newTag as TagProps).tagKey) {\n          //@ts-ignore TODO\n          if (typeof (newTag as TagProps).children === 'string' || typeof (newTag as TagProps).children === 'number') {\n            //@ts-ignore TODO\n            (newTag as TagProps).tagKey = (newTag as TagProps).children as string | number;\n          } else {\n            (newTag as TagProps).tagKey = Math.random();\n          }\n        }\n        return <Tag {...(omit(newTag, 'children') as TagProps)} key={(newTag as TagProps).tagKey} onClose={(tagChildren, e, tagKey) => {\n          if ((newTag as TagProps).onClose) {\n            (newTag as TagProps).onClose(tagChildren, e, tagKey);\n          }\n          onTagClose && onTagClose(tagChildren, e, tagKey);\n        }} >\n          {{\n            default: () => tag.children,\n          }}\n        </Tag>;\n      });\n      return renderTags;\n    }\n\n    return () => {\n      const { style, className, maxTagCount, size } = props;\n\n      const groupCls = classNames(\n        {\n          [`${prefixCls}-group`]: true,\n          [`${prefixCls}-group-max`]: maxTagCount,\n          [`${prefixCls}-group-small`]: size === 'small',\n          [`${prefixCls}-group-large`]: size === 'large',\n        },\n        className\n      );\n\n      const tags = renderAllTags();\n      const tagContents = typeof maxTagCount === 'undefined' ? tags : renderMergeTags(tags);\n\n      return (\n        <div style={style} class={groupCls}>\n          {tagContents}\n        </div>\n      );\n    };\n  },\n});\n\nexport default Group;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefixCls","cssClasses","PREFIX","tagSize","strings","TAG_SIZE","AVATAR_SHAPE","vuePropsType","maxTagCount","Number","restCount","tagList","Array","showPopover","Boolean","popoverProps","mode","String","style","type","default","className","size","avatarShape","onTagClose","Function","onPlusNMouseEnter","Group","defineComponent","props","name","setup","slots","renderNTag","n","restTags","nTag","_createVNode","Tag","backgroundColor","_createTextVNode","_nTag","Popover","_mergeProps","renderMergeTags","tags","length","renderTags","normalTags","slice","push","renderAllTags","map","tag","index","newTag","tagKey","children","Math","random","omit","onClose","tagChildren","e","groupCls","classNames","tagContents"],"mappings":"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"}