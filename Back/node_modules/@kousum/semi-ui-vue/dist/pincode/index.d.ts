import { CSSProperties, PropType } from 'vue';
import { PinCodeBaseProps, PinCodeBaseState } from '@douyinfe/semi-foundation/lib/es/pincode/foundation';
import { InputProps } from '../input';
import '@douyinfe/semi-foundation/lib/es/pincode/pincode.css';
import { CombineProps } from '../interface';
export interface PinCodeProps extends PinCodeBaseProps {
    className?: string;
    style?: CSSProperties;
    size?: InputProps['size'];
}
export interface PinCodeState extends PinCodeBaseState {
}
export declare const vuePropsType: CombineProps<PinCodeProps>;
declare const PinCode: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    size: PropType<import("../input").InputSize> | {
        type: PropType<import("../input").InputSize>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    format: PropType<"number" | RegExp | "mixed" | ((value: string) => boolean)> | {
        type: PropType<"number" | RegExp | "mixed" | ((value: string) => boolean)>;
        default?: any;
        required?: false;
    };
    onChange: {
        type: PropType<(value: string) => void>;
        default?: any;
        required: true;
    };
    defaultValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    count: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onComplete: PropType<(value: string) => void> | {
        type: PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    size: PropType<import("../input").InputSize> | {
        type: PropType<import("../input").InputSize>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    format: PropType<"number" | RegExp | "mixed" | ((value: string) => boolean)> | {
        type: PropType<"number" | RegExp | "mixed" | ((value: string) => boolean)>;
        default?: any;
        required?: false;
    };
    onChange: {
        type: PropType<(value: string) => void>;
        default?: any;
        required: true;
    };
    defaultValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    count: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onComplete: PropType<(value: string) => void> | {
        type: PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default PinCode;
