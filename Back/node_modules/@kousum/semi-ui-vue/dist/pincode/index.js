import { defineComponent as b, useSlots as y, reactive as p, watch as I, createVNode as d } from "vue";
import * as a from "../PropTypes";
import { vuePropsMake as P } from "../PropTypes";
import F from "classnames";
import w from '@douyinfe/semi-foundation/lib/es/pincode/foundation';
import { cssClasses as S } from '@douyinfe/semi-foundation/lib/es/pincode/constants';
import V from "../input";
import '@douyinfe/semi-foundation/lib/es/pincode/pincode.css';
import { useBaseComponent as A } from "../_base/baseComponent";
const L = {
  className: a.string,
  style: a.object,
  size: a.string,
  disabled: a.bool,
  value: a.string,
  format: [Function, ...a.node],
  onChange: {
    type: a.func,
    required: !0
  },
  defaultValue: a.string,
  count: a.number,
  autoFocus: a.bool,
  onComplete: a.func
}, j = {
  count: 6,
  format: "number",
  autoFocus: !0
}, z = P(L, j), _ = /* @__PURE__ */ b({
  props: {
    ...z
  },
  name: "PinCode",
  setup(n, {
    expose: m
  }) {
    y();
    let s = [];
    const c = p({
      valueList: (n.value || n.defaultValue) && (n.value || n.defaultValue).split("") || [],
      currentActiveIndex: 0
    }), {
      adapter: C,
      setStateAsync: r
    } = A(n, c);
    I([() => n.value], () => {
      u.updateValueList(n.value.split(""));
    });
    function g() {
      return {
        ...C(),
        onCurrentActiveIndexChange: async (t) => {
          await r({
            currentActiveIndex: t
          });
        },
        notifyValueChange: (t) => {
          var e;
          (e = n.onChange) == null || e.call(n, t.join(""));
        },
        changeSpecificInputFocusState: (t, e) => {
          var o, i, l, f;
          e === "focus" ? (i = (o = s[t]) == null ? void 0 : o.focus) == null || i.call(o) : e === "blur" && ((f = (l = s[t]) == null ? void 0 : l.blur) == null || f.call(l));
        },
        updateValueList: async (t) => {
          await r({
            valueList: t
          });
        }
      };
    }
    const v = g(), u = new w(v);
    m({
      focus: (t) => {
        const e = s[t];
        e == null || e.focus(), e == null || e.setSelectionRange(1, 1);
      },
      blur: (t) => {
        var e;
        (e = s[t]) == null || e.blur();
      }
    });
    const h = (t) => d(V, {
      forwardRef: (e) => s[t] = e,
      key: `input-${t}`,
      "data-testid": "pin-code-input",
      autoFocus: n.autoFocus && t === 0,
      value: c.valueList[t],
      size: n.size,
      disabled: n.disabled,
      onBlur: () => u.handleCurrentActiveIndexChange(t, "blur"),
      onFocus: () => u.handleCurrentActiveIndexChange(t, "focus"),
      onPaste: (e) => u.handlePaste(e, t),
      onKeyDown: (e) => {
        u.handleKeyDownOnSingleInput(e, t);
      },
      onChange: (e) => {
        const o = e[e.length - 1];
        u.validateValue(o) && u.completeSingleInput(t, o);
      }
    }, null);
    return () => {
      const t = [];
      for (let e = 0; e < n.count; e++)
        t.push(h(e));
      return d("div", {
        class: F(`${S.PREFIX}-wrapper`, n.className),
        style: n.style
      }, [t]);
    };
  }
});
export {
  _ as default,
  z as vuePropsType
};
//# sourceMappingURL=index.js.map
