import { defineComponent as M, useSlots as P, createVNode as i } from "vue";
import x from "classnames";
import * as e from "../PropTypes";
import { vuePropsMake as E } from "../PropTypes";
import { isString as N } from "lodash";
import { cssClasses as L } from '@douyinfe/semi-foundation/lib/es/autoComplete/constants';
import { LocaleConsumerFunc as w } from "../locale/localeConsumer";
import { IconTick as F } from "@kousum/semi-icons-vue";
import { getFragmentChildren as V, getHighLightTextHTML as j } from "../_utils/index";
const D = w(), H = {
  children: e.node,
  disabled: e.bool,
  value: e.oneOfType([e.string, e.number]),
  selected: e.bool,
  label: e.node,
  empty: e.bool,
  emptyContent: e.node,
  onSelect: e.func,
  focused: e.bool,
  showTick: e.bool,
  className: e.string,
  style: e.object,
  onMouseEnter: e.func,
  prefixCls: e.string,
  renderOptionItem: e.func,
  inputValue: e.string,
  option: e.object
}, _ = {
  prefixCls: L.PREFIX_OPTION
}, R = E(H, _), W = /* @__PURE__ */ M({
  props: {
    ...R
  },
  name: "Option",
  setup(a, {}) {
    const O = P();
    function f({
      value: o,
      label: s,
      children: l,
      ...r
    }, c) {
      a.disabled || a.onSelect({
        ...r,
        value: o,
        label: s || l
      }, c);
    }
    function k({
      config: o,
      children: s,
      inputValue: l,
      prefixCls: r
    }) {
      return N(s) && l ? j(o) : s;
    }
    return () => {
      const o = V(O), {
        disabled: s,
        value: l,
        selected: r,
        label: c,
        empty: p,
        emptyContent: C,
        onSelect: X,
        focused: b,
        showTick: v,
        className: y,
        style: g,
        onMouseEnter: u,
        prefixCls: t,
        renderOptionItem: T,
        inputValue: m,
        ...S
      } = a, d = {
        ...S,
        ...a.option
      }, h = x(t, {
        [`${t}-disabled`]: s,
        [`${t}-selected`]: r,
        [`${t}-focused`]: b,
        [`${t}-empty`]: p,
        [y]: y
      }), $ = x([`${t}-icon`]);
      if (p)
        return C === null ? null : i(D, {
          componentName: "Select"
        }, {
          default: (n) => i("div", {
            class: h,
            "x-semi-prop": "emptyContent"
          }, [C || n.emptyText])
        });
      if (typeof T == "function")
        return T({
          disabled: s,
          focused: b,
          selected: r,
          style: g,
          label: c,
          value: l,
          inputValue: m,
          onMouseEnter: (n) => u(n),
          onClick: (n) => f({
            value: l,
            label: c,
            children: o,
            ...d
          }, n),
          ...d
        });
      const I = {
        searchWords: m,
        sourceString: o,
        option: {
          highlightClassName: `${t}-keyword`
        }
      };
      return (
        // eslint-disable-next-line jsx-a11y/interactive-supports-focus,jsx-a11y/click-events-have-key-events
        i("div", {
          class: h,
          onClick: (n) => {
            f({
              value: l,
              label: c,
              children: o,
              ...d
            }, n);
          },
          onMouseenter: (n) => u && u(n),
          role: "option",
          "aria-selected": r ? "true" : "false",
          "aria-disabled": s ? "true" : "false",
          style: g
        }, [v ? i("div", {
          class: $
        }, [i(F, null, null)]) : null, N(o) ? i("div", {
          class: `${t}-text`
        }, [k({
          children: o,
          config: I,
          inputValue: m,
          prefixCls: t
        })]) : o])
      );
    };
  }
});
W.isSelectOption = !0;
export {
  W as default,
  R as vuePropsType
};
//# sourceMappingURL=option.js.map
