import { BasicOptionProps } from '@douyinfe/semi-foundation/lib/es/autoComplete/optionFoundation';
import { CombineProps, type RemoveIndexSignature, VueJsxNode } from '../interface';
import { CSSProperties, type VNode } from 'vue';
import { StateOptionItem } from '@douyinfe/semi-foundation/lib/es/autoComplete/foundation';
export interface OptionProps extends RemoveIndexSignature<BasicOptionProps> {
    value?: string | number;
    label?: string | number | VueJsxNode;
    children?: VueJsxNode;
    disabled?: boolean;
    showTick?: boolean;
    className?: string;
    style?: CSSProperties;
    option?: StateOptionItem;
    selected?: boolean;
    empty?: boolean;
    emptyContent?: string | number | VNode | VNode[] | (() => VNode);
    inputValue?: string;
    renderOptionItem?: (...args: any) => VNode;
    onMouseEnter?: (e: MouseEvent) => any;
    focused?: boolean;
    onSelect?: (opts: OptionProps, e: MouseEvent) => any;
    prefixCls?: string;
}
export declare const vuePropsType: CombineProps<OptionProps>;
declare const Option: import("vue").DefineComponent<import("vue").ExtractPropTypes<CombineProps<OptionProps>>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<CombineProps<OptionProps>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Option;
