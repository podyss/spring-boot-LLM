{"version":3,"file":"index.js","sources":["../../src/components/autoComplete/index.tsx"],"sourcesContent":["import * as PropTypes from '../PropTypes';\nimport cls from 'classnames';\nimport { isEqual, noop } from 'lodash';\nimport { strings, cssClasses } from '@douyinfe/semi-foundation/autoComplete/constants';\nimport AutoCompleteFoundation, {\n  AutoCompleteAdapter,\n  StateOptionItem,\n  DataItem,\n} from '@douyinfe/semi-foundation/autoComplete/foundation';\nimport { numbers as popoverNumbers } from '@douyinfe/semi-foundation/popover/constants';\nimport { useBaseComponent, ValidateStatus } from '../_base/baseComponent';\nimport { Position } from '../tooltip';\nimport Spin from '../spin';\nimport Popover from '../popover';\nimport Input, { InputProps } from '../input';\nimport Trigger, { TriggerProps } from '../trigger';\nimport { getUuidShort } from '@douyinfe/semi-foundation/utils/uuid';\nimport Option from './option';\nimport warning from '@douyinfe/semi-foundation/utils/warning';\nimport '@douyinfe/semi-foundation/autoComplete/autoComplete.scss';\nimport { Motion } from '../_base/base';\nimport { AriaAttributes } from '../AriaAttributes';\nimport { CombineProps, type RemoveIndexSignature, VueHTMLAttributes, VueJsxNode } from '../interface';\nimport {\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  h,\n  isVNode,\n  onMounted,\n  onUnmounted,\n  PropType,\n  reactive,\n  ref,\n  useSlots,\n  watch,\n} from 'vue';\nimport { PropObj, vuePropsMake } from '../PropTypes';\nimport { styleNum } from '../_utils';\n\nconst prefixCls = cssClasses.PREFIX;\nconst sizeSet = strings.SIZE;\nconst positionSet = strings.POSITION;\nconst statusSet = strings.STATUS;\n\n/**\n * AutoComplete is an enhanced Input (candidates suggest that users can choose or not),\n * and the Select positioning that supports Search is still a selector.\n * 1. When you click to expand, Select will clear all input values, but AutoComplete will not\n * 2. AutoComplete's renderSelectedItem only supports simple string returns, while Select's renderSelectedItem can return VueJsxNode\n * 3. Select props.value supports incoming object, but autoComplete only supports string (because the value needs to be displayed in Input)\n */\n\nexport interface BaseDataItem extends RemoveIndexSignature<DataItem> {\n  label?: VueJsxNode;\n}\n\nexport type AutoCompleteItems = BaseDataItem | string | number;\n\nexport interface AutoCompleteProps<T extends AutoCompleteItems> {\n  'aria-describedby'?: AriaAttributes['aria-describedby'];\n  'aria-errormessage'?: AriaAttributes['aria-errormessage'];\n  'aria-invalid'?: AriaAttributes['aria-invalid'];\n  'aria-label'?: AriaAttributes['aria-label'];\n  'aria-labelledby'?: AriaAttributes['aria-labelledby'];\n  'aria-required'?: AriaAttributes['aria-required'];\n  autoAdjustOverflow?: boolean;\n  autoFocus?: boolean;\n  className?: string;\n  children?: VueJsxNode | undefined;\n  data?: T[];\n  disabled?: boolean;\n  defaultOpen?: boolean;\n  defaultValue?: any;\n  defaultActiveFirstOption?: boolean;\n  dropdownMatchSelectWidth?: boolean;\n  dropdownClassName?: string;\n  dropdownStyle?: CSSProperties;\n  emptyContent?: () => VueJsxNode;\n  getPopupContainer?: () => HTMLElement;\n  insetLabel?: VueJsxNode;\n  insetLabelId?: string;\n  id?: string;\n  loading?: boolean;\n  motion?: Motion;\n  maxHeight?: string | number;\n  mouseEnterDelay?: number;\n  mouseLeaveDelay?: number;\n  onFocus?: (e: FocusEvent) => void;\n  onBlur?: (e: FocusEvent) => void;\n  onChange?: (value: string | number) => void;\n  onSearch?: (inputValue: string) => void;\n  onSelect?: (value: T) => void;\n  onClear?: () => void;\n  onChangeWithObject?: boolean;\n  onSelectWithObject?: boolean;\n  onDropdownVisibleChange?: (visible: boolean) => void;\n  onKeyDown?: (e: KeyboardEvent) => void;\n  prefix?: VueJsxNode;\n  placeholder?: string;\n  position?: Position;\n  renderItem?: (option: T) => VueJsxNode;\n  renderSelectedItem?: (option: T) => string;\n  size?: 'small' | 'default' | 'large';\n  style?: CSSProperties;\n  suffix?: VueJsxNode;\n  showClear?: boolean;\n  triggerRender?: (props?: any) => VueJsxNode;\n  stopPropagation?: boolean | string;\n  value?: string | number;\n  validateStatus?: ValidateStatus;\n  zIndex?: number;\n}\n\ninterface KeyboardEventType {\n  onKeyDown?: any;\n}\n\ninterface AutoCompleteState {\n  dropdownMinWidth: null | number;\n  inputValue: string | undefined | number;\n  options: StateOptionItem[];\n  visible: boolean;\n  focusIndex: number;\n  selection: Map<any, any>;\n  rePosKey: number;\n  keyboardEventSet?: KeyboardEventType;\n}\n\nfunction AutoCompleteFunc<T extends AutoCompleteItems>() {\n  const vuePropsType_ = AutoCompleteFuncVueProps<T>();\n  return defineComponent({\n    props: vuePropsType_ as CombineProps<AutoCompleteProps<T>>,\n    name: 'AutoComplete',\n    setup(props, {}) {\n      const slots = useSlots();\n\n      const initRePosKey = 1;\n      const state = reactive<AutoCompleteState>({\n        dropdownMinWidth: null,\n        inputValue: '',\n        // option list\n        options: [],\n        // popover visible\n        visible: false,\n        // current focus option index\n        focusIndex: props.defaultActiveFirstOption ? 0 : -1,\n        // current selected options\n        selection: new Map(),\n        rePosKey: initRePosKey,\n      });\n      let clickOutsideHandler: (e: Event) => void | null = null;\n\n      const { adapter: adapterInject, getDataAttr } = useBaseComponent<AutoCompleteProps<T>>(props, state);\n\n      function adapter_(): AutoCompleteAdapter<AutoCompleteProps<T>, AutoCompleteState> {\n        const keyboardAdapter = {\n          registerKeyDown: (cb: any): void => {\n            const keyboardEventSet = {\n              onKeyDown: cb,\n            };\n            state.keyboardEventSet = keyboardEventSet;\n          },\n          unregisterKeyDown: (cb: any): void => {\n            state.keyboardEventSet = {};\n          },\n          updateFocusIndex: (focusIndex: number): void => {\n            state.focusIndex = focusIndex;\n          },\n          updateScrollTop: (index?: number) => {\n            let optionClassName;\n            /**\n             * Unlike Select which needs to process renderOptionItem separately, when renderItem is enabled in autocomplete\n             *  the content passed by the user is still wrapped in the selector of .semi-autocomplete-option\n             * so the selector does not need to be judged separately.\n             */\n            optionClassName = `.${prefixCls}-option-selected`;\n            if (index !== undefined) {\n              optionClassName = `.${prefixCls}-option:nth-child(${index + 1})`;\n            }\n\n            let destNode = document.querySelector(`#${prefixCls}-${optionListId} ${optionClassName}`) as HTMLDivElement;\n            if (Array.isArray(destNode)) {\n              destNode = destNode[0];\n            }\n            if (destNode) {\n              const destParent = destNode.parentNode as HTMLDivElement;\n              destParent.scrollTop = destNode.offsetTop -\n                destParent.offsetTop -\n                (destParent.clientHeight / 2) +\n                (destNode.clientHeight / 2);\n            }\n          },\n        };\n        return {\n          ...adapterInject(),\n          ...keyboardAdapter,\n          getTriggerWidth: () => {\n            const el = triggerRef.value;\n            return el && el.getBoundingClientRect().width;\n          },\n          setOptionWrapperWidth: (width) => {\n            state.dropdownMinWidth = width;\n          },\n          updateInputValue: (inputValue) => {\n            state.inputValue = inputValue;\n          },\n          toggleListVisible: (isShow) => {\n            state.visible = isShow;\n          },\n          updateOptionList: (optionList) => {\n            state.options = optionList;\n          },\n          updateSelection: (selection) => {\n            state.selection = selection;\n          },\n          notifySearch: (inputValue) => {\n            props.onSearch(inputValue);\n          },\n          notifyChange: (value) => {\n            props.onChange(value);\n          },\n          notifySelect: (option: StateOptionItem | string | number): void => {\n            props.onSelect(option as T);\n          },\n          notifyDropdownVisibleChange: (isVisible: boolean): void => {\n            props.onDropdownVisibleChange(isVisible);\n          },\n          notifyClear: () => {\n            props.onClear();\n          },\n          notifyFocus: (event: FocusEvent) => {\n            props.onFocus(event);\n          },\n          notifyBlur: (event: FocusEvent) => {\n            props.onBlur(event);\n          },\n          notifyKeyDown: (e) => {\n            props.onKeyDown(e);\n          },\n          rePositionDropdown: () => {\n            let { rePosKey } = state;\n            rePosKey = rePosKey + 1;\n            state.rePosKey = rePosKey;\n          },\n          registerClickOutsideHandler: (cb) => {\n            const clickOutsideHandler_ = (e: Event) => {\n              const optionInstance = optionsRef && optionsRef.value.getRef?.().vnode.el;\n              const triggerDom = triggerRef && triggerRef.value;\n              // eslint-disable-next-line\n              const optionsDom = optionInstance;\n              const target = e.target as Element;\n              const path = (e.composedPath && e.composedPath()) || [target];\n              if (\n                optionsDom &&\n                (!optionsDom.contains(target) || !optionsDom.contains(target.parentNode)) &&\n                triggerDom &&\n                !triggerDom.contains(target) &&\n                !(path.includes(triggerDom) || path.includes(optionsDom))\n              ) {\n                cb(e);\n              }\n            };\n            clickOutsideHandler = clickOutsideHandler_;\n            document.addEventListener('mousedown', clickOutsideHandler, false);\n          },\n          unregisterClickOutsideHandler: () => {\n            if (clickOutsideHandler) {\n              document.removeEventListener('mousedown', clickOutsideHandler, false);\n            }\n          },\n        };\n      }\n      const adapter = adapter_();\n      const foundation = new AutoCompleteFoundation(adapter);\n      const triggerRef = ref();\n      const optionsRef = ref();\n      let optionListId: string = \"\";\n      warning(\n        'triggerRender' in props && typeof props.triggerRender === 'function',\n        `[Semi AutoComplete]\n            - If you are using the following props: 'suffix', 'prefix', 'showClear', 'validateStatus', and 'size',\n            please notice that they will be removed in the next major version.\n            Please use 'componentProps' to retrieve these props instead.\n            - If you are using 'onBlur', 'onFocus', please try to avoid using them and look for changes in the future.`\n      );\n\n      onMounted(() => {\n        foundation.init();\n        optionListId = getUuidShort();\n      });\n\n      onUnmounted(() => {\n        foundation.destroy();\n      });\n\n      watch(\n        () => props.value,\n        (value, oldValue, onCleanup) => {\n          if (value !== oldValue) {\n            foundation.handleValueChange(props.value);\n          }\n        }\n      );\n      watch(\n        () => props.data,\n        (value, oldValue, onCleanup) => {\n          if (!isEqual(value, oldValue)) {\n            foundation.handleDataChange(props.data);\n          }\n        },\n        { deep: true }\n      );\n\n      const onSelect = (option: StateOptionItem, optionIndex: number, e: MouseEvent | KeyboardEvent): void => {\n        foundation.handleSelect(option, optionIndex);\n      };\n\n      const onSearch = (value: string, e: HashChangeEvent): void => {\n        foundation.handleSearch(value);\n      };\n\n      const onBlur = (e: FocusEvent): void => foundation.handleBlur(e);\n\n      const onFocus = (e: FocusEvent): void => foundation.handleFocus(e);\n\n      const onInputClear = (): void => foundation.handleClear();\n\n      const handleInputClick = (e: MouseEvent): void => foundation.handleInputClick(e);\n\n      function renderInput(): VueJsxNode {\n        const {\n          size,\n          prefix,\n          insetLabel,\n          insetLabelId,\n          suffix,\n          placeholder,\n          style,\n          className,\n          showClear,\n          disabled,\n          triggerRender,\n          validateStatus,\n          autoFocus,\n          value,\n          id,\n        } = props;\n        const { inputValue, keyboardEventSet, selection } = state;\n\n        const useCustomTrigger = typeof triggerRender === 'function';\n\n        const outerProps = {\n          style,\n          className: useCustomTrigger\n            ? cls(className)\n            : cls(\n                {\n                  [prefixCls]: true,\n                  [`${prefixCls}-disabled`]: disabled,\n                },\n                className\n              ),\n          onClick: handleInputClick,\n          ref: triggerRef,\n          id,\n          ...keyboardEventSet,\n          // tooltip give tabindex 0 to children by default, autoComplete just need the input get focus, so outer div's tabindex set to -1\n          tabIndex: -1,\n          ...getDataAttr(),\n        };\n\n        const innerProps: InputProps | TriggerProps = {\n          disabled,\n          placeholder,\n          autoFocus: autoFocus,\n          // @ts-ignore\n          onChange: onSearch,\n          onClear: onInputClear,\n          'aria-label': props['aria-label'],\n          'aria-labelledby': props['aria-labelledby'],\n          'aria-invalid': props['aria-invalid'],\n          'aria-errormessage': props['aria-errormessage'],\n          'aria-describedby': props['aria-describedby'],\n          'aria-required': props['aria-required'],\n          // TODO: remove in next major version\n          suffix,\n          // @ts-ignore\n          prefix: prefix || insetLabel,\n          insetLabelId,\n          showClear,\n          validateStatus,\n          size,\n          onBlur: onBlur,\n          onFocus: onFocus,\n        };\n\n        return (\n          <div {...outerProps}>\n            {typeof triggerRender === 'function' ? (\n              <Trigger\n                {...(innerProps as TriggerProps)}\n                inputValue={(typeof value !== 'undefined' ? value : inputValue) as string}\n                value={Array.from(selection.values())}\n                triggerRender={triggerRender}\n                componentName=\"AutoComplete\"\n                componentProps={{ ...props }}\n              />\n            ) : (\n              <Input {...(innerProps as InputProps)} value={typeof value !== 'undefined' ? value : inputValue} />\n            )}\n          </div>\n        );\n      }\n\n      function renderLoading() {\n        const loadingWrapperCls = `${prefixCls}-loading-wrapper`;\n        return (\n          <div class={loadingWrapperCls}>\n            <Spin />\n          </div>\n        );\n      }\n\n      function renderOption(option: StateOptionItem, optionIndex: number): VueJsxNode {\n        const { focusIndex } = state;\n        const isFocused = optionIndex === focusIndex;\n\n        return (\n          <Option\n            showTick={false}\n            onSelect={(v: StateOptionItem, e: MouseEvent | KeyboardEvent) => onSelect(v, optionIndex, e)}\n            // selected={selection.has(option.label)}\n            focused={isFocused}\n            onMouseEnter={() => foundation.handleOptionMouseEnter(optionIndex)}\n            key={option.key || option.label + option.value + optionIndex}\n            option={option}\n          >\n            {option.label}\n          </Option>\n        );\n      }\n\n      function renderOptionList(): VueJsxNode {\n        const { maxHeight, dropdownStyle, dropdownClassName, loading, emptyContent } = props;\n        const { options, dropdownMinWidth } = state;\n        const listCls = cls(\n          {\n            [`${prefixCls}-option-list`]: true,\n          },\n          dropdownClassName\n        );\n\n        let optionsNode;\n\n        if (options.length === 0) {\n          optionsNode = emptyContent?.();\n        } else {\n          optionsNode = options.filter((option) => option.show).map((option, i) => renderOption(option, i));\n        }\n\n        const style = {\n          maxHeight: styleNum(maxHeight),\n          minWidth: styleNum(dropdownMinWidth),\n          ...dropdownStyle,\n        };\n        return (\n          <div class={listCls} role=\"listbox\" style={style} id={`${prefixCls}-${optionListId}`}>\n            {!loading ? optionsNode : renderLoading()}\n          </div>\n        );\n      }\n\n      return () => {\n        const {\n          position,\n          motion,\n          zIndex,\n          mouseEnterDelay,\n          mouseLeaveDelay,\n          autoAdjustOverflow,\n          stopPropagation,\n          getPopupContainer,\n        } = props;\n        const { visible, rePosKey } = state;\n        const input = renderInput();\n        const optionList = renderOptionList();\n        return (\n          <Popover\n            mouseEnterDelay={mouseEnterDelay}\n            mouseLeaveDelay={mouseLeaveDelay}\n            autoAdjustOverflow={autoAdjustOverflow}\n            trigger=\"custom\"\n            motion={motion}\n            visible={visible}\n            content={optionList}\n            position={position}\n            ref={optionsRef}\n            // TransformFromCenter TODO: need to confirm\n            zIndex={zIndex}\n            stopPropagation={stopPropagation}\n            getPopupContainer={getPopupContainer}\n            rePosKey={rePosKey}\n          >\n            {input}\n          </Popover>\n        );\n      };\n    },\n  });\n}\n\nfunction AutoCompleteFuncVueProps<T>() {\n  const propTypes: CombineProps<AutoCompleteProps<T>> = {\n    'aria-label': PropTypes.string,\n    'aria-labelledby': PropTypes.string,\n    'aria-invalid': [PropTypes.bool, PropTypes.string] as PropType<AutoCompleteProps<T>['aria-invalid']>,\n    'aria-errormessage': PropTypes.string,\n    'aria-describedby': PropTypes.string,\n    'aria-required': PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    autoAdjustOverflow: PropTypes.bool,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    data: PropTypes.array as PropType<AutoCompleteProps<T>['data']>,\n    defaultOpen: PropTypes.bool,\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]) as PropType<any>,\n    defaultActiveFirstOption: PropTypes.bool,\n    disabled: PropTypes.bool,\n    dropdownMatchSelectWidth: PropTypes.bool,\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    emptyContent: PropTypes.func as PropType<AutoCompleteProps<T>['emptyContent']>,\n    id: PropTypes.string,\n    insetLabel: PropTypes.node,\n    insetLabelId: PropTypes.string,\n    onSearch: PropTypes.func as PropType<AutoCompleteProps<T>['onSearch']>,\n    onSelect: PropTypes.func as PropType<AutoCompleteProps<T>['onSelect']>,\n    onClear: PropTypes.func as PropType<AutoCompleteProps<T>['onClear']>,\n    onBlur: PropTypes.func as PropType<AutoCompleteProps<T>['onBlur']>,\n    onFocus: PropTypes.func as PropType<AutoCompleteProps<T>['onFocus']>,\n    onChange: PropTypes.func as PropType<AutoCompleteProps<T>['onChange']>,\n    onKeyDown: PropTypes.func as PropType<AutoCompleteProps<T>['onKeyDown']>,\n    position: String as PropType<AutoCompleteProps<T>['position']>,\n    placeholder: PropTypes.string,\n    prefix: PropTypes.node,\n    onChangeWithObject: PropTypes.bool,\n    onSelectWithObject: PropTypes.bool,\n    onDropdownVisibleChange: PropTypes.func as PropType<AutoCompleteProps<T>['onDropdownVisibleChange']>,\n    renderItem: PropTypes.func as PropType<AutoCompleteProps<T>['renderItem']>,\n    renderSelectedItem: PropTypes.func as PropType<AutoCompleteProps<T>['renderSelectedItem']>,\n    suffix: PropTypes.node,\n    showClear: PropTypes.bool,\n    size: String as PropType<AutoCompleteProps<T>['size']>,\n    style: PropTypes.object,\n    stopPropagation: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    mouseEnterDelay: PropTypes.number,\n    mouseLeaveDelay: PropTypes.number,\n    motion: PropTypes.oneOfType([PropTypes.bool, PropTypes.func, PropTypes.object]),\n    getPopupContainer: PropTypes.func as PropType<AutoCompleteProps<T>['getPopupContainer']>,\n    triggerRender: PropTypes.func as PropType<AutoCompleteProps<T>['triggerRender']>,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    validateStatus: String as PropType<AutoCompleteProps<T>['validateStatus']>,\n    zIndex: PropTypes.number,\n    loading: PropTypes.bool,\n  };\n\n  const defaultProps = {\n    stopPropagation: true,\n    motion: true,\n    zIndex: popoverNumbers.DEFAULT_Z_INDEX,\n    position: 'bottomLeft' as const,\n    data: [] as [],\n    showClear: false,\n    size: 'default' as const,\n    onFocus: noop,\n    onSearch: noop,\n    onClear: noop,\n    onBlur: noop,\n    onSelect: noop,\n    onChange: noop,\n    onSelectWithObject: false,\n    onDropdownVisibleChange: noop,\n    defaultActiveFirstOption: false,\n    dropdownMatchSelectWidth: true,\n    loading: false,\n    maxHeight: 300,\n    validateStatus: 'default' as const,\n    autoFocus: false,\n    emptyContent: noop,\n    onKeyDown: noop,\n    // onPressEnter: () => undefined,\n    // defaultOpen: false,\n  };\n  return vuePropsMake(propTypes, defaultProps);\n}\n\nconst vuePropsType = AutoCompleteFuncVueProps();\nexport { AutoCompleteFunc, vuePropsType };\n\nexport default AutoCompleteFunc();\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefixCls","cssClasses","PREFIX","strings","SIZE","POSITION","STATUS","AutoCompleteFunc","vuePropsType_","AutoCompleteFuncVueProps","props","name","setup","useSlots","state","reactive","dropdownMinWidth","inputValue","options","visible","focusIndex","defaultActiveFirstOption","selection","Map","rePosKey","clickOutsideHandler","adapter","adapterInject","getDataAttr","useBaseComponent","adapter_","keyboardAdapter","registerKeyDown","cb","keyboardEventSet","onKeyDown","unregisterKeyDown","updateFocusIndex","updateScrollTop","index","optionClassName","undefined","destNode","document","querySelector","optionListId","Array","isArray","destParent","parentNode","scrollTop","offsetTop","clientHeight","getTriggerWidth","el","triggerRef","value","getBoundingClientRect","width","setOptionWrapperWidth","updateInputValue","toggleListVisible","isShow","updateOptionList","optionList","updateSelection","notifySearch","onSearch","notifyChange","onChange","notifySelect","option","onSelect","notifyDropdownVisibleChange","isVisible","onDropdownVisibleChange","notifyClear","onClear","notifyFocus","event","onFocus","notifyBlur","onBlur","notifyKeyDown","e","rePositionDropdown","registerClickOutsideHandler","optionInstance","optionsRef","getRef","vnode","triggerDom","optionsDom","target","path","composedPath","contains","includes","addEventListener","unregisterClickOutsideHandler","removeEventListener","foundation","AutoCompleteFoundation","ref","warning","triggerRender","onMounted","init","getUuidShort","onUnmounted","destroy","watch","oldValue","onCleanup","handleValueChange","data","isEqual","handleDataChange","deep","optionIndex","handleSelect","handleSearch","handleBlur","handleFocus","onInputClear","handleClear","handleInputClick","renderInput","size","prefix","insetLabel","insetLabelId","suffix","placeholder","style","className","showClear","disabled","validateStatus","autoFocus","id","outerProps","cls","onClick","tabIndex","innerProps","_createVNode","Trigger","_mergeProps","from","values","Input","renderLoading","loadingWrapperCls","Spin","renderOption","Option","v","onMouseEnter","handleOptionMouseEnter","key","label","default","renderOptionList","maxHeight","dropdownStyle","dropdownClassName","loading","emptyContent","listCls","optionsNode","length","filter","show","map","i","styleNum","minWidth","position","motion","zIndex","mouseEnterDelay","mouseLeaveDelay","autoAdjustOverflow","stopPropagation","getPopupContainer","input","Popover","propTypes","PropTypes","string","bool","children","node","array","defaultOpen","defaultValue","oneOfType","number","dropdownMatchSelectWidth","object","func","String","onChangeWithObject","onSelectWithObject","renderItem","renderSelectedItem","defaultProps","popoverNumbers","DEFAULT_Z_INDEX","noop","vuePropsMake","vuePropsType"],"mappings":";;;;;;;;;;;;;;;;;;AAsCqC,SAAAA,GAAAC,GAAA;AAAA,SAAA,OAAAA,KAAA,cAAAC,OAAAC,UAAAC,SAAAC,KAAAJ,CAAA,MAAAK,qBAAAA,CAAAA,GAAAL,CAAA;AAAA;AAErC,MAAMM,IAAYC,GAAWC;AACbC,EAAQC;AACJD,EAAQE;AACVF,EAAQG;AAsF1B,SAASC,KAAgD;AACvD,QAAMC,IAAgBC;AACtB,2BAAuB;AAAA,IACrBC,OAAOF;AAAAA,IACPG,MAAM;AAAA,IACNC,MAAMF,GAAO,IAAI;AACDG,MAAAA,GAAU;AAGxB,YAAMC,IAAQC,GAA4B;AAAA,QACxCC,kBAAkB;AAAA,QAClBC,YAAY;AAAA;AAAA,QAEZC,SAAS,CAAE;AAAA;AAAA,QAEXC,SAAS;AAAA;AAAA,QAETC,YAAYV,EAAMW,2BAA2B,IAAI;AAAA;AAAA,QAEjDC,WAAW,oBAAIC,IAAK;AAAA,QACpBC,UAZmB;AAAA,MAarB,CAAC;AACD,UAAIC,IAAiD;AAErD,YAAM;AAAA,QAAEC,SAASC;AAAAA,QAAeC,aAAAA;AAAAA,MAAY,IAAIC,GAAuCnB,GAAOI,CAAK;AAEnG,eAASgB,IAAyE;AAChF,cAAMC,IAAkB;AAAA,UACtBC,iBAAkBC,CAAAA,MAAkB;AAClC,kBAAMC,IAAmB;AAAA,cACvBC,WAAWF;AAAAA;AAEbnB,YAAAA,EAAMoB,mBAAmBA;AAAAA,UAC1B;AAAA,UACDE,mBAAoBH,CAAAA,MAAkB;AACpCnB,YAAAA,EAAMoB,mBAAmB;UAC1B;AAAA,UACDG,kBAAmBjB,CAAAA,MAA6B;AAC9CN,YAAAA,EAAMM,aAAaA;AAAAA,UACpB;AAAA,UACDkB,iBAAkBC,CAAAA,MAAmB;AACnC,gBAAIC;AAMJA,YAAAA,IAAkB,IAAIxC,CAAS,oBAC3BuC,MAAUE,WACZD,IAAkB,IAAIxC,CAAS,qBAAqBuC,IAAQ,CAAC;AAG/D,gBAAIG,IAAWC,SAASC,cAAc,IAAI5C,CAAS,IAAI6C,CAAY,IAAIL,CAAe,EAAE;AAIxF,gBAHIM,MAAMC,QAAQL,CAAQ,MACxBA,IAAWA,EAAS,CAAC,IAEnBA,GAAU;AACZ,oBAAMM,IAAaN,EAASO;AAC5BD,cAAAA,EAAWE,YAAYR,EAASS,YAC9BH,EAAWG,YACVH,EAAWI,eAAe,IAC1BV,EAASU,eAAe;AAAA,YAC7B;AAAA,UACF;AAAA;AAEF,eAAO;AAAA,UACL,GAAGzB,EAAe;AAAA,UAClB,GAAGI;AAAAA,UACHsB,iBAAiBA,MAAM;AACrB,kBAAMC,IAAKC,EAAWC;AACtB,mBAAOF,KAAMA,EAAGG,sBAAqB,EAAGC;AAAAA,UACzC;AAAA,UACDC,uBAAwBD,CAAAA,MAAU;AAChC5C,YAAAA,EAAME,mBAAmB0C;AAAAA,UAC1B;AAAA,UACDE,kBAAmB3C,CAAAA,MAAe;AAChCH,YAAAA,EAAMG,aAAaA;AAAAA,UACpB;AAAA,UACD4C,mBAAoBC,CAAAA,MAAW;AAC7BhD,YAAAA,EAAMK,UAAU2C;AAAAA,UACjB;AAAA,UACDC,kBAAmBC,CAAAA,MAAe;AAChClD,YAAAA,EAAMI,UAAU8C;AAAAA,UACjB;AAAA,UACDC,iBAAkB3C,CAAAA,MAAc;AAC9BR,YAAAA,EAAMQ,YAAYA;AAAAA,UACnB;AAAA,UACD4C,cAAejD,CAAAA,MAAe;AAC5BP,YAAAA,EAAMyD,SAASlD,CAAU;AAAA,UAC1B;AAAA,UACDmD,cAAeZ,CAAAA,MAAU;AACvB9C,YAAAA,EAAM2D,SAASb,CAAK;AAAA,UACrB;AAAA,UACDc,cAAeC,CAAAA,MAAoD;AACjE7D,YAAAA,EAAM8D,SAASD,CAAW;AAAA,UAC3B;AAAA,UACDE,6BAA8BC,CAAAA,MAA6B;AACzDhE,YAAAA,EAAMiE,wBAAwBD,CAAS;AAAA,UACxC;AAAA,UACDE,aAAaA,MAAM;AACjBlE,YAAAA,EAAMmE,QAAO;AAAA,UACd;AAAA,UACDC,aAAcC,CAAAA,MAAsB;AAClCrE,YAAAA,EAAMsE,QAAQD,CAAK;AAAA,UACpB;AAAA,UACDE,YAAaF,CAAAA,MAAsB;AACjCrE,YAAAA,EAAMwE,OAAOH,CAAK;AAAA,UACnB;AAAA,UACDI,eAAgBC,CAAAA,MAAM;AACpB1E,YAAAA,EAAMyB,UAAUiD,CAAC;AAAA,UAClB;AAAA,UACDC,oBAAoBA,MAAM;AACxB,gBAAI;AAAA,cAAE7D,UAAAA;AAAAA,YAAU,IAAGV;AACnBU,YAAAA,IAAWA,IAAW,GACtBV,EAAMU,WAAWA;AAAAA,UAClB;AAAA,UACD8D,6BAA8BrD,CAAAA,MAAO;AAkBnCR,YAAAA,IAjB8B2D,CAAAA,MAAa;;AACzC,oBAAMG,IAAiBC,OAAcA,KAAAA,IAAAA,EAAWhC,OAAMiC,WAAjBD,gBAAAA,EAAAA,KAAAA,GAA4BE,MAAMpC,KACjEqC,IAAapC,KAAcA,EAAWC,OAEtCoC,IAAaL,GACbM,IAAST,EAAES,QACXC,IAAQV,EAAEW,gBAAgBX,EAAEW,aAAc,KAAK,CAACF,CAAM;AAC5D,cACED,MACC,CAACA,EAAWI,SAASH,CAAM,KAAK,CAACD,EAAWI,SAASH,EAAO5C,UAAU,MACvE0C,KACA,CAACA,EAAWK,SAASH,CAAM,KAC3B,EAAEC,EAAKG,SAASN,CAAU,KAAKG,EAAKG,SAASL,CAAU,MAEvD3D,EAAGmD,CAAC;AAAA,eAIRzC,SAASuD,iBAAiB,aAAazE,GAAqB,EAAK;AAAA,UAClE;AAAA,UACD0E,+BAA+BA,MAAM;AACnC,YAAI1E,KACFkB,SAASyD,oBAAoB,aAAa3E,GAAqB,EAAK;AAAA,UAExE;AAAA;MAEJ;AACA,YAAMC,IAAUI,KACVuE,IAAa,IAAIC,GAAuB5E,CAAO,GAC/C6B,IAAagD,KACbf,IAAae;AACnB,UAAI1D,IAAuB;AAC3B2D,MAAAA,GACE,mBAAmB9F,KAAS,OAAOA,EAAM+F,iBAAkB,YAC3D;AAAA;AAAA;AAAA;AAAA,uHAKF,GAEAC,GAAU,MAAM;AACdL,QAAAA,EAAWM,KAAI,GACf9D,IAAe+D,GAAY;AAAA,MAC7B,CAAC,GAEDC,GAAY,MAAM;AAChBR,QAAAA,EAAWS,QAAO;AAAA,MACpB,CAAC,GAEDC,EACE,MAAMrG,EAAM8C,OACZ,CAACA,GAAOwD,GAAUC,MAAc;AAC9B,QAAIzD,MAAUwD,KACZX,EAAWa,kBAAkBxG,EAAM8C,KAAK;AAAA,MAE5C,CACF,GACAuD,EACE,MAAMrG,EAAMyG,MACZ,CAAC3D,GAAOwD,GAAUC,MAAc;AAC9B,QAAKG,GAAQ5D,GAAOwD,CAAQ,KAC1BX,EAAWgB,iBAAiB3G,EAAMyG,IAAI;AAAA,MAE1C,GACA;AAAA,QAAEG,MAAM;AAAA,MAAK,CACf;AAEA,YAAM9C,IAAWA,CAACD,GAAyBgD,GAAqBnC,MAAwC;AACtGiB,QAAAA,EAAWmB,aAAajD,GAAQgD,CAAW;AAAA,SAGvCpD,IAAWA,CAACX,GAAe4B,MAA6B;AAC5DiB,QAAAA,EAAWoB,aAAajE,CAAK;AAAA,SAGzB0B,IAAUE,CAAAA,MAAwBiB,EAAWqB,WAAWtC,CAAC,GAEzDJ,IAAWI,CAAAA,MAAwBiB,EAAWsB,YAAYvC,CAAC,GAE3DwC,IAAeA,MAAYvB,EAAWwB,eAEtCC,IAAoB1C,CAAAA,MAAwBiB,EAAWyB,iBAAiB1C,CAAC;AAE/E,eAAS2C,IAA0B;AACjC,cAAM;AAAA,UACJC,MAAAA;AAAAA,UACAC,QAAAA;AAAAA,UACAC,YAAAA;AAAAA,UACAC,cAAAA;AAAAA,UACAC,QAAAA;AAAAA,UACAC,aAAAA;AAAAA,UACAC,OAAAA;AAAAA,UACAC,WAAAA;AAAAA,UACAC,WAAAA;AAAAA,UACAC,UAAAA;AAAAA,UACAhC,eAAAA;AAAAA,UACAiC,gBAAAA;AAAAA,UACAC,WAAAA;AAAAA,UACAnF,OAAAA;AAAAA,UACAoF,IAAAA;AAAAA,QACD,IAAGlI,GACE;AAAA,UAAEO,YAAAA;AAAAA,UAAYiB,kBAAAA;AAAAA,UAAkBZ,WAAAA;AAAAA,QAAW,IAAGR,GAI9C+H,IAAa;AAAA,UACjBP,OAAAA;AAAAA,UACAC,WAJuB,OAAO9B,KAAkB,aAK5CqC,EAAIP,CAAS,IACbO,EACE;AAAA,YACE,CAAC9I,CAAS,GAAG;AAAA,YACb,CAAC,GAAGA,CAAS,WAAW,GAAGyI;AAAAA,UAC5B,GACDF,CACF;AAAA,UACJQ,SAASjB;AAAAA,UACTvB,KAAKhD;AAAAA,UACLqF,IAAAA;AAAAA,UACA,GAAG1G;AAAAA;AAAAA,UAEH8G,UAAU;AAAA,UACV,GAAGpH,EAAY;AAAA,WAGXqH,IAAwC;AAAA,UAC5CR,UAAAA;AAAAA,UACAJ,aAAAA;AAAAA,UACAM,WAAWA;AAAAA;AAAAA,UAEXtE,UAAUF;AAAAA,UACVU,SAAS+C;AAAAA,UACT,cAAclH,EAAM,YAAY;AAAA,UAChC,mBAAmBA,EAAM,iBAAiB;AAAA,UAC1C,gBAAgBA,EAAM,cAAc;AAAA,UACpC,qBAAqBA,EAAM,mBAAmB;AAAA,UAC9C,oBAAoBA,EAAM,kBAAkB;AAAA,UAC5C,iBAAiBA,EAAM,eAAe;AAAA;AAAA,UAEtC0H,QAAAA;AAAAA;AAAAA,UAEAH,QAAQA,KAAUC;AAAAA,UAClBC,cAAAA;AAAAA,UACAK,WAAAA;AAAAA,UACAE,gBAAAA;AAAAA,UACAV,MAAAA;AAAAA,UACA9C,QAAQA;AAAAA,UACRF,SAASA;AAAAA;AAGX,eAAAkE,EAAA,OACWL,GAAU,CAChB,OAAOpC,KAAkB,aAAUyC,EAAAC,IAAAC,EAE3BH,GAAU;AAAA,UAAA,YACF,OAAOzF,IAAU,MAAcA,IAAQvC;AAAAA,UAAU,OACvD6B,MAAMuG,KAAK/H,EAAUgI,OAAM,CAAE;AAAA,UAAC,eACtB7C;AAAAA,UAAa,eAAA;AAAA,UAAA,gBAEZ;AAAA,YAAE,GAAG/F;AAAAA,UAAM;AAAA,QAAC,CAAA,GAAA,IAAA,IAAAwI,EAAAK,IAAAH,EAGlBH,GAAU;AAAA,UAAA,OAAwB,OAAOzF,IAAU,MAAcA,IAAQvC;AAAAA,SACtF,GAAA,IAAA,CAAA,CAAA;AAAA,MAGP;AAEA,eAASuI,IAAgB;AACvB,cAAMC,IAAoB,GAAGzJ,CAAS;AACtC,eAAAkJ,EAAA,OAAA;AAAA,UAAA,OACcO;AAAAA,WAAiBP,CAAAA,EAAAQ,IAAA,MAAA,IAAA,CAAA,CAAA;AAAA,MAIjC;AAEA,eAASC,EAAapF,GAAyBgD,GAAiC;AAC9E,cAAM;AAAA,UAAEnG,YAAAA;AAAAA,QAAY,IAAGN;AAGvB,eAAAoI,EAAAU,IAAA;AAAA,UAAA,UAEc;AAAA,UAAK,UACLpF,CAACqF,GAAoBzE,MAAkCZ,EAASqF,GAAGtC,CAAc;AAAA,UAAC,SAL9EA,MAAgBnG;AAAAA,UAOZ,cACJ0I,MAAMzD,EAAW0D,uBAAuBxC,CAAW;AAAA,UAAC,KAC7DhD,EAAOyF,OAAOzF,EAAO0F,QAAQ1F,EAAOf,QAAQ+D;AAAAA,UAAW,QACpDhD;AAAAA,QAAM,GAAA;AAAA,UAAA2F,SAAAA,MAEb3F,CAAAA,EAAO0F,KAAK;AAAA,QAAA,CAAA;AAAA,MAGnB;AAEA,eAASE,IAA+B;AACtC,cAAM;AAAA,UAAEC,WAAAA;AAAAA,UAAWC,eAAAA;AAAAA,UAAeC,mBAAAA;AAAAA,UAAmBC,SAAAA;AAAAA,UAASC,cAAAA;AAAAA,QAAc,IAAG9J,GACzE;AAAA,UAAEQ,SAAAA;AAAAA,UAASF,kBAAAA;AAAAA,QAAkB,IAAGF,GAChC2J,IAAU3B,EACd;AAAA,UACE,CAAC,GAAG9I,CAAS,cAAc,GAAG;AAAA,QAC/B,GACDsK,CACF;AAEA,YAAII;AAEJ,QAAIxJ,EAAQyJ,WAAW,IACrBD,IAAcF,KAAAA,gBAAAA,MAEdE,IAAcxJ,EAAQ0J,OAAQrG,CAAAA,MAAWA,EAAOsG,IAAI,EAAEC,IAAI,CAACvG,GAAQwG,MAAMpB,EAAapF,GAAQwG,CAAC,CAAC;AAGlG,cAAMzC,IAAQ;AAAA,UACZ8B,WAAWY,EAASZ,CAAS;AAAA,UAC7Ba,UAAUD,EAAShK,CAAgB;AAAA,UACnC,GAAGqJ;AAAAA;AAEL,eAAAnB,EAAA,OAAA;AAAA,UAAA,OACcuB;AAAAA,UAAO,MAAA;AAAA,UAAA,OAAwBnC;AAAAA,UAAK,IAAM,GAAGtI,CAAS,IAAI6C,CAAY;AAAA,QAAE,GAAA,CAChF0H,IAAwBf,EAAa,IAA3BkB,CAA6B,CAAA;AAAA,MAG/C;AAEA,aAAO,MAAM;AACX,cAAM;AAAA,UACJQ,UAAAA;AAAAA,UACAC,QAAAA;AAAAA,UACAC,QAAAA;AAAAA,UACAC,iBAAAA;AAAAA,UACAC,iBAAAA;AAAAA,UACAC,oBAAAA;AAAAA,UACAC,iBAAAA;AAAAA,UACAC,mBAAAA;AAAAA,QACD,IAAG/K,GACE;AAAA,UAAES,SAAAA;AAAAA,UAASK,UAAAA;AAAAA,QAAU,IAAGV,GACxB4K,IAAQ3D,KACR/D,IAAamG;AACnB,eAAAjB,EAAAyC,IAAA;AAAA,UAAA,iBAEqBN;AAAAA,UAAe,iBACfC;AAAAA,UAAe,oBACZC;AAAAA,UAAkB,SAAA;AAAA,UAAA,QAE9BJ;AAAAA,UAAM,SACLhK;AAAAA,UAAO,SACP6C;AAAAA,UAAU,UACTkH;AAAAA,UAAQ,KACb1F;AAAAA,UAAU,QAEP4F;AAAAA,UAAM,iBACGI;AAAAA,UAAe,mBACbC;AAAAA,UAAiB,UAC1BjK;AAAAA,QAAQ,GAAA/B,GAEjBiM,CAAK,IAALA,IAAK;AAAA,UAAAxB,SAAAA,MAAA,CAALwB,CAAK;AAAA,QAAA,CAAA;AAAA;IAId;AAAA,EACF,CAAC;AACH;AAEA,SAASjL,IAA8B;AACrC,QAAMmL,IAAgD;AAAA,IACpD,cAAcC,EAAUC;AAAAA,IACxB,mBAAmBD,EAAUC;AAAAA,IAC7B,gBAAgB,CAACD,EAAUE,MAAMF,EAAUC,MAAM;AAAA,IACjD,qBAAqBD,EAAUC;AAAAA,IAC/B,oBAAoBD,EAAUC;AAAAA,IAC9B,iBAAiBD,EAAUE;AAAAA,IAC3BpD,WAAWkD,EAAUE;AAAAA,IACrBR,oBAAoBM,EAAUE;AAAAA,IAC9BxD,WAAWsD,EAAUC;AAAAA,IACrBE,UAAUH,EAAUI;AAAAA,IACpB9E,MAAM0E,EAAUK;AAAAA,IAChBC,aAAaN,EAAUE;AAAAA,IACvBK,cAAcP,EAAUQ,UAAU,CAACR,EAAUC,QAAQD,EAAUS,MAAM,CAAC;AAAA,IACtEjL,0BAA0BwK,EAAUE;AAAAA,IACpCtD,UAAUoD,EAAUE;AAAAA,IACpBQ,0BAA0BV,EAAUE;AAAAA,IACpCzB,mBAAmBuB,EAAUC;AAAAA,IAC7BzB,eAAewB,EAAUW;AAAAA,IACzBhC,cAAcqB,EAAUY;AAAAA,IACxB7D,IAAIiD,EAAUC;AAAAA,IACd5D,YAAY2D,EAAUI;AAAAA,IACtB9D,cAAc0D,EAAUC;AAAAA,IACxB3H,UAAU0H,EAAUY;AAAAA,IACpBjI,UAAUqH,EAAUY;AAAAA,IACpB5H,SAASgH,EAAUY;AAAAA,IACnBvH,QAAQ2G,EAAUY;AAAAA,IAClBzH,SAAS6G,EAAUY;AAAAA,IACnBpI,UAAUwH,EAAUY;AAAAA,IACpBtK,WAAW0J,EAAUY;AAAAA,IACrBvB,UAAUwB;AAAAA,IACVrE,aAAawD,EAAUC;AAAAA,IACvB7D,QAAQ4D,EAAUI;AAAAA,IAClBU,oBAAoBd,EAAUE;AAAAA,IAC9Ba,oBAAoBf,EAAUE;AAAAA,IAC9BpH,yBAAyBkH,EAAUY;AAAAA,IACnCI,YAAYhB,EAAUY;AAAAA,IACtBK,oBAAoBjB,EAAUY;AAAAA,IAC9BrE,QAAQyD,EAAUI;AAAAA,IAClBzD,WAAWqD,EAAUE;AAAAA,IACrB/D,MAAM0E;AAAAA,IACNpE,OAAOuD,EAAUW;AAAAA,IACjBhB,iBAAiBK,EAAUQ,UAAU,CAACR,EAAUE,MAAMF,EAAUC,MAAM,CAAC;AAAA,IACvE1B,WAAWyB,EAAUQ,UAAU,CAACR,EAAUC,QAAQD,EAAUS,MAAM,CAAC;AAAA,IACnEjB,iBAAiBQ,EAAUS;AAAAA,IAC3BhB,iBAAiBO,EAAUS;AAAAA,IAC3BnB,QAAQU,EAAUQ,UAAU,CAACR,EAAUE,MAAMF,EAAUY,MAAMZ,EAAUW,MAAM,CAAC;AAAA,IAC9Ef,mBAAmBI,EAAUY;AAAAA,IAC7BhG,eAAeoF,EAAUY;AAAAA,IACzBjJ,OAAOqI,EAAUQ,UAAU,CAACR,EAAUC,QAAQD,EAAUS,MAAM,CAAC;AAAA,IAC/D5D,gBAAgBgE;AAAAA,IAChBtB,QAAQS,EAAUS;AAAAA,IAClB/B,SAASsB,EAAUE;AAAAA,KAGfgB,IAAe;AAAA,IACnBvB,iBAAiB;AAAA,IACjBL,QAAQ;AAAA,IACRC,QAAQ4B,GAAeC;AAAAA,IACvB/B,UAAU;AAAA,IACV/D,MAAM,CAAQ;AAAA,IACdqB,WAAW;AAAA,IACXR,MAAM;AAAA,IACNhD,SAASkI;AAAAA,IACT/I,UAAU+I;AAAAA,IACVrI,SAASqI;AAAAA,IACThI,QAAQgI;AAAAA,IACR1I,UAAU0I;AAAAA,IACV7I,UAAU6I;AAAAA,IACVN,oBAAoB;AAAA,IACpBjI,yBAAyBuI;AAAAA,IACzB7L,0BAA0B;AAAA,IAC1BkL,0BAA0B;AAAA,IAC1BhC,SAAS;AAAA,IACTH,WAAW;AAAA,IACX1B,gBAAgB;AAAA,IAChBC,WAAW;AAAA,IACX6B,cAAc0C;AAAAA,IACd/K,WAAW+K;AAAAA;AAAAA;AAAAA;AAIb,SAAOC,GAAavB,GAAWmB,CAAY;AAC7C;AAEA,MAAMK,KAAe3M,EAA0B,GAG/C8B,KAAehC,GAAkB;"}