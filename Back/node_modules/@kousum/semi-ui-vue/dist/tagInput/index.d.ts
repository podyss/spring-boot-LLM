import { VNode, CSSProperties, VNodeRef, PropType } from 'vue';
import { strings } from '@douyinfe/semi-foundation/lib/es/tagInput/constants';
import '@douyinfe/semi-foundation/lib/es/tagInput/tagInput.css';
import { ArrayElement } from '../_base/base';
import { PopoverProps } from '../popover';
import { CombineProps, VueJsxNode } from '../interface';
export type Size = ArrayElement<typeof strings.SIZE_SET>;
export type RestTagsPopoverProps = PopoverProps;
type ValidateStatus = 'default' | 'error' | 'warning';
export type SortableItemFuncArg = {
    element?: VNodeRef;
    handleRef?: VNodeRef;
    attributes?: any;
};
export interface TagInputProps {
    className?: string;
    clearIcon?: VueJsxNode;
    defaultValue?: string[];
    disabled?: boolean;
    inputValue?: string;
    maxLength?: number;
    max?: number;
    maxTagCount?: number;
    showRestTagsPopover?: boolean;
    restTagsPopoverProps?: RestTagsPopoverProps;
    showContentTooltip?: boolean;
    allowDuplicates?: boolean;
    addOnBlur?: boolean;
    draggable?: boolean;
    expandRestTagsOnClick?: boolean;
    onAdd?: (addedValue: string[]) => void;
    onBlur?: (e: MouseEvent) => void;
    onChange?: (value: string[]) => void;
    onExceed?: (value: string[]) => void;
    onFocus?: (e: MouseEvent) => void;
    onInputChange?: (value: string, e: MouseEvent) => void;
    onInputExceed?: (value: string) => void;
    onKeyDown?: (e: KeyboardEvent) => void;
    onRemove?: (removedValue: string, idx: number) => void;
    placeholder?: string;
    insetLabel?: VNode | string;
    insetLabelId?: string;
    prefix?: VNode | string;
    renderTagItem?: (value: string, index: number, onClose: () => void) => VueJsxNode;
    separator?: string | string[] | null;
    showClear?: boolean;
    size?: Size;
    style?: CSSProperties;
    suffix?: VNode | string;
    validateStatus?: ValidateStatus;
    value?: string[] | undefined;
    autoFocus?: boolean;
    'aria-label'?: string;
    preventScroll?: boolean;
}
export interface TagInputState {
    tagsArray?: string[];
    inputValue?: string;
    focusing?: boolean;
    hovering?: boolean;
    active?: boolean;
    entering?: boolean;
}
export declare const vuePropsType: CombineProps<TagInputProps>;
declare const Index: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    maxLength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxTagCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    showRestTagsPopover: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    restTagsPopoverProps: PropType<PopoverProps> | {
        type: PropType<PopoverProps>;
        default?: any;
        required?: false;
    };
    showContentTooltip: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    allowDuplicates: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    addOnBlur: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    draggable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandRestTagsOnClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAdd: PropType<(addedValue: string[]) => void> | {
        type: PropType<(addedValue: string[]) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string[]) => void> | {
        type: PropType<(value: string[]) => void>;
        default?: any;
        required?: false;
    };
    onExceed: PropType<(value: string[]) => void> | {
        type: PropType<(value: string[]) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInputChange: PropType<(value: string, e: MouseEvent) => void> | {
        type: PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInputExceed: PropType<(value: string) => void> | {
        type: PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onRemove: PropType<(removedValue: string, idx: number) => void> | {
        type: PropType<(removedValue: string, idx: number) => void>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    renderTagItem: PropType<(value: string, index: number, onClose: () => void) => VueJsxNode> | {
        type: PropType<(value: string, index: number, onClose: () => void) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    separator: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    suffix: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<ValidateStatus> | {
        type: PropType<ValidateStatus>;
        default?: any;
        required?: false;
    };
    value: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    inputValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    maxLength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    max: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxTagCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    showRestTagsPopover: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    restTagsPopoverProps: PropType<PopoverProps> | {
        type: PropType<PopoverProps>;
        default?: any;
        required?: false;
    };
    showContentTooltip: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    allowDuplicates: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    addOnBlur: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    draggable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandRestTagsOnClick: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAdd: PropType<(addedValue: string[]) => void> | {
        type: PropType<(addedValue: string[]) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string[]) => void> | {
        type: PropType<(value: string[]) => void>;
        default?: any;
        required?: false;
    };
    onExceed: PropType<(value: string[]) => void> | {
        type: PropType<(value: string[]) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInputChange: PropType<(value: string, e: MouseEvent) => void> | {
        type: PropType<(value: string, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onInputExceed: PropType<(value: string) => void> | {
        type: PropType<(value: string) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onRemove: PropType<(removedValue: string, idx: number) => void> | {
        type: PropType<(removedValue: string, idx: number) => void>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    prefix: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    renderTagItem: PropType<(value: string, index: number, onClose: () => void) => VueJsxNode> | {
        type: PropType<(value: string, index: number, onClose: () => void) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    separator: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default" | "large"> | {
        type: PropType<"small" | "default" | "large">;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    suffix: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<ValidateStatus> | {
        type: PropType<ValidateStatus>;
        default?: any;
        required?: false;
    };
    value: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Index;
