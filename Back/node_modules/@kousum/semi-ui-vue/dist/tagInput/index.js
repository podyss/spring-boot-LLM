import { defineComponent as pe, useSlots as ge, ref as D, reactive as me, watch as he, onMounted as Ce, createVNode as d, mergeProps as O, createTextVNode as ve, Fragment as be, isVNode as ye } from "vue";
import * as t from "../PropTypes";
import { vuePropsMake as we } from "../PropTypes";
import m from "classnames";
import { noop as v, isArray as xe, isString as A, isNull as R, isUndefined as M, isFunction as Ie } from "lodash";
import { cssClasses as Te } from '@douyinfe/semi-foundation/lib/es/tagInput/constants';
import '@douyinfe/semi-foundation/lib/es/tagInput/tagInput.css';
import $e from '@douyinfe/semi-foundation/lib/es/tagInput/foundation';
import { useHasInProps as Pe, useBaseComponent as ke } from "../_base/baseComponent";
import Se from "../tag";
import Ae from "../input";
import Oe from "../popover";
import Ee from "../typography/paragraph";
import { IconClear as Be, IconHandle as Fe } from "@kousum/semi-icons-vue";
import { isSemiIcon as L } from "../_utils";
import { Sortable as Ve } from "../_sortable";
function N(l) {
  return typeof l == "function" || Object.prototype.toString.call(l) === "[object Object]" && !ye(l);
}
function De(l, {
  slots: T
}) {
  var $;
  return d("div", O({
    class: `${a}-sortable-list`
  }, l), [($ = T.default) == null ? void 0 : $.call(T)]);
}
const a = Te.PREFIX, Re = {
  // children: PropTypes.node as PropType<TagInputProps['children']>,
  clearIcon: t.node,
  style: t.object,
  className: t.string,
  disabled: t.bool,
  allowDuplicates: t.bool,
  max: t.number,
  maxTagCount: t.number,
  maxLength: t.number,
  showRestTagsPopover: t.bool,
  restTagsPopoverProps: t.object,
  showContentTooltip: t.bool,
  defaultValue: t.array,
  value: t.array,
  inputValue: t.string,
  placeholder: t.string,
  separator: t.oneOfType([t.string, t.array]),
  showClear: t.bool,
  addOnBlur: t.bool,
  draggable: t.bool,
  expandRestTagsOnClick: t.bool,
  autoFocus: t.bool,
  renderTagItem: t.func,
  onBlur: t.func,
  onFocus: t.func,
  onChange: t.func,
  onInputChange: t.func,
  onExceed: t.func,
  onInputExceed: t.func,
  onAdd: t.func,
  onRemove: t.func,
  onKeyDown: t.func,
  size: t.string,
  validateStatus: t.string,
  prefix: t.oneOfType([t.string, t.node]),
  suffix: t.oneOfType([t.string, t.node]),
  "aria-label": t.string,
  preventScroll: t.bool,
  insetLabel: t.node,
  insetLabelId: t.string
}, Me = {
  showClear: !1,
  addOnBlur: !1,
  allowDuplicates: !0,
  showRestTagsPopover: !0,
  autoFocus: !1,
  draggable: !1,
  expandRestTagsOnClick: !0,
  showContentTooltip: !0,
  separator: ",",
  size: "default",
  validateStatus: "default",
  onBlur: v,
  onFocus: v,
  onChange: v,
  onInputChange: v,
  onExceed: v,
  onInputExceed: v,
  onAdd: v,
  onRemove: v,
  onKeyDown: v
}, Le = we(Re, Me), en = /* @__PURE__ */ pe({
  props: {
    ...Le
  },
  name: "TagInput",
  setup(l, {
    expose: T
  }) {
    const {
      getProps: $
    } = Pe();
    ge();
    const P = D(null), E = D(null);
    let k = null;
    const u = me({
      tagsArray: l.defaultValue || [],
      inputValue: "",
      focusing: !1,
      hovering: !1,
      active: !1,
      entering: !1
    }), {
      adapter: K,
      getDataAttr: j
    } = ke(l, u), i = new $e(z());
    function z() {
      return {
        ...K(),
        setInputValue: (e) => {
          u.inputValue = e;
        },
        setTagsArray: (e) => {
          u.tagsArray = e;
        },
        setFocusing: (e) => {
          u.focusing = e;
        },
        toggleFocusing: (e) => {
          const {
            preventScroll: n
          } = l, o = P.value;
          e ? o && o.focus({
            preventScroll: n
          }) : o && o.blur(), u.focusing = e;
        },
        setHovering: (e) => {
          u.hovering = e;
        },
        setActive: (e) => {
          u.active = e;
        },
        setEntering: (e) => {
          u.entering = e;
        },
        getClickOutsideHandler: () => k,
        notifyBlur: (e) => {
          l.onBlur(e);
        },
        notifyFocus: (e) => {
          l.onFocus(e);
        },
        notifyInputChange: (e, n) => {
          l.onInputChange(e, n);
        },
        notifyTagChange: (e) => {
          l.onChange(e);
        },
        notifyTagAdd: (e) => {
          l.onAdd(e);
        },
        notifyTagRemove: (e, n) => {
          l.onRemove(e, n);
        },
        notifyKeyDown: (e) => {
          l.onKeyDown(e);
        },
        registerClickOutsideHandler: (e) => {
          k = (n) => {
            const o = E.value, r = n.target, s = n.composedPath && n.composedPath() || [r];
            o && !o.contains(r) && !s.includes(o) && e(n);
          }, document.addEventListener("click", k, !1);
        },
        unregisterClickOutsideHandler: () => {
          document.removeEventListener("click", k, !1), k = null;
        }
      };
    }
    function H(e, n) {
      const {
        value: o,
        inputValue: r
      } = e, {
        tagsArray: s
      } = n;
      let c;
      return xe(o) ? c = o : "value" in $(e) && !o ? c = [] : c = s, {
        tagsArray: c,
        inputValue: A(r) ? r : n.inputValue
      };
    }
    he([() => l.value, () => l.inputValue, () => u.inputValue], (e) => {
      const n = H({
        ...$(l)
      }, {
        ...u
      });
      n && Object.keys(n).forEach((o) => {
        u[o] = n[o];
      });
    }, {
      deep: !0,
      immediate: !0
    }), Ce(() => {
      const {
        disabled: e,
        autoFocus: n,
        preventScroll: o
      } = l;
      !e && n && (P.value.focus({
        preventScroll: o
      }), i.handleClick()), i.init();
    });
    const W = (e) => {
      i.handleInputChange(e);
    }, U = (e) => {
      i.handleKeyDown(e);
    }, X = (e) => {
      i.handleInputFocus(e);
    }, _ = (e) => {
      i.handleInputBlur(e);
    }, q = (e) => {
      i.handleClearBtn(e);
    }, G = (e) => {
      i.handleClearEnterPress(e);
    }, J = (e) => {
      i.handleTagClose(e);
    }, Q = (e) => {
      i.handleInputMouseLeave();
    }, Y = (e) => {
      i.handleClick(e);
    }, Z = (e) => {
      i.handleInputMouseEnter();
    }, B = (e) => {
      i.handleClickPrefixOrSuffix(e);
    }, F = (e) => {
      i.handlePreventMouseDown(e);
    };
    function ee() {
      const {
        hovering: e,
        tagsArray: n,
        inputValue: o
      } = u, {
        showClear: r,
        disabled: s,
        clearIcon: c
      } = l, h = m(`${a}-clearBtn`, {
        [`${a}-clearBtn-invisible`]: !e || o === "" && n.length === 0 || s
      });
      return r ? d("div", {
        role: "button",
        tabindex: 0,
        "aria-label": "Clear TagInput value",
        class: h,
        onClick: (p) => q(p),
        onKeypress: (p) => G(p)
      }, [c || d(Be, null, null)]) : null;
    }
    function ne() {
      const {
        prefix: e,
        insetLabel: n,
        insetLabelId: o
      } = l, r = e || n;
      if (R(e) || M(e))
        return null;
      const s = m(`${a}-prefix`, {
        [`${a}-inset-label`]: n,
        [`${a}-prefix-text`]: r && A(r),
        // eslint-disable-next-line max-len
        [`${a}-prefix-icon`]: L(r)
      });
      return (
        // eslint-disable-next-line jsx-a11y/no-static-element-interactions,jsx-a11y/click-events-have-key-events
        d("div", {
          class: s,
          onMousedown: F,
          onClick: B,
          id: o,
          "x-semi-prop": "prefix"
        }, [r])
      );
    }
    function te() {
      const {
        suffix: e
      } = l;
      if (R(e) || M(e))
        return null;
      const n = m(`${a}-suffix`, {
        [`${a}-suffix-text`]: e && A(e),
        // eslint-disable-next-line max-len
        [`${a}-suffix-icon`]: L(e)
      });
      return (
        // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
        d("div", {
          class: n,
          onMousedown: F,
          onClick: B,
          "x-semi-prop": "suffix"
        }, [e])
      );
    }
    const oe = () => {
      const {
        tagsArray: e
      } = u;
      return e.map((n, o) => V(n, o));
    }, V = (e, n, o) => {
      const {
        size: r,
        disabled: s,
        renderTagItem: c,
        showContentTooltip: h,
        draggable: p
      } = l, {
        active: S
      } = u, f = S && p, C = m(`${a}-wrapper-tag`, {
        [`${a}-wrapper-tag-size-${r}`]: r,
        [`${a}-wrapper-tag-icon`]: f
      }), y = m(`${a}-wrapper-typo`, {
        [`${a}-wrapper-typo-disabled`]: s
      }), b = m({
        [`${a}-drag-item`]: f,
        [`${a}-wrapper-tag-icon`]: f
      }), w = o && o(() => d(Fe, {
        className: `${a}-drag-handler`
      }, null)), x = f ? e : `${n}${e}`, I = () => {
        !s && J(n);
      };
      return Ie(c) ? d("div", {
        class: b,
        key: x
      }, [f && o ? d(w, null, null) : null, c(e, n, I)]) : d(Se, {
        className: C,
        color: "white",
        size: r === "small" ? "small" : "large",
        type: "light",
        onClose: I,
        closable: !s,
        key: x,
        visible: !0,
        "aria-label": `${s ? "" : "Closable "}Tag: ${e}`
      }, {
        default: () => [f && o ? d(w, null, null) : null, d(Ee, {
          className: y,
          ellipsis: {
            showTooltip: h,
            rows: 1
          }
        }, N(e) ? e : {
          default: () => [e]
        })]
      });
    }, ae = (e) => {
      const {
        id: n,
        sortableHandle: o
      } = e, {
        tagsArray: r
      } = u, s = r.indexOf(n);
      return V(n, s, o);
    }, re = (e) => {
      const n = u.tagsArray, {
        active: o,
        over: r
      } = {
        active: e.operation.source,
        over: e.operation.target
      };
      if (!(!o || !r) && o.id !== r.id) {
        const s = n.indexOf("" + o.id), c = n.indexOf("" + r.id);
        i.handleSortEnd({
          oldIndex: s,
          newIndex: c
        });
      }
    };
    function le() {
      const {
        disabled: e,
        maxTagCount: n,
        showRestTagsPopover: o,
        restTagsPopoverProps: r = {},
        draggable: s,
        expandRestTagsOnClick: c
      } = l, {
        tagsArray: h,
        active: p
      } = u, S = m(`${a}-wrapper-n`, {
        [`${a}-wrapper-n-disabled`]: e
      });
      let f = [];
      const C = oe();
      let y = [...C];
      (!p || !c) && n && n < C.length && (y = C.slice(0, n), f = C.slice(n));
      const b = d("span", {
        class: S
      }, [ve("+"), h.length - n]), w = C.map((x, I) => ({
        item: x,
        key: h[I]
      }));
      return p && s && w.length > 0 ? d(Ve, {
        items: h,
        onSortEnd: re,
        renderItem: ae,
        container: De,
        prefix: a,
        dragOverlayCls: `${a}-right-item-drag-item-move`
      }, null) : d(be, null, [y, f.length > 0 && (o ? d(Oe, O({
        content: f,
        showArrow: !0,
        trigger: "hover",
        position: "top",
        autoAdjustOverflow: !0
      }, r), N(b) ? b : {
        default: () => [b]
      }) : b)]);
    }
    function se() {
      P.value.blur(), i.clickOutsideCallBack();
    }
    function ie() {
      var o;
      const {
        preventScroll: e,
        disabled: n
      } = l;
      (o = P.value) == null || o.focus(), n || i.handleClick();
    }
    const ue = (e) => {
      i.handleInputCompositionStart(e);
    }, ce = (e) => {
      i.handleInputCompositionEnd(e);
    };
    return T({
      blur: se,
      focus: ie
    }), () => {
      const {
        size: e,
        style: n,
        className: o,
        disabled: r,
        placeholder: s,
        validateStatus: c,
        prefix: h,
        insetLabel: p,
        suffix: S
      } = l, {
        focusing: f,
        hovering: C,
        tagsArray: y,
        inputValue: b,
        active: w
      } = u, x = m(a, o, {
        [`${a}-focus`]: f || w,
        [`${a}-disabled`]: r,
        [`${a}-hover`]: C && !r,
        [`${a}-error`]: c === "error",
        [`${a}-warning`]: c === "warning",
        [`${a}-small`]: e === "small",
        [`${a}-large`]: e === "large",
        [`${a}-with-prefix`]: !!h || !!p,
        [`${a}-with-suffix`]: !!S
      }), I = m(`${a}-wrapper-input`, `${a}-wrapper-input-${e}`), de = m(`${a}-wrapper`);
      return d("div", O({
        ref: E,
        style: n,
        class: x,
        "aria-disabled": r,
        "aria-label": l["aria-label"],
        "aria-invalid": c === "error",
        onMouseenter: (g) => {
          Z();
        },
        onMouseleave: (g) => {
          Q();
        },
        onClick: (g) => {
          Y(g);
        }
      }, j()), [ne(), d("div", {
        class: de
      }, [le(), d(Ae, {
        "aria-label": "input value",
        ref: P,
        className: I,
        disabled: r,
        value: b,
        size: e,
        placeholder: y.length === 0 ? s : "",
        onKeyDown: (g) => {
          U(g);
        },
        onChange: (g, fe) => {
          W(fe);
        },
        onBlur: (g) => {
          _(g);
        },
        onFocus: (g) => {
          X(g);
        },
        onCompositionstart: ue,
        onCompositionend: ce
      }, null)]), ee(), te()]);
    };
  }
});
export {
  en as default,
  Le as vuePropsType
};
//# sourceMappingURL=index.js.map
