import { CSSProperties, PropType, VNode } from 'vue';
import { BaseProps } from '../_base/baseComponent';
import type { SubNavProps, ToggleIcon } from './SubNav';
import SubNav from './SubNav';
import type { NavItemProps, ItemKey } from './Item';
import Item from './Item';
import type { NavFooterProps } from './Footer';
import Footer from './Footer';
import type { NavHeaderProps } from './Header';
import Header from './Header';
import '@douyinfe/semi-foundation/lib/es/navigation/navigation.css';
import { DropdownProps } from '../dropdown';
import { Motion } from '../_base/base';
import { CombineProps, VueJsxNode } from '../interface';
export type Mode = 'vertical' | 'horizontal';
export { NavFooterProps, NavHeaderProps, ToggleIcon, ItemKey, SubNavProps, NavItemProps };
export interface OnSelectedData {
    itemKey: ItemKey;
    selectedKeys: (string | number)[];
    selectedItems: (NavItemProps | SubNavProps)[];
    domEvent: MouseEvent;
    isOpen: boolean;
}
export interface SubNavPropsWithItems extends SubNavProps {
    items?: (SubNavPropsWithItems | string)[];
}
export interface NavItemPropsWithItems extends NavItemProps {
    items?: (NavItemPropsWithItems | string)[];
}
export type NavItems = (string | SubNavPropsWithItems | NavItemPropsWithItems)[];
export interface NavProps extends BaseProps {
    bodyStyle?: CSSProperties;
    children?: VNode[];
    defaultIsCollapsed?: boolean;
    defaultOpenKeys?: string[];
    defaultSelectedKeys?: string[];
    subDropdownProps?: DropdownProps;
    expandIcon?: VueJsxNode;
    footer?: VNode | NavFooterProps;
    header?: VNode | NavHeaderProps;
    isCollapsed?: boolean;
    items?: NavItems;
    limitIndent?: boolean;
    mode?: Mode;
    multiple?: boolean;
    openKeys?: string[];
    prefixCls?: string;
    selectedKeys?: string[];
    subNavCloseDelay?: number;
    subNavMotion?: Motion;
    subNavOpenDelay?: number;
    toggleIconPosition?: string;
    tooltipHideDelay?: number;
    tooltipShowDelay?: number;
    getPopupContainer?: () => HTMLElement;
    onClick?: (data: {
        itemKey: ItemKey;
        domEvent: MouseEvent;
        isOpen: boolean;
    }) => void;
    onCollapseChange?: (isCollapse: boolean) => void;
    onDeselect?: (data?: any) => void;
    onOpenChange?: (data: {
        itemKey: ItemKey;
        openKeys: ItemKey[];
        domEvent: MouseEvent;
        isOpen: boolean;
    }) => void;
    onSelect?: (data: OnSelectedData) => void;
    renderWrapper?: ({ itemElement, isSubNav, isInSubNav, props, }: {
        itemElement: VNode;
        isInSubNav: boolean;
        isSubNav: boolean;
        props: NavItemProps | SubNavProps;
    }) => VNode;
}
export interface NavState {
    isCollapsed: boolean;
    openKeys: ItemKey[];
    items: any[];
    itemKeysMap: {
        [itemKey: string]: ItemKey[];
    };
    selectedKeys: ItemKey[];
}
export declare const vuePropsType: CombineProps<NavProps>;
declare const Nav: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    bodyStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    defaultIsCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultOpenKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    defaultSelectedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    subDropdownProps: PropType<DropdownProps> | {
        type: PropType<DropdownProps>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    footer: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | NavFooterProps> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | NavFooterProps>;
        default?: any;
        required?: false;
    };
    header: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | NavHeaderProps> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | NavHeaderProps>;
        default?: any;
        required?: false;
    };
    isCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    items: PropType<NavItems> | {
        type: PropType<NavItems>;
        default?: any;
        required?: false;
    };
    limitIndent: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    mode: PropType<Mode> | {
        type: PropType<Mode>;
        default?: any;
        required?: false;
    };
    multiple: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    openKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    selectedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    subNavCloseDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    subNavMotion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    subNavOpenDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    toggleIconPosition: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    tooltipHideDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    tooltipShowDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(data: {
        itemKey: ItemKey;
        domEvent: MouseEvent;
        isOpen: boolean;
    }) => void> | {
        type: PropType<(data: {
            itemKey: ItemKey;
            domEvent: MouseEvent;
            isOpen: boolean;
        }) => void>;
        default?: any;
        required?: false;
    };
    onCollapseChange: PropType<(isCollapse: boolean) => void> | {
        type: PropType<(isCollapse: boolean) => void>;
        default?: any;
        required?: false;
    };
    onDeselect: PropType<(data?: any) => void> | {
        type: PropType<(data?: any) => void>;
        default?: any;
        required?: false;
    };
    onOpenChange: PropType<(data: {
        itemKey: ItemKey;
        openKeys: ItemKey[];
        domEvent: MouseEvent;
        isOpen: boolean;
    }) => void> | {
        type: PropType<(data: {
            itemKey: ItemKey;
            openKeys: ItemKey[];
            domEvent: MouseEvent;
            isOpen: boolean;
        }) => void>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(data: OnSelectedData) => void> | {
        type: PropType<(data: OnSelectedData) => void>;
        default?: any;
        required?: false;
    };
    renderWrapper: PropType<({ itemElement, isSubNav, isInSubNav, props, }: {
        itemElement: VNode;
        isInSubNav: boolean;
        isSubNav: boolean;
        props: NavItemProps | SubNavProps;
    }) => VNode> | {
        type: PropType<({ itemElement, isSubNav, isInSubNav, props, }: {
            itemElement: VNode;
            isInSubNav: boolean;
            isSubNav: boolean;
            props: NavItemProps | SubNavProps;
        }) => VNode>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    bodyStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    children: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
        default?: any;
        required?: false;
    };
    defaultIsCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultOpenKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    defaultSelectedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    subDropdownProps: PropType<DropdownProps> | {
        type: PropType<DropdownProps>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    footer: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | NavFooterProps> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | NavFooterProps>;
        default?: any;
        required?: false;
    };
    header: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | NavHeaderProps> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | NavHeaderProps>;
        default?: any;
        required?: false;
    };
    isCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    items: PropType<NavItems> | {
        type: PropType<NavItems>;
        default?: any;
        required?: false;
    };
    limitIndent: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    mode: PropType<Mode> | {
        type: PropType<Mode>;
        default?: any;
        required?: false;
    };
    multiple: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    openKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    selectedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    subNavCloseDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    subNavMotion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    subNavOpenDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    toggleIconPosition: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    tooltipHideDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    tooltipShowDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement> | {
        type: PropType<() => HTMLElement>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(data: {
        itemKey: ItemKey;
        domEvent: MouseEvent;
        isOpen: boolean;
    }) => void> | {
        type: PropType<(data: {
            itemKey: ItemKey;
            domEvent: MouseEvent;
            isOpen: boolean;
        }) => void>;
        default?: any;
        required?: false;
    };
    onCollapseChange: PropType<(isCollapse: boolean) => void> | {
        type: PropType<(isCollapse: boolean) => void>;
        default?: any;
        required?: false;
    };
    onDeselect: PropType<(data?: any) => void> | {
        type: PropType<(data?: any) => void>;
        default?: any;
        required?: false;
    };
    onOpenChange: PropType<(data: {
        itemKey: ItemKey;
        openKeys: ItemKey[];
        domEvent: MouseEvent;
        isOpen: boolean;
    }) => void> | {
        type: PropType<(data: {
            itemKey: ItemKey;
            openKeys: ItemKey[];
            domEvent: MouseEvent;
            isOpen: boolean;
        }) => void>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(data: OnSelectedData) => void> | {
        type: PropType<(data: OnSelectedData) => void>;
        default?: any;
        required?: false;
    };
    renderWrapper: PropType<({ itemElement, isSubNav, isInSubNav, props, }: {
        itemElement: VNode;
        isInSubNav: boolean;
        isSubNav: boolean;
        props: NavItemProps | SubNavProps;
    }) => VNode> | {
        type: PropType<({ itemElement, isSubNav, isInSubNav, props, }: {
            itemElement: VNode;
            isInSubNav: boolean;
            isSubNav: boolean;
            props: NavItemProps | SubNavProps;
        }) => VNode>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export type NavType = typeof Nav & {
    Item: typeof Item;
    Header: typeof Header;
    Footer: typeof Footer;
    SubNav: typeof SubNav;
};
declare const BaseNav: NavType;
export default BaseNav;
