import { PropType } from 'vue';
import { Locale } from '../locale/interface';
import { VueJsxNode } from '../interface';
export interface CollapseButtonProps {
    prefixCls?: string;
    locale?: Locale['Navigation'];
    collapseText?(isCollapsed: boolean): VueJsxNode;
    isCollapsed?: boolean;
    onClick?(e: boolean): void;
}
declare const CollapseButton: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    locale: PropType<{
        collapseText: string;
        expandText: string;
    }> | {
        type: PropType<{
            collapseText: string;
            expandText: string;
        }>;
        default?: any;
        required?: false;
    };
    collapseText: PropType<(isCollapsed: boolean) => VueJsxNode> | {
        type: PropType<(isCollapsed: boolean) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    isCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: boolean) => void> | {
        type: PropType<(e: boolean) => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    locale: PropType<{
        collapseText: string;
        expandText: string;
    }> | {
        type: PropType<{
            collapseText: string;
            expandText: string;
        }>;
        default?: any;
        required?: false;
    };
    collapseText: PropType<(isCollapsed: boolean) => VueJsxNode> | {
        type: PropType<(isCollapsed: boolean) => VueJsxNode>;
        default?: any;
        required?: false;
    };
    isCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: boolean) => void> | {
        type: PropType<(e: boolean) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default CollapseButton;
