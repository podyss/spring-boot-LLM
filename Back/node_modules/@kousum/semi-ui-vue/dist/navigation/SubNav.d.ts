import { BaseProps } from '../_base/baseComponent';
import '@douyinfe/semi-foundation/lib/es/navigation/navigation.css';
import type { DropdownProps } from '../dropdown';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface ToggleIcon {
    open?: string;
    closed?: string;
}
export interface SubNavProps extends BaseProps {
    disabled?: boolean;
    dropdownStyle?: CSSProperties;
    icon?: VueJsxNode;
    indent?: boolean | number;
    isCollapsed?: boolean;
    isOpen?: boolean;
    itemKey?: string | number;
    level?: number;
    maxHeight?: number;
    onMouseEnter?: any;
    onMouseLeave?: any;
    text?: VueJsxNode;
    expandIcon?: VueJsxNode;
    toggleIcon?: VueJsxNode;
    dropdownProps?: DropdownProps;
    subDropdownProps?: DropdownProps;
}
export interface SubNavState {
    isHovered: boolean;
}
export declare const vuePropsType: CombineProps<SubNavProps>;
declare const SubNav: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    dropdownStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    indent: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    isCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    isOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    itemKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    level: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    text: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    toggleIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dropdownProps: PropType<DropdownProps> | {
        type: PropType<DropdownProps>;
        default?: any;
        required?: false;
    };
    subDropdownProps: PropType<DropdownProps> | {
        type: PropType<DropdownProps>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    dropdownStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    indent: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    isCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    isOpen: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    itemKey: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    level: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    text: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    expandIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    toggleIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    dropdownProps: PropType<DropdownProps> | {
        type: PropType<DropdownProps>;
        default?: any;
        required?: false;
    };
    subDropdownProps: PropType<DropdownProps> | {
        type: PropType<DropdownProps>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default SubNav;
