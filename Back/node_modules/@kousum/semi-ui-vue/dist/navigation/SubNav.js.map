{"version":3,"file":"SubNav.js","sources":["../../src/components/navigation/SubNav.tsx"],"sourcesContent":["import { BaseProps, useBaseComponent } from '../_base/baseComponent';\nimport * as PropTypes from '../PropTypes';\nimport cls from 'classnames';\n\nimport '@douyinfe/semi-foundation/navigation/navigation.scss';\n\nimport isNullOrUndefined from '@douyinfe/semi-foundation/utils/isNullOrUndefined';\nimport SubNavFoundation, { SubNavAdapter } from '@douyinfe/semi-foundation/navigation/subNavFoundation';\nimport { strings, numbers, cssClasses } from '@douyinfe/semi-foundation/navigation/constants';\nimport { IconChevronDown, IconChevronUp, IconChevronRight } from '@kousum/semi-icons-vue';\n\nimport NavItem from './Item';\nimport Dropdown, { DropdownMenu } from '../dropdown';\nimport type { DropdownProps } from '../dropdown';\nimport NavContext, { NavContextType } from './nav-context';\n\nimport { times, get, isNumber, isString } from 'lodash';\nimport Collapsible from '../collapsible';\nimport CSSAnimation from '../_cssAnimation';\n\nimport {\n  cloneVNode,\n  ComponentObjectPropsOptions,\n  CSSProperties,\n  defineComponent,\n  h,\n  isVNode, PropType,\n  reactive,\n  ref,\n  useSlots,\n  VNode,\n} from 'vue';\nimport { useNavContext } from './nav-context/Consumer';\nimport { vuePropsMake } from '../PropTypes';\nimport { CombineProps, VueJsxNode } from '../interface';\n\nexport interface ToggleIcon {\n  open?: string;\n  closed?: string;\n}\n\nexport interface SubNavProps extends BaseProps {\n  disabled?: boolean;\n  dropdownStyle?: CSSProperties;\n  icon?: VueJsxNode;\n  indent?: boolean | number;\n  isCollapsed?: boolean;\n  isOpen?: boolean;\n  itemKey?: string | number;\n  level?: number;\n  maxHeight?: number;\n  onMouseEnter?: any;\n  onMouseLeave?: any;\n  text?: VueJsxNode;\n  expandIcon?: VueJsxNode\n  toggleIcon?: VueJsxNode\n  dropdownProps?: DropdownProps;\n  subDropdownProps?: DropdownProps\n}\n\nexport interface SubNavState {\n  isHovered: boolean;\n}\n\nconst propTypes: CombineProps<SubNavProps> = {\n  /**\n   * Unique identification\n   */\n  itemKey: [PropTypes.string, PropTypes.number],\n  /**\n   * Copywriting\n   */\n  text: PropTypes.node,\n  expandIcon: PropTypes.node,\n  /**\n   * Whether child navigation is expanded\n   */\n  isOpen: PropTypes.bool,\n  /**\n   * Whether it is in the state of being stowed to the sidebar\n   */\n  isCollapsed: PropTypes.bool,\n  /**\n   * Whether to keep the left Icon placeholder\n   */\n  indent: [PropTypes.bool, PropTypes.number],\n  /**\n   * The icon name of the right control switch (on and off status)\n   */\n  toggleIcon: PropTypes.node as PropType<SubNavProps['toggleIcon']>,\n  style: PropTypes.object,\n  /**\n   * Icon name on the left\n   */\n  icon: PropTypes.node,\n  /**\n   * Maximum height (for animation)\n   */\n  maxHeight: PropTypes.number,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  // Is it disabled\n  disabled: PropTypes.bool,\n  level: PropTypes.number,\n  dropdownStyle: PropTypes.object,\n  className: PropTypes.string,\n  dropdownProps: PropTypes.object,\n  subDropdownProps: PropTypes.object,\n\n};\n\nconst defaultProps = {\n  level: 0,\n  indent: false,\n  isCollapsed: false,\n  isOpen: false,\n  maxHeight: numbers.DEFAULT_SUBNAV_MAX_HEIGHT,\n  toggleIcon: {\n    open: <IconChevronUp />,\n    closed: <IconChevronDown />,\n  },\n  disabled: false,\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst SubNav = defineComponent({\n  props: { ...vuePropsType },\n  name: 'SubNav',\n  setup(props, {}) {\n  const slots = useSlots();\n  const { context } = useNavContext();\n\n  const titleRef = ref();\n  const itemRef = ref();\n\n  const state = reactive<SubNavState>({\n    isHovered: false,\n  });\n\n  const { adapter: adapterInject } = useBaseComponent<SubNavProps>(props, state);\n\n  const adapter = adapter_();\n  adapter.setCache('firstMounted', true);\n  const foundation = new SubNavFoundation(adapter);\n  const setItemRef = (ref: any) => {\n    itemRef.value = ref;\n  };\n\n  const setTitleRef = (ref: any) => {\n    titleRef.value = ref;\n  };\n\n  function _invokeContextFunc(funcName: string, ...args: any[]) {\n    // console.log(funcName, args)\n    if (funcName && context.value && typeof context.value[funcName] === 'function') {\n      return context.value[funcName](...args);\n    }\n    return null;\n  }\n\n  function adapter_(): SubNavAdapter<SubNavProps, SubNavState> {\n    return {\n      ...adapterInject<SubNavProps, SubNavState>(),\n      updateIsHovered: (isHovered) => (state.isHovered = isHovered),\n      getOpenKeys: () => context.value && context.value.openKeys,\n      getOpenKeysIsControlled: () => context.value && context.value.openKeysIsControlled,\n      getCanUpdateOpenKeys: () => context.value && context.value.canUpdateOpenKeys,\n      updateOpen: (isOpen) => {\n        return _invokeContextFunc(isOpen ? 'addOpenKeys' : 'removeOpenKeys', props.itemKey);\n      },\n      notifyGlobalOpenChange: (...args) => _invokeContextFunc('onOpenChange', ...args),\n      notifyGlobalOnSelect: (...args) => _invokeContextFunc('onSelect', ...args),\n      notifyGlobalOnClick: (...args) => _invokeContextFunc('onClick', ...args),\n      getIsSelected: (itemKey) =>\n        Boolean(!isNullOrUndefined(itemKey) && get(context.value, 'selectedKeys', []).includes(String(itemKey))),\n      getIsOpen: () => {\n        // console.log(Boolean(context.value && context.value.openKeys && context.value.openKeys.includes(String(props.itemKey))))\n        return Boolean(\n          context.value && context.value.openKeys && context.value.openKeys.includes(String(props.itemKey))\n        );\n      },\n    };\n  }\n\n  const handleClick = (e: MouseEvent) => {\n    // console.log(titleRef.value.contains(e.target))\n    foundation.handleClick(e, titleRef.value);\n  };\n\n  const handleKeyPress = (e: KeyboardEvent) => {\n    foundation.handleKeyPress(e, titleRef.value);\n  };\n\n  const handleDropdownVisible = (visible: boolean) => foundation.handleDropdownVisibleChange(visible);\n\n  function renderIcon(\n    icon: VueJsxNode,\n    pos: string,\n    withTransition?: boolean,\n    isToggleIcon = false,\n    key: number | string = 0\n  ) {\n    const { prefixCls } = context.value;\n\n    let iconSize = 'large';\n    if (pos === strings.ICON_POS_RIGHT) {\n      iconSize = 'default';\n    }\n\n    const className = cls(`${prefixCls}-item-icon`, {\n      [`${prefixCls}-item-icon-toggle-${context.value.toggleIconPosition}`]: isToggleIcon,\n      [`${prefixCls}-item-icon-info`]: !isToggleIcon,\n    });\n\n    const isOpen = adapter.getIsOpen();\n\n    const iconElem = isVNode(icon) ? (\n      withTransition ? (\n        <CSSAnimation\n          animationState={isOpen ? 'enter' : 'leave'}\n          startClassName={`${cssClasses.PREFIX}-icon-rotate-${isOpen ? '180' : '0'}`}\n          children={({ animationClassName }) => {\n            return cloneVNode(icon, { size: iconSize, class: animationClassName });\n          }}\n        ></CSSAnimation>\n      ) : (\n        cloneVNode(icon, { size: iconSize })\n      )\n    ) : null;\n\n    return (\n      <i key={key} class={className}>\n        {iconElem}\n      </i>\n    );\n  }\n\n  function renderTitleDiv() {\n    const { text, icon, itemKey, indent, disabled, level, expandIcon } = props;\n\n    const { mode, isInSubNav, isCollapsed, prefixCls, subNavMotion, limitIndent } = context.value;\n\n    const isOpen = adapter.getIsOpen();\n\n    const titleCls = cls(`${prefixCls}-sub-title`, {\n      [`${prefixCls}-sub-title-selected`]: adapter.getIsSelected(itemKey),\n      [`${prefixCls}-sub-title-disabled`]: disabled,\n    });\n\n    let withTransition = false;\n    let toggleIconType: VueJsxNode = '';\n\n    if (isCollapsed) {\n      if (isInSubNav) {\n        toggleIconType = <IconChevronRight />;\n      } else {\n        toggleIconType = null;\n      }\n    } else if (mode === strings.MODE_HORIZONTAL) {\n      if (isInSubNav) {\n        toggleIconType = <IconChevronRight />;\n      } else {\n        toggleIconType = expandIcon ? expandIcon : <IconChevronDown aria-hidden={true} />;\n        // Horizontal mode does not require animation fix#1198\n        // withTransition = true;\n      }\n    } else {\n      if (subNavMotion) {\n        withTransition = true;\n      }\n      toggleIconType = expandIcon ? expandIcon : <IconChevronDown aria-hidden={true} />;\n    }\n\n    let placeholderIcons = null;\n    if (mode === strings.MODE_VERTICAL && !limitIndent && !isCollapsed) {\n      /* Different icons' amount means different indents.*/\n      const iconAmount = icon && !indent ? level : level - 1;\n      placeholderIcons = times(iconAmount, (index) => renderIcon(null, strings.ICON_POS_RIGHT, false, false, index));\n    }\n\n    const isIconChevronRightShow = (!isCollapsed && isInSubNav && mode === strings.MODE_HORIZONTAL) || (isCollapsed && isInSubNav);\n\n    const titleDiv = (\n      <div\n        role=\"menuitem\"\n        tabindex={isIconChevronRightShow ? -1 : 0}\n        ref={setTitleRef as any}\n        class={titleCls}\n        onClick={handleClick}\n        onKeypress={handleKeyPress}\n        aria-expanded={isOpen ? 'true' : 'false'}\n      >\n        <div class={`${prefixCls}-item-inner`}>\n          {placeholderIcons}\n          {context.value.toggleIconPosition === strings.TOGGLE_ICON_LEFT &&\n            renderIcon(toggleIconType, strings.ICON_POS_RIGHT, withTransition, true, 'key-toggle-position-left')}\n          {icon || indent || (isInSubNav && mode !== strings.MODE_HORIZONTAL)\n            ? renderIcon(icon, strings.ICON_POS_LEFT, false, false, 'key-inSubNav-position-left')\n            : null}\n          <span class={`${prefixCls}-item-text`}>{text}</span>\n          {context.value.toggleIconPosition === strings.TOGGLE_ICON_RIGHT &&\n            renderIcon(toggleIconType, strings.ICON_POS_RIGHT, withTransition, true, 'key-toggle-position-right')}\n        </div>\n      </div>\n    );\n\n    return titleDiv;\n  }\n\n  function renderSubUl() {\n    const { maxHeight } = props;\n\n    const { isCollapsed, mode, subNavMotion, prefixCls } = context.value;\n\n    const isOpen = adapter.getIsOpen();\n\n    const isHorizontal = mode === strings.MODE_HORIZONTAL;\n\n    const subNavCls = cls(`${prefixCls}-sub`, {\n      [`${prefixCls}-sub-open`]: isOpen,\n      [`${prefixCls}-sub-popover`]: isCollapsed || isHorizontal,\n    });\n\n    const ulWithMotion = <Collapsible\n      motion={subNavMotion as boolean}\n      isOpen={isOpen}\n      keepDOM={false}\n      fade={true}>\n      {\n        !isCollapsed ? <ul\n          class={subNavCls}\n        >\n          {{\n            default: slots.default,\n          }}\n        </ul>: null\n      }\n    </Collapsible>;\n\n    const finalDom = isHorizontal ? null : subNavMotion ? (\n      ulWithMotion\n    ) : isOpen && !isCollapsed ? (\n      <ul class={subNavCls}>\n        {{\n          default: slots.default,\n        }}\n      </ul>\n    ) : null;\n\n    return finalDom;\n  }\n\n  function wrapDropdown(elem: VueJsxNode = '') {\n    let _elem: VueJsxNode = elem;\n    const children = useSlots().default?.();\n    const { dropdownStyle, disabled, subDropdownProps, dropdownProps: userDropdownProps } = props;\n\n    const { mode, isInSubNav, isCollapsed, subNavCloseDelay, subNavOpenDelay, prefixCls, getPopupContainer  } = context.value;\n\n    const isOpen = adapter.getIsOpen();\n    const openKeysIsControlled = adapter.getOpenKeysIsControlled();\n\n    const subNavCls = cls({\n      [`${prefixCls}-popover`]: isCollapsed,\n    });\n\n    const dropdownProps: DropdownProps = {\n      trigger: 'hover',\n      style: dropdownStyle,\n    };\n\n    if (openKeysIsControlled) {\n      dropdownProps.trigger = 'custom';\n      dropdownProps.visible = isOpen;\n    }\n\n    if (getPopupContainer) {\n      dropdownProps.getPopupContainer = getPopupContainer;\n    }\n\n    if (isCollapsed || mode === strings.MODE_HORIZONTAL) {\n      // Do not show dropdown when disabled\n      _elem = !disabled ? (\n        <Dropdown\n          className={subNavCls}\n          render={\n            <DropdownMenu>\n              <li class={`${prefixCls}-popover-crumb`} />\n              {children}\n            </DropdownMenu>\n          }\n          position={mode === strings.MODE_HORIZONTAL && !isInSubNav ? 'bottomLeft' : 'rightTop'}\n          mouseEnterDelay={subNavOpenDelay}\n          mouseLeaveDelay={subNavCloseDelay}\n          onVisibleChange={handleDropdownVisible}\n          {...(userDropdownProps ? userDropdownProps : subDropdownProps)}\n          {...dropdownProps}\n        >\n          {/*用_elem 会导致无限循环*/}\n          {elem}\n        </Dropdown>\n      ) : (\n        _elem\n      );\n    }\n    return _elem;\n  }\n\n  return () => {\n    const { itemKey, style, onMouseEnter, onMouseLeave, disabled, text } = props;\n\n    const { mode, isCollapsed, prefixCls } = context.value;\n\n    let titleDiv: VueJsxNode = renderTitleDiv();\n    const subUl = renderSubUl();\n\n    // When mode=horizontal, it is displayed in Dropdown\n    if (isCollapsed || mode === strings.MODE_HORIZONTAL) {\n      titleDiv = wrapDropdown(titleDiv);\n    }\n\n    return (\n      <NavItem\n        style={style}\n        isSubNav={true}\n        itemKey={itemKey}\n        forwardRef={setItemRef}\n        isCollapsed={isCollapsed}\n        className={`${prefixCls}-sub-wrap`}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        disabled={disabled}\n        text={text}\n      >\n        <NavContext.Provider value={{ ...context.value, isInSubNav: true }}>\n          {{\n            default: () => [titleDiv, subUl],\n          }}\n        </NavContext.Provider>\n      </NavItem>\n    );\n  };\n}\n});\n\n\n\n\nexport default SubNav;\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","propTypes","itemKey","PropTypes","string","number","text","node","expandIcon","isOpen","bool","isCollapsed","indent","toggleIcon","style","object","icon","maxHeight","onMouseEnter","func","onMouseLeave","disabled","level","dropdownStyle","className","dropdownProps","subDropdownProps","defaultProps","numbers","DEFAULT_SUBNAV_MAX_HEIGHT","open","_createVNode","IconChevronUp","closed","IconChevronDown","vuePropsType","vuePropsMake","SubNav","defineComponent","props","name","setup","slots","useSlots","context","useNavContext","titleRef","ref","itemRef","state","reactive","isHovered","adapter","adapterInject","useBaseComponent","adapter_","setCache","foundation","SubNavFoundation","setItemRef","value","setTitleRef","_invokeContextFunc","funcName","args","updateIsHovered","getOpenKeys","openKeys","getOpenKeysIsControlled","openKeysIsControlled","getCanUpdateOpenKeys","canUpdateOpenKeys","updateOpen","notifyGlobalOpenChange","notifyGlobalOnSelect","notifyGlobalOnClick","getIsSelected","Boolean","isNullOrUndefined","get","includes","String","getIsOpen","handleClick","e","handleKeyPress","handleDropdownVisible","visible","handleDropdownVisibleChange","renderIcon","pos","withTransition","isToggleIcon","key","prefixCls","iconSize","strings","ICON_POS_RIGHT","cls","toggleIconPosition","iconElem","isVNode","CSSAnimation","cssClasses","PREFIX","children","animationClassName","cloneVNode","size","class","renderTitleDiv","mode","isInSubNav","subNavMotion","limitIndent","titleCls","toggleIconType","IconChevronRight","MODE_HORIZONTAL","placeholderIcons","MODE_VERTICAL","iconAmount","times","index","isIconChevronRightShow","TOGGLE_ICON_LEFT","ICON_POS_LEFT","TOGGLE_ICON_RIGHT","renderSubUl","isHorizontal","subNavCls","ulWithMotion","Collapsible","default","wrapDropdown","elem","_elem","userDropdownProps","subNavCloseDelay","subNavOpenDelay","getPopupContainer","trigger","Dropdown","_mergeProps","DropdownMenu","titleDiv","subUl","NavItem","NavContext","Provider"],"mappings":"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"}