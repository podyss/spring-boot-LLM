import { BaseProps } from '../_base/baseComponent';
import { ItemProps, ItemKey, SelectedItemProps } from '@douyinfe/semi-foundation/lib/es/navigation/itemFoundation';
import { AnchorHTMLAttributes, VNode, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
interface NavItemProps extends Omit<ItemProps, 'children'>, BaseProps {
    disabled?: boolean;
    forwardRef?: (ele: HTMLLIElement) => void;
    icon?: VNode;
    itemKey?: ItemKey;
    level?: number;
    link?: string;
    linkOptions?: AnchorHTMLAttributes;
    tabIndex?: number;
    text?: VueJsxNode;
    tooltipHideDelay?: number;
    tooltipShowDelay?: number;
    onClick?(clickItems: SelectedData): void;
    onMouseEnter?: any;
    onMouseLeave?: any;
    items?: any;
    maxHeight?: number;
}
interface SelectedData extends SelectedItemProps<NavItemProps> {
    text?: VNode;
}
interface NavItemState {
    tooltipShow: boolean;
}
export type { NavItemProps, ItemKey, NavItemState, SelectedData };
export declare const vuePropsType: CombineProps<NavItemProps>;
declare const NavItem: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<(ele: HTMLLIElement) => void> | {
        type: PropType<(ele: HTMLLIElement) => void>;
        default?: any;
        required?: false;
    };
    icon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    itemKey: PropType<ItemKey> | {
        type: PropType<ItemKey>;
        default?: any;
        required?: false;
    };
    level: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    link: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    linkOptions: PropType<AnchorHTMLAttributes> | {
        type: PropType<AnchorHTMLAttributes>;
        default?: any;
        required?: false;
    };
    tabIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    text: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    tooltipHideDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    tooltipShowDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(clickItems: SelectedData) => void> | {
        type: PropType<(clickItems: SelectedData) => void>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    items: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    maxHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    isCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    toggleIcon: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    isSubNav: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    indent: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<(ele: HTMLLIElement) => void> | {
        type: PropType<(ele: HTMLLIElement) => void>;
        default?: any;
        required?: false;
    };
    icon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    itemKey: PropType<ItemKey> | {
        type: PropType<ItemKey>;
        default?: any;
        required?: false;
    };
    level: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    link: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    linkOptions: PropType<AnchorHTMLAttributes> | {
        type: PropType<AnchorHTMLAttributes>;
        default?: any;
        required?: false;
    };
    tabIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    text: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    tooltipHideDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    tooltipShowDelay: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(clickItems: SelectedData) => void> | {
        type: PropType<(clickItems: SelectedData) => void>;
        default?: any;
        required?: false;
    };
    onMouseEnter: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onMouseLeave: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    items: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    maxHeight: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    isCollapsed: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    toggleIcon: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    isSubNav: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    indent: PropType<number | boolean> | {
        type: PropType<number | boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default NavItem;
