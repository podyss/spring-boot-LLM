import '@douyinfe/semi-foundation/lib/es/banner/banner.css';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export type Type = 'info' | 'danger' | 'warning' | 'success';
export interface BannerProps {
    type?: Type;
    className?: string;
    fullMode?: boolean;
    title?: VueJsxNode;
    description?: VueJsxNode;
    icon?: VueJsxNode;
    closeIcon?: VueJsxNode;
    style?: CSSProperties;
    bordered?: boolean;
    onClose?(e: MouseEvent): void;
}
export interface BannerState {
    visible: boolean;
}
export declare const vuePropsType: CombineProps<BannerProps>;
declare const Banner: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    fullMode: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    description: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClose: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: PropType<Type> | {
        type: PropType<Type>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    fullMode: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    title: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    description: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    closeIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    bordered: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClose: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Banner;
