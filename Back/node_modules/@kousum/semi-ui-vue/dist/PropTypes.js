const s = [Array, Object, String, Number, Boolean, Function], a = Array, u = Boolean, i = Function, e = Number, l = Object, b = String, f = [Array, Object, String, Number], A = [Array, Object, String, Number], m = Object;
function g(r) {
  let o = [];
  return r.map((c) => {
    Array.isArray(c) ? o = [...o, ...c] : o.push(c);
  }), o;
}
function h(r, o) {
  const c = {};
  return Object.keys(r).forEach((n) => {
    if (o.hasOwnProperty(n))
      if (r[n].hasOwnProperty("type"))
        c[n] = {
          // @ts-ignore
          type: r[n].type,
          default: o[n]
        };
      else {
        let t = typeof o[n] == "object" ? () => o[n] : o[n];
        c[n] = {
          type: r[n],
          default: t
        };
      }
    else
      c[n] = {
        type: r[n] === void 0 ? void 0 : r[n].hasOwnProperty("type") ? (
          // @ts-ignore
          r[n].type
        ) : r[n],
        default: void 0
      };
  }), c;
}
export {
  s as any,
  a as array,
  u as bool,
  A as element,
  i as func,
  f as node,
  e as number,
  l as object,
  g as oneOfType,
  b as string,
  m as symbol,
  h as vuePropsMake
};
//# sourceMappingURL=PropTypes.js.map
