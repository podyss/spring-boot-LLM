import type { TreeNodeProps } from './interface';
import { PropType } from 'vue';
import type { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<TreeNodeProps>;
declare const TreeNode: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    [x: string]: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    label: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    keyword: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    data: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").BasicTreeNodeData> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").BasicTreeNodeData>;
        default?: any;
        required?: false;
    };
    filtered: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    treeNodeFilterProp: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    nodeInstance: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    level: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    empty: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    display: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    halfChecked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    active: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loaded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    isLeaf: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    pos: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    children: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").BasicTreeNodeData[]> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").BasicTreeNodeData[]>;
        default?: any;
        required?: false;
    };
    directory: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    selectedKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motionKey: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    eventKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    icon: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    isEnd: PropType<boolean[]> | {
        type: PropType<boolean[]>;
        default?: any;
        required?: false;
    };
    showLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => any, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    [x: string]: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    label: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    keyword: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    data: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").BasicTreeNodeData> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").BasicTreeNodeData>;
        default?: any;
        required?: false;
    };
    filtered: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    treeNodeFilterProp: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    nodeInstance: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    level: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    empty: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    display: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    expanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    selected: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    checked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    halfChecked: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    active: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loaded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loading: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    isLeaf: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    pos: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    children: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").BasicTreeNodeData[]> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").BasicTreeNodeData[]>;
        default?: any;
        required?: false;
    };
    directory: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    selectedKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motionKey: PropType<string | string[]> | {
        type: PropType<string | string[]>;
        default?: any;
        required?: false;
    };
    eventKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    icon: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    isEnd: PropType<boolean[]> | {
        type: PropType<boolean[]>;
        default?: any;
        required?: false;
    };
    showLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TreeNode;
