import { PropType } from 'vue';
import { CombineProps } from '../interface';
export interface CollapseProps {
    motion?: boolean;
    duration?: number;
    onMotionEnd?: () => void;
    motionType?: string;
}
export interface TransitionStyle {
    [x: string]: any;
    maxHeight?: number;
}
export declare const vuePropsType: CombineProps<CollapseProps>;
declare const Collapse: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onMotionEnd: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    motionType: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onMotionEnd: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    motionType: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Collapse;
