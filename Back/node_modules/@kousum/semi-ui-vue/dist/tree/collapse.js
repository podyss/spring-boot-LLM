import { defineComponent as I, useSlots as O, ref as a, watch as k, createVNode as f, mergeProps as A, nextTick as F } from "vue";
import { Transition as L } from "@kousum/semi-animation-vue";
import * as i from "../PropTypes";
import { vuePropsMake as z } from "../PropTypes";
import { noop as B } from "lodash";
import { cssClasses as N } from '@douyinfe/semi-foundation/lib/es/collapsible/constants';
import R from '@douyinfe/semi-foundation/lib/es/utils/getMotionObjFromProps';
const H = "cubicBezier(.25,.1,.25,1)", S = {
  motion: i.oneOfType([i.bool, i.func, i.object]),
  duration: i.number,
  onMotionEnd: i.func,
  motionType: String
}, V = z(S, {
  duration: 250,
  motion: !0,
  onMotionEnd: B
}), J = /* @__PURE__ */ I({
  props: {
    ...V
  },
  name: "Collapse",
  setup(t, {}) {
    const l = O(), v = a(), s = a(0);
    function d(e) {
      s.value = e;
    }
    const n = a(!0);
    function m(e) {
      n.value = e;
    }
    const r = a(!1);
    function c(e) {
      r.value = e;
    }
    const u = a(!1);
    function g(e) {
      u.value = e;
    }
    k(() => t.motionType, () => {
      h();
    });
    function h() {
      t.motionType === "enter" ? (!n.value && m(!0), r.value && c(!1)) : t.motionType === "leave" && (!n.value && m(!0), !u.value && g(!0), r.value && c(!1));
    }
    let p = "";
    const x = (e) => {
      t.motionType !== p && (h(), p = t.motionType), F(() => {
        const o = e && e.scrollHeight;
        o && s.value !== o && d(o);
      });
    }, E = () => {
      v.value.style.maxHeight = "none";
    }, M = (e) => {
      const {
        maxHeight: o
      } = e;
      return {
        maxHeight: o
      };
    }, y = (e) => {
      var T;
      const o = e && typeof e == "object" ? M(e) : {}, j = {
        overflow: "hidden",
        maxHeight: n.value ? "none" : 0,
        ...o
      }, w = (T = l.default) == null ? void 0 : T.call(l);
      return f("div", {
        style: j,
        class: `${N.PREFIX}-wrapper`,
        ref: v
      }, [f("div", {
        ref: x
      }, [w])]);
    }, b = () => {
      c(!0), d(0), t.motionType === "leave" && t.onMotionEnd();
    }, P = () => {
      n.value && m(!1), g(!1);
    }, C = () => {
      E(), u.value && P(), t.motionType === "enter" && t.onMotionEnd();
    };
    return () => {
      if (r.value)
        return null;
      const e = R({
        didEnter: C,
        didLeave: b,
        motion: t.motion
      });
      return t.motion ? f(L, A({
        state: n.value ? "enter" : "leave",
        immediate: u.value,
        from: {
          maxHeight: 0
        },
        enter: {
          maxHeight: {
            val: s.value,
            easing: H,
            duration: t.duration
          }
        },
        leave: {
          maxHeight: {
            val: 0,
            easing: H,
            duration: t.duration
          }
        }
      }, e), {
        default: (o) => y(o)
      }) : y(null);
    };
  }
});
export {
  J as default,
  V as vuePropsType
};
//# sourceMappingURL=collapse.js.map
