{"version":3,"file":"index.js","sources":["../../src/components/tree/index.tsx"],"sourcesContent":["import cls from 'classnames';\nimport * as PropTypes from '../PropTypes';\nimport { vuePropsMake } from '../PropTypes';\nimport TreeFoundation, { TreeAdapter } from '@douyinfe/semi-foundation/tree/foundation';\nimport {\n  calcCheckedKeys,\n  calcDisabledKeys,\n  calcExpandedKeys,\n  calcExpandedKeysForValues,\n  calcMotionKeys,\n  convertDataToEntities,\n  convertJsonToData,\n  filterTreeData,\n  findKeysForValues,\n  flattenTreeData,\n  normalizeValue,\n  updateKeys,\n} from '@douyinfe/semi-foundation/tree/treeUtil';\nimport { cssClasses } from '@douyinfe/semi-foundation/tree/constants';\n\nimport { get, isEmpty, isEqual, isFunction, isUndefined, pick } from 'lodash';\nimport { cloneDeep } from './treeUtil';\nimport Input from '../input/index';\nimport { FixedSizeList as VirtualList } from '@kousum/vue3-window';\nimport AutoSizer from './autoSizer';\nimport TreeContext from './treeContext';\nimport TreeNode from './treeNode';\nimport NodeList from './nodeList';\nimport LocaleConsumer from '../locale/localeConsumer';\nimport '@douyinfe/semi-foundation/tree/tree.scss';\nimport { IconSearch } from '@kousum/semi-icons-vue';\nimport { Locale as LocaleObject } from '../locale/interface';\nimport {\n  FlattenNode,\n  KeyEntity,\n  OptionProps,\n  ScrollData,\n  TreeNodeData,\n  TreeNodeProps,\n  TreeProps,\n  TreeState,\n} from './interface';\nimport CheckboxGroup from '../checkbox/checkboxGroup';\nimport { CSSProperties, defineComponent, Fragment, h, PropType, reactive, ref, toRaw, useSlots, watch } from 'vue';\nimport { useConfigContext } from '../configProvider/context/Consumer';\nimport { useBaseComponent, useHasInProps } from '../_base/baseComponent';\nimport { CombineProps } from '../interface';\n\nexport * from './interface';\nexport type { AutoSizerProps } from './autoSizer';\n\nconst prefixcls = cssClasses.PREFIX;\n\nconst propTypes: CombineProps<Omit<TreeProps, 'children'>> = {\n  autoMergeValue: PropTypes.bool,\n  blockNode: PropTypes.bool,\n  className: PropTypes.string,\n  showClear: PropTypes.bool,\n  defaultExpandAll: PropTypes.bool,\n  defaultExpandedKeys: PropTypes.array,\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  directory: PropTypes.bool,\n  disabled: PropTypes.bool,\n  emptyContent: PropTypes.node,\n  expandAll: PropTypes.bool,\n  expandedKeys: PropTypes.array,\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  icon: [PropTypes.object, PropTypes.func] as PropType<TreeProps['icon']>,\n  onChangeWithObject: PropTypes.bool,\n  motion: PropTypes.bool,\n  multiple: PropTypes.bool,\n  onChange: PropTypes.func as PropType<TreeProps['onChange']>,\n  onExpand: PropTypes.func as PropType<TreeProps['onExpand']>,\n  onSearch: PropTypes.func as PropType<TreeProps['onSearch']>,\n  onSelect: PropTypes.func as PropType<TreeProps['onSelect']>,\n  onContextMenu: PropTypes.func as PropType<TreeProps['onContextMenu']>,\n  onDoubleClick: PropTypes.func as PropType<TreeProps['onDoubleClick']>,\n  searchClassName: PropTypes.string,\n  searchPlaceholder: PropTypes.string,\n  searchStyle: PropTypes.object,\n  selectedKey: PropTypes.string as PropType<TreeProps['selectedKey']>,\n  showFilteredOnly: PropTypes.bool,\n  showLine: PropTypes.bool,\n  style: PropTypes.object,\n  treeData: PropTypes.array,\n  keyMaps: PropTypes.object,\n  treeDataSimpleJson: PropTypes.object,\n  treeNodeFilterProp: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array, PropTypes.object]),\n  virtualize: PropTypes.object,\n  autoExpandParent: PropTypes.bool,\n  expandAction: [String, Boolean] as PropType<TreeProps['expandAction']>,\n  searchRender: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  renderLabel: PropTypes.func as PropType<TreeProps['renderLabel']>,\n  renderFullLabel: PropTypes.func as PropType<TreeProps['renderFullLabel']>,\n  leafOnly: PropTypes.bool,\n  loadedKeys: PropTypes.array,\n  loadData: PropTypes.func as PropType<TreeProps['loadData']>,\n  onLoad: PropTypes.func as PropType<TreeProps['onLoad']>,\n  disableStrictly: PropTypes.bool,\n  draggable: PropTypes.bool,\n  autoExpandWhenDragEnter: PropTypes.bool,\n  hideDraggingNode: PropTypes.bool,\n  renderDraggingNode: PropTypes.func as PropType<TreeProps['renderDraggingNode']>,\n  onDragEnd: PropTypes.func as PropType<TreeProps['onDragEnd']>,\n  onDragEnter: PropTypes.func as PropType<TreeProps['onDragEnter']>,\n  onDragLeave: PropTypes.func as PropType<TreeProps['onDragLeave']>,\n  onDragOver: PropTypes.func as PropType<TreeProps['onDragOver']>,\n  onDragStart: PropTypes.func as PropType<TreeProps['onDragStart']>,\n  onDrop: PropTypes.func as PropType<TreeProps['onDrop']>,\n  labelEllipsis: PropTypes.bool,\n  checkRelation: PropTypes.string as PropType<TreeProps['checkRelation']>,\n  'aria-label': PropTypes.string,\n  preventScroll: PropTypes.bool,\n  role: PropTypes.string as PropType<TreeProps['role']>,\n};\n\nconst defaultProps = {\n  showClear: true,\n  disabled: false,\n  blockNode: true,\n  multiple: false,\n  filterTreeNode: false,\n  autoExpandParent: false,\n  treeNodeFilterProp: 'label',\n  defaultExpandAll: false,\n  expandAll: false,\n  onChangeWithObject: false,\n  motion: true,\n  leafOnly: false,\n  showFilteredOnly: false,\n  showLine: false,\n  expandAction: false,\n  disableStrictly: false,\n  draggable: false,\n  autoExpandWhenDragEnter: true,\n  checkRelation: 'related',\n  autoMergeValue: true,\n};\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst Tree = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Tree',\n  setup(props, {expose}) {\n    const slots = useSlots();\n    const { getProps } = useHasInProps()\n\n    let onNodeClick: any;\n    let onMotionEnd: any;\n    const { context } = useConfigContext();\n\n    const state = reactive<TreeState>({\n      inputValue: '',\n      keyEntities: {},\n      treeData: [],\n      flattenNodes: [],\n      selectedKeys: [],\n      checkedKeys: new Set(),\n      halfCheckedKeys: new Set(),\n      realCheckedKeys: new Set([]),\n      motionKeys: new Set([]),\n      motionType: 'hide',\n      expandedKeys: new Set(props.expandedKeys),\n      filteredKeys: new Set(),\n      filteredExpandedKeys: new Set(),\n      filteredShownKeys: new Set(),\n      prevProps: null,\n      loadedKeys: new Set(),\n      loadingKeys: new Set(),\n      cachedFlattenNodes: undefined,\n      cachedKeyValuePairs: {},\n      disabledKeys: new Set(),\n      dragging: false,\n      dragNodesKeys: new Set(),\n      dragOverNodeKey: null,\n      dropPosition: null,\n    });\n    const inputRef = ref();\n    const optionsRef = ref();\n    const dragNode = ref();\n    const virtualizedListRef = ref();\n\n    const { adapter: adapterInject, getDataAttr } = useBaseComponent<TreeProps>(props, state);\n\n    function adapter_(): TreeAdapter {\n      const filterAdapter: Pick<TreeAdapter, 'updateInputValue' | 'focusInput'> = {\n        updateInputValue: (value) => {\n          state.inputValue = value;\n        },\n        focusInput: () => {\n          const { preventScroll } = props;\n          if (inputRef.value) {\n            (inputRef.value as any).focus({ preventScroll });\n          }\n        },\n      };\n      return {\n        ...adapterInject<TreeProps, TreeState>(),\n        ...filterAdapter,\n        updateState: (states) => {\n          Object.keys(states).forEach((key) => {\n            state[key] = states[key];\n          });\n        },\n        notifyExpand: (expandedKeys, { expanded: bool, node }) => {\n          props.onExpand && props.onExpand([...expandedKeys], { expanded: bool, node });\n          if (bool && props.loadData) {\n            onNodeLoad(node);\n          }\n        },\n        notifySelect: (selectKey, bool, node) => {\n          props.onSelect && props.onSelect(selectKey, bool, node);\n        },\n        notifyChange: (value) => {\n          props.onChange && props.onChange(value);\n        },\n        notifySearch: (input: string, filteredExpandedKeys: string[]) => {\n          props.onSearch && props.onSearch(input, filteredExpandedKeys);\n        },\n        notifyRightClick: (e, node) => {\n          props.onContextMenu && props.onContextMenu(e, node);\n        },\n        notifyDoubleClick: (e, node) => {\n          props.onDoubleClick && props.onDoubleClick(e, node);\n        },\n        cacheFlattenNodes: (bool) => {\n          state.cachedFlattenNodes = bool ? cloneDeep(state.flattenNodes) : undefined;\n        },\n        setDragNode: (treeNode) => {\n          dragNode.value = treeNode;\n        },\n      };\n    }\n\n    const adapter = adapter_();\n    const foundation = new TreeFoundation(adapter);\n\n    /**\n     * Process of getDerivedStateFromProps was inspired by rc-tree\n     * https://github.com/react-component/tree\n     */\n\n    function getDerivedStateFromProps(props: TreeProps, prevState: TreeState) {\n      const { prevProps } = prevState;\n      const { keyMaps } = props;\n      let treeData;\n      let keyEntities = prevState.keyEntities || {};\n      let valueEntities = prevState.cachedKeyValuePairs || {};\n\n      const isSeaching = Boolean(props.filterTreeNode && prevState.inputValue && prevState.inputValue.length);\n      const newState: Partial<TreeState> = {\n        prevProps: props,\n      };\n      const isExpandControlled = 'expandedKeys' in props;\n\n      // Accept a props field as a parameter to determine whether to update the field\n      const needUpdate = (name: string) => {\n        const firstInProps = !prevProps && name in props;\n        const nameHasChange = prevProps && !isEqual(prevProps[name], props[name]);\n        return firstInProps || nameHasChange;\n      };\n\n      // Determine whether treeData has changed\n      const needUpdateData = () => {\n        const firstInProps = !prevProps && 'treeData' in props;\n        const treeDataHasChange = prevProps && prevProps.treeData !== props.treeData;\n        return firstInProps || treeDataHasChange;\n      };\n\n      const needUpdateTreeData = needUpdate('treeData');\n      const needUpdateSimpleJson = needUpdate('treeDataSimpleJson');\n\n      // Update the data of tree in state\n      if (needUpdateTreeData || (props.draggable && needUpdateData())) {\n        treeData = props.treeData;\n        newState.treeData = treeData;\n        const entitiesMap = convertDataToEntities(treeData, keyMaps);\n        newState.keyEntities = {\n          ...entitiesMap.keyEntities,\n        };\n        keyEntities = newState.keyEntities;\n        newState.cachedKeyValuePairs = { ...entitiesMap.valueEntities };\n        valueEntities = newState.cachedKeyValuePairs;\n      } else if (needUpdateSimpleJson) {\n        // Convert treeDataSimpleJson to treeData\n        treeData = convertJsonToData(props.treeDataSimpleJson);\n        newState.treeData = treeData;\n        const entitiesMap = convertDataToEntities(treeData, keyMaps);\n        newState.keyEntities = {\n          ...entitiesMap.keyEntities,\n        };\n        keyEntities = newState.keyEntities;\n        newState.cachedKeyValuePairs = { ...entitiesMap.valueEntities };\n        valueEntities = newState.cachedKeyValuePairs;\n      }\n\n      // If treeData keys changes, we won't show animation\n      if (treeData && props.motion) {\n        if (prevProps && props.motion) {\n          newState.motionKeys = new Set([]);\n          newState.motionType = null;\n        }\n      }\n      const dataUpdated = needUpdateSimpleJson || needUpdateTreeData;\n      const expandAllWhenDataChange = dataUpdated && props.expandAll;\n      if (!isSeaching) {\n        // Update expandedKeys\n        if (needUpdate('expandedKeys') || (prevProps && needUpdate('autoExpandParent'))) {\n          newState.expandedKeys = calcExpandedKeys(\n            props.expandedKeys,\n            keyEntities,\n            props.autoExpandParent || !prevProps\n          );\n          // only show animation when treeData does not change\n          if (prevProps && props.motion && !treeData) {\n            const { motionKeys, motionType } = calcMotionKeys(\n              prevState.expandedKeys,\n              newState.expandedKeys,\n              keyEntities\n            );\n            newState.motionKeys = new Set(motionKeys);\n            newState.motionType = motionType;\n            if (motionType === 'hide') {\n              // cache flatten nodes: expandedKeys changed may not be triggered by interaction\n              newState.cachedFlattenNodes = cloneDeep(prevState.flattenNodes);\n            }\n          }\n        } else if ((!prevProps && (props.defaultExpandAll || props.expandAll)) || expandAllWhenDataChange) {\n          newState.expandedKeys = new Set(Object.keys(keyEntities));\n        } else if (!prevProps && props.defaultExpandedKeys) {\n          newState.expandedKeys = calcExpandedKeys(props.defaultExpandedKeys, keyEntities);\n        } else if (!prevProps && props.defaultValue) {\n          newState.expandedKeys = calcExpandedKeysForValues(\n            props.defaultValue,\n            keyEntities,\n            props.multiple,\n            valueEntities\n          );\n        } else if (!prevProps && props.value) {\n          newState.expandedKeys = calcExpandedKeysForValues(props.value, keyEntities, props.multiple, valueEntities);\n        } else if (!isExpandControlled && dataUpdated && props.value) {\n          // 当 treeData 已经设置具体的值，并且设置了 props.loadData ，则认为 treeData 的更新是因为 loadData 导致的\n          // 如果是因为 loadData 导致 treeData改变， 此时在这里重新计算 key 会导致为未选中的展开项目被收起\n          // 所以此时不需要重新计算 expandedKeys，因为在点击展开按钮时候已经把被展开的项添加到 expandedKeys 中\n          // When treeData has a specific value and props.loadData is set, it is considered that the update of treeData is caused by loadData\n          // If the treeData is changed because of loadData, recalculating the key here will cause the unselected expanded items to be collapsed\n          // So there is no need to recalculate expandedKeys at this time, because the expanded item has been added to expandedKeys when the expand button is clicked\n          if (!(prevState.treeData && prevState.treeData?.length > 0 && props.loadData)) {\n            newState.expandedKeys = calcExpandedKeysForValues(props.value, keyEntities, props.multiple, valueEntities);\n          }\n        }\n\n        if (!newState.expandedKeys) {\n          delete newState.expandedKeys;\n        }\n\n        // Update flattenNodes\n        if (treeData || newState.expandedKeys) {\n          const flattenNodes = flattenTreeData(\n            treeData || prevState.treeData,\n            newState.expandedKeys || prevState.expandedKeys,\n            keyMaps\n          );\n          newState.flattenNodes = flattenNodes;\n        }\n      } else {\n        let filteredState;\n        // treeData changed while searching\n        if (treeData) {\n          // Get filter data\n          filteredState = filterTreeData({\n            treeData,\n            inputValue: prevState.inputValue,\n            filterTreeNode: props.filterTreeNode,\n            filterProps: props.treeNodeFilterProp,\n            showFilteredOnly: props.showFilteredOnly,\n            keyEntities: newState.keyEntities,\n            prevExpandedKeys: [...prevState.filteredExpandedKeys],\n            keyMaps: keyMaps,\n          });\n          newState.flattenNodes = filteredState.flattenNodes;\n          newState.motionKeys = new Set([]);\n          newState.filteredKeys = filteredState.filteredKeys;\n          newState.filteredShownKeys = filteredState.filteredShownKeys;\n          newState.filteredExpandedKeys = filteredState.filteredExpandedKeys;\n        }\n\n        // expandedKeys changed while searching\n        if (props.expandedKeys) {\n          newState.filteredExpandedKeys = calcExpandedKeys(\n            props.expandedKeys,\n            keyEntities,\n            props.autoExpandParent || !prevProps\n          );\n\n          if (prevProps && props.motion) {\n            const prevKeys = prevState ? prevState.filteredExpandedKeys : new Set([]);\n            // only show animation when treeData does not change\n            if (!treeData) {\n              const motionResult = calcMotionKeys(prevKeys, newState.filteredExpandedKeys, keyEntities);\n\n              let { motionKeys } = motionResult;\n              const { motionType } = motionResult;\n              if (props.showFilteredOnly) {\n                motionKeys = motionKeys.filter((key) => prevState.filteredShownKeys.has(key));\n              }\n              if (motionType === 'hide') {\n                // cache flatten nodes: expandedKeys changed may not be triggered by interaction\n                newState.cachedFlattenNodes = cloneDeep(prevState.flattenNodes);\n              }\n              newState.motionKeys = new Set(motionKeys);\n              newState.motionType = motionType;\n            }\n          }\n\n          newState.flattenNodes = flattenTreeData(\n            treeData || prevState.treeData,\n            newState.filteredExpandedKeys || prevState.filteredExpandedKeys,\n            keyMaps,\n            props.showFilteredOnly && prevState.filteredShownKeys\n          );\n        }\n      }\n\n      // Handle single selection and multiple selection in controlled mode\n      const withObject = props.onChangeWithObject;\n      const isMultiple = props.multiple;\n      if (!isMultiple) {\n        // When getting single selection, the selected node\n        if (needUpdate('value')) {\n          newState.selectedKeys = findKeysForValues(\n            // In both cases whether withObject is turned on, the value is standardized to string\n            normalizeValue(props.value, withObject, keyMaps),\n            valueEntities,\n            isMultiple\n          );\n        } else if (!prevProps && props.defaultValue) {\n          newState.selectedKeys = findKeysForValues(\n            normalizeValue(props.defaultValue, withObject, keyMaps),\n            valueEntities,\n            isMultiple\n          );\n        } else if (treeData) {\n          // If `treeData` changed, we also need check it\n          if (props.value) {\n            newState.selectedKeys = findKeysForValues(\n              normalizeValue(props.value, withObject, keyMaps) || '',\n              valueEntities,\n              isMultiple\n            );\n          }\n        }\n      } else {\n        let checkedKeyValues;\n        // Get the selected node during multiple selection\n        if (needUpdate('value')) {\n          checkedKeyValues = findKeysForValues(\n            normalizeValue(props.value, withObject, keyMaps),\n            valueEntities,\n            isMultiple\n          );\n        } else if (!prevProps && props.defaultValue) {\n          checkedKeyValues = findKeysForValues(\n            normalizeValue(props.defaultValue, withObject, keyMaps),\n            valueEntities,\n            isMultiple\n          );\n        } else if (treeData) {\n          // If `treeData` changed, we also need check it\n          if (props.value) {\n            checkedKeyValues = findKeysForValues(\n              normalizeValue(props.value, withObject, keyMaps) || [],\n              valueEntities,\n              isMultiple\n            );\n          } else {\n            checkedKeyValues = updateKeys(\n              props.checkRelation === 'related' ? prevState.checkedKeys : prevState.realCheckedKeys,\n              keyEntities\n            );\n          }\n        }\n\n        if (checkedKeyValues) {\n          if (props.checkRelation === 'unRelated') {\n            newState.realCheckedKeys = new Set(checkedKeyValues);\n          } else if (props.checkRelation === 'related') {\n            const { checkedKeys, halfCheckedKeys } = calcCheckedKeys(checkedKeyValues, keyEntities);\n\n            newState.checkedKeys = checkedKeys;\n            newState.halfCheckedKeys = halfCheckedKeys;\n          }\n        }\n      }\n\n      // update loadedKeys\n      if (needUpdate('loadedKeys')) {\n        newState.loadedKeys = new Set(props.loadedKeys);\n      }\n\n      // update disableStrictly\n      if (treeData && props.disableStrictly && props.checkRelation === 'related') {\n        newState.disabledKeys = calcDisabledKeys(keyEntities, keyMaps);\n      }\n\n      return newState;\n    }\n\n    watch(\n      [\n        () => props.filterTreeNode,\n        () => props.treeData,\n        () => props.draggable,\n        () => props.treeDataSimpleJson,\n        () => props.motion,\n        () => props.expandAll,\n        () => props.autoExpandParent,\n        () => props.defaultExpandAll,\n        () => props.defaultExpandedKeys,\n        () => props.multiple,\n        () => props.value,\n        () => props.treeNodeFilterProp,\n        () => props.showFilteredOnly,\n        () => props.onChangeWithObject,\n        () => props.defaultValue,\n        () => props.loadedKeys,\n        () => props.disableStrictly,\n        () => props.checkRelation,\n\n        // getDerivedStateFromProps -> 不需要监听state\n        // () => state.keyEntities as any,\n        // () => state.cachedKeyValuePairs as any,\n        // () => state.inputValue as any,\n        // () => state.expandedKeys as any,\n        // () => state.flattenNodes as any,\n        // () => state.treeData as any,\n        // () => state.filteredExpandedKeys as any,\n        // () => state.filteredShownKeys as any,\n        // () => state.checkedKeys as any,\n      ],\n      (value, oldValue, onCleanup) => {\n        const newState = getDerivedStateFromProps({ ...getProps(props) }, { ...state } as any);\n        newState &&\n          Object.keys(newState).forEach((key) => {\n            state[key] = newState[key];\n          });\n      },\n      { immediate: true }\n    );\n\n    const search = (value: string) => {\n      foundation.handleInputChange(value);\n    };\n\n    const scrollTo = (scrollData: ScrollData) => {\n      const { key, align = 'center' } = scrollData;\n      const { flattenNodes } = state;\n      if (key) {\n        const index = flattenNodes?.findIndex((node) => {\n          return node.key === key;\n        });\n        index >= 0 && (virtualizedListRef.value as any)?.scrollToItem(index, align);\n      }\n    };\n\n    expose({\n      search,\n      scrollTo,\n    })\n    function renderInput() {\n      const { searchClassName, searchStyle, searchRender, searchPlaceholder, showClear } = props;\n      if (searchRender === false) {\n        return null;\n      }\n      const inputcls = cls(`${prefixcls}-input`);\n      const { inputValue } = state;\n      const inputProps = {\n        value: inputValue,\n        className: inputcls,\n        onChange: (value: string) => search(value),\n        prefix: <IconSearch />,\n        showClear,\n        placeholder: searchPlaceholder,\n      };\n      const wrapperCls = cls(`${prefixcls}-search-wrapper`, searchClassName);\n      return (\n        <div class={wrapperCls} style={searchStyle}>\n          <LocaleConsumer componentName=\"Tree\">\n            {(locale: LocaleObject) => {\n              inputProps.placeholder = searchPlaceholder || get(locale, 'searchPlaceholder');\n              if (isFunction(searchRender)) {\n                return searchRender({ ...inputProps });\n              }\n              return <Input aria-label=\"Filter Tree\" ref={inputRef} {...inputProps} />;\n            }}\n          </LocaleConsumer>\n        </div>\n      );\n    }\n\n    const renderEmpty = () => {\n      const { emptyContent } = props;\n      if (emptyContent) {\n        return <TreeNode key={'empty_tree'} empty emptyContent={props.emptyContent} />;\n      } else {\n        return (\n          <LocaleConsumer componentName=\"Tree\">\n            {(locale: LocaleObject) => <TreeNode key={'empty_tree'} empty emptyContent={get(locale, 'emptyText')} />}\n          </LocaleConsumer>\n        );\n      }\n    };\n\n    const onNodeSelect = (e: MouseEvent | KeyboardEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeSelect(e, treeNode);\n    };\n\n    const onNodeLoad = (data: TreeNodeData) =>\n      new Promise((resolve) => {\n        // We need to get the latest state of loading/loaded keys\n        const { loadingKeys } = foundation.handleNodeLoad(\n          toRaw(state.loadedKeys) || new Set([]),\n          toRaw(state.loadingKeys) || new Set([]),\n          data,\n          resolve\n        );\n        state.loadingKeys = loadingKeys;\n      });\n\n    const onNodeCheck = (e: MouseEvent | KeyboardEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeSelect(e, treeNode);\n    };\n\n    const onNodeExpand = (e: MouseEvent | KeyboardEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeExpand(e, treeNode);\n    };\n\n    const onNodeRightClick = (e: MouseEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeRightClick(e, treeNode);\n    };\n\n    const onNodeDoubleClick = (e: MouseEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeDoubleClick(e, treeNode);\n    };\n\n    const onNodeDragStart = (e: DragEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeDragStart(e, treeNode);\n    };\n\n    const onNodeDragEnter = (e: DragEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeDragEnter(e, treeNode, dragNode.value);\n    };\n\n    const onNodeDragOver = (e: DragEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeDragOver(e, treeNode, dragNode.value);\n    };\n\n    const onNodeDragLeave = (e: DragEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeDragLeave(e, treeNode);\n    };\n\n    const onNodeDragEnd = (e: DragEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeDragEnd(e, treeNode);\n    };\n\n    const onNodeDrop = (e: DragEvent, treeNode: TreeNodeProps) => {\n      foundation.handleNodeDrop(e, treeNode, dragNode.value);\n    };\n\n    const getTreeNodeRequiredProps = () => {\n      const { expandedKeys, selectedKeys, checkedKeys, halfCheckedKeys, keyEntities, filteredKeys } = state;\n      return {\n        expandedKeys: expandedKeys || new Set(),\n        selectedKeys: selectedKeys || [],\n        checkedKeys: checkedKeys || new Set(),\n        halfCheckedKeys: halfCheckedKeys || new Set(),\n        filteredKeys: filteredKeys || new Set(),\n        keyEntities,\n      };\n    };\n\n    const getTreeNodeKey = (treeNode: TreeNodeData) => {\n      const { data } = treeNode;\n      const { key } = data;\n      return key;\n    };\n\n    const renderTreeNode = (treeNode: FlattenNode, ind?: number, style?: CSSProperties) => {\n      const { data, key } = treeNode;\n      const treeNodeProps = foundation.getTreeNodeProps(key);\n      if (!treeNodeProps) {\n        return null;\n      }\n      const { keyMaps, showLine } = props;\n      const props_: any = pick(treeNode, ['key', 'label', 'disabled', 'isLeaf', 'icon', 'isEnd']);\n      const children = data[get(keyMaps, 'children', 'children')]; //TODO\n      !isUndefined(children) && (props_.children = children);\n      // 不要删除，更新用\n      // console.debug(state.loadingKeys.size, state.checkedKeys.size);\n      return (\n        <TreeNode\n          {...treeNodeProps}\n          {...data}\n          {...props_}\n          showLine={showLine}\n          data={data}\n          style={isEmpty(style) ? {} : style}\n        />\n      );\n    };\n\n    const itemKey = (index: number, data: KeyEntity) => {\n      // Find the item at the specified index.\n      const item = data[index];\n      // Return a value that uniquely identifies this item.\n      return item.key;\n    };\n    const option = ({ index, style, data }: OptionProps) => renderTreeNode(data[index], index, style);\n    function renderNodeList() {\n      const { flattenNodes, cachedFlattenNodes, motionKeys, motionType } = state;\n      const { virtualize, motion } = props;\n      const { direction } = context.value;\n      if (isEmpty(flattenNodes)) {\n        return undefined;\n      }\n      if (!virtualize || isEmpty(virtualize)) {\n        return (\n          <Fragment>\n            <NodeList\n              flattenNodes={flattenNodes as FlattenNode[]}\n              flattenList={cachedFlattenNodes as FlattenNode[] | undefined}\n              motionKeys={motion ? motionKeys : new Set([])}\n              motionType={motionType}\n              onMotionEnd={onMotionEnd}\n              renderTreeNode={renderTreeNode}\n            />\n          </Fragment>\n        );\n      }\n\n      return (\n        <AutoSizer\n          defaultHeight={virtualize.height}\n          defaultWidth={virtualize.width}\n          children={({ height, width }: { width: string | number; height: string | number }) => (\n            <VirtualList\n              ref={virtualizedListRef}\n              itemCount={flattenNodes.length}\n              itemSize={virtualize.itemSize}\n              height={parseInt('' + height)}\n              width={width}\n              itemKey={itemKey}\n              itemData={flattenNodes as any}\n              className={`${prefixcls}-virtual-list`}\n              style={{ direction }}\n            >\n              {option}\n            </VirtualList>\n          )}\n        ></AutoSizer>\n      );\n    }\n\n    return () => {\n      const {\n        keyEntities,\n        motionKeys,\n        motionType,\n        inputValue,\n        filteredKeys,\n        dragOverNodeKey,\n        dropPosition,\n        checkedKeys,\n        realCheckedKeys,\n      } = state;\n\n      const {\n        blockNode,\n        className,\n        style,\n        filterTreeNode,\n        disabled,\n        icon,\n        directory,\n        multiple,\n        showFilteredOnly,\n        showLine,\n        motion,\n        expandAction,\n        loadData,\n        renderLabel,\n        draggable,\n        renderFullLabel,\n        labelEllipsis,\n        virtualize,\n        checkRelation,\n      } = props;\n      const wrapperCls = cls(`${prefixcls}-wrapper`, className);\n      const listCls = cls(`${prefixcls}-option-list`, {\n        [`${prefixcls}-option-list-block`]: blockNode,\n      });\n      const searchNoRes = Boolean(inputValue) && !filteredKeys.size;\n      const noData = isEmpty(keyEntities) || (showFilteredOnly && searchNoRes);\n      const ariaAttr = {\n        role: noData ? 'none' : 'tree',\n      };\n      if (ariaAttr.role === 'tree') {\n        ariaAttr['aria-multiselectable'] = multiple ? true : false;\n      }\n      return (\n        <TreeContext.Provider\n          value={{\n            treeDisabled: disabled,\n            treeIcon: icon,\n            motion,\n            motionKeys,\n            motionType,\n            filterTreeNode,\n            keyEntities,\n            onNodeClick: onNodeClick,\n            onNodeExpand: onNodeExpand,\n            onNodeSelect: onNodeSelect,\n            onNodeCheck: onNodeCheck,\n            onNodeRightClick: onNodeRightClick,\n            onNodeDoubleClick: onNodeDoubleClick,\n            renderTreeNode: renderTreeNode,\n            onNodeDragStart: onNodeDragStart,\n            onNodeDragEnter: onNodeDragEnter,\n            onNodeDragOver: onNodeDragOver,\n            onNodeDragLeave: onNodeDragLeave,\n            onNodeDragEnd: onNodeDragEnd,\n            onNodeDrop: onNodeDrop,\n            expandAction,\n            directory,\n            multiple,\n            showFilteredOnly,\n            isSearching: Boolean(inputValue),\n            loadData,\n            onNodeLoad: onNodeLoad,\n            renderLabel,\n            draggable,\n            renderFullLabel,\n            dragOverNodeKey,\n            dropPosition,\n            labelEllipsis: typeof labelEllipsis === 'undefined' ? virtualize : labelEllipsis,\n          }}\n        >\n          <div aria-label={props['aria-label']} class={wrapperCls} style={style} {...getDataAttr()}>\n            {filterTreeNode ? renderInput() : null}\n            <div class={listCls} {...ariaAttr}>\n              {noData ? (\n                renderEmpty()\n              ) : multiple ? (\n                <CheckboxGroup value={Array.from(checkRelation === 'related' ? checkedKeys : realCheckedKeys)}>\n                  {renderNodeList()}\n                </CheckboxGroup>\n              ) : (\n                renderNodeList()\n              )}\n            </div>\n          </div>\n        </TreeContext.Provider>\n      );\n    };\n  },\n});\n\nexport default Tree;\n\nexport { TreeNode };\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","prefixcls","cssClasses","PREFIX","propTypes","autoMergeValue","PropTypes","bool","blockNode","className","string","showClear","defaultExpandAll","defaultExpandedKeys","array","defaultValue","oneOfType","directory","disabled","emptyContent","node","expandAll","expandedKeys","filterTreeNode","func","icon","object","onChangeWithObject","motion","multiple","onChange","onExpand","onSearch","onSelect","onContextMenu","onDoubleClick","searchClassName","searchPlaceholder","searchStyle","selectedKey","showFilteredOnly","showLine","style","treeData","keyMaps","treeDataSimpleJson","treeNodeFilterProp","value","number","virtualize","autoExpandParent","expandAction","String","Boolean","searchRender","renderLabel","renderFullLabel","leafOnly","loadedKeys","loadData","onLoad","disableStrictly","draggable","autoExpandWhenDragEnter","hideDraggingNode","renderDraggingNode","onDragEnd","onDragEnter","onDragLeave","onDragOver","onDragStart","onDrop","labelEllipsis","checkRelation","preventScroll","role","defaultProps","vuePropsType","vuePropsMake","Tree","defineComponent","props","name","setup","expose","useSlots","getProps","useHasInProps","onNodeClick","onMotionEnd","context","useConfigContext","state","reactive","inputValue","keyEntities","flattenNodes","selectedKeys","checkedKeys","Set","halfCheckedKeys","realCheckedKeys","motionKeys","motionType","filteredKeys","filteredExpandedKeys","filteredShownKeys","prevProps","loadingKeys","cachedFlattenNodes","undefined","cachedKeyValuePairs","disabledKeys","dragging","dragNodesKeys","dragOverNodeKey","dropPosition","inputRef","ref","dragNode","virtualizedListRef","adapter","adapterInject","getDataAttr","useBaseComponent","adapter_","filterAdapter","updateInputValue","focusInput","focus","updateState","states","keys","forEach","key","notifyExpand","expanded","onNodeLoad","notifySelect","selectKey","notifyChange","notifySearch","input","notifyRightClick","e","notifyDoubleClick","cacheFlattenNodes","cloneDeep","setDragNode","treeNode","foundation","TreeFoundation","getDerivedStateFromProps","prevState","valueEntities","isSeaching","length","newState","isExpandControlled","needUpdate","firstInProps","nameHasChange","isEqual","needUpdateData","treeDataHasChange","needUpdateTreeData","needUpdateSimpleJson","entitiesMap","convertDataToEntities","convertJsonToData","dataUpdated","expandAllWhenDataChange","filteredState","filterTreeData","filterProps","prevExpandedKeys","calcExpandedKeys","prevKeys","motionResult","calcMotionKeys","filter","has","flattenTreeData","calcExpandedKeysForValues","withObject","isMultiple","findKeysForValues","normalizeValue","checkedKeyValues","updateKeys","calcCheckedKeys","calcDisabledKeys","watch","oldValue","onCleanup","immediate","search","handleInputChange","scrollTo","scrollData","align","index","findIndex","scrollToItem","renderInput","inputcls","cls","inputProps","prefix","_createVNode","IconSearch","placeholder","wrapperCls","LocaleConsumer","default","locale","get","isFunction","Input","_mergeProps","renderEmpty","TreeNode","onNodeSelect","handleNodeSelect","data","Promise","resolve","handleNodeLoad","toRaw","onNodeCheck","onNodeExpand","handleNodeExpand","onNodeRightClick","handleNodeRightClick","onNodeDoubleClick","handleNodeDoubleClick","onNodeDragStart","handleNodeDragStart","onNodeDragEnter","handleNodeDragEnter","onNodeDragOver","handleNodeDragOver","onNodeDragLeave","handleNodeDragLeave","onNodeDragEnd","handleNodeDragEnd","onNodeDrop","handleNodeDrop","renderTreeNode","ind","treeNodeProps","getTreeNodeProps","props_","pick","children","isUndefined","isEmpty","itemKey","option","renderNodeList","direction","_Fragment","NodeList","AutoSizer","height","width","VirtualList","itemSize","parseInt","_slot","listCls","searchNoRes","size","noData","ariaAttr","TreeContext","Provider","treeDisabled","treeIcon","isSearching","CheckboxGroup","Array","from"],"mappings":"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"}