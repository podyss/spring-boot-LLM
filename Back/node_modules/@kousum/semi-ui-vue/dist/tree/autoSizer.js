import { defineComponent as l, useSlots as c, reactive as g, onMounted as m, createVNode as u } from "vue";
import * as o from "../PropTypes";
import { vuePropsMake as y } from "../PropTypes";
import { cssClasses as b } from '@douyinfe/semi-foundation/lib/es/tree/constants';
import v from "../resizeObserver";
import { get as f } from "lodash";
const T = b.PREFIX, w = {
  defaultHeight: o.oneOfType([o.number, o.string]),
  defaultWidth: o.oneOfType([o.number, o.string]),
  children: o.func
}, H = {
  defaultHeight: "100%",
  defaultWidth: "100%"
}, P = y(w, H), x = /* @__PURE__ */ l({
  props: {
    ...P
  },
  name: "AutoSizer",
  setup(i, {}) {
    c();
    const a = g({
      height: i.defaultHeight || 0
    });
    m(() => {
      const {
        height: e
      } = a;
    });
    const h = (e) => {
      const t = e && e[1] && e[1].target;
      if (t) {
        const n = f(t, "offsetHeight") || 0, r = window.getComputedStyle(t) || {}, s = parseInt(f(r, "paddingTop"), 10) || 0, d = parseInt(f(r, "paddingBottom"), 10) || 0, p = n - s - d;
        a.height !== p && (a.height = n - s - d);
      }
    };
    return () => {
      const {
        defaultWidth: e,
        defaultHeight: t
      } = i, {
        height: n
      } = a;
      let r = !1;
      return (n === 0 || typeof n != "number") && (r = !0), u(v, {
        observeParent: !0,
        onResize: h
      }, {
        default: () => {
          var s;
          return [u("div", {
            style: {
              height: typeof t == "number" ? t + "px" : t,
              overflow: "visible"
            },
            class: `${T}-auto-wrapper`
          }, [!r && ((s = i.children) == null ? void 0 : s.call(i, {
            height: n,
            width: e
          }))])];
        }
      });
    };
  }
});
export {
  x as default,
  P as vuePropsType
};
//# sourceMappingURL=autoSizer.js.map
