import TreeNode from './treeNode';
import '@douyinfe/semi-foundation/lib/es/tree/tree.css';
import { TreeNodeData, TreeNodeProps, TreeProps } from './interface';
import { CSSProperties, PropType } from 'vue';
import { CombineProps } from '../interface';
export * from './interface';
export type { AutoSizerProps } from './autoSizer';
export declare const vuePropsType: CombineProps<Omit<TreeProps, "children">>;
declare const Tree: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    directory: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<import("./interface").Value> | {
        type: PropType<import("./interface").Value>;
        default?: any;
        required?: false;
    };
    searchPlaceholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value?: import("./interface").Value) => void> | {
        type: PropType<(value?: import("./interface").Value) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onDrop: PropType<(onDragProps: import("./interface").OnDragProps) => void> | {
        type: PropType<(onDragProps: import("./interface").OnDragProps) => void>;
        default?: any;
        required?: false;
    };
    onLoad: PropType<(loadedKeys?: Set<string>, treeNode?: TreeNodeData) => void> | {
        type: PropType<(loadedKeys?: Set<string>, treeNode?: TreeNodeData) => void>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(selectedKey: string, selected: boolean, selectedNode: TreeNodeData) => void> | {
        type: PropType<(selectedKey: string, selected: boolean, selectedNode: TreeNodeData) => void>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    draggable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | ((props: TreeNodeProps) => import("vue").VNode)> | {
        type: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | ((props: TreeNodeProps) => import("vue").VNode)>;
        default?: any;
        required?: false;
    };
    multiple: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<import("./interface").Value> | {
        type: PropType<import("./interface").Value>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<(expandedKeys: string[], expandedOtherProps: import("./interface").ExpandedOtherProps) => void> | {
        type: PropType<(expandedKeys: string[], expandedOtherProps: import("./interface").ExpandedOtherProps) => void>;
        default?: any;
        required?: false;
    };
    onDragStart: PropType<(dragProps: import("./interface").DragProps) => void> | {
        type: PropType<(dragProps: import("./interface").DragProps) => void>;
        default?: any;
        required?: false;
    };
    onDragOver: PropType<(dragProps: import("./interface").DragProps) => void> | {
        type: PropType<(dragProps: import("./interface").DragProps) => void>;
        default?: any;
        required?: false;
    };
    onDragEnd: PropType<(dragProps: import("./interface").DragProps) => void> | {
        type: PropType<(dragProps: import("./interface").DragProps) => void>;
        default?: any;
        required?: false;
    };
    onSearch: PropType<(sunInput: string, filteredExpandedKeys: string[]) => void> | {
        type: PropType<(sunInput: string, filteredExpandedKeys: string[]) => void>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    onChangeWithObject: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showFilteredOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    treeData: PropType<TreeNodeData[]> | {
        type: PropType<TreeNodeData[]>;
        default?: any;
        required?: false;
    };
    filterTreeNode: PropType<boolean | ((inputValue: string, treeNodeString: string, data?: TreeNodeData) => boolean)> | {
        type: PropType<boolean | ((inputValue: string, treeNodeString: string, data?: TreeNodeData) => boolean)>;
        default?: any;
        required?: false;
    };
    keyMaps: PropType<import("@douyinfe/semi-foundation/lib/es/tree/treeUtil").KeyMapProps> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/treeUtil").KeyMapProps>;
        default?: any;
        required?: false;
    };
    leafOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoMergeValue: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loadData: PropType<(treeNode?: TreeNodeData) => Promise<void>> | {
        type: PropType<(treeNode?: TreeNodeData) => Promise<void>>;
        default?: any;
        required?: false;
    };
    loadedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    disableStrictly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    treeNodeFilterProp: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    virtualize: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").Virtualize> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").Virtualize>;
        default?: any;
        required?: false;
    };
    selectedKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    checkRelation: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").CheckRelation> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").CheckRelation>;
        default?: any;
        required?: false;
    };
    treeDataSimpleJson: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").TreeDataSimpleJson> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").TreeDataSimpleJson>;
        default?: any;
        required?: false;
    };
    hideDraggingNode: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderDraggingNode: PropType<(nodeInstance: HTMLElement, node: TreeNodeData) => HTMLElement> | {
        type: PropType<(nodeInstance: HTMLElement, node: TreeNodeData) => HTMLElement>;
        default?: any;
        required?: false;
    };
    autoExpandWhenDragEnter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onDragLeave: PropType<(dragProps: import("./interface").DragProps) => void> | {
        type: PropType<(dragProps: import("./interface").DragProps) => void>;
        default?: any;
        required?: false;
    };
    onDragEnter: PropType<(dragEnterProps: import("./interface").DragEnterProps) => void> | {
        type: PropType<(dragEnterProps: import("./interface").DragEnterProps) => void>;
        default?: any;
        required?: false;
    };
    expandAction: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").ExpandAction> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").ExpandAction>;
        default?: any;
        required?: false;
    };
    renderLabel: PropType<(label?: import("../interface").VueJsxNode, treeNode?: TreeNodeData, searchWord?: string) => import("../interface").VueJsxNode> | {
        type: PropType<(label?: import("../interface").VueJsxNode, treeNode?: TreeNodeData, searchWord?: string) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderFullLabel: PropType<(renderFullLabelProps: import("./interface").RenderFullLabelProps) => import("../interface").VueJsxNode> | {
        type: PropType<(renderFullLabelProps: import("./interface").RenderFullLabelProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    labelEllipsis: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    searchRender: PropType<false | ((searchRenderProps: import("./interface").SearchRenderProps) => import("../interface").VueJsxNode)> | {
        type: PropType<false | ((searchRenderProps: import("./interface").SearchRenderProps) => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    searchStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onDoubleClick: PropType<(e: MouseEvent, node: TreeNodeData) => void> | {
        type: PropType<(e: MouseEvent, node: TreeNodeData) => void>;
        default?: any;
        required?: false;
    };
    onContextMenu: PropType<(e: MouseEvent, node: TreeNodeData) => void> | {
        type: PropType<(e: MouseEvent, node: TreeNodeData) => void>;
        default?: any;
        required?: false;
    };
    autoExpandParent: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    blockNode: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandAll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandAll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    searchClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    directory: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<import("./interface").Value> | {
        type: PropType<import("./interface").Value>;
        default?: any;
        required?: false;
    };
    searchPlaceholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value?: import("./interface").Value) => void> | {
        type: PropType<(value?: import("./interface").Value) => void>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onDrop: PropType<(onDragProps: import("./interface").OnDragProps) => void> | {
        type: PropType<(onDragProps: import("./interface").OnDragProps) => void>;
        default?: any;
        required?: false;
    };
    onLoad: PropType<(loadedKeys?: Set<string>, treeNode?: TreeNodeData) => void> | {
        type: PropType<(loadedKeys?: Set<string>, treeNode?: TreeNodeData) => void>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(selectedKey: string, selected: boolean, selectedNode: TreeNodeData) => void> | {
        type: PropType<(selectedKey: string, selected: boolean, selectedNode: TreeNodeData) => void>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    draggable: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | ((props: TreeNodeProps) => import("vue").VNode)> | {
        type: PropType<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }> | ((props: TreeNodeProps) => import("vue").VNode)>;
        default?: any;
        required?: false;
    };
    multiple: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<import("./interface").Value> | {
        type: PropType<import("./interface").Value>;
        default?: any;
        required?: false;
    };
    onExpand: PropType<(expandedKeys: string[], expandedOtherProps: import("./interface").ExpandedOtherProps) => void> | {
        type: PropType<(expandedKeys: string[], expandedOtherProps: import("./interface").ExpandedOtherProps) => void>;
        default?: any;
        required?: false;
    };
    onDragStart: PropType<(dragProps: import("./interface").DragProps) => void> | {
        type: PropType<(dragProps: import("./interface").DragProps) => void>;
        default?: any;
        required?: false;
    };
    onDragOver: PropType<(dragProps: import("./interface").DragProps) => void> | {
        type: PropType<(dragProps: import("./interface").DragProps) => void>;
        default?: any;
        required?: false;
    };
    onDragEnd: PropType<(dragProps: import("./interface").DragProps) => void> | {
        type: PropType<(dragProps: import("./interface").DragProps) => void>;
        default?: any;
        required?: false;
    };
    onSearch: PropType<(sunInput: string, filteredExpandedKeys: string[]) => void> | {
        type: PropType<(sunInput: string, filteredExpandedKeys: string[]) => void>;
        default?: any;
        required?: false;
    };
    emptyContent: PropType<import("../interface").VueJsxNode> | {
        type: PropType<import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    onChangeWithObject: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showFilteredOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    treeData: PropType<TreeNodeData[]> | {
        type: PropType<TreeNodeData[]>;
        default?: any;
        required?: false;
    };
    filterTreeNode: PropType<boolean | ((inputValue: string, treeNodeString: string, data?: TreeNodeData) => boolean)> | {
        type: PropType<boolean | ((inputValue: string, treeNodeString: string, data?: TreeNodeData) => boolean)>;
        default?: any;
        required?: false;
    };
    keyMaps: PropType<import("@douyinfe/semi-foundation/lib/es/tree/treeUtil").KeyMapProps> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/treeUtil").KeyMapProps>;
        default?: any;
        required?: false;
    };
    leafOnly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoMergeValue: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    loadData: PropType<(treeNode?: TreeNodeData) => Promise<void>> | {
        type: PropType<(treeNode?: TreeNodeData) => Promise<void>>;
        default?: any;
        required?: false;
    };
    loadedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    disableStrictly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    treeNodeFilterProp: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    virtualize: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").Virtualize> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").Virtualize>;
        default?: any;
        required?: false;
    };
    selectedKey: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    checkRelation: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").CheckRelation> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").CheckRelation>;
        default?: any;
        required?: false;
    };
    treeDataSimpleJson: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").TreeDataSimpleJson> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").TreeDataSimpleJson>;
        default?: any;
        required?: false;
    };
    hideDraggingNode: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderDraggingNode: PropType<(nodeInstance: HTMLElement, node: TreeNodeData) => HTMLElement> | {
        type: PropType<(nodeInstance: HTMLElement, node: TreeNodeData) => HTMLElement>;
        default?: any;
        required?: false;
    };
    autoExpandWhenDragEnter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onDragLeave: PropType<(dragProps: import("./interface").DragProps) => void> | {
        type: PropType<(dragProps: import("./interface").DragProps) => void>;
        default?: any;
        required?: false;
    };
    onDragEnter: PropType<(dragEnterProps: import("./interface").DragEnterProps) => void> | {
        type: PropType<(dragEnterProps: import("./interface").DragEnterProps) => void>;
        default?: any;
        required?: false;
    };
    expandAction: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").ExpandAction> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/tree/foundation").ExpandAction>;
        default?: any;
        required?: false;
    };
    renderLabel: PropType<(label?: import("../interface").VueJsxNode, treeNode?: TreeNodeData, searchWord?: string) => import("../interface").VueJsxNode> | {
        type: PropType<(label?: import("../interface").VueJsxNode, treeNode?: TreeNodeData, searchWord?: string) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    renderFullLabel: PropType<(renderFullLabelProps: import("./interface").RenderFullLabelProps) => import("../interface").VueJsxNode> | {
        type: PropType<(renderFullLabelProps: import("./interface").RenderFullLabelProps) => import("../interface").VueJsxNode>;
        default?: any;
        required?: false;
    };
    labelEllipsis: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    searchRender: PropType<false | ((searchRenderProps: import("./interface").SearchRenderProps) => import("../interface").VueJsxNode)> | {
        type: PropType<false | ((searchRenderProps: import("./interface").SearchRenderProps) => import("../interface").VueJsxNode)>;
        default?: any;
        required?: false;
    };
    searchStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    onDoubleClick: PropType<(e: MouseEvent, node: TreeNodeData) => void> | {
        type: PropType<(e: MouseEvent, node: TreeNodeData) => void>;
        default?: any;
        required?: false;
    };
    onContextMenu: PropType<(e: MouseEvent, node: TreeNodeData) => void> | {
        type: PropType<(e: MouseEvent, node: TreeNodeData) => void>;
        default?: any;
        required?: false;
    };
    autoExpandParent: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    blockNode: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    expandAll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandAll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    defaultExpandedKeys: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    searchClassName: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Tree;
export { TreeNode };
