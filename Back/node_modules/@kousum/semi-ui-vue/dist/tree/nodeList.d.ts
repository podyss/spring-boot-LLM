import type { FlattenNode, NodeListProps } from './interface';
import { type CSSProperties, type PropType, type VNode } from 'vue';
import { CombineProps } from '../interface';
export declare const vuePropsType: CombineProps<NodeListProps>;
declare const NodeList: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    flattenNodes: {
        type: PropType<FlattenNode[]>;
        default?: any;
        required: true;
    };
    motionKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    motionType: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    flattenList: PropType<FlattenNode[]> | {
        type: PropType<FlattenNode[]>;
        default?: any;
        required?: false;
    };
    searchTargetIsDeep: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderTreeNode: {
        type: PropType<(treeNode: FlattenNode, ind?: number, style?: CSSProperties) => import("../interface").VueJsxNode>;
        default?: any;
        required: true;
    };
    onMotionEnd: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => VNode[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    flattenNodes: {
        type: PropType<FlattenNode[]>;
        default?: any;
        required: true;
    };
    motionKeys: {
        type: PropType<Set<string>>;
        default?: any;
        required: true;
    };
    motionType: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    flattenList: PropType<FlattenNode[]> | {
        type: PropType<FlattenNode[]>;
        default?: any;
        required?: false;
    };
    searchTargetIsDeep: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderTreeNode: {
        type: PropType<(treeNode: FlattenNode, ind?: number, style?: CSSProperties) => import("../interface").VueJsxNode>;
        default?: any;
        required: true;
    };
    onMotionEnd: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default NodeList;
