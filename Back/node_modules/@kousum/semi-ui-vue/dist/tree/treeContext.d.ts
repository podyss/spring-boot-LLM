import { Virtualize, ExpandAction } from '@douyinfe/semi-foundation/lib/es/tree/foundation';
import { TreeNodeData, KeyEntities, TreeNodeProps, FlattenNode, RenderFullLabelProps } from './interface';
import { VueJsxNode } from "../interface";
import { CSSProperties, VNode } from 'vue';
export interface TreeContextValue {
    treeDisabled?: boolean;
    treeIcon?: VNode | ((props: TreeNodeProps) => VNode);
    motion?: boolean;
    motionKeys?: Set<string>;
    motionType?: string;
    filterTreeNode?: boolean | ((inputValue: string, treeNodeString: string) => void);
    keyEntities?: KeyEntities;
    onNodeClick?: any;
    onNodeExpand?: (e: MouseEvent | KeyboardEvent, treeNode: TreeNodeProps) => void;
    onNodeSelect?: (e: MouseEvent | KeyboardEvent, treeNode: TreeNodeProps) => void;
    onNodeCheck?: (e: MouseEvent | KeyboardEvent, treeNode: TreeNodeProps) => void;
    onNodeRightClick?: (e: MouseEvent, treeNode: TreeNodeProps) => void;
    onNodeDoubleClick?: (e: MouseEvent, treeNode: TreeNodeProps) => void;
    renderTreeNode?: (treeNode: FlattenNode, ind?: number, style?: CSSProperties) => VueJsxNode;
    onNodeDragStart?: (e: DragEvent, treeNode: TreeNodeProps) => void;
    onNodeDragEnter?: (e: DragEvent, treeNode: TreeNodeProps) => void;
    onNodeDragOver?: (e: DragEvent, treeNode: TreeNodeProps) => void;
    onNodeDragLeave?: (e: DragEvent, treeNode: TreeNodeProps) => void;
    onNodeDragEnd?: (e: DragEvent, treeNode: TreeNodeProps) => void;
    onNodeDrop?: (e: DragEvent, treeNode: TreeNodeProps) => void;
    expandAction?: ExpandAction;
    directory?: boolean;
    multiple?: boolean;
    showFilteredOnly?: boolean;
    isSearching?: boolean;
    loadData?: (treeNode?: TreeNodeData) => Promise<void>;
    onNodeLoad?: (data: TreeNodeData) => Promise<unknown>;
    renderLabel?: (label?: VueJsxNode, treeNode?: TreeNodeData, searchWord?: string) => VueJsxNode;
    draggable?: boolean;
    renderFullLabel?: (renderFullLabelProps: RenderFullLabelProps) => VueJsxNode;
    dragOverNodeKey?: string | string[];
    dropPosition?: number | null;
    labelEllipsis?: boolean | Virtualize;
}
declare const TreeContext: {
    Provider: import("vue").DefineSetupFnComponent<{
        value: any;
    }, {}, {}, {
        value: any;
    } & {}, import("vue").PublicProps>;
    Consumer: import("vue").DefineSetupFnComponent<{
        name: string;
    }, {}, {}, {
        name: string;
    } & {}, import("vue").PublicProps>;
};
export default TreeContext;
