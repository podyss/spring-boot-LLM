import { PageList } from '@douyinfe/semi-foundation/lib/es/pagination/foundation';
import '@douyinfe/semi-foundation/lib/es/pagination/pagination.css';
import { Locale } from '../locale/interface';
import { Position } from '../tooltip';
import { CombineProps, VueJsxNode } from '../interface';
import { CSSProperties, PropType } from 'vue';
export interface PaginationProps {
    total?: number;
    showTotal?: boolean;
    pageSize?: number;
    pageSizeOpts?: Array<number>;
    size?: 'small' | 'default';
    currentPage?: number;
    defaultCurrentPage?: number;
    onPageChange?: (currentPage: number) => void;
    onPageSizeChange?: (newPageSize: number) => void;
    onChange?: (currentPage: number, pageSize: number) => void;
    prevText?: VueJsxNode;
    nextText?: VueJsxNode;
    showSizeChanger?: boolean;
    showQuickJumper?: boolean;
    popoverZIndex?: number;
    popoverPosition?: PopoverPosition;
    style?: CSSProperties;
    className?: string;
    hideOnSinglePage?: boolean;
    hoverShowPageSelect?: boolean;
    disabled?: boolean;
    position?: string;
}
export interface PaginationState {
    total: number;
    showTotal: boolean;
    currentPage: number;
    pageSize: number;
    pageList: PageList;
    prevDisabled: boolean;
    quickJumpPage: string | number;
    nextDisabled: boolean;
    restLeftPageList: number[];
    restRightPageList: number[];
    allPageNumbers: number[];
}
export type PaginationLocale = Locale['Pagination'];
export type PopoverPosition = Position;
export type { PageList };
export declare const vuePropsType: CombineProps<PaginationProps>;
declare const Pagination: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    total: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    showTotal: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    pageSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    pageSizeOpts: PropType<number[]> | {
        type: PropType<number[]>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default"> | {
        type: PropType<"small" | "default">;
        default?: any;
        required?: false;
    };
    currentPage: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    defaultCurrentPage: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onPageChange: PropType<(currentPage: number) => void> | {
        type: PropType<(currentPage: number) => void>;
        default?: any;
        required?: false;
    };
    onPageSizeChange: PropType<(newPageSize: number) => void> | {
        type: PropType<(newPageSize: number) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(currentPage: number, pageSize: number) => void> | {
        type: PropType<(currentPage: number, pageSize: number) => void>;
        default?: any;
        required?: false;
    };
    prevText: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    nextText: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    showSizeChanger: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showQuickJumper: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    popoverZIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    popoverPosition: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hideOnSinglePage: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hoverShowPageSelect: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    position: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    total: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    showTotal: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    pageSize: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    pageSizeOpts: PropType<number[]> | {
        type: PropType<number[]>;
        default?: any;
        required?: false;
    };
    size: PropType<"small" | "default"> | {
        type: PropType<"small" | "default">;
        default?: any;
        required?: false;
    };
    currentPage: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    defaultCurrentPage: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onPageChange: PropType<(currentPage: number) => void> | {
        type: PropType<(currentPage: number) => void>;
        default?: any;
        required?: false;
    };
    onPageSizeChange: PropType<(newPageSize: number) => void> | {
        type: PropType<(newPageSize: number) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(currentPage: number, pageSize: number) => void> | {
        type: PropType<(currentPage: number, pageSize: number) => void>;
        default?: any;
        required?: false;
    };
    prevText: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    nextText: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    showSizeChanger: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showQuickJumper: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    popoverZIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    popoverPosition: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver"> | {
        type: PropType<"bottom" | "left" | "right" | "top" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver">;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    hideOnSinglePage: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hoverShowPageSelect: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    position: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Pagination;
