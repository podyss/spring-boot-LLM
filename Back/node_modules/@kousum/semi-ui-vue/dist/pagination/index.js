import { defineComponent as Z, useSlots as F, reactive as H, onMounted as U, onUnmounted as K, watch as V, createVNode as l, createTextVNode as G, mergeProps as O, isVNode as X } from "vue";
import S from "classnames";
import * as r from "../PropTypes";
import { vuePropsMake as Y } from "../PropTypes";
import { FixedSizeList as W } from "@kousum/vue3-window";
import { noop as N } from "lodash";
import ee from '@douyinfe/semi-foundation/lib/es/pagination/foundation';
import { cssClasses as te, numbers as E } from '@douyinfe/semi-foundation/lib/es/pagination/constants';
import '@douyinfe/semi-foundation/lib/es/pagination/pagination.css';
import { numbers as ae } from '@douyinfe/semi-foundation/lib/es/popover/constants';
import { IconChevronLeft as ne, IconChevronRight as oe } from "@kousum/semi-icons-vue";
import ie from '@douyinfe/semi-foundation/lib/es/utils/warning';
import se from "../locale/localeConsumer";
import le, { SelectOption as re } from "../select/index";
import ue from "../inputNumber/index";
import I from "../popover/index";
import { useConfigContext as ge } from "../configProvider/context/Consumer";
import { useBaseComponent as ce } from "../_base/baseComponent";
function v(t) {
  return typeof t == "function" || Object.prototype.toString.call(t) === "[object Object]" && !X(t);
}
const n = te.PREFIX, de = {
  total: r.number,
  showTotal: r.bool,
  pageSize: r.number,
  pageSizeOpts: r.array,
  size: r.string,
  currentPage: r.number,
  defaultCurrentPage: r.number,
  onPageChange: r.func,
  onPageSizeChange: r.func,
  onChange: r.func,
  prevText: r.node,
  nextText: r.node,
  showSizeChanger: r.bool,
  popoverZIndex: r.number,
  popoverPosition: r.string,
  style: r.object,
  className: r.string,
  hideOnSinglePage: r.bool,
  hoverShowPageSelect: r.bool,
  showQuickJumper: r.bool,
  disabled: r.bool,
  position: r.string
}, me = {
  total: 1,
  popoverZIndex: ae.DEFAULT_Z_INDEX,
  showTotal: !1,
  pageSize: null,
  pageSizeOpts: E.PAGE_SIZE_OPTION,
  defaultCurrentPage: 1,
  size: "default",
  onPageChange: N,
  onPageSizeChange: N,
  onChange: N,
  showSizeChanger: !1,
  className: "",
  hideOnSinglePage: !1,
  showQuickJumper: !1,
  disabled: !1
}, Pe = Y(de, me), Oe = /* @__PURE__ */ Z({
  props: {
    ...Pe
  },
  name: "Pagination",
  setup(t, {}) {
    F();
    const {
      context: w
    } = ge(), $ = t.total, x = t.pageSize || t.pageSizeOpts[0] || E.DEFAULT_PAGE_SIZE, J = t.size === "small" && t.hoverShowPageSelect && !t.disabled, c = H({
      total: $,
      showTotal: t.showTotal,
      currentPage: t.currentPage || t.defaultCurrentPage,
      pageSize: x,
      pageList: [],
      prevDisabled: !1,
      nextDisabled: !1,
      restLeftPageList: [],
      restRightPageList: [],
      quickJumpPage: "",
      allPageNumbers: J ? Array.from({
        length: Math.ceil($ / x)
      }, (e, a) => a + 1) : []
      // only need to count in smallPage mode, when props.size = small
    }), {
      adapter: A,
      getDataAttr: k
    } = ce(t, c);
    function j() {
      return {
        ...A(),
        setPageList: (e) => {
          const {
            pageList: a,
            restLeftPageList: s,
            restRightPageList: o
          } = e;
          c.pageList = a, c.restLeftPageList = s, c.restRightPageList = o;
        },
        setDisabled: (e, a) => {
          c.prevDisabled = e, c.nextDisabled = a;
        },
        updateTotal: (e) => c.total = e,
        updatePageSize: (e) => c.pageSize = e,
        updateQuickJumpPage: (e) => c.quickJumpPage = e,
        // updateRestPageList: () => {},
        setCurrentPage: (e) => {
          c.currentPage = e;
        },
        registerKeyDownHandler: (e) => {
          document.addEventListener("keydown", e);
        },
        updateAllPageNumbers: (e) => c.allPageNumbers = e,
        unregisterKeyDownHandler: (e) => {
          document.removeEventListener("keydown", e);
        },
        notifyPageChange: (e) => {
          t.onPageChange(e);
        },
        notifyPageSizeChange: (e) => {
          t.onPageSizeChange(e);
        },
        notifyChange: (e, a) => {
          t.onChange(e, a);
        }
      };
    }
    const R = j(), P = new ee(R);
    ie(!!(t.showSizeChanger && t.hideOnSinglePage), "[Semi Pagination] You should not use showSizeChanger and hideOnSinglePage in ths same time. At this time, hideOnSinglePage no longer takes effect, otherwise there may be a problem that the switch entry disappears"), U(() => {
      P.init();
    }), K(() => {
      P.destroy();
    }), V([() => t.currentPage, () => t.total, () => t.pageSize], (e, [a, s, o], d) => {
      const u = {
        currentPage: t.currentPage,
        total: t.total,
        pageSize: t.pageSize
      };
      let g = !1, i = !1;
      a !== t.currentPage && (g = !0), s !== t.total && (g = !0, i = !0), o !== t.pageSize && (g = !0, i = !0), g && P.updatePage(u.currentPage, u.total, u.pageSize), i && P.updateAllPageNumbers(u.total, u.pageSize);
    });
    function y() {
      const {
        prevText: e,
        disabled: a
      } = t, {
        prevDisabled: s
      } = c, o = s || a, d = S({
        [`${n}-item`]: !0,
        [`${n}-prev`]: !0,
        [`${n}-item-disabled`]: o
      });
      return l("li", {
        role: "button",
        "aria-disabled": !!o,
        "aria-label": "Previous",
        onClick: (u) => !o && P.goPrev(),
        class: d,
        "x-semi-prop": "prevText"
      }, [e || l(ne, {
        size: "large"
      }, null)]);
    }
    function L() {
      const {
        nextText: e,
        disabled: a
      } = t, {
        nextDisabled: s
      } = c, o = s || a, d = S({
        [`${n}-item`]: !0,
        [`${n}-item-disabled`]: o,
        [`${n}-next`]: !0
      });
      return l("li", {
        role: "button",
        "aria-disabled": !!o,
        "aria-label": "Next",
        onClick: (u) => !o && P.goNext(),
        class: d,
        "x-semi-prop": "nextText"
      }, [e || l(oe, {
        size: "large"
      }, null)]);
    }
    function _(e) {
      const {
        direction: a
      } = w.value, s = a === "rtl" ? "bottomRight" : "bottomLeft", {
        showSizeChanger: o,
        popoverPosition: d = s,
        disabled: u,
        popoverZIndex: g
      } = t, {
        pageSize: i
      } = c, h = S(`${n}-switch`);
      if (!o)
        return null;
      const p = P.pageSizeInOpts(), m = e.pageSize, f = p.map((b) => l(re, {
        value: b,
        key: b
      }, {
        default: () => [l("span", null, [m.replace("${pageSize}", b.toString())])]
      }));
      return l("div", {
        class: h
      }, [l(le, {
        "aria-label": "Page size selector",
        disabled: u,
        onChange: (b) => {
          P.changePageSize(b);
        },
        value: i,
        key: i,
        position: d || "bottomRight",
        clickToHide: !0,
        zIndex: g,
        dropdownClassName: `${n}-select-dropdown`
      }, v(f) ? f : {
        default: () => [f]
      })]);
    }
    function T(e) {
      const {
        showQuickJumper: a,
        disabled: s
      } = t, {
        quickJumpPage: o,
        total: d,
        pageSize: u
      } = c;
      if (!a)
        return null;
      const i = P._getTotalPageNumber(d, u) === 1 || s, h = S({
        [`${n}-quickjump`]: !0,
        [`${n}-quickjump-disabled`]: i
      });
      return l("div", {
        class: h
      }, [l("span", null, [e.jumpTo]), l(ue, {
        value: o,
        className: `${n}-quickjump-input-number`,
        hideButtons: !0,
        disabled: i,
        onBlur: (p) => P.handleQuickJumpBlur(),
        onEnterPress: (p) => P.handleQuickJumpEnterPress(p.target.value),
        onChange: (p) => P.handleQuickJumpNumberChange(p)
      }, null), l("span", null, [e.page])]);
    }
    function Q() {
      const {
        pageList: e,
        currentPage: a,
        restLeftPageList: s,
        restRightPageList: o
      } = c, {
        popoverPosition: d,
        popoverZIndex: u,
        disabled: g
      } = t;
      return e.map((i, h) => {
        const p = S(`${n}-item`, {
          [`${n}-item-active`]: a === i,
          [`${n}-item-all-disabled`]: g,
          [`${n}-item-all-disabled-active`]: a === i && g
          // [`${prefixCls}-item-rest-opening`]: (i < 3 && isLeftRestHover && page ==='...') || (i > 3 && isRightRestHover && page === '...')
        }), m = l("li", {
          key: `${i}${h}`,
          onClick: () => !g && P.goPage(i),
          class: p,
          "aria-label": i === "..." ? "More" : `Page ${i}`,
          "aria-current": a === i ? "page" : !1
        }, [i]);
        if (i === "..." && !g) {
          let f;
          return h < 3 ? f = s : f = o, l(I, {
            rePosKey: t.currentPage,
            trigger: "hover",
            content: D(f),
            key: `${i}${h}`,
            position: d,
            zIndex: u
          }, v(m) ? m : {
            default: () => [m]
          });
        }
        return m;
      });
    }
    function D(e) {
      const {
        direction: a
      } = w.value, s = S(`${n}-rest-item`), o = e.length, d = (i) => {
        const {
          index: h,
          style: p
        } = i, m = e[h];
        return l("div", {
          role: "listitem",
          key: `${m}${h}`,
          class: s,
          onClick: () => P.goPage(m),
          style: p,
          "aria-label": `${m}`
        }, [m]);
      }, u = 32, g = o >= 5 ? u * 5 : u * o;
      return (
        // @ts-ignore skip type check cause react-window not update with @types/react 18
        l(W, {
          className: `${n}-rest-list`,
          itemData: e,
          itemSize: u,
          width: 78,
          itemCount: o,
          height: g,
          style: {
            direction: a
          }
        }, v(d) ? d : {
          default: () => [d]
        })
      );
    }
    function q(e) {
      const a = c.allPageNumbers, s = D(a);
      return l(I, {
        content: s
      }, v(e) ? e : {
        default: () => [e]
      });
    }
    function B(e) {
      const {
        className: a,
        style: s,
        hideOnSinglePage: o,
        hoverShowPageSelect: d,
        showSizeChanger: u,
        disabled: g,
        ...i
      } = t, h = S(`${n}-small`, n, a, {
        [`${n}-disabled`]: g
      }), {
        currentPage: p,
        total: m,
        pageSize: f
      } = c, b = Math.ceil(m / f);
      if (b < 2 && o && !u)
        return null;
      const z = S({
        [`${n}-item`]: !0,
        [`${n}-item-small`]: !0,
        [`${n}-item-all-disabled`]: g
      }), C = l("div", {
        class: z
      }, [p, G("/"), b, " "]);
      return l("div", O({
        class: h,
        style: s
      }, k()), [y(), d && !g ? q(C) : C, L(), T(e)]);
    }
    function M(e) {
      const {
        total: a,
        pageSize: s
      } = c, {
        showTotal: o,
        className: d,
        style: u,
        hideOnSinglePage: g,
        showSizeChanger: i,
        disabled: h,
        ...p
      } = t, m = S(d, `${n}`, {
        [`${n}-disabled`]: h
      }), f = `${n}-total`;
      if (Math.ceil(a / s) < 2 && g && !i)
        return null;
      const z = Math.ceil(a / s), C = e.total.replace("${total}", z.toString());
      return l("ul", O({
        class: m,
        style: u
      }, k()), [o ? l("span", {
        class: f
      }, [C]) : null, y(), Q(), L(), _(e), T(e)]);
    }
    return () => {
      const {
        size: e
      } = t;
      return l(se, {
        componentName: "Pagination"
      }, {
        default: (a) => e === "small" ? B(a) : M(a)
      });
    };
  }
});
export {
  Oe as default,
  Pe as vuePropsType
};
//# sourceMappingURL=index.js.map
