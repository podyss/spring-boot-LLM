import { CSSProperties, Ref, VNode } from 'vue';
import { ArrayElement } from '@douyinfe/semi-foundation/lib/es/utils/type';
import type { Position } from '@douyinfe/semi-foundation/lib/es/tooltip/foundation';
import { strings } from '@douyinfe/semi-foundation/lib/es/tooltip/constants';
import '@douyinfe/semi-foundation/lib/es/tooltip/tooltip.css';
import { BaseProps } from '../_base/baseComponent';
import { Motion } from '../_base/base';
import { CombineProps, VueJsxNode } from '../interface';
export type Trigger = ArrayElement<typeof strings.TRIGGER_SET>;
export { Position };
export interface ArrowBounding {
    offsetX?: number;
    offsetY?: number;
    width?: number;
    height?: number;
}
export interface RenderContentProps<T = HTMLElement> {
    initialFocusRef?: Ref<T>;
}
export type RenderContent<T = HTMLElement> = (props: RenderContentProps<T>) => VNode;
export interface TooltipProps extends BaseProps {
    motion?: Motion;
    autoAdjustOverflow?: boolean;
    position?: Position;
    getPopupContainer?: () => HTMLElement;
    mouseEnterDelay?: number;
    mouseLeaveDelay?: number;
    trigger?: Trigger;
    className?: string;
    clickToHide?: boolean;
    visible?: boolean;
    style?: CSSProperties;
    content?: VueJsxNode | RenderContent;
    prefixCls?: string;
    onVisibleChange?: (visible: boolean) => void;
    onClickOutSide?: (e: MouseEvent) => void;
    spacing?: number | {
        x: number;
        y: number;
    };
    margin?: number | {
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
    };
    showArrow?: boolean | VueJsxNode;
    zIndex?: number;
    rePosKey?: string | number;
    role?: string;
    arrowBounding?: ArrowBounding;
    transformFromCenter?: boolean;
    arrowPointAtCenter?: boolean;
    wrapWhenSpecial?: boolean;
    stopPropagation?: boolean;
    clickTriggerToHide?: boolean;
    wrapperClassName?: string;
    closeOnEsc?: boolean;
    guardFocus?: boolean;
    returnFocusOnClose?: boolean;
    onEscKeyDown?: (e: KeyboardEvent) => void;
    disableArrowKeyDown?: boolean;
    wrapperId?: string;
    preventScroll?: boolean;
    disableFocusListener?: boolean;
    afterClose?: () => void;
    keepDOM?: boolean;
}
export declare const vuePropsType: CombineProps<TooltipProps>;
declare const Tooltip: import("vue").DefineComponent<import("vue").ExtractPropTypes<CombineProps<TooltipProps>>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<CombineProps<TooltipProps>>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Tooltip;
