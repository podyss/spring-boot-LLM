import { defineComponent as Z, useSlots as ee, reactive as te, ref as ne, onMounted as oe, watch as ie, onBeforeUnmount as re, createVNode as h, mergeProps as le, nextTick as x, isVNode as se, cloneVNode as ae } from "vue";
import S from "classnames";
import * as n from "../PropTypes";
import { vuePropsMake as ce } from "../PropTypes";
import { cssClasses as de, strings as A } from '@douyinfe/semi-foundation/lib/es/anchor/constants';
import pe from '@douyinfe/semi-foundation/lib/es/anchor/foundation';
import ue from "./link";
import { default as qe, default as ze } from "./link";
import he from "./anchor-context";
import '@douyinfe/semi-foundation/lib/es/anchor/anchor.css';
import { noop as y, throttle as fe, debounce as ke, isEqual as me } from "lodash";
import ge from '@douyinfe/semi-foundation/lib/es/utils/uuid';
import { useConfigContext as Ce } from "../configProvider/context/Consumer";
import { useBaseComponent as ve } from "../_base/baseComponent";
const a = de.PREFIX, Le = {
  size: n.string,
  railTheme: n.string,
  className: n.string,
  style: n.object,
  scrollMotion: n.bool,
  autoCollapse: n.bool,
  offsetTop: n.number,
  targetOffset: n.number,
  showTooltip: n.bool,
  position: n.string,
  maxWidth: n.oneOfType([n.string, n.number]),
  maxHeight: n.oneOfType([n.string, n.number]),
  getContainer: n.func,
  onChange: n.func,
  onClick: n.func,
  defaultAnchor: n.string,
  "aria-label": n.string
}, Te = {
  size: "default",
  railTheme: "primary",
  className: "",
  scrollMotion: !1,
  autoCollapse: !1,
  offsetTop: 0,
  targetOffset: 0,
  showTooltip: !1,
  maxWidth: A.MAX_WIDTH,
  maxHeight: A.MAX_HEIGHT,
  getContainer: y,
  onChange: y,
  onClick: y,
  defaultAnchor: ""
}, Se = ce(Le, Te), ye = /* @__PURE__ */ Z({
  props: {
    ...Se
  },
  name: "Anchor",
  setup(s, {}) {
    const m = ee(), {
      context: $
    } = Ce(), o = te({
      activeLink: "",
      links: [],
      clickLink: !1,
      scrollHeight: "100%",
      slideBarTop: "0"
    }), {
      adapter: M,
      getDataAttr: w
    } = ve(s, o), g = ne([]);
    function P() {
      return {
        ...M(),
        getProp: (e) => e === "children" ? g.value : s[e],
        addLink: (e) => {
          o.links = [...o.links, e];
        },
        removeLink: (e) => {
          const t = o.links.slice(), i = t.indexOf(e);
          i !== -1 && (t.splice(i, 1), o.links = t);
        },
        setChildMap: (e) => {
          B = e;
        },
        setScrollHeight: (e) => {
          o.scrollHeight = e;
        },
        setSlideBarTop: (e) => {
          o.slideBarTop = `${e}px`;
        },
        setClickLink: (e) => {
          o.clickLink = e;
        },
        setActiveLink: (e, t) => {
          o.activeLink = e, x(() => {
            t();
          });
        },
        setClickLinkWithCallBack: (e, t, i) => {
          o.clickLink = e, x(() => {
            i(t);
          });
        },
        getContainer: () => {
          const {
            getContainer: e
          } = s, t = e();
          return t || window;
        },
        getContainerBoundingTop: () => {
          const e = f.getContainer();
          return "getBoundingClientRect" in e ? e.getBoundingClientRect().top : 0;
        },
        getLinksBoundingTop: () => {
          const {
            links: e
          } = o, {
            offsetTop: t
          } = s, i = f.getContainerBoundingTop();
          return e.map((d) => {
            let r = null;
            try {
              r = document.querySelector(d);
            } catch {
            }
            return r && r.getBoundingClientRect().top - i - t || -1 / 0;
          });
        },
        getAnchorNode: (e) => {
          const t = `#${C} ${e}`;
          return document.querySelector(t);
        },
        getContentNode: (e) => document.querySelector(e),
        notifyChange: (e, t) => s.onChange(e, t),
        notifyClick: (e, t) => s.onClick(e, t),
        canSmoothScroll: () => "scrollBehavior" in document.body.style
      };
    }
    const f = P(), l = new pe(f);
    let C, p, B = {}, v, L;
    const N = (e) => {
      l.addLink(e);
    }, E = (e) => {
      l.removeLink(e);
    }, I = () => {
      l.handleScroll();
    }, W = (e, t) => {
      l.handleClick(e, t);
    }, O = () => {
      l.handleClickLink();
    }, R = () => {
      l.setChildMap();
    }, q = () => {
      l.setScrollHeight();
    }, z = (e, t) => {
      l.updateScrollHeight(e, t);
    }, D = (e, t) => {
      l.updateChildMap(e, t);
    }, X = () => {
      const e = (t, i = 1) => t.map((c) => {
        if (se(c)) {
          const d = {
            direction: $.value.direction,
            level: i,
            children: []
          }, r = c.children;
          return r && r.length > 0 && (d.children = e(r, i + 1)), ae(c, d);
        }
        return null;
      });
      return e(g.value);
    };
    return oe(() => {
      const {
        defaultAnchor: e = ""
      } = s;
      C = ge("semi-anchor").replace(".", ""), p = f.getContainer(), v = fe(I, 100), L = ke(O, 100), p.addEventListener("scroll", v), p.addEventListener("scroll", L), q(), R(), e && l.handleClick(null, e, !1);
    }), ie([() => o.activeLink, () => o.links, () => o.clickLink, () => o.scrollHeight, () => o.slideBarTop], (e, t, i) => {
      if (!me(e, t)) {
        const [c, d, r, u, T] = t, k = {
          activeLink: c,
          links: d,
          clickLink: r,
          scrollHeight: u,
          slideBarTop: T
        };
        z(k, o), D(k, o);
      }
    }), re(() => {
      p.removeEventListener("scroll", v), p.removeEventListener("scroll", L);
    }), () => {
      var H;
      g.value = (H = m.default) == null ? void 0 : H.call(m);
      const {
        size: e,
        railTheme: t,
        style: i,
        className: c,
        maxWidth: d,
        maxHeight: r,
        showTooltip: u,
        position: T,
        autoCollapse: k
      } = s, _ = s["aria-label"], {
        activeLink: b,
        scrollHeight: j,
        slideBarTop: F
      } = o, U = S(a, c, {
        [`${a}-size-${e}`]: e
      }), V = S(`${a}-slide`, `${a}-slide-${t}`), G = S(`${a}-slide-bar`, {
        [`${a}-slide-bar-${e}`]: e,
        [`${a}-slide-bar-${t}`]: t,
        [`${a}-slide-bar-active`]: b
      }), J = `${a}-link-wrapper`, K = {
        ...i,
        maxWidth: d,
        maxHeight: r
      };
      return h(he.Provider, {
        value: {
          activeLink: b,
          showTooltip: u,
          position: T,
          childMap: B,
          autoCollapse: k,
          size: e,
          onClick: (Q, Y) => W(Q, Y),
          addLink: N,
          removeLink: E
        }
      }, {
        default: () => [h("div", le({
          role: "navigation",
          "aria-label": _ || "Side navigation",
          class: U,
          style: K,
          id: C
        }, w()), [h("div", {
          "aria-hidden": !0,
          class: V,
          style: {
            height: j
          }
        }, [h("span", {
          class: G,
          style: {
            top: F
          }
        }, null)]), h("div", {
          class: J,
          role: "list"
        }, [X()])])]
      });
    };
  }
}), Be = ye;
Be.Link = ue;
export {
  qe as AnchorLink,
  ze as Link,
  Be as default,
  Se as vuePropsType
};
//# sourceMappingURL=index.js.map
