import { defineComponent as A, useSlots as R, reactive as K, onMounted as M, watch as S, onBeforeUnmount as U, createVNode as d, mergeProps as z, isVNode as B } from "vue";
import b from "classnames";
import * as l from "../PropTypes";
import { vuePropsMake as F } from "../PropTypes";
import { cssClasses as I } from '@douyinfe/semi-foundation/lib/es/anchor/constants';
import V from '@douyinfe/semi-foundation/lib/es/anchor/linkFoundation';
import { Text as _ } from "../typography/index";
import { useAnchorContext as E } from "./anchor-content/Consumer";
import { useBaseComponent as H } from "../_base/baseComponent";
import { isObject as X } from "lodash";
function q(i) {
  return typeof i == "function" || Object.prototype.toString.call(i) === "[object Object]" && !B(i);
}
const s = I.PREFIX, D = {
  href: l.string,
  title: l.oneOfType([l.string, l.node]),
  className: l.string,
  style: l.object,
  disabled: l.bool,
  level: l.number,
  direction: l.string,
  children: l.node
}, G = {
  href: "#",
  title: "",
  className: ""
}, J = F(D, G), se = /* @__PURE__ */ A({
  props: {
    ...J
  },
  name: "Link",
  setup(i, {}) {
    R();
    const {
      context: a
    } = E(), y = K({}), {
      adapter: g
    } = H(i, y);
    function C() {
      return {
        ...g(),
        addLink: (e) => {
          a.value.addLink(e);
        },
        removeLink: (e) => {
          a.value.removeLink(e);
        }
      };
    }
    const T = C(), u = new V(T);
    function j() {
      u.handleAddLink();
    }
    function $() {
      u.handleRemoveLink();
    }
    function x(e, t) {
      u.handleUpdateLink(e, t);
    }
    function L(e) {
      const {
        disabled: t,
        href: n
      } = i, {
        onClick: o
      } = a.value;
      !t && o(e, n);
    }
    M(() => {
      j();
    }), S(() => i.href, (e, t) => {
      const n = t, {
        href: o
      } = i;
      x(o, n);
    }), U(() => {
      $();
    });
    const P = () => {
      const {
        href: e,
        title: t,
        disabled: n = !1
      } = i, {
        activeLink: o,
        showTooltip: r,
        position: p,
        size: f
      } = a.value, m = o === e, k = b(`${s}-link-tooltip`, {
        [`${s}-link-tooltip-small`]: f === "small",
        [`${s}-link-tooltip-active`]: m,
        [`${s}-link-tooltip-disabled`]: n
      });
      if (r) {
        const c = X(r) ? Object.assign({
          opts: {}
        }, r) : {
          opts: {}
        };
        return p && (c.opts.position = p), d(_, {
          size: f === "default" ? "normal" : "small",
          ellipsis: {
            showTooltip: c
          },
          type: "tertiary",
          className: k
        }, q(t) ? t : {
          default: () => [t]
        });
      } else
        return t;
    }, w = () => {
      const {
        activeLink: e,
        childMap: t
      } = a.value, {
        href: n,
        children: o
      } = i;
      return a.value.autoCollapse ? e === n || t[n] && t[n].has(e) ? d("div", {
        role: "list"
      }, [o]) : null : d("div", {
        role: "list"
      }, [o]);
    };
    return () => {
      const {
        href: e,
        className: t,
        style: n,
        disabled: o = !1,
        title: r,
        level: p,
        direction: f
      } = i, {
        activeLink: m,
        showTooltip: k
      } = a.value, c = m === e, N = b(`${s}-link`, t), O = b(`${s}-link-title`, {
        [`${s}-link-title-active`]: c,
        [`${s}-link-title-disabled`]: o
      }), v = {
        "aria-disabled": o,
        style: {
          [f === "rtl" ? "paddingRight" : "paddingLeft"]: 8 * p + "px"
        }
      };
      return c && (v["aria-details"] = "active"), !k && typeof r == "string" && (v.title = r), d("div", {
        class: N,
        style: n,
        role: "listitem"
      }, [d("div", z({
        role: "link",
        tabindex: 0
      }, v, {
        class: O,
        onClick: (h) => L(h),
        onKeypress: (h) => L(h)
      }), [P()]), w()]);
    };
  }
});
export {
  se as default,
  J as vuePropsType
};
//# sourceMappingURL=link.js.map
