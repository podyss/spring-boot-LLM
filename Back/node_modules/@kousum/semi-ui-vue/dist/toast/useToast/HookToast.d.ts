import { ToastInstance } from '@douyinfe/semi-foundation/lib/es/toast/toastFoundation';
import { PropType } from 'vue';
import { CombineProps } from '../../interface';
interface HookToastProps extends ToastInstance {
    afterClose: (id: string) => void;
    onMyMounted: (data: {
        close: any;
    }) => void;
}
export declare const vuePropsType: CombineProps<HookToastProps>;
declare const HookToast: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    afterClose: {
        type: PropType<(id: string) => void>;
        default?: any;
        required: true;
    };
    onMyMounted: {
        type: PropType<(data: {
            close: any;
        }) => void>;
        default?: any;
        required: true;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    content: {
        type: PropType<any>;
        default?: any;
        required: true;
    };
    type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastType>;
        default?: any;
        required?: false;
    };
    textMaxWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    style: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").Directions> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").Directions>;
        default?: any;
        required?: false;
    };
    close: PropType<(id: string) => void> | {
        type: PropType<(id: string) => void>;
        default?: any;
        required?: false;
    };
    stack: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    top: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    bottom: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    left: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    right: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    theme: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastTheme> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastTheme>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement | null> | {
        type: PropType<() => HTMLElement | null>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    afterClose: {
        type: PropType<(id: string) => void>;
        default?: any;
        required: true;
    };
    onMyMounted: {
        type: PropType<(data: {
            close: any;
        }) => void>;
        default?: any;
        required: true;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motion: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    content: {
        type: PropType<any>;
        default?: any;
        required: true;
    };
    type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastType>;
        default?: any;
        required?: false;
    };
    textMaxWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    style: PropType<Record<string, any>> | {
        type: PropType<Record<string, any>>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    icon: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").Directions> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").Directions>;
        default?: any;
        required?: false;
    };
    close: PropType<(id: string) => void> | {
        type: PropType<(id: string) => void>;
        default?: any;
        required?: false;
    };
    stack: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    top: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    bottom: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    left: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    right: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    theme: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastTheme> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastTheme>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement | null> | {
        type: PropType<() => HTMLElement | null>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default HookToast;
