import { ToastListProps, ToastListState } from '@douyinfe/semi-foundation/lib/es/toast/toastListFoundation';
import '@douyinfe/semi-foundation/lib/es/toast/toast.css';
import useToast from './useToast';
import { ConfigProps, ToastInstance, ToastProps, ToastState } from '@douyinfe/semi-foundation/lib/es/toast/toastFoundation';
import { CSSProperties } from 'vue';
import { VueJsxNode } from '../interface';
export interface ToastReactProps extends ToastProps {
    id?: string;
    style?: CSSProperties;
    icon?: VueJsxNode;
    content: VueJsxNode;
}
export type { ConfigProps, ToastListProps, ToastListState, ToastState };
declare const ToastList: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    content: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
    duration: NumberConstructor;
    onClose: FunctionConstructor;
    icon: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
    direction: StringConstructor;
    stack: BooleanConstructor;
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    content: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
    duration: NumberConstructor;
    onClose: FunctionConstructor;
    icon: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
    direction: StringConstructor;
    stack: BooleanConstructor;
}>> & Readonly<{}>, {
    stack: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export { ToastList };
export type ToastListType = {
    has: (id: string) => boolean;
    add: (opts: ToastInstance) => void;
    update: (id: string, opts: ToastInstance) => void;
    remove: (id: string) => void;
    destroyAll: () => void;
    setStack: (v: boolean) => boolean;
    getStack: () => boolean;
};
export declare function useToastHook(configProps?: ConfigProps): {
    create: (opts: ToastReactProps) => string;
    close: (id: string) => void;
    destroyAll: () => void;
    getWrapperId: () => string;
    info: (opts: Omit<ToastReactProps, "type"> | string) => string;
    warning: (opts: Omit<ToastReactProps, "type"> | string) => string;
    error: (opts: Omit<ToastReactProps, "type"> | string) => string;
    success: (opts: Omit<ToastReactProps, "type"> | string) => string;
    config: (opts: ConfigProps) => void;
    useToast: typeof useToast;
};
export declare class ToastFactory {
    static create(config?: ConfigProps): ReturnType<typeof useToastHook>;
}
declare const _default: {
    create: (opts: ToastReactProps) => string;
    close: (id: string) => void;
    destroyAll: () => void;
    getWrapperId: () => string;
    info: (opts: Omit<ToastReactProps, "type"> | string) => string;
    warning: (opts: Omit<ToastReactProps, "type"> | string) => string;
    error: (opts: Omit<ToastReactProps, "type"> | string) => string;
    success: (opts: Omit<ToastReactProps, "type"> | string) => string;
    config: (opts: ConfigProps) => void;
    useToast: typeof useToast;
};
export default _default;
