import { ToastProps } from '@douyinfe/semi-foundation/lib/es/toast/toastFoundation';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export interface ToastReactProps extends ToastProps {
    style?: CSSProperties;
    icon?: VueJsxNode;
    content: VueJsxNode;
    stack?: boolean;
    stackExpanded?: boolean;
    onAnimationEnd?: (e: AnimationEvent) => void;
    onAnimationStart?: (e: AnimationEvent) => void;
    positionInList?: {
        index: number;
        length: number;
    };
    id?: string;
}
export declare const propTypes: CombineProps<ToastReactProps>;
export declare const vuePropsType: CombineProps<ToastReactProps>;
declare const Toast: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    content: {
        type: PropType<VueJsxNode>;
        default?: any;
        required: true;
    };
    stack: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    stackExpanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAnimationEnd: PropType<(e: AnimationEvent) => void> | {
        type: PropType<(e: AnimationEvent) => void>;
        default?: any;
        required?: false;
    };
    onAnimationStart: PropType<(e: AnimationEvent) => void> | {
        type: PropType<(e: AnimationEvent) => void>;
        default?: any;
        required?: false;
    };
    positionInList: PropType<{
        index: number;
        length: number;
    }> | {
        type: PropType<{
            index: number;
            length: number;
        }>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastType>;
        default?: any;
        required?: false;
    };
    textMaxWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").Directions> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").Directions>;
        default?: any;
        required?: false;
    };
    close: PropType<(id: string) => void> | {
        type: PropType<(id: string) => void>;
        default?: any;
        required?: false;
    };
    top: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    bottom: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    left: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    right: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    theme: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastTheme> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastTheme>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement | null> | {
        type: PropType<() => HTMLElement | null>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    icon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    content: {
        type: PropType<VueJsxNode>;
        default?: any;
        required: true;
    };
    stack: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    stackExpanded: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onAnimationEnd: PropType<(e: AnimationEvent) => void> | {
        type: PropType<(e: AnimationEvent) => void>;
        default?: any;
        required?: false;
    };
    onAnimationStart: PropType<(e: AnimationEvent) => void> | {
        type: PropType<(e: AnimationEvent) => void>;
        default?: any;
        required?: false;
    };
    positionInList: PropType<{
        index: number;
        length: number;
    }> | {
        type: PropType<{
            index: number;
            length: number;
        }>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onClose: PropType<() => void> | {
        type: PropType<() => void>;
        default?: any;
        required?: false;
    };
    type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastType> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastType>;
        default?: any;
        required?: false;
    };
    textMaxWidth: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showClose: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    direction: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").Directions> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").Directions>;
        default?: any;
        required?: false;
    };
    close: PropType<(id: string) => void> | {
        type: PropType<(id: string) => void>;
        default?: any;
        required?: false;
    };
    top: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    bottom: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    left: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    right: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    duration: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    zIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    theme: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastTheme> | {
        type: PropType<import("@douyinfe/semi-foundation/lib/es/toast/toastFoundation").ToastTheme>;
        default?: any;
        required?: false;
    };
    getPopupContainer: PropType<() => HTMLElement | null> | {
        type: PropType<() => HTMLElement | null>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Toast;
