import { defineComponent as A, useSlots as N, ref as E, reactive as _, watch as q, onMounted as U, onUnmounted as X, createVNode as F, mergeProps as G, isVNode as J } from "vue";
import { useHasInProps as Q, useBaseComponent as W } from "../_base/baseComponent";
import Y from "classnames";
import { cssClasses as Z } from '@douyinfe/semi-foundation/lib/es/rating/constants';
import * as o from "../PropTypes";
import { vuePropsMake as ee } from "../PropTypes";
import { noop as i } from '@douyinfe/semi-foundation/lib/es/utils/function';
import te from "./item";
import oe from "../tooltip";
import ae from '@douyinfe/semi-foundation/lib/es/rating/foundation';
import '@douyinfe/semi-foundation/lib/es/rating/rating.css';
function ne(a) {
  return typeof a == "function" || Object.prototype.toString.call(a) === "[object Object]" && !J(a);
}
const le = {
  "aria-describedby": o.string,
  "aria-errormessage": o.string,
  "aria-invalid": [o.bool, o.string],
  "aria-label": o.string,
  "aria-labelledby": o.string,
  "aria-required": o.bool,
  disabled: o.bool,
  value: o.number,
  defaultValue: o.number,
  count: o.number,
  allowHalf: o.bool,
  allowClear: o.bool,
  style: o.object,
  prefixCls: o.string,
  onChange: o.func,
  onHoverChange: o.func,
  className: o.string,
  character: o.node,
  tabIndex: o.number,
  onFocus: o.func,
  onBlur: o.func,
  onKeyDown: o.func,
  autoFocus: o.bool,
  size: o.oneOfType([o.string, o.number]),
  tooltips: Array,
  id: o.string,
  preventScroll: o.bool,
  onClick: o.func
}, re = {
  defaultValue: 0,
  count: 5,
  allowHalf: !1,
  allowClear: !0,
  style: {},
  prefixCls: Z.PREFIX,
  onChange: i,
  onHoverChange: i,
  tabIndex: -1,
  size: "default"
}, se = ee(le, re), he = /* @__PURE__ */ A({
  props: {
    ...se
  },
  name: "Rating",
  setup(a, {}) {
    const {
      getProps: V
    } = Q();
    N();
    const x = E(), b = {}, n = _({
      value: a.value === void 0 ? a.defaultValue : a.value,
      focused: !1,
      hoverValue: void 0,
      clearedValue: null,
      emptyStarFocusVisible: !1
    }), {
      adapter: S,
      getDataAttr: H
    } = W(a, n);
    function B() {
      return {
        ...S(),
        focus: () => {
          const {
            disabled: e,
            count: t
          } = a, {
            value: l
          } = n;
          if (!e) {
            const u = Math.ceil(l) - 1;
            b[u < 0 ? t : u].starFocus();
          }
        },
        getStarDOM: (e) => (b && b[e]).$el,
        notifyHoverChange: (e, t) => {
          const {
            onHoverChange: l
          } = a;
          n.hoverValue = e, n.clearedValue = t, l(e);
        },
        updateValue: (e) => {
          const {
            onChange: t
          } = a;
          "value" in V(a) || (n.value = e), t(e);
        },
        clearValue: (e) => {
          n.clearedValue = e;
        },
        notifyFocus: (e) => {
          const {
            onFocus: t
          } = a;
          n.focused = !0, t && t(e);
        },
        notifyBlur: (e) => {
          const {
            onBlur: t
          } = a;
          n.focused = !1, t && t(e);
        },
        notifyKeyDown: (e) => {
          const {
            onKeyDown: t
          } = a;
          n.focused = !1, t && t(e);
        },
        setEmptyStarFocusVisible: (e) => {
          n.emptyStarFocusVisible = e;
        }
      };
    }
    const L = B(), s = new ae(L);
    function P(e, t) {
      return "value" in e && e.value !== void 0 ? {
        ...t,
        value: e.value
      } : t;
    }
    q(() => a.value, () => {
      const e = P({
        ...V(a)
      }, {
        ...n
      });
      e && Object.keys(e).forEach((t) => {
        n[t] = e[t];
      });
    }), U(() => {
      s.init();
    }), X(() => {
      s.destroy();
    });
    const $ = (e, t) => {
      s.handleHover(e, t);
    }, k = () => {
      s.handleMouseLeave();
    }, D = (e, t) => {
      s.handleClick(e, t);
    }, I = (e) => {
      s.handleFocus(e);
    }, M = (e) => {
      s.handleBlur(e);
    }, j = (e) => {
      const {
        value: t
      } = n;
      s.handleKeyDown(e, t);
    }, K = (e) => (t) => {
      b[e] = t;
    }, R = (e) => {
      s.handleStarFocusVisible(e);
    }, T = (e) => {
      s.handleStarBlur(e);
    }, O = () => {
      if (a["aria-label"])
        return a["aria-label"];
      let e = "star";
      const {
        character: t
      } = a;
      return typeof t == "string" && (e = t), e;
    }, z = (e) => {
      const {
        count: t,
        allowHalf: l,
        prefixCls: u,
        disabled: c,
        character: g,
        size: h,
        tooltips: m
      } = a, {
        value: y,
        hoverValue: d,
        focused: v
      } = n;
      return [...Array(t + 1).keys()].map((r) => {
        const f = F(te, {
          ref: (C) => {
            K(r)(C);
          },
          index: r,
          count: t,
          prefixCls: `${u}-star`,
          allowHalf: l,
          value: d === void 0 ? y : d,
          onClick: c ? i : D,
          onHover: c ? i : $,
          key: r,
          disabled: c,
          character: g,
          focused: v,
          size: r === t ? 0 : h,
          ariaLabelPrefix: e,
          onFocus: c || t !== r ? i : R,
          onBlur: c || t !== r ? i : T
        }, null);
        if (m) {
          const C = m[r] ? m[r] : "", w = d - 1 === r;
          return F(oe, {
            visible: w,
            trigger: "custom",
            content: C,
            key: `${r}-${w}`
          }, ne(f) ? f : {
            default: () => [f]
          });
        }
        return f;
      });
    };
    return () => {
      const {
        style: e,
        prefixCls: t,
        disabled: l,
        className: u,
        id: c,
        count: g,
        tabIndex: h,
        ...m
      } = a, {
        value: y,
        emptyStarFocusVisible: d
      } = n, v = O(), p = `Rating: ${y} of ${g} ${v}${y === 1 ? "" : "s"},`, r = z(v), f = Y(t, {
        [`${t}-disabled`]: l,
        [`${t}-focus`]: d
      }, u);
      return (
        // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
        F("ul", G({
          "aria-label": p,
          "aria-labelledby": a["aria-labelledby"],
          "aria-describedby": a["aria-describedby"],
          class: f,
          style: e,
          onMouseleave: l ? i : k,
          tabindex: l ? -1 : h,
          onFocus: l ? i : I,
          onBlur: l ? i : M,
          onKeydown: l ? i : j,
          ref: x,
          id: c
        }, H()), [r])
      );
    };
  }
});
export {
  he as default,
  se as vuePropsType
};
//# sourceMappingURL=index.js.map
