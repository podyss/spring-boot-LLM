import { strings } from '@douyinfe/semi-foundation/lib/es/rating/constants';
import '@douyinfe/semi-foundation/lib/es/rating/rating.css';
import { BaseProps } from '../_base/baseComponent';
import { PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
import { AriaAttributes } from '../AriaAttributes';
type ArrayElement<ArrayType extends readonly unknown[]> = ArrayType extends readonly (infer ElementType)[] ? ElementType : never;
export interface RatingItemProps extends BaseProps {
    value: number;
    index: number;
    prefixCls: string;
    allowHalf: boolean;
    onHover: (e: MouseEvent, index: number) => void;
    onClick: (e: MouseEvent | KeyboardEvent, index: number) => void;
    character: VueJsxNode;
    focused: boolean;
    disabled: boolean;
    count: number;
    ariaLabelPrefix: string;
    size: number | ArrayElement<typeof strings.SIZE_SET>;
    'aria-describedby'?: AriaAttributes['aria-describedby'];
    onFocus?: (e: FocusEvent) => void;
    onBlur?: (e: FocusEvent) => void;
    preventScroll?: boolean;
}
export interface RatingItemState {
    firstStarFocus: boolean;
    secondStarFocus: boolean;
}
export declare const vuePropsType: CombineProps<RatingItemProps>;
declare const Item: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    value: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    index: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    prefixCls: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    allowHalf: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    onHover: {
        type: PropType<(e: MouseEvent, index: number) => void>;
        default?: any;
        required: true;
    };
    onClick: {
        type: PropType<(e: MouseEvent | KeyboardEvent, index: number) => void>;
        default?: any;
        required: true;
    };
    character: {
        type: PropType<VueJsxNode>;
        default?: any;
        required: true;
    };
    focused: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    disabled: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    count: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    ariaLabelPrefix: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    size: {
        type: PropType<number | "small" | "default">;
        default?: any;
        required: true;
    };
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    index: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    prefixCls: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    allowHalf: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    onHover: {
        type: PropType<(e: MouseEvent, index: number) => void>;
        default?: any;
        required: true;
    };
    onClick: {
        type: PropType<(e: MouseEvent | KeyboardEvent, index: number) => void>;
        default?: any;
        required: true;
    };
    character: {
        type: PropType<VueJsxNode>;
        default?: any;
        required: true;
    };
    focused: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    disabled: {
        type: PropType<boolean>;
        default?: any;
        required: true;
    };
    count: {
        type: PropType<number>;
        default?: any;
        required: true;
    };
    ariaLabelPrefix: {
        type: PropType<string>;
        default?: any;
        required: true;
    };
    size: {
        type: PropType<number | "small" | "default">;
        default?: any;
        required: true;
    };
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Item;
