import '@douyinfe/semi-foundation/lib/es/rating/rating.css';
import { CSSProperties, PropType } from 'vue';
import { CombineProps, VueJsxNode } from '../interface';
export type { RatingItemProps } from './item';
export interface RatingProps {
    'aria-describedby'?: string;
    'aria-errormessage'?: string;
    'aria-invalid'?: boolean;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-required'?: boolean;
    disabled?: boolean;
    value?: number;
    defaultValue?: number;
    count?: number;
    allowHalf?: boolean;
    allowClear?: boolean;
    style?: CSSProperties;
    prefixCls?: string;
    onChange?: (value: number) => void;
    onHoverChange?: (value: number) => void;
    className?: string;
    character?: VueJsxNode;
    tabIndex?: number;
    onFocus?: (e: FocusEvent) => void;
    onBlur?: (e: FocusEvent) => void;
    onKeyDown?: (e: KeyboardEvent) => void;
    onClick?: (e: MouseEvent | KeyboardEvent, index: number) => void;
    autoFocus?: boolean;
    size?: 'small' | 'default' | number;
    tooltips?: string[];
    id?: string;
    preventScroll?: boolean;
}
export interface RatingState {
    value: number;
    hoverValue: number;
    focused: boolean;
    clearedValue: number;
    emptyStarFocusVisible: boolean;
}
export declare const vuePropsType: CombineProps<RatingProps>;
declare const Rating: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    count: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    allowHalf: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    allowClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: number) => void> | {
        type: PropType<(value: number) => void>;
        default?: any;
        required?: false;
    };
    onHoverChange: PropType<(value: number) => void> | {
        type: PropType<(value: number) => void>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    character: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    tabIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent | KeyboardEvent, index: number) => void> | {
        type: PropType<(e: MouseEvent | KeyboardEvent, index: number) => void>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<number | "small" | "default"> | {
        type: PropType<number | "small" | "default">;
        default?: any;
        required?: false;
    };
    tooltips: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    value: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    count: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    allowHalf: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    allowClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    prefixCls: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: number) => void> | {
        type: PropType<(value: number) => void>;
        default?: any;
        required?: false;
    };
    onHoverChange: PropType<(value: number) => void> | {
        type: PropType<(value: number) => void>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    character: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    tabIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(e: MouseEvent | KeyboardEvent, index: number) => void> | {
        type: PropType<(e: MouseEvent | KeyboardEvent, index: number) => void>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    size: PropType<number | "small" | "default"> | {
        type: PropType<number | "small" | "default">;
        default?: any;
        required?: false;
    };
    tooltips: PropType<string[]> | {
        type: PropType<string[]>;
        default?: any;
        required?: false;
    };
    id: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Rating;
