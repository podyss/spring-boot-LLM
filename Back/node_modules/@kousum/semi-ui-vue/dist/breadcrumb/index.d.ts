import { CSSProperties, PropType, VNode } from 'vue';
import '@douyinfe/semi-foundation/lib/es/breadcrumb/breadcrumb.css';
import { BaseProps } from '../_base/baseComponent';
import type { BreadcrumbItemInfo, BreadcrumbItemProps, RouteProps } from './item';
import BreadcrumbItem from './item';
import { TooltipProps } from '../tooltip';
import { AriaAttributes } from '../AriaAttributes';
import { CombineProps, VueJsxNode } from '../interface';
export { RouteProps, BreadcrumbItemProps, BreadcrumbItemInfo };
export interface showToolTipProps {
    width?: string | number;
    ellipsisPos?: 'end' | 'middle';
    opts?: TooltipProps;
}
export type MoreType = 'default' | 'popover';
export interface BreadcrumbProps extends BaseProps {
    routes?: Array<RouteProps>;
    onClick?: (route: RouteProps, event: MouseEvent) => void;
    separator?: VueJsxNode;
    compact?: boolean;
    style?: CSSProperties;
    renderItem?: (route: RouteProps) => VNode;
    className?: string;
    showTooltip?: boolean | showToolTipProps;
    maxItemCount?: number;
    autoCollapse?: boolean;
    renderMore?: (restItem: Array<VNode>) => VNode;
    moreType?: MoreType;
    'aria-label'?: AriaAttributes['aria-label'];
    activeIndex?: number;
}
export declare const vuePropsType: CombineProps<BreadcrumbProps>;
declare const Breadcrumb: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    routes: PropType<RouteProps[]> | {
        type: PropType<RouteProps[]>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(route: RouteProps, event: MouseEvent) => void> | {
        type: PropType<(route: RouteProps, event: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    separator: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    compact: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(route: RouteProps) => VNode> | {
        type: PropType<(route: RouteProps) => VNode>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showTooltip: PropType<boolean | showToolTipProps> | {
        type: PropType<boolean | showToolTipProps>;
        default?: any;
        required?: false;
    };
    maxItemCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    autoCollapse: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderMore: PropType<(restItem: Array<VNode>) => VNode> | {
        type: PropType<(restItem: Array<VNode>) => VNode>;
        default?: any;
        required?: false;
    };
    moreType: PropType<MoreType> | {
        type: PropType<MoreType>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    activeIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    routes: PropType<RouteProps[]> | {
        type: PropType<RouteProps[]>;
        default?: any;
        required?: false;
    };
    onClick: PropType<(route: RouteProps, event: MouseEvent) => void> | {
        type: PropType<(route: RouteProps, event: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    separator: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    compact: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    renderItem: PropType<(route: RouteProps) => VNode> | {
        type: PropType<(route: RouteProps) => VNode>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showTooltip: PropType<boolean | showToolTipProps> | {
        type: PropType<boolean | showToolTipProps>;
        default?: any;
        required?: false;
    };
    maxItemCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    autoCollapse: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    renderMore: PropType<(restItem: Array<VNode>) => VNode> | {
        type: PropType<(restItem: Array<VNode>) => VNode>;
        default?: any;
        required?: false;
    };
    moreType: PropType<MoreType> | {
        type: PropType<MoreType>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    activeIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export type BreadcrumbType = typeof Breadcrumb & {
    Item: typeof BreadcrumbItem;
};
declare const BaseBreadcrumb: BreadcrumbType;
export default BaseBreadcrumb;
export { BreadcrumbItem };
