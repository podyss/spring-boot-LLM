import type { BreadcrumbItemInfo, Route } from '@douyinfe/semi-foundation/lib/es/breadcrumb/itemFoundation';
import { BaseProps } from '../_base/baseComponent';
import { VNode, PropType } from 'vue';
import { CombineProps } from '../interface';
export { BreadcrumbItemInfo };
export interface RouteProps extends Route {
    icon?: VNode;
}
export interface BreadcrumbItemProps extends BaseProps {
    onClick?: (item: RouteProps, e: MouseEvent) => void;
    icon?: VNode;
    href?: string;
    separator?: VNode;
    noLink?: boolean;
    active?: boolean;
    shouldRenderSeparator?: boolean;
    route?: RouteProps;
}
export declare const vuePropsType: CombineProps<BreadcrumbItemProps>;
declare const BreadcrumbItem: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    onClick: PropType<(item: RouteProps, e: MouseEvent) => void> | {
        type: PropType<(item: RouteProps, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    icon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    href: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    separator: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    noLink: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    active: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    shouldRenderSeparator: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    route: PropType<RouteProps> | {
        type: PropType<RouteProps>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    onClick: PropType<(item: RouteProps, e: MouseEvent) => void> | {
        type: PropType<(item: RouteProps, e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    icon: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    href: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    separator: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> | {
        type: PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default?: any;
        required?: false;
    };
    noLink: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    active: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    shouldRenderSeparator: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    route: PropType<RouteProps> | {
        type: PropType<RouteProps>;
        default?: any;
        required?: false;
    };
    style: PropType<import("vue").CSSProperties> | {
        type: PropType<import("vue").CSSProperties>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default BreadcrumbItem;
