import { defineComponent as j, reactive as L, onMounted as V, onUnmounted as z, useSlots as D, createVNode as n, mergeProps as $, cloneVNode as K, Fragment as B } from "vue";
import O from "classnames";
import * as o from "../PropTypes";
import { vuePropsMake as U } from "../PropTypes";
import { cssClasses as X } from '@douyinfe/semi-foundation/lib/es/breadcrumb/constants';
import q from '@douyinfe/semi-foundation/lib/es/breadcrumb/foundation';
import G from '@douyinfe/semi-foundation/lib/es/utils/warning';
import { isFunction as v } from "lodash";
import '@douyinfe/semi-foundation/lib/es/breadcrumb/breadcrumb.css';
import { noop as H } from '@douyinfe/semi-foundation/lib/es/utils/function';
import { useBaseComponent as J } from "../_base/baseComponent";
import Q from "../popover";
import P from "./item";
import { default as ve } from "./item";
import W from "./bread-context";
import { IconMore as w } from "@kousum/semi-icons-vue";
import { getFragmentChildren as Y } from "../_utils";
const d = X.PREFIX, Z = {
  activeIndex: o.number,
  routes: o.array,
  onClick: o.func,
  separator: o.node,
  compact: o.bool,
  style: o.object,
  renderItem: o.func,
  showTooltip: [o.object, o.bool],
  className: o.string,
  autoCollapse: o.bool,
  maxItemCount: o.number,
  /* Customize the contents of the ellipsis area */
  renderMore: o.func,
  /* Type of ellipsis area */
  moreType: String,
  "aria-label": o.string
}, ee = {
  routes: [],
  onClick: H,
  renderItem: void 0,
  separator: "/",
  compact: !0,
  showTooltip: {
    width: 150,
    ellipsisPos: "end"
  },
  autoCollapse: !0,
  moreType: "default",
  maxItemCount: 4,
  "aria-label": "Breadcrumb"
}, te = U(Z, ee), oe = /* @__PURE__ */ j({
  props: {
    ...te
  },
  name: "Breadcrumb",
  setup(r, {}) {
    const g = L({
      isCollapsed: !0
    }), {
      adapter: M,
      getDataAttr: T
    } = J(r, g);
    function x() {
      return {
        ...M(),
        notifyClick: (...e) => {
          r.onClick(...e);
        },
        expandCollapsed: () => g.isCollapsed = !1
      };
    }
    const h = new q(x());
    V(() => {
      h.init();
    }), z(() => {
      h.destroy();
    });
    function R(e) {
      const {
        separator: t
      } = r, a = n(B, null, [e.map((s, l) => n(B, {
        key: `restItem-${l}`
      }, [s, l !== e.length - 1 && n("span", {
        class: `${d}-restItem`
      }, [t])]))]);
      return n(Q, {
        content: a,
        style: {
          padding: 12
        },
        showArrow: !0
      }, {
        default: () => [n(w, null, null)]
      });
    }
    const E = (e, t) => {
      const {
        maxItemCount: a,
        renderMore: s,
        moreType: l
      } = r, p = v(s), i = e.slice(1, t - a + 1), c = n("span", {
        class: `${d}-collapse`,
        key: `more-${t}`
      }, [n("span", {
        class: `${d}-item-wrap`
      }, [n("span", {
        role: "button",
        tabindex: 0,
        "aria-label": "Expand breadcrumb items",
        class: `${d}-item ${d}-item-more`,
        onClick: (u) => h.handleExpand(u),
        onKeypress: (u) => h.handleExpandEnterPress(u)
      }, [p && s(i), !p && l === "default" && n(w, null, null), !p && l === "popover" && R(i)]), n("span", {
        class: `${d}-separator`,
        "x-semi-prop": "separator"
      }, [r.separator])])]);
      return e.splice(1, t - a, c), e;
    }, F = (e, t, a) => {
      const {
        renderItem: s,
        renderMore: l,
        maxItemCount: p
      } = r, i = e.length - p, c = v(l);
      return e.map((m, f) => {
        const b = m._origin.key || `item-${m.name || m.path}-${f}`, y = f > 0 && f <= i;
        return n(P, $(m, {
          key: b,
          active: r.activeIndex !== void 0 ? r.activeIndex === f : f === e.length - 1,
          route: m._origin,
          shouldRenderSeparator: f !== e.length - 1 && !(t && (c || a) && y)
        }), {
          default: () => [s ? s(m._origin) : m.name]
        });
      });
    }, S = D(), A = () => {
      const {
        routes: e,
        autoCollapse: t,
        maxItemCount: a,
        renderMore: s,
        moreType: l
      } = r, {
        isCollapsed: p
      } = g, i = e && e.length > 0, c = i ? h.genRoutes(e) : Y(S) || [];
      let u;
      const m = c.length, f = m - a, b = c && t && m > a && p, y = v(s), k = l === "popover";
      return i ? u = F(c, b, k) : u = c.map((I, C) => {
        const _ = C > 0 && C <= f;
        return I && (G(I.type && I.type.name !== "BreadcrumbItem", "[Semi Breadcrumb]: Only accepts Breadcrumb.Item as its children"), K(I, {
          key: `${C}-item`,
          active: r.activeIndex !== void 0 ? r.activeIndex === C : C === c.length - 1,
          shouldRenderSeparator: C !== c.length - 1 && !(b && (y || k) && _)
        }));
      }), b ? E(u, c.length) : u;
    }, N = (e, t) => {
      h.handleClick(e, t);
    };
    return () => {
      const e = A(), {
        compact: t,
        className: a,
        style: s,
        separator: l,
        showTooltip: p
      } = r, i = O(a, {
        [`${d}-wrapper`]: !0,
        [`${d}-wrapper-compact`]: t,
        [`${d}-wrapper-loose`]: !t
      });
      return n(W.Provider, {
        value: {
          onClick: N,
          showTooltip: p,
          compact: t,
          separator: l
        }
      }, {
        default: () => [n("nav", $({
          "aria-label": r["aria-label"],
          class: i,
          style: s
        }, T()), [e])]
      });
    };
  }
}), re = oe;
re.Item = P;
export {
  ve as BreadcrumbItem,
  re as default,
  te as vuePropsType
};
//# sourceMappingURL=index.js.map
