import { CSSProperties, PropType } from 'vue';
import { ValidateStatus } from '../_base/baseComponent';
import '@douyinfe/semi-foundation/lib/es/input/textarea.css';
import { CombineProps } from '../interface';
export type AutosizeRow = {
    minRows?: number;
    maxRows?: number;
};
export interface TextAreaProps {
    style?: CSSProperties;
    autosize?: boolean | AutosizeRow;
    borderless?: boolean;
    placeholder?: string;
    value?: string;
    rows?: number;
    cols?: number;
    maxCount?: number;
    validateStatus?: ValidateStatus;
    defaultValue?: string;
    disabled?: boolean;
    readonly?: boolean;
    autoFocus?: boolean;
    showCounter?: boolean;
    showClear?: boolean;
    onClear?: (e: Event) => void;
    onChange?: (value: string, e: Event) => void;
    onBlur?: (e: Event) => void;
    onFocus?: (e: Event) => void;
    onInput?: (e: Event) => void;
    onKeyDown?: (e: Event) => void;
    onKeyUp?: (e: Event) => void;
    onKeyPress?: (e: Event) => void;
    onEnterPress?: (e: Event) => void;
    onPressEnter?: (e: Event) => void;
    onPaste?: (e: Event) => void;
    onResize?: (data: {
        height: number;
    }) => void;
    getValueLength?: (value: string) => number;
    forwardRef?: ((instance: HTMLTextAreaElement) => void) | any | null;
    disabledEnterStartNewLine?: boolean;
    minlength?: number;
    maxlength?: number;
    class?: string;
    className?: string;
    'onUpdate:value'?: any;
}
export interface TextAreaState {
    value: string;
    isFocus: boolean;
    isHover: boolean;
    height: number;
    minlength: number;
    maxlength: number;
    cachedValue?: string;
}
export declare const vuePropsType: CombineProps<TextAreaProps>;
declare const TextArea: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    autosize: PropType<boolean | AutosizeRow> | {
        type: PropType<boolean | AutosizeRow>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    value: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rows: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    cols: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<"default" | "error" | "warning" | "success"> | {
        type: PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    readonly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showCounter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string, e: Event) => void> | {
        type: PropType<(value: string, e: Event) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onInput: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onPressEnter: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onPaste: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onResize: PropType<(data: {
        height: number;
    }) => void> | {
        type: PropType<(data: {
            height: number;
        }) => void>;
        default?: any;
        required?: false;
    };
    getValueLength: PropType<(value: string) => number> | {
        type: PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    disabledEnterStartNewLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    minlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'onUpdate:value': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    autosize: PropType<boolean | AutosizeRow> | {
        type: PropType<boolean | AutosizeRow>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    value: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    rows: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    cols: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxCount: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<"default" | "error" | "warning" | "success"> | {
        type: PropType<"default" | "error" | "warning" | "success">;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    readonly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showCounter: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string, e: Event) => void> | {
        type: PropType<(value: string, e: Event) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onInput: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onPressEnter: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onPaste: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onResize: PropType<(data: {
        height: number;
    }) => void> | {
        type: PropType<(data: {
            height: number;
        }) => void>;
        default?: any;
        required?: false;
    };
    getValueLength: PropType<(value: string) => number> | {
        type: PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    disabledEnterStartNewLine: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    minlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'onUpdate:value': PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default TextArea;
