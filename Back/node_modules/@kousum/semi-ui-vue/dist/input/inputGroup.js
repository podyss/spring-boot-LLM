import { defineComponent as x, cloneVNode as z, createVNode as u, mergeProps as G } from "vue";
import b from "classnames";
import { cssClasses as V, strings as j } from '@douyinfe/semi-foundation/lib/es/input/constants';
import A from "../form/label";
import { noop as B } from '@douyinfe/semi-foundation/lib/es/utils/function';
import { isFunction as $, get as P } from "lodash";
import { getFragmentChildren as D } from "../_utils";
import { useHasInProps as E } from "../_base/baseComponent";
const t = V.PREFIX;
j.SIZE;
const L = {
  className: {
    type: String,
    default: ""
  },
  size: {
    type: String,
    default: "default"
  },
  style: [String, Object],
  onBlur: {
    type: Function,
    default: B
  },
  onFocus: {
    type: Function,
    default: B
  },
  label: Object,
  labelPosition: String,
  disabled: Boolean
}, J = /* @__PURE__ */ x({
  props: L,
  name: "InputGroup",
  setup(e, {
    slots: C
  }) {
    const {
      getProps: I
    } = E();
    function N(r) {
      const {
        size: n,
        className: i,
        label: o,
        labelPosition: l,
        ...g
      } = e, p = b({
        [`${t}-group-wrapper`]: !0,
        [`${t}-group-wrapper-with-top-label`]: l === "top",
        [`${t}-group-wrapper-with-left-label`]: l === "left"
      }), F = b(`${t}-group`, i, {
        [`${t}-${n}`]: n !== "default"
      }), s = "input-group";
      return u("div", {
        class: p
      }, [o && o.text ? u(A, G({
        name: s
      }, o), null) : null, u("span", {
        role: "group",
        "aria-disabled": e.disabled,
        id: o && o.name || s,
        class: F,
        style: e.style,
        onFocus: e.onFocus,
        onBlur: e.onBlur
      }, [r])]);
    }
    return () => {
      const {
        size: r,
        style: n,
        className: i,
        label: o,
        onBlur: l,
        onFocus: g,
        disabled: p,
        labelPosition: F,
        ...s
      } = I(e), a = D(C), O = b(`${t}-group`, {
        [`${t}-${r}`]: r !== "default"
      }, i);
      let c;
      return a && (c = (Array.isArray(a) ? a : [a]).map((d, h) => {
        if (d) {
          const {
            onBlur: m,
            onFocus: f,
            disabled: y
          } = d.props, w = $(m) && P(m, "name") !== "noop" ? m : l, S = $(f) && P(f, "name") !== "noop" ? f : g;
          return z(d, {
            key: h,
            ...s,
            size: r,
            onBlur: w,
            onFocus: S,
            disabled: typeof y == "boolean" ? y : p
          });
        }
        return null;
      })), o && o.text ? N(c) : u("span", {
        role: "group",
        "aria-label": "Input group",
        "aria-disabled": e.disabled,
        class: O,
        style: n,
        onFocus: e.onFocus,
        onBlur: e.onBlur
      }, [c]);
    };
  }
});
export {
  L as VuePropsType,
  J as default
};
//# sourceMappingURL=inputGroup.js.map
