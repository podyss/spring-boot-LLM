import { CSSProperties, Ref, PropType } from 'vue';
import '@douyinfe/semi-foundation/lib/es/input/input.css';
import type { InputGroupProps } from './inputGroup';
import type { TextAreaProps } from './textArea';
import { AriaAttributes } from '../AriaAttributes';
import { CombineProps, VueJsxNode } from '../interface';
export type { TextAreaProps, InputGroupProps };
export type InputSize = 'small' | 'large' | 'default';
export type InputMode = 'password';
export type ValidateStatus = 'default' | 'error' | 'warning' | 'success';
export interface InputProps {
    role?: string;
    'aria-label'?: AriaAttributes['aria-label'];
    'aria-describedby'?: AriaAttributes['aria-describedby'];
    'aria-errormessage'?: AriaAttributes['aria-errormessage'];
    'aria-invalid'?: AriaAttributes['aria-invalid'];
    'aria-labelledby'?: AriaAttributes['aria-labelledby'];
    'aria-required'?: AriaAttributes['aria-required'];
    addonBefore?: VueJsxNode;
    addonAfter?: VueJsxNode;
    prefix?: VueJsxNode;
    suffix?: VueJsxNode;
    mode?: InputMode;
    value?: string | number;
    defaultValue?: string | number;
    disabled?: boolean;
    readonly?: boolean;
    autoFocus?: boolean;
    type?: string;
    showClear?: boolean;
    hideSuffix?: boolean;
    placeholder?: string;
    insetLabel?: VueJsxNode;
    insetLabelId?: string;
    size?: InputSize;
    className?: string;
    clearIcon?: VueJsxNode;
    style?: CSSProperties;
    validateStatus?: ValidateStatus;
    onClear?: (e: MouseEvent) => void;
    onChange?: (value: string, e: HashChangeEvent) => void;
    onBlur?: (e: FocusEvent) => void;
    onFocus?: (e: FocusEvent) => void;
    onPaste?: (e: ClipboardEvent) => void;
    onInput?: (e: Event) => void;
    onKeyDown?: (e: KeyboardEvent) => void;
    onKeyUp?: (e: KeyboardEvent) => void;
    onKeyPress?: (e: KeyboardEvent) => void;
    onEnterPress?: (e: KeyboardEvent) => void;
    inputStyle?: CSSProperties;
    getValueLength?: (value: string) => number;
    forwardRef?: (((instance: any) => void) | any | null) | Ref;
    minlength?: number;
    maxlength?: number;
    preventScroll?: boolean /** internal prop, DatePicker use it */;
    showClearIgnoreDisabled?: boolean;
    borderless?: boolean;
    onlyBorder?: number;
    onCompositionstart?: any;
    onCompositionend?: any;
}
export interface InputState {
    value: string | number;
    cachedValue: string | number;
    disabled: boolean;
    props: Record<string, any>;
    paddingLeft: string;
    isFocus: boolean;
    isHovering: boolean;
    eyeClosed: boolean;
    minlength: number;
    maxlength: number;
}
export declare const propTypes: CombineProps<InputProps>;
export declare const VuePropsType: CombineProps<InputProps>;
declare const Input: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    addonBefore: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    addonAfter: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    suffix: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    mode: PropType<"password"> | {
        type: PropType<"password">;
        default?: any;
        required?: false;
    };
    value: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    readonly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hideSuffix: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    size: PropType<InputSize> | {
        type: PropType<InputSize>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<ValidateStatus> | {
        type: PropType<ValidateStatus>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string, e: HashChangeEvent) => void> | {
        type: PropType<(value: string, e: HashChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onPaste: PropType<(e: ClipboardEvent) => void> | {
        type: PropType<(e: ClipboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onInput: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    inputStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    getValueLength: PropType<(value: string) => number> | {
        type: PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    minlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onlyBorder: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onCompositionstart: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onCompositionend: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    role: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-describedby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-errormessage': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-invalid': PropType<boolean | "false" | "true" | "grammar" | "spelling"> | {
        type: PropType<boolean | "false" | "true" | "grammar" | "spelling">;
        default?: any;
        required?: false;
    };
    'aria-labelledby': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    'aria-required': PropType<boolean | "false" | "true"> | {
        type: PropType<boolean | "false" | "true">;
        default?: any;
        required?: false;
    };
    addonBefore: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    addonAfter: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    prefix: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    suffix: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    mode: PropType<"password"> | {
        type: PropType<"password">;
        default?: any;
        required?: false;
    };
    value: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    defaultValue: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    disabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    readonly: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    autoFocus: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    type: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    showClear: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    hideSuffix: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    placeholder: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    insetLabel: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    insetLabelId: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    size: PropType<InputSize> | {
        type: PropType<InputSize>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    clearIcon: PropType<VueJsxNode> | {
        type: PropType<VueJsxNode>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    validateStatus: PropType<ValidateStatus> | {
        type: PropType<ValidateStatus>;
        default?: any;
        required?: false;
    };
    onClear: PropType<(e: MouseEvent) => void> | {
        type: PropType<(e: MouseEvent) => void>;
        default?: any;
        required?: false;
    };
    onChange: PropType<(value: string, e: HashChangeEvent) => void> | {
        type: PropType<(value: string, e: HashChangeEvent) => void>;
        default?: any;
        required?: false;
    };
    onBlur: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onFocus: PropType<(e: FocusEvent) => void> | {
        type: PropType<(e: FocusEvent) => void>;
        default?: any;
        required?: false;
    };
    onPaste: PropType<(e: ClipboardEvent) => void> | {
        type: PropType<(e: ClipboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onInput: PropType<(e: Event) => void> | {
        type: PropType<(e: Event) => void>;
        default?: any;
        required?: false;
    };
    onKeyDown: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyUp: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onKeyPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    onEnterPress: PropType<(e: KeyboardEvent) => void> | {
        type: PropType<(e: KeyboardEvent) => void>;
        default?: any;
        required?: false;
    };
    inputStyle: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    getValueLength: PropType<(value: string) => number> | {
        type: PropType<(value: string) => number>;
        default?: any;
        required?: false;
    };
    forwardRef: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    minlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    maxlength: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    preventScroll: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    showClearIgnoreDisabled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    borderless: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    onlyBorder: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onCompositionstart: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
    onCompositionend: PropType<any> | {
        type: PropType<any>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default Input;
export { Input };
