{"version":3,"file":"textArea.js","sources":["../../src/components/input/textArea.tsx"],"sourcesContent":["import {\n  defineComponent,\n  ref,\n  h,\n  TextareaHTMLAttributes,\n  reactive,\n  watch,\n  CSSProperties,\n  onMounted,\n  onUnmounted,\n  VNode,\n  ComponentObjectPropsOptions,\n  PropType,\n} from 'vue';\nimport * as PropTypes from '../PropTypes';\n\nimport cls from 'classnames';\nimport TextAreaFoundation from '@douyinfe/semi-foundation/input/textareaFoundation';\nimport { cssClasses } from '@douyinfe/semi-foundation/input/constants';\nimport { useBaseComponent, useHasInProps, ValidateStatus } from '../_base/baseComponent';\nimport '@douyinfe/semi-foundation/input/textarea.scss';\nimport { noop, omit, isFunction, isUndefined, isObject, throttle } from 'lodash';\nimport type { DebouncedFunc } from 'lodash';\nimport { IconClear } from '@kousum/semi-icons-vue';\nimport { vuePropsMake } from '../PropTypes';\nimport ResizeObserver from '../resizeObserver';\nimport { CombineProps } from '../interface';\n\nconst prefixCls = cssClasses.PREFIX;\n\ntype OmitTextareaAttr =\n  | 'onChange'\n  | 'onInput'\n  | 'prefix'\n  | 'size'\n  | 'onFocus'\n  | 'onBlur'\n  | 'onKeydown'\n  | 'onKeypress'\n  | 'onKeyUp'\n  | 'onResize';\n\nexport type AutosizeRow = {\n  minRows?: number;\n  maxRows?: number;\n};\n\nexport interface TextAreaProps {\n  style?: CSSProperties;\n  autosize?: boolean | AutosizeRow;\n  borderless?: boolean;\n  placeholder?: string;\n  value?: string;\n  rows?: number;\n  cols?: number;\n  maxCount?: number;\n  validateStatus?: ValidateStatus;\n  defaultValue?: string;\n  disabled?: boolean;\n  readonly?: boolean;\n  autoFocus?: boolean;\n  showCounter?: boolean;\n  showClear?: boolean;\n  onClear?: (e: Event) => void;\n  onChange?: (value: string, e: Event) => void;\n  onBlur?: (e: Event) => void;\n  onFocus?: (e: Event) => void;\n  onInput?: (e: Event) => void;\n  onKeyDown?: (e: Event) => void;\n  onKeyUp?: (e: Event) => void;\n  onKeyPress?: (e: Event) => void;\n  onEnterPress?: (e: Event) => void;\n  onPressEnter?: (e: Event) => void;\n  onPaste?: (e: Event) => void;\n  onResize?: (data: { height: number }) => void;\n  getValueLength?: (value: string) => number;\n  forwardRef?: ((instance: HTMLTextAreaElement) => void) | any | null;\n  /* Inner params for TextArea, Chat use it, 。\n   Used to disable line breaks by pressing the enter key。\n   Press enter + shift at the same time can start new line.\n*/\n  disabledEnterStartNewLine?: boolean\n  minlength?: number;\n  maxlength?: number;\n  class?: string;\n  className?: string;\n  'onUpdate:value'?: any;\n}\n\nexport interface TextAreaState {\n  value: string;\n  isFocus: boolean;\n  isHover: boolean;\n  height: number;\n  minlength: number;\n  maxlength: number;\n  cachedValue?: string;\n}\n\nconst propTypes: CombineProps<TextAreaProps> = {\n  autosize: [PropTypes.bool, PropTypes.object] as PropType<TextAreaProps['autosize']>,\n  borderless: PropTypes.bool,\n  placeholder: PropTypes.string,\n  value: PropTypes.string,\n  rows: PropTypes.number,\n  cols: PropTypes.number,\n  maxCount: PropTypes.number,\n  onEnterPress: PropTypes.func as PropType<TextAreaProps['onEnterPress']>,\n  validateStatus: PropTypes.string as PropType<TextAreaProps['validateStatus']>,\n  className: PropTypes.string as PropType<TextAreaProps['className']>,\n  style: PropTypes.object,\n  showClear: PropTypes.bool,\n  onClear: PropTypes.func as PropType<TextAreaProps['onClear']>,\n  onResize: PropTypes.func as PropType<TextAreaProps['onResize']>,\n  getValueLength: PropTypes.func as PropType<TextAreaProps['getValueLength']>,\n  disabledEnterStartNewLine: PropTypes.bool,\n  // TODO\n  // resize: PropTypes.bool,\n\n  class: { type: String, default: '' },\n  defaultValue: {\n    type: [String, Boolean, Object, Array, undefined] as PropType<TextAreaProps['defaultValue']>,\n    // @ts-ignore\n    default: undefined,\n  },\n  disabled: Boolean,\n  readonly: Boolean,\n  autoFocus: Boolean,\n  showCounter: { type: Boolean, default: false },\n  minlength: Number,\n  maxlength: Number,\n  'onUpdate:value': Function as PropType<TextAreaProps['onUpdate:value']>,\n  onChange: {\n    type: Function as PropType<TextAreaProps['onChange']>,\n    default: noop,\n  },\n  onBlur: {\n    type: Function as PropType<TextAreaProps['onBlur']>,\n    default: noop,\n  },\n  onFocus: {\n    type: Function as PropType<TextAreaProps['onFocus']>,\n    default: noop,\n  },\n  onInput: {\n    type: Function as PropType<TextAreaProps['onInput']>,\n    default: noop,\n  },\n  onKeyDown: {\n    type: Function as PropType<TextAreaProps['onKeyDown']>,\n    default: noop,\n  },\n  onKeyUp: {\n    type: Function as PropType<TextAreaProps['onKeyUp']>,\n    default: noop,\n  },\n  onKeyPress: {\n    type: Function as PropType<TextAreaProps['onKeyPress']>,\n    default: noop,\n  },\n  onPressEnter: {\n    type: Function as PropType<TextAreaProps['onPressEnter']>,\n    default: noop,\n  },\n  onPaste: {\n    type: Function as PropType<TextAreaProps['onPaste']>,\n    default: noop,\n  },\n  forwardRef: {\n    type: [Function, Object],\n    default: noop,\n  },\n};\n\nconst defaultProps = {\n  autosize: false,\n  borderless: false,\n  rows: 4,\n  cols: 20,\n  showCounter: false,\n  showClear: false,\n  onEnterPress: noop,\n  onChange: noop,\n  onBlur: noop,\n  onFocus: noop,\n  onKeyDown: noop,\n  onResize: noop,\n  onClear: noop,\n  // resize: false,\n};\n\nexport const vuePropsType = vuePropsMake(propTypes, defaultProps);\nconst TextArea = defineComponent({\n  props: {...vuePropsType},\n  name: 'TextArea',\n  setup(props, { slots, attrs }) {\n    const { getProps } = useHasInProps();\n    let focusing = false;\n    let libRef = ref(null);\n    const onUpdateValueFunc = props['onUpdate:value'];\n    const initValue = 'value' in getProps(props) ? props.value : props.defaultValue;\n    const state = reactive<TextAreaState>({\n      value: initValue,\n      isFocus: false,\n      maxlength: 0,\n      isHover: false,\n      height: 0,\n      minlength: props.minlength,\n      cachedValue: props.value,\n    });\n    const { adapter: adapterInject } = useBaseComponent<TextAreaProps>(props, state);\n\n    const theAdapter = adapter();\n    watch(\n      () => state.value,\n      () => {\n        if (props.autosize) {\n          foundation.resizeTextarea();\n        }\n      }\n    );\n\n    function adapter() {\n      return {\n        ...adapterInject(),\n        setValue: (value: string) => {\n          if (onUpdateValueFunc) {\n            onUpdateValueFunc(value);\n          }\n          state.value = value;\n        },\n        getRef: () => libRef.value,\n        toggleFocusing: (focusing: boolean) => (state.isFocus = focusing),\n        toggleHovering: (hovering: boolean) => (state.isHover = hovering),\n        notifyChange: (val: string, e: any) => {\n          props.onChange(val, e);\n        },\n        notifyClear: (e: any) => props.onClear(e),\n        notifyBlur: (val: string, e: any) => props.onBlur(e),\n        notifyFocus: (val: string, e: any) => props.onFocus(e),\n        notifyKeyDown: (e: any) => {\n          props.onKeyDown(e);\n        },\n        notifyHeightUpdate: (height: number) => {\n          state.height = height;\n          props.onResize({ height });\n        },\n        notifyPressEnter: (e: any) => {\n          props.onEnterPress && props.onEnterPress(e);\n        },\n        setMinLength: (minlength: number) => (state.minlength = minlength),\n      };\n    }\n\n    // ok\n    function getDerivedStateFromProps(props: TextAreaProps, state: TextAreaState) {\n      const willUpdateStates: Partial<TextAreaState> = {};\n\n      if (props.value !== state.cachedValue) {\n        willUpdateStates.value = props.value;\n        willUpdateStates.cachedValue = props.value;\n      }\n\n      return willUpdateStates;\n    }\n    watch(\n      () => props.value,\n      (val) => {\n        const newState = getDerivedStateFromProps({ ...props }, { ...state });\n        if (newState) {\n          Object.keys(newState).forEach((key) => {\n            state[key] = newState[key];\n          });\n        }\n      },\n      { immediate: true }\n    );\n\n    onMounted(() => {\n      if (throttledResizeTextarea) {\n        throttledResizeTextarea?.cancel?.();\n        throttledResizeTextarea = null;\n      }\n    });\n\n    // onUnmounted(() => {\n    //   foundation.destroy();\n    //   _resizeListener && window.removeEventListener('resize', _resizeListener);\n    // })\n\n    watch(\n      [() => props.value, () => props.autosize, () => props.placeholder],\n      (value, [prevValue, prevAutosize, prevPlaceholder]) => {\n        if ((props.value !== prevValue || props.placeholder !== prevPlaceholder) && props.autosize) {\n          foundation.resizeTextarea();\n        }\n      }\n    );\n\n    const handleClear = (e: Event) => {\n      foundation.handleClear(e);\n    };\n\n    function renderClearBtn() {\n      const { showClear } = props;\n      const displayClearBtn = foundation.isAllowClear();\n      const clearCls = cls(`${prefixCls}-clearbtn`, {\n        [`${prefixCls}-clearbtn-hidden`]: !displayClearBtn,\n      });\n      if (showClear) {\n        return (\n          <div class={clearCls} onClick={handleClear}>\n            <IconClear />\n          </div>\n        );\n      }\n      return null;\n    }\n\n    function renderCounter() {\n      let counter: VNode, current: number, total: number, countCls: string;\n      const { showCounter, maxCount, getValueLength } = props;\n      if (showCounter || maxCount) {\n        const { value } = state;\n        // eslint-disable-next-line no-nested-ternary\n        current = value ? (isFunction(getValueLength) ? getValueLength(value) : value.length) : 0;\n        total = maxCount || null;\n        countCls = cls(`${prefixCls}-textarea-counter`, {\n          [`${prefixCls}-textarea-counter-exceed`]: current > total,\n        });\n        counter = (\n          <div class={countCls}>\n            {current}\n            {total ? '/' : null}\n            {total}\n          </div>\n        );\n      } else {\n        counter = null;\n      }\n      return counter;\n    }\n\n    // TODO later\n    const setRef = (node: any) => {\n      libRef.value = node;\n      const { forwardRef } = props;\n      if (typeof forwardRef === 'function') {\n        forwardRef(node);\n      } else if (forwardRef && typeof forwardRef === 'object') {\n        // TODO\n        forwardRef.value = node;\n      }\n    };\n\n    let foundation: TextAreaFoundation = new TextAreaFoundation(theAdapter);\n    let throttledResizeTextarea: DebouncedFunc<typeof foundation.resizeTextarea> = throttle(\n      foundation.resizeTextarea,\n      10\n    );\n\n    return () => {\n      const {\n        autosize,\n        placeholder,\n        onEnterPress,\n        onResize,\n        // resize,\n        disabled,\n        readonly,\n        class: className,\n        showCounter,\n        validateStatus,\n        maxCount,\n        defaultValue,\n        style,\n        forwardRef,\n        autoFocus,\n        getValueLength,\n        maxlength,\n        minlength,\n        showClear,\n        borderless,\n        ...rest\n      } = props;\n      const { isFocus, value, minlength: stateMinLength } = state;\n      const wrapperCls = cls(className, `${prefixCls}-textarea-wrapper`, {\n        [`${prefixCls}-textarea-borderless`]: borderless,\n        [`${prefixCls}-textarea-wrapper-disabled`]: disabled,\n        [`${prefixCls}-textarea-wrapper-readonly`]: readonly,\n        [`${prefixCls}-textarea-wrapper-${validateStatus}`]: Boolean(validateStatus),\n        [`${prefixCls}-textarea-wrapper-focus`]: isFocus,\n        // [`${prefixCls}-textarea-wrapper-resize`]: !autosize && resize,\n      });\n      // const ref = this.props.forwardRef || this.textAreaRef;\n      const itemCls = cls(`${prefixCls}-textarea`, {\n        [`${prefixCls}-textarea-disabled`]: disabled,\n        [`${prefixCls}-textarea-readonly`]: readonly,\n        [`${prefixCls}-textarea-autosize`]: typeof autosize !== 'boolean'? isUndefined(autosize?.maxRows) : autosize,\n        [`${prefixCls}-textarea-showClear`]: showClear,\n      });\n      const itemProps: TextareaHTMLAttributes = {\n        ...attrs,\n        ...omit(rest, 'insetLabel', 'insetLabelId', 'getValueLength', 'onClear', 'showClear', 'disabledEnterStartNewLine'),\n        class: itemCls,\n        disabled,\n        autofocus: (autoFocus || attrs.autofocus) as boolean,\n        readonly: readonly,\n        placeholder: !placeholder ? null : placeholder,\n        onInput: (e: any) => {\n          // console.log(e)\n          foundation.handleChange(e.target.value, e);\n        },\n        onChange: (e: any) => {\n          // foundation.handleChange(e.target.value, e)\n        },\n        onFocus: (e: Event) => foundation.handleFocus(e),\n        onBlur: (e: any) => foundation.handleBlur(e),\n        onKeydown: (e: any) => {\n          // console.log(e.target, foundation)\n          // foundation.setInitValue()\n          // foundation._adapter.setValue(e.target.value)\n          foundation.handleKeyDown(e);\n        },\n        value: value === null || value === undefined ? '' : value,\n      };\n      if (!isFunction(getValueLength)) {\n        (itemProps as any).maxLength = maxlength;\n      }\n      if (stateMinLength) {\n        (itemProps as any).minLength = stateMinLength;\n      }\n      return (\n        <div\n          class={wrapperCls}\n          style={style}\n          onMouseenter={(e) => foundation.handleMouseEnter(e)}\n          onMouseleave={(e) => foundation.handleMouseLeave(e)}\n        >\n          {autosize ? (\n            <ResizeObserver onResize={throttledResizeTextarea}>\n              <textarea {...itemProps} data-testid={\"test_base_textarea\"} ref={setRef} />\n            </ResizeObserver>\n          ) : (\n            <textarea {...itemProps} data-testid={\"test_base_textarea\"} ref={setRef} />\n          )}\n          {renderClearBtn()}\n          {renderCounter()}\n        </div>\n      );\n    };\n  },\n});\n\nexport default TextArea;\n"],"names":["prefixCls","cssClasses","PREFIX","propTypes","autosize","PropTypes","bool","object","borderless","placeholder","string","value","rows","number","cols","maxCount","onEnterPress","func","validateStatus","className","style","showClear","onClear","onResize","getValueLength","disabledEnterStartNewLine","class","type","String","default","defaultValue","Boolean","Object","Array","undefined","disabled","readonly","autoFocus","showCounter","minlength","Number","maxlength","Function","onChange","noop","onBlur","onFocus","onInput","onKeyDown","onKeyUp","onKeyPress","onPressEnter","onPaste","forwardRef","defaultProps","vuePropsType","vuePropsMake","TextArea","defineComponent","props","name","setup","slots","attrs","getProps","useHasInProps","libRef","ref","onUpdateValueFunc","initValue","state","reactive","isFocus","isHover","height","cachedValue","adapter","adapterInject","useBaseComponent","theAdapter","watch","foundation","resizeTextarea","setValue","getRef","toggleFocusing","focusing","toggleHovering","hovering","notifyChange","val","e","notifyClear","notifyBlur","notifyFocus","notifyKeyDown","notifyHeightUpdate","notifyPressEnter","setMinLength","getDerivedStateFromProps","willUpdateStates","newState","keys","forEach","key","immediate","onMounted","throttledResizeTextarea","cancel","prevValue","prevAutosize","prevPlaceholder","handleClear","renderClearBtn","displayClearBtn","isAllowClear","clearCls","cls","_createVNode","IconClear","renderCounter","counter","current","total","countCls","isFunction","length","setRef","node","TextAreaFoundation","throttle","rest","stateMinLength","wrapperCls","itemCls","isUndefined","maxRows","itemProps","omit","autofocus","handleChange","target","handleFocus","handleBlur","onKeydown","handleKeyDown","maxLength","minLength","handleMouseEnter","handleMouseLeave","ResizeObserver","_mergeProps"],"mappings":"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"}