{"version":3,"file":"index.js","sources":["../../src/components/space/index.tsx"],"sourcesContent":["import { defineComponent, ref, h, Fragment, CSSProperties, ComponentObjectPropsOptions, PropType } from 'vue';\nimport cls from 'classnames';\nimport { strings, cssClasses } from '@douyinfe/semi-foundation/space/constants';\nimport '@douyinfe/semi-foundation/space/space.scss';\nimport { isString, isArray, isNumber } from 'lodash';\nimport { flatten } from './utils';\nimport getDataAttr from '@douyinfe/semi-foundation/utils/getDataAttr';\nimport { CombineProps } from '../interface';\n\nconst prefixCls = cssClasses.PREFIX;\n\nexport type Align = 'start' | 'center' | 'end' | 'baseline';\nexport type Spacing = 'loose' | 'medium' | 'tight' | number;\n\nexport type SpaceProps = {\n  wrap?: boolean;\n  align?: Align;\n  vertical?: boolean;\n  spacing?: Spacing | Spacing[];\n  style?: CSSProperties;\n  className?: string;\n};\n\nexport const vuePropsType: CombineProps<SpaceProps> = {\n  wrap: {\n    type: Boolean,\n    default: false,\n  },\n  align: {\n    type: String as PropType<SpaceProps['align']>,\n    default: 'center',\n  },\n  vertical: {\n    type: Boolean,\n    default: false,\n  },\n  spacing: {\n    type: [Number, Array, String] as PropType<SpaceProps['spacing']>,\n    default: 'tight',\n  },\n  style: [String, Object] as PropType<SpaceProps['style']>,\n  className: String,\n};\nconst Index = defineComponent({\n  props: { ...vuePropsType },\n  name: 'Space',\n  setup(props, { slots }) {\n    return () => {\n      const { style, className, spacing, wrap, align, vertical } = props;\n      const isWrap = wrap && vertical ? false : wrap;\n      const realStyle: CSSProperties = { ...style };\n      let spacingHorizontalType = '';\n      let spacingVerticalType = '';\n      if (isString(spacing)) {\n        spacingHorizontalType = spacing;\n        spacingVerticalType = spacing;\n      } else if (isNumber(spacing)) {\n        realStyle.rowGap = spacing + 'px';\n        realStyle.columnGap = spacing + 'px';\n      } else if (isArray(spacing)) {\n        if (isString(spacing[0])) {\n          spacingHorizontalType = spacing[0];\n        } else if (isNumber(spacing[0])) {\n          realStyle.columnGap = `${spacing[0]}px`;\n        }\n        if (isString(spacing[1])) {\n          spacingVerticalType = spacing[1];\n        } else if (isNumber(spacing[1])) {\n          realStyle.rowGap = `${spacing[1]}px`;\n        }\n      }\n      const classNames = cls(prefixCls, className, {\n        [`${prefixCls}-align-${align}`]: align,\n        [`${prefixCls}-vertical`]: vertical,\n        [`${prefixCls}-horizontal`]: !vertical,\n        [`${prefixCls}-wrap`]: isWrap,\n        [`${prefixCls}-tight-horizontal`]: spacingHorizontalType === strings.SPACING_TIGHT,\n        [`${prefixCls}-tight-vertical`]: spacingVerticalType === strings.SPACING_TIGHT,\n        [`${prefixCls}-medium-horizontal`]: spacingHorizontalType === strings.SPACING_MEDIUM,\n        [`${prefixCls}-medium-vertical`]: spacingVerticalType === strings.SPACING_MEDIUM,\n        [`${prefixCls}-loose-horizontal`]: spacingHorizontalType === strings.SPACING_LOOSE,\n        [`${prefixCls}-loose-vertical`]: spacingVerticalType === strings.SPACING_LOOSE,\n      });\n      const childrenNodes = slots.default ? flatten(slots.default()) : null;\n      const dataAttributes = getDataAttr(props);\n      return (\n        <div {...dataAttributes} class={classNames} style={realStyle} x-semi-prop=\"children\">\n          {childrenNodes}\n        </div>\n      );\n    };\n  },\n});\n\nexport default Index;\n"],"names":["prefixCls","cssClasses","PREFIX","vuePropsType","wrap","type","Boolean","default","align","String","vertical","spacing","Number","Array","style","Object","className","Index","defineComponent","props","name","setup","slots","isWrap","realStyle","spacingHorizontalType","spacingVerticalType","isString","isNumber","rowGap","columnGap","isArray","classNames","cls","strings","SPACING_TIGHT","SPACING_MEDIUM","SPACING_LOOSE","childrenNodes","flatten","dataAttributes","getDataAttr","_createVNode","_mergeProps"],"mappings":";;;;;;;AASA,MAAMA,IAAYC,EAAWC,QAchBC,IAAyC;AAAA,EACpDC,MAAM;AAAA,IACJC,MAAMC;AAAAA,IACNC,SAAS;AAAA,EACV;AAAA,EACDC,OAAO;AAAA,IACLH,MAAMI;AAAAA,IACNF,SAAS;AAAA,EACV;AAAA,EACDG,UAAU;AAAA,IACRL,MAAMC;AAAAA,IACNC,SAAS;AAAA,EACV;AAAA,EACDI,SAAS;AAAA,IACPN,MAAM,CAACO,QAAQC,OAAOJ,MAAM;AAAA,IAC5BF,SAAS;AAAA,EACV;AAAA,EACDO,OAAO,CAACL,QAAQM,MAAM;AAAA,EACtBC,WAAWP;AACb,GACMQ,IAAQC,gBAAAA,EAAgB;AAAA,EAC5BC,OAAO;AAAA,IAAE,GAAGhB;AAAAA,EAAc;AAAA,EAC1BiB,MAAM;AAAA,EACNC,MAAMF,GAAO;AAAA,IAAEG,OAAAA;AAAAA,EAAM,GAAG;AACtB,WAAO,MAAM;AACX,YAAM;AAAA,QAAER,OAAAA;AAAAA,QAAOE,WAAAA;AAAAA,QAAWL,SAAAA;AAAAA,QAASP,MAAAA;AAAAA,QAAMI,OAAAA;AAAAA,QAAOE,UAAAA;AAAAA,MAAU,IAAGS,GACvDI,IAASnB,KAAQM,IAAW,KAAQN,GACpCoB,IAA2B;AAAA,QAAE,GAAGV;AAAAA;AACtC,UAAIW,IAAwB,IACxBC,IAAsB;AAC1B,MAAIC,EAAShB,CAAO,KAClBc,IAAwBd,GACxBe,IAAsBf,KACbiB,EAASjB,CAAO,KACzBa,EAAUK,SAASlB,IAAU,MAC7Ba,EAAUM,YAAYnB,IAAU,QACvBoB,EAAQpB,CAAO,MACpBgB,EAAShB,EAAQ,CAAC,CAAC,IACrBc,IAAwBd,EAAQ,CAAC,IACxBiB,EAASjB,EAAQ,CAAC,CAAC,MAC5Ba,EAAUM,YAAY,GAAGnB,EAAQ,CAAC,CAAC,OAEjCgB,EAAShB,EAAQ,CAAC,CAAC,IACrBe,IAAsBf,EAAQ,CAAC,IACtBiB,EAASjB,EAAQ,CAAC,CAAC,MAC5Ba,EAAUK,SAAS,GAAGlB,EAAQ,CAAC,CAAC;AAGpC,YAAMqB,IAAaC,EAAIjC,GAAWgB,GAAW;AAAA,QAC3C,CAAC,GAAGhB,CAAS,UAAUQ,CAAK,EAAE,GAAGA;AAAAA,QACjC,CAAC,GAAGR,CAAS,WAAW,GAAGU;AAAAA,QAC3B,CAAC,GAAGV,CAAS,aAAa,GAAG,CAACU;AAAAA,QAC9B,CAAC,GAAGV,CAAS,OAAO,GAAGuB;AAAAA,QACvB,CAAC,GAAGvB,CAAS,mBAAmB,GAAGyB,MAA0BS,EAAQC;AAAAA,QACrE,CAAC,GAAGnC,CAAS,iBAAiB,GAAG0B,MAAwBQ,EAAQC;AAAAA,QACjE,CAAC,GAAGnC,CAAS,oBAAoB,GAAGyB,MAA0BS,EAAQE;AAAAA,QACtE,CAAC,GAAGpC,CAAS,kBAAkB,GAAG0B,MAAwBQ,EAAQE;AAAAA,QAClE,CAAC,GAAGpC,CAAS,mBAAmB,GAAGyB,MAA0BS,EAAQG;AAAAA,QACrE,CAAC,GAAGrC,CAAS,iBAAiB,GAAG0B,MAAwBQ,EAAQG;AAAAA,MACnE,CAAC,GACKC,IAAgBhB,EAAMf,UAAUgC,EAAQjB,EAAMf,QAAO,CAAE,IAAI,MAC3DiC,IAAiBC,EAAYtB,CAAK;AACxC,aAAAuB,EAAA,OAAAC,EACWH,GAAc;AAAA,QAAA,OAASR;AAAAA,QAAU,OAASR;AAAAA,QAAS,eAAA;AAAA,MAAA,CAAA,GAAA,CACzDc,CAAa,CAAA;AAAA;EAItB;AACF,CAAC;"}