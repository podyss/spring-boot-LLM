import { CSSProperties, PropType } from 'vue';
import { Item } from '@douyinfe/semi-foundation/lib/es/scrollList/itemFoundation';
import { Motion } from '../_base/base';
import { AriaAttributes } from '../AriaAttributes';
export interface ScrollItemProps<T extends Item> {
    mode?: string;
    cycled?: boolean;
    list?: T[];
    selectedIndex?: number;
    onSelect?: (data: T) => void;
    transform?: (value: any, text: string) => string;
    className?: string;
    motion?: Motion;
    style?: CSSProperties;
    type?: string | number;
    'aria-label'?: AriaAttributes['aria-label'];
    class?: string;
}
export interface ScrollItemState {
    prependCount: number;
    appendCount: number;
}
declare function scrollItemFunc<T extends Item>(): import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    mode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    cycled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    list: PropType<T[]> | {
        type: PropType<T[]>;
        default?: any;
        required?: false;
    };
    selectedIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(data: T) => void> | {
        type: PropType<(data: T) => void>;
        default?: any;
        required?: false;
    };
    transform: PropType<(value: any, text: string) => string> | {
        type: PropType<(value: any, text: string) => string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    mode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    cycled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    list: PropType<T[]> | {
        type: PropType<T[]>;
        default?: any;
        required?: false;
    };
    selectedIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(data: T) => void> | {
        type: PropType<(data: T) => void>;
        default?: any;
        required?: false;
    };
    transform: PropType<(value: any, text: string) => string> | {
        type: PropType<(value: any, text: string) => string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const ScrollItem: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    mode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    cycled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    list: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    selectedIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(data: any) => void> | {
        type: PropType<(data: any) => void>;
        default?: any;
        required?: false;
    };
    transform: PropType<(value: any, text: string) => string> | {
        type: PropType<(value: any, text: string) => string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    mode: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    cycled: PropType<boolean> | {
        type: PropType<boolean>;
        default?: any;
        required?: false;
    };
    list: PropType<any[]> | {
        type: PropType<any[]>;
        default?: any;
        required?: false;
    };
    selectedIndex: PropType<number> | {
        type: PropType<number>;
        default?: any;
        required?: false;
    };
    onSelect: PropType<(data: any) => void> | {
        type: PropType<(data: any) => void>;
        default?: any;
        required?: false;
    };
    transform: PropType<(value: any, text: string) => string> | {
        type: PropType<(value: any, text: string) => string>;
        default?: any;
        required?: false;
    };
    className: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    motion: PropType<Motion> | {
        type: PropType<Motion>;
        default?: any;
        required?: false;
    };
    style: PropType<CSSProperties> | {
        type: PropType<CSSProperties>;
        default?: any;
        required?: false;
    };
    type: PropType<string | number> | {
        type: PropType<string | number>;
        default?: any;
        required?: false;
    };
    'aria-label': PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
    class: PropType<string> | {
        type: PropType<string>;
        default?: any;
        required?: false;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ScrollItem;
export { scrollItemFunc };
