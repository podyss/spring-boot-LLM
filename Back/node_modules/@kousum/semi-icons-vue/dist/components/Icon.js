import { defineComponent as c, onActivated as y, createVNode as f, mergeProps as m, ref as $ } from "vue";
import { BASE_CLASS_PREFIX as b } from "../env";
import x from "classnames";
import '../styles/icons.css';
const p = {
  size: String,
  spin: Boolean,
  rotate: Number,
  prefixCls: String,
  type: String,
  className: String,
  style: Object,
  svg: Object,
  onClick: Function,
  role: String,
  tabIndex: Number,
  onKeypress: Function
}, v = /* @__PURE__ */ c((t, {
  slots: n
}) => () => {
  const {
    svg: a,
    spin: r = !1,
    rotate: i,
    style: u,
    className: g,
    prefixCls: e = b,
    type: l,
    size: o = "default",
    ...d
  } = t, S = x(`${e}-icon`, {
    [`${e}-icon-extra-small`]: o === "extra-small",
    // 8x8
    [`${e}-icon-small`]: o === "small",
    // 12x12
    [`${e}-icon-default`]: o === "default",
    // 16x16
    [`${e}-icon-large`]: o === "large",
    // 20x20
    [`${e}-icon-extra-large`]: o === "extra-large",
    // 24x24
    [`${e}-icon-spinning`]: r,
    [`${e}-icon-${l}`]: !!l
  }, g), s = {};
  return Number.isSafeInteger(i) && (s.transform = `rotate(${i}deg)`), Object.assign(s, u), f("span", m({
    role: "img",
    class: S,
    style: s
  }, d), [n.default ? n.default() : a]);
}, {
  props: p,
  name: "Icon"
}), O = /* @__PURE__ */ c((t, {
  slots: n
}) => (y(() => {
}), () => {
  const a = {};
  return Object.keys(t).forEach((r) => {
    t[r] && (a[r] = t[r]);
  }), f(v, m({
    type: t.iconType,
    ref: $
  }, a), {
    default: () => n.default ? n.default() : null
  });
}), {
  props: {
    ...p,
    svg: Object,
    iconType: String
  },
  name: "ConvertIcon"
});
export {
  O as ConvertIcon,
  v as default,
  p as vuePropsType
};
//# sourceMappingURL=Icon.js.map
